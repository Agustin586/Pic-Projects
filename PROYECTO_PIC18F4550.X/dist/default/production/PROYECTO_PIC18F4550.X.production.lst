

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Sat Oct 03 15:57:24 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og9 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,lowdata,noexec
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1,group=2
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=2
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=3
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1,group=2
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1,group=2
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1,group=3
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1,group=3
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1,group=3
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=3
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=3
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=3
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1,group=2
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1,group=2
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1,group=3
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1,group=3
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1,group=3
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1,group=2
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1,group=2
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	text86,global,reloc=2,class=CODE,delta=1
   103                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
   104                           	psect	text88,global,reloc=2,class=CODE,delta=1
   105                           	psect	text89,global,reloc=2,class=CODE,delta=1
   106                           	psect	text90,global,reloc=2,class=CODE,delta=1
   107                           	psect	text91,global,reloc=2,class=CODE,delta=1
   108                           	psect	text92,global,reloc=2,class=CODE,delta=1
   109                           	psect	text93,global,reloc=2,class=CODE,delta=1
   110                           	psect	text94,global,reloc=2,class=CODE,delta=1
   111                           	psect	text95,global,reloc=2,class=CODE,delta=1
   112                           	psect	text96,global,reloc=2,class=CODE,delta=1
   113                           	psect	text97,global,reloc=2,class=CODE,delta=1
   114                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   115                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
   116                           	psect	text99,global,reloc=2,class=CODE,delta=1
   117                           	psect	text100,global,reloc=2,class=CODE,delta=1
   118                           	psect	text101,global,reloc=2,class=CODE,delta=1
   119                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   120                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   121                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   122                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
   123                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
   124  0000                     
   125                           ; Version 2.20
   126                           ; Generated 09/04/2020 GMT
   127                           ; 
   128                           ; Copyright © 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
   129                           ; All rights reserved.
   130                           ; 
   131                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   132                           ; 
   133                           ; Redistribution and use in source and binary forms, with or without modification, are
   134                           ; permitted provided that the following conditions are met:
   135                           ; 
   136                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   137                           ;        conditions and the following disclaimer.
   138                           ; 
   139                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   140                           ;        of conditions and the following disclaimer in the documentation and/or other
   141                           ;        materials provided with the distribution.
   142                           ; 
   143                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   144                           ;        software without specific prior written permission.
   145                           ; 
   146                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   147                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   148                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   149                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   150                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   151                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   152                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   153                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   154                           ; 
   155                           ; 
   156                           ; Code-generator required, PIC18F4550 Definitions
   157                           ; 
   158                           ; SFR Addresses
   159  0000                     
   160                           	psect	idataBANK1
   161  005424                     __pidataBANK1:
   162                           	callstack 0
   163                           
   164                           ;initializer for _Timer_RX
   165  005424  0014               	dw	20
   166                           
   167                           ;initializer for _Timer_Hash
   168  005426  02BC               	dw	700
   169                           
   170                           ;initializer for _Timer_Puerta2
   171  005428  02BC               	dw	700
   172                           
   173                           ;initializer for _Timer_Puerta1
   174  00542A  02BC               	dw	700
   175                           
   176                           ;initializer for _Timer_DelayMuestra
   177  00542C  0032               	dw	50
   178                           
   179                           ;initializer for _Timer_DelayLcd
   180  00542E  012C               	dw	300
   181                           
   182                           ;initializer for _Timer_Rtc
   183  005430  0064               	dw	100
   184                           
   185                           ;initializer for _Timer_Tec
   186  005432  07                 	db	7
   187                           
   188                           ;initializer for _Timer_Task2
   189  005433  07                 	db	7
   190                           
   191                           ;initializer for _Timer_Task1
   192  005434  02                 	db	2
   193                           
   194                           ;initializer for _pos_rtc
   195  005435  01                 	db	1
   196                           
   197                           	psect	mediumconst
   198  007C12                     __pmediumconst:
   199                           	callstack 0
   200  007C12  00                 	db	0
   201  007C13                     ACN_CR_Com@F3823:
   202                           	callstack 0
   203  007C13  44                 	db	68
   204  007C14  69                 	db	105
   205  007C15  73                 	db	115
   206  007C16  70                 	db	112
   207  007C17  20                 	db	32
   208  007C18  71                 	db	113
   209  007C19  75                 	db	117
   210  007C1A  65                 	db	101
   211  007C1B  20                 	db	32
   212  007C1C  63                 	db	99
   213  007C1D  6F                 	db	111
   214  007C1E  6E                 	db	110
   215  007C1F  74                 	db	116
   216  007C20  72                 	db	114
   217  007C21  6F                 	db	111
   218  007C22  6C                 	db	108
   219  007C23  61                 	db	97
   220  007C24  20                 	db	32
   221  007C25  75                 	db	117
   222  007C26  6E                 	db	110
   223  007C27  61                 	db	97
   224  007C28  20                 	db	32
   225  007C29  70                 	db	112
   226  007C2A  75                 	db	117
   227  007C2B  65                 	db	101
   228  007C2C  72                 	db	114
   229  007C2D  74                 	db	116
   230  007C2E  61                 	db	97
   231  007C2F  2C                 	db	44
   232  007C30  6D                 	db	109
   233  007C31  65                 	db	101
   234  007C32  64                 	db	100
   235  007C33  69                 	db	105
   236  007C34  61                 	db	97
   237  007C35  6E                 	db	110
   238  007C36  74                 	db	116
   239  007C37  65                 	db	101
   240  007C38  20                 	db	32
   241  007C39  75                 	db	117
   242  007C3A  6E                 	db	110
   243  007C3B  20                 	db	32
   244  007C3C  6C                 	db	108
   245  007C3D  65                 	db	101
   246  007C3E  63                 	db	99
   247  007C3F  74                 	db	116
   248  007C40  6F                 	db	111
   249  007C41  72                 	db	114
   250  007C42  20                 	db	32
   251  007C43  52                 	db	82
   252  007C44  66                 	db	102
   253  007C45  69                 	db	105
   254  007C46  64                 	db	100
   255  007C47  00                 	db	0
   256  007C48                     __end_ofACN_CR_Com@F3823:
   257                           	callstack 0
   258  007C48                     ACN_CR_Com@F3821:
   259                           	callstack 0
   260  007C48  44                 	db	68
   261  007C49  69                 	db	105
   262  007C4A  73                 	db	115
   263  007C4B  70                 	db	112
   264  007C4C  5F                 	db	95
   265  007C4D  4C                 	db	76
   266  007C4E  5A                 	db	90
   267  007C4F  00                 	db	0
   268  007C50                     __end_ofACN_CR_Com@F3821:
   269                           	callstack 0
   270  007C50  61                 	db	97
   271  007C51  63                 	db	99
   272  007C52  74                 	db	116
   273  007C53  2E                 	db	46
   274  007C54  00                 	db	0
   275  007C55                     __end_ofBluetooth_Com@F3811:
   276                           	callstack 0
   277  007C55  68                 	db	104
   278  007C56  70                 	db	112
   279  007C57  32                 	db	50
   280  007C58  2E                 	db	46
   281  007C59  00                 	db	0
   282  007C5A                     __end_ofBluetooth_Com@F3809:
   283                           	callstack 0
   284  007C5A  68                 	db	104
   285  007C5B  70                 	db	112
   286  007C5C  31                 	db	49
   287  007C5D  2E                 	db	46
   288  007C5E  00                 	db	0
   289  007C5F                     __end_ofBluetooth_Com@F3807:
   290                           	callstack 0
   291  0000                     _TMR0	set	4054
   292  0000                     _PORTD	set	3971
   293  0000                     _TRISEbits	set	3990
   294  0000                     _CMCON	set	4020
   295  0000                     _ADCON1bits	set	4033
   296  0000                     _TRISDbits	set	3989
   297  0000                     _LATE	set	3981
   298  0000                     _LATD	set	3980
   299  0000                     _LATC	set	3979
   300  0000                     _TRISE	set	3990
   301  0000                     _TRISD	set	3989
   302  0000                     _TRISC	set	3988
   303  0000                     _TRISA	set	3986
   304  0000                     _INTCON	set	4082
   305  0000                     _PORTDbits	set	3971
   306  0000                     _TRISAbits	set	3986
   307  0000                     _TRISBbits	set	3987
   308  0000                     _LATAbits	set	3977
   309  0000                     _LATEbits	set	3981
   310  0000                     _PORTAbits	set	3968
   311  0000                     _PORTBbits	set	3969
   312  0000                     _INTCON2bits	set	4081
   313  0000                     _RCONbits	set	4048
   314  0000                     _T0CONbits	set	4053
   315  0000                     _RCREG	set	4014
   316  0000                     _PIR1bits	set	3998
   317  0000                     _TXREG	set	4013
   318  0000                     _IPR1bits	set	3999
   319  0000                     _PIE1bits	set	3997
   320  0000                     _INTCONbits	set	4082
   321  0000                     _RCSTAbits	set	4011
   322  0000                     _SPBRG	set	4015
   323  0000                     _TXSTAbits	set	4012
   324  0000                     _PORTCbits	set	3970
   325  0000                     _TRISCbits	set	3988
   326  0000                     _LATB3	set	31827
   327  0000                     _TRISB3	set	31899
   328  0000                     _TRISB0	set	31896
   329  0000                     _GIEH	set	32663
   330  0000                     _GIEL	set	32662
   331  0000                     _RA5	set	31749
   332  0000                     _LATA4	set	31820
   333  0000                     _LATB0	set	31824
   334  0000                     _LATB2	set	31826
   335  0000                     _TRISA5	set	31893
   336  0000                     _TRISB2	set	31898
   337  0000                     _TRISA4	set	31892
   338  007C5F                     STR_131:
   339                           
   340                           ; BSR set to: 1
   341  007C5F  20                 	db	32
   342  007C60  2D                 	db	45
   343  007C61  2D                 	db	45
   344  007C62  2D                 	db	45
   345  007C63  2D                 	db	45
   346  007C64  2D                 	db	45
   347  007C65  2D                 	db	45
   348  007C66  2D                 	db	45
   349  007C67  2D                 	db	45
   350  007C68  2D                 	db	45
   351  007C69  2D                 	db	45
   352  007C6A  2D                 	db	45
   353  007C6B  2D                 	db	45
   354  007C6C  2D                 	db	45
   355  007C6D  2D                 	db	45
   356  007C6E  2D                 	db	45
   357  007C6F  2D                 	db	45
   358  007C70  2D                 	db	45
   359  007C71  2D                 	db	45
   360  007C72  20                 	db	32
   361  007C73  00                 	db	0
   362  007C74                     STR_136:
   363                           
   364                           ; BSR set to: 1
   365  007C74  7C                 	db	124
   366  007C75  20                 	db	32
   367  007C76  20                 	db	32
   368  007C77  20                 	db	32
   369  007C78  20                 	db	32
   370  007C79  4D                 	db	77	;'M'
   371  007C7A  49                 	db	73	;'I'
   372  007C7B  43                 	db	67	;'C'
   373  007C7C  52                 	db	82	;'R'
   374  007C7D  4F                 	db	79	;'O'
   375  007C7E  43                 	db	67	;'C'
   376  007C7F  48                 	db	72	;'H'
   377  007C80  49                 	db	73	;'I'
   378  007C81  50                 	db	80	;'P'
   379  007C82  20                 	db	32
   380  007C83  20                 	db	32
   381  007C84  20                 	db	32
   382  007C85  20                 	db	32
   383  007C86  20                 	db	32
   384  007C87  7C                 	db	124
   385  007C88  00                 	db	0
   386  007C89                     STR_132:
   387                           
   388                           ; BSR set to: 1
   389  007C89  7C                 	db	124
   390  007C8A  20                 	db	32
   391  007C8B  20                 	db	32
   392  007C8C  20                 	db	32
   393  007C8D  20                 	db	32
   394  007C8E  50                 	db	80	;'P'
   395  007C8F  49                 	db	73	;'I'
   396  007C90  43                 	db	67	;'C'
   397  007C91  31                 	db	49	;'1'
   398  007C92  38                 	db	56	;'8'
   399  007C93  46                 	db	70	;'F'
   400  007C94  34                 	db	52	;'4'
   401  007C95  35                 	db	53	;'5'
   402  007C96  35                 	db	53	;'5'
   403  007C97  30                 	db	48	;'0'
   404  007C98  20                 	db	32
   405  007C99  20                 	db	32
   406  007C9A  20                 	db	32
   407  007C9B  20                 	db	32
   408  007C9C  7C                 	db	124
   409  007C9D  00                 	db	0
   410  007C9E                     STR_133:
   411                           
   412                           ; BSR set to: 1
   413  007C9E  7C                 	db	124
   414  007C9F  20                 	db	32
   415  007CA0  4D                 	db	77	;'M'
   416  007CA1  50                 	db	80	;'P'
   417  007CA2  4C                 	db	76	;'L'
   418  007CA3  41                 	db	65	;'A'
   419  007CA4  42                 	db	66	;'B'
   420  007CA5  20                 	db	32
   421  007CA6  58                 	db	88	;'X'
   422  007CA7  20                 	db	32
   423  007CA8  49                 	db	73	;'I'
   424  007CA9  44                 	db	68	;'D'
   425  007CAA  45                 	db	69	;'E'
   426  007CAB  20                 	db	32
   427  007CAC  58                 	db	88	;'X'
   428  007CAD  43                 	db	67	;'C'
   429  007CAE  38                 	db	56	;'8'
   430  007CAF  20                 	db	32
   431  007CB0  20                 	db	32
   432  007CB1  7C                 	db	124
   433  007CB2  00                 	db	0
   434  007CB3                     STR_110:
   435                           
   436                           ; BSR set to: 1
   437  007CB3  20                 	db	32
   438  007CB4  20                 	db	32
   439  007CB5  20                 	db	32
   440  007CB6  20                 	db	32
   441  007CB7  20                 	db	32
   442  007CB8  76                 	db	118	;'v'
   443  007CB9  61                 	db	97	;'a'
   444  007CBA  6C                 	db	108	;'l'
   445  007CBB  6F                 	db	111	;'o'
   446  007CBC  72                 	db	114	;'r'
   447  007CBD  65                 	db	101	;'e'
   448  007CBE  73                 	db	115	;'s'
   449  007CBF  20                 	db	32
   450  007CC0  2E                 	db	46
   451  007CC1  2E                 	db	46
   452  007CC2  2E                 	db	46
   453  007CC3  20                 	db	32
   454  007CC4  20                 	db	32
   455  007CC5  20                 	db	32
   456  007CC6  20                 	db	32
   457  007CC7  00                 	db	0
   458  007CC8                     STR_109:
   459                           
   460                           ; BSR set to: 1
   461  007CC8  20                 	db	32
   462  007CC9  20                 	db	32
   463  007CCA  20                 	db	32
   464  007CCB  20                 	db	32
   465  007CCC  20                 	db	32
   466  007CCD  4D                 	db	77	;'M'
   467  007CCE  6F                 	db	111	;'o'
   468  007CCF  64                 	db	100	;'d'
   469  007CD0  69                 	db	105	;'i'
   470  007CD1  66                 	db	102	;'f'
   471  007CD2  69                 	db	105	;'i'
   472  007CD3  63                 	db	99	;'c'
   473  007CD4  61                 	db	97	;'a'
   474  007CD5  6E                 	db	110	;'n'
   475  007CD6  64                 	db	100	;'d'
   476  007CD7  6F                 	db	111	;'o'
   477  007CD8  20                 	db	32
   478  007CD9  20                 	db	32
   479  007CDA  20                 	db	32
   480  007CDB  20                 	db	32
   481  007CDC  00                 	db	0
   482  007CDD                     STR_88:
   483                           
   484                           ; BSR set to: 1
   485  007CDD  20                 	db	32
   486  007CDE  20                 	db	32
   487  007CDF  20                 	db	32
   488  007CE0  20                 	db	32
   489  007CE1  20                 	db	32
   490  007CE2  20                 	db	32
   491  007CE3  20                 	db	32
   492  007CE4  20                 	db	32
   493  007CE5  31                 	db	49	;'1'
   494  007CE6  2E                 	db	46
   495  007CE7  2E                 	db	46
   496  007CE8  2E                 	db	46
   497  007CE9  20                 	db	32
   498  007CEA  20                 	db	32
   499  007CEB  20                 	db	32
   500  007CEC  20                 	db	32
   501  007CED  20                 	db	32
   502  007CEE  20                 	db	32
   503  007CEF  20                 	db	32
   504  007CF0  20                 	db	32
   505  007CF1  00                 	db	0
   506  007CF2                     STR_87:
   507                           
   508                           ; BSR set to: 1
   509  007CF2  20                 	db	32
   510  007CF3  20                 	db	32
   511  007CF4  20                 	db	32
   512  007CF5  20                 	db	32
   513  007CF6  20                 	db	32
   514  007CF7  20                 	db	32
   515  007CF8  20                 	db	32
   516  007CF9  20                 	db	32
   517  007CFA  32                 	db	50	;'2'
   518  007CFB  2E                 	db	46
   519  007CFC  2E                 	db	46
   520  007CFD  2E                 	db	46
   521  007CFE  20                 	db	32
   522  007CFF  20                 	db	32
   523  007D00  20                 	db	32
   524  007D01  20                 	db	32
   525  007D02  20                 	db	32
   526  007D03  20                 	db	32
   527  007D04  20                 	db	32
   528  007D05  20                 	db	32
   529  007D06  00                 	db	0
   530  007D07                     STR_86:
   531                           
   532                           ; BSR set to: 1
   533  007D07  20                 	db	32
   534  007D08  20                 	db	32
   535  007D09  20                 	db	32
   536  007D0A  20                 	db	32
   537  007D0B  20                 	db	32
   538  007D0C  20                 	db	32
   539  007D0D  20                 	db	32
   540  007D0E  20                 	db	32
   541  007D0F  33                 	db	51	;'3'
   542  007D10  2E                 	db	46
   543  007D11  2E                 	db	46
   544  007D12  2E                 	db	46
   545  007D13  20                 	db	32
   546  007D14  20                 	db	32
   547  007D15  20                 	db	32
   548  007D16  20                 	db	32
   549  007D17  20                 	db	32
   550  007D18  20                 	db	32
   551  007D19  20                 	db	32
   552  007D1A  20                 	db	32
   553  007D1B  00                 	db	0
   554  007D1C                     STR_55:
   555                           
   556                           ; BSR set to: 1
   557  007D1C  20                 	db	32
   558  007D1D  20                 	db	32
   559  007D1E  43                 	db	67	;'C'
   560  007D1F  4F                 	db	79	;'O'
   561  007D20  4E                 	db	78	;'N'
   562  007D21  46                 	db	70	;'F'
   563  007D22  49                 	db	73	;'I'
   564  007D23  47                 	db	71	;'G'
   565  007D24  2E                 	db	46
   566  007D25  20                 	db	32
   567  007D26  54                 	db	84	;'T'
   568  007D27  41                 	db	65	;'A'
   569  007D28  52                 	db	82	;'R'
   570  007D29  4A                 	db	74	;'J'
   571  007D2A  45                 	db	69	;'E'
   572  007D2B  54                 	db	84	;'T'
   573  007D2C  41                 	db	65	;'A'
   574  007D2D  20                 	db	32
   575  007D2E  20                 	db	32
   576  007D2F  20                 	db	32
   577  007D30  00                 	db	0
   578  007D31                     STR_89:
   579                           
   580                           ; BSR set to: 1
   581  007D31  20                 	db	32
   582  007D32  20                 	db	32
   583  007D33  41                 	db	65	;'A'
   584  007D34  55                 	db	85	;'U'
   585  007D35  54                 	db	84	;'T'
   586  007D36  4F                 	db	79	;'O'
   587  007D37  44                 	db	68	;'D'
   588  007D38  45                 	db	69	;'E'
   589  007D39  53                 	db	83	;'S'
   590  007D3A  54                 	db	84	;'T'
   591  007D3B  52                 	db	82	;'R'
   592  007D3C  55                 	db	85	;'U'
   593  007D3D  43                 	db	67	;'C'
   594  007D3E  43                 	db	67	;'C'
   595  007D3F  49                 	db	73	;'I'
   596  007D40  4F                 	db	79	;'O'
   597  007D41  4E                 	db	78	;'N'
   598  007D42  20                 	db	32
   599  007D43  20                 	db	32
   600  007D44  20                 	db	32
   601  007D45  00                 	db	0
   602  007D46                     STR_78:
   603                           
   604                           ; BSR set to: 1
   605  007D46  20                 	db	32
   606  007D47  20                 	db	32
   607  007D48  55                 	db	85	;'U'
   608  007D49  53                 	db	83	;'S'
   609  007D4A  55                 	db	85	;'U'
   610  007D4B  41                 	db	65	;'A'
   611  007D4C  52                 	db	82	;'R'
   612  007D4D  49                 	db	73	;'I'
   613  007D4E  4F                 	db	79	;'O'
   614  007D4F  20                 	db	32
   615  007D50  41                 	db	65	;'A'
   616  007D51  47                 	db	71	;'G'
   617  007D52  52                 	db	82	;'R'
   618  007D53  45                 	db	69	;'E'
   619  007D54  47                 	db	71	;'G'
   620  007D55  41                 	db	65	;'A'
   621  007D56  44                 	db	68	;'D'
   622  007D57  4F                 	db	79	;'O'
   623  007D58  20                 	db	32
   624  007D59  20                 	db	32
   625  007D5A  00                 	db	0
   626  007D5B                     STR_79:
   627                           
   628                           ; BSR set to: 1
   629  007D5B  20                 	db	32
   630  007D5C  20                 	db	32
   631  007D5D  55                 	db	85	;'U'
   632  007D5E  53                 	db	83	;'S'
   633  007D5F  55                 	db	85	;'U'
   634  007D60  41                 	db	65	;'A'
   635  007D61  52                 	db	82	;'R'
   636  007D62  49                 	db	73	;'I'
   637  007D63  4F                 	db	79	;'O'
   638  007D64  20                 	db	32
   639  007D65  45                 	db	69	;'E'
   640  007D66  58                 	db	88	;'X'
   641  007D67  49                 	db	73	;'I'
   642  007D68  53                 	db	83	;'S'
   643  007D69  54                 	db	84	;'T'
   644  007D6A  45                 	db	69	;'E'
   645  007D6B  4E                 	db	78	;'N'
   646  007D6C  54                 	db	84	;'T'
   647  007D6D  45                 	db	69	;'E'
   648  007D6E  20                 	db	32
   649  007D6F  00                 	db	0
   650  007D70                     STR_83:
   651                           
   652                           ; BSR set to: 1
   653  007D70  20                 	db	32
   654  007D71  45                 	db	69	;'E'
   655  007D72  41                 	db	65	;'A'
   656  007D73  53                 	db	83	;'S'
   657  007D74  54                 	db	84	;'T'
   658  007D75  45                 	db	69	;'E'
   659  007D76  52                 	db	82	;'R'
   660  007D77  20                 	db	32
   661  007D78  45                 	db	69	;'E'
   662  007D79  47                 	db	71	;'G'
   663  007D7A  47                 	db	71	;'G'
   664  007D7B  20                 	db	32
   665  007D7C  46                 	db	70	;'F'
   666  007D7D  55                 	db	85	;'U'
   667  007D7E  4E                 	db	78	;'N'
   668  007D7F  54                 	db	84	;'T'
   669  007D80  49                 	db	73	;'I'
   670  007D81  4F                 	db	79	;'O'
   671  007D82  4E                 	db	78	;'N'
   672  007D83  20                 	db	32
   673  007D84  00                 	db	0
   674  007D85                     STR_84:
   675                           
   676                           ; BSR set to: 1
   677  007D85  3A                 	db	58	;':'
   678  007D86  29                 	db	41
   679  007D87  20                 	db	32
   680  007D88  3A                 	db	58	;':'
   681  007D89  29                 	db	41
   682  007D8A  20                 	db	32
   683  007D8B  3A                 	db	58	;':'
   684  007D8C  29                 	db	41
   685  007D8D  20                 	db	32
   686  007D8E  3A                 	db	58	;':'
   687  007D8F  29                 	db	41
   688  007D90  20                 	db	32
   689  007D91  3A                 	db	58	;':'
   690  007D92  29                 	db	41
   691  007D93  20                 	db	32
   692  007D94  3A                 	db	58	;':'
   693  007D95  29                 	db	41
   694  007D96  20                 	db	32
   695  007D97  3A                 	db	58	;':'
   696  007D98  29                 	db	41
   697  007D99  00                 	db	0
   698  007D9A                     STR_82:
   699                           
   700                           ; BSR set to: 1
   701  007D9A  2A                 	db	42
   702  007D9B  2D                 	db	45
   703  007D9C  2A                 	db	42
   704  007D9D  2D                 	db	45
   705  007D9E  2A                 	db	42
   706  007D9F  2D                 	db	45
   707  007DA0  2A                 	db	42
   708  007DA1  2D                 	db	45
   709  007DA2  2A                 	db	42
   710  007DA3  2D                 	db	45
   711  007DA4  2A                 	db	42
   712  007DA5  2D                 	db	45
   713  007DA6  2A                 	db	42
   714  007DA7  2D                 	db	45
   715  007DA8  2A                 	db	42
   716  007DA9  2D                 	db	45
   717  007DAA  2A                 	db	42
   718  007DAB  2D                 	db	45
   719  007DAC  2A                 	db	42
   720  007DAD  2D                 	db	45
   721  007DAE  00                 	db	0
   722  007DAF                     STR_85:
   723                           
   724                           ; BSR set to: 1
   725  007DAF  3F                 	db	63	;'?'
   726  007DB0  3F                 	db	63	;'?'
   727  007DB1  3F                 	db	63	;'?'
   728  007DB2  3F                 	db	63	;'?'
   729  007DB3  3F                 	db	63	;'?'
   730  007DB4  3F                 	db	63	;'?'
   731  007DB5  3F                 	db	63	;'?'
   732  007DB6  3F                 	db	63	;'?'
   733  007DB7  3F                 	db	63	;'?'
   734  007DB8  3F                 	db	63	;'?'
   735  007DB9  3F                 	db	63	;'?'
   736  007DBA  3F                 	db	63	;'?'
   737  007DBB  3F                 	db	63	;'?'
   738  007DBC  3F                 	db	63	;'?'
   739  007DBD  3F                 	db	63	;'?'
   740  007DBE  3F                 	db	63	;'?'
   741  007DBF  3F                 	db	63	;'?'
   742  007DC0  3F                 	db	63	;'?'
   743  007DC1  3F                 	db	63	;'?'
   744  007DC2  3F                 	db	63	;'?'
   745  007DC3  00                 	db	0
   746  007DC4                     STR_38:
   747                           
   748                           ; BSR set to: 1
   749  007DC4  53                 	db	83	;'S'
   750  007DC5  45                 	db	69	;'E'
   751  007DC6  54                 	db	84	;'T'
   752  007DC7  45                 	db	69	;'E'
   753  007DC8  41                 	db	65	;'A'
   754  007DC9  52                 	db	82	;'R'
   755  007DCA  20                 	db	32
   756  007DCB  43                 	db	67	;'C'
   757  007DCC  4F                 	db	79	;'O'
   758  007DCD  4E                 	db	78	;'N'
   759  007DCE  46                 	db	70	;'F'
   760  007DCF  49                 	db	73	;'I'
   761  007DD0  47                 	db	71	;'G'
   762  007DD1  55                 	db	85	;'U'
   763  007DD2  52                 	db	82	;'R'
   764  007DD3  41                 	db	65	;'A'
   765  007DD4  43                 	db	67	;'C'
   766  007DD5  49                 	db	73	;'I'
   767  007DD6  4F                 	db	79	;'O'
   768  007DD7  4E                 	db	78	;'N'
   769  007DD8  00                 	db	0
   770  007DD9                     STR_81:
   771                           
   772                           ; BSR set to: 1
   773  007DD9  61                 	db	97	;'a'
   774  007DDA  20                 	db	32
   775  007DDB  61                 	db	97	;'a'
   776  007DDC  6A                 	db	106	;'j'
   777  007DDD  75                 	db	117	;'u'
   778  007DDE  73                 	db	115	;'s'
   779  007DDF  74                 	db	116	;'t'
   780  007DE0  65                 	db	101	;'e'
   781  007DE1  73                 	db	115	;'s'
   782  007DE2  20                 	db	32
   783  007DE3  64                 	db	100	;'d'
   784  007DE4  65                 	db	101	;'e'
   785  007DE5  20                 	db	32
   786  007DE6  66                 	db	102	;'f'
   787  007DE7  61                 	db	97	;'a'
   788  007DE8  62                 	db	98	;'b'
   789  007DE9  72                 	db	114	;'r'
   790  007DEA  69                 	db	105	;'i'
   791  007DEB  63                 	db	99	;'c'
   792  007DEC  61                 	db	97	;'a'
   793  007DED  00                 	db	0
   794  007DEE                     STR_1:
   795                           
   796                           ; BSR set to: 1
   797  007DEE  20                 	db	32
   798  007DEF  20                 	db	32
   799  007DF0  45                 	db	69	;'E'
   800  007DF1  73                 	db	115	;'s'
   801  007DF2  70                 	db	112	;'p'
   802  007DF3  65                 	db	101	;'e'
   803  007DF4  72                 	db	114	;'r'
   804  007DF5  65                 	db	101	;'e'
   805  007DF6  20                 	db	32
   806  007DF7  6D                 	db	109	;'m'
   807  007DF8  69                 	db	105	;'i'
   808  007DF9  65                 	db	101	;'e'
   809  007DFA  6E                 	db	110	;'n'
   810  007DFB  74                 	db	116	;'t'
   811  007DFC  72                 	db	114	;'r'
   812  007DFD  61                 	db	97	;'a'
   813  007DFE  73                 	db	115	;'s'
   814  007DFF  20                 	db	32
   815  007E00  20                 	db	32
   816  007E01  20                 	db	32
   817  007E02  00                 	db	0
   818  007E03                     STR_2:
   819                           
   820                           ; BSR set to: 1
   821  007E03  20                 	db	32
   822  007E04  62                 	db	98	;'b'
   823  007E05  6F                 	db	111	;'o'
   824  007E06  72                 	db	114	;'r'
   825  007E07  72                 	db	114	;'r'
   826  007E08  61                 	db	97	;'a'
   827  007E09  20                 	db	32
   828  007E0A  6C                 	db	108	;'l'
   829  007E0B  61                 	db	97	;'a'
   830  007E0C  20                 	db	32
   831  007E0D  6D                 	db	109	;'m'
   832  007E0E  65                 	db	101	;'e'
   833  007E0F  6D                 	db	109	;'m'
   834  007E10  6F                 	db	111	;'o'
   835  007E11  72                 	db	114	;'r'
   836  007E12  69                 	db	105	;'i'
   837  007E13  61                 	db	97	;'a'
   838  007E14  2E                 	db	46
   839  007E15  2E                 	db	46
   840  007E16  2E                 	db	46
   841  007E17  00                 	db	0
   842  007E18                     STR_111:
   843                           
   844                           ; BSR set to: 1
   845  007E18  20                 	db	32
   846  007E19  20                 	db	32
   847  007E1A  20                 	db	32
   848  007E1B  20                 	db	32
   849  007E1C  20                 	db	32
   850  007E1D  54                 	db	84	;'T'
   851  007E1E  65                 	db	101	;'e'
   852  007E1F  72                 	db	114	;'r'
   853  007E20  6D                 	db	109	;'m'
   854  007E21  69                 	db	105	;'i'
   855  007E22  6E                 	db	110	;'n'
   856  007E23  61                 	db	97	;'a'
   857  007E24  64                 	db	100	;'d'
   858  007E25  6F                 	db	111	;'o'
   859  007E26  20                 	db	32
   860  007E27  20                 	db	32
   861  007E28  20                 	db	32
   862  007E29  20                 	db	32
   863  007E2A  20                 	db	32
   864  007E2B  00                 	db	0
   865  007E2C                     STR_39:
   866                           
   867                           ; BSR set to: 1
   868  007E2C  4C                 	db	76	;'L'
   869  007E2D  75                 	db	117	;'u'
   870  007E2E  65                 	db	101	;'e'
   871  007E2F  67                 	db	103	;'g'
   872  007E30  6F                 	db	111	;'o'
   873  007E31  20                 	db	32
   874  007E32  50                 	db	80	;'P'
   875  007E33  72                 	db	114	;'r'
   876  007E34  65                 	db	101	;'e'
   877  007E35  73                 	db	115	;'s'
   878  007E36  69                 	db	105	;'i'
   879  007E37  6F                 	db	111	;'o'
   880  007E38  6E                 	db	110	;'n'
   881  007E39  65                 	db	101	;'e'
   882  007E3A  20                 	db	32
   883  007E3B  27                 	db	39
   884  007E3C  41                 	db	65	;'A'
   885  007E3D  27                 	db	39
   886  007E3E  00                 	db	0
   887  007E3F                     STR_60:
   888                           
   889                           ; BSR set to: 1
   890  007E3F  4C                 	db	76	;'L'
   891  007E40  75                 	db	117	;'u'
   892  007E41  65                 	db	101	;'e'
   893  007E42  67                 	db	103	;'g'
   894  007E43  6F                 	db	111	;'o'
   895  007E44  20                 	db	32
   896  007E45  70                 	db	112	;'p'
   897  007E46  72                 	db	114	;'r'
   898  007E47  65                 	db	101	;'e'
   899  007E48  73                 	db	115	;'s'
   900  007E49  69                 	db	105	;'i'
   901  007E4A  6F                 	db	111	;'o'
   902  007E4B  6E                 	db	110	;'n'
   903  007E4C  65                 	db	101	;'e'
   904  007E4D  20                 	db	32
   905  007E4E  27                 	db	39
   906  007E4F  41                 	db	65	;'A'
   907  007E50  27                 	db	39
   908  007E51  00                 	db	0
   909  007E52                     STR_73:
   910                           
   911                           ; BSR set to: 1
   912  007E52  4E                 	db	78	;'N'
   913  007E53  55                 	db	85	;'U'
   914  007E54  4D                 	db	77	;'M'
   915  007E55  45                 	db	69	;'E'
   916  007E56  52                 	db	82	;'R'
   917  007E57  4F                 	db	79	;'O'
   918  007E58  20                 	db	32
   919  007E59  44                 	db	68	;'D'
   920  007E5A  45                 	db	69	;'E'
   921  007E5B  20                 	db	32
   922  007E5C  55                 	db	85	;'U'
   923  007E5D  53                 	db	83	;'S'
   924  007E5E  55                 	db	85	;'U'
   925  007E5F  41                 	db	65	;'A'
   926  007E60  52                 	db	82	;'R'
   927  007E61  49                 	db	73	;'I'
   928  007E62  4F                 	db	79	;'O'
   929  007E63  3A                 	db	58	;':'
   930  007E64  00                 	db	0
   931  007E65                     STR_70:
   932                           
   933                           ; BSR set to: 1
   934  007E65  43                 	db	67	;'C'
   935  007E66  41                 	db	65	;'A'
   936  007E67  4E                 	db	78	;'N'
   937  007E68  54                 	db	84	;'T'
   938  007E69  49                 	db	73	;'I'
   939  007E6A  44                 	db	68	;'D'
   940  007E6B  41                 	db	65	;'A'
   941  007E6C  44                 	db	68	;'D'
   942  007E6D  20                 	db	32
   943  007E6E  55                 	db	85	;'U'
   944  007E6F  53                 	db	83	;'S'
   945  007E70  55                 	db	85	;'U'
   946  007E71  41                 	db	65	;'A'
   947  007E72  52                 	db	82	;'R'
   948  007E73  49                 	db	73	;'I'
   949  007E74  4F                 	db	79	;'O'
   950  007E75  53                 	db	83	;'S'
   951  007E76  3A                 	db	58	;':'
   952  007E77  00                 	db	0
   953  007E78                     STR_59:
   954                           
   955                           ; BSR set to: 1
   956  007E78  41                 	db	65	;'A'
   957  007E79  43                 	db	67	;'C'
   958  007E7A  45                 	db	69	;'E'
   959  007E7B  52                 	db	82	;'R'
   960  007E7C  51                 	db	81	;'Q'
   961  007E7D  55                 	db	85	;'U'
   962  007E7E  45                 	db	69	;'E'
   963  007E7F  20                 	db	32
   964  007E80  4C                 	db	76	;'L'
   965  007E81  41                 	db	65	;'A'
   966  007E82  20                 	db	32
   967  007E83  54                 	db	84	;'T'
   968  007E84  41                 	db	65	;'A'
   969  007E85  52                 	db	82	;'R'
   970  007E86  4A                 	db	74	;'J'
   971  007E87  45                 	db	69	;'E'
   972  007E88  54                 	db	84	;'T'
   973  007E89  41                 	db	65	;'A'
   974  007E8A  00                 	db	0
   975  007E8B                     STR_8:
   976                           
   977                           ; BSR set to: 1
   978  007E8B  20                 	db	32
   979  007E8C  20                 	db	32
   980  007E8D  20                 	db	32
   981  007E8E  20                 	db	32
   982  007E8F  20                 	db	32
   983  007E90  54                 	db	84	;'T'
   984  007E91  65                 	db	101	;'e'
   985  007E92  72                 	db	114	;'r'
   986  007E93  6D                 	db	109	;'m'
   987  007E94  69                 	db	105	;'i'
   988  007E95  6E                 	db	110	;'n'
   989  007E96  61                 	db	97	;'a'
   990  007E97  64                 	db	100	;'d'
   991  007E98  6F                 	db	111	;'o'
   992  007E99  20                 	db	32
   993  007E9A  20                 	db	32
   994  007E9B  20                 	db	32
   995  007E9C  20                 	db	32
   996  007E9D  00                 	db	0
   997  007E9E                     STR_42:
   998                           
   999                           ; BSR set to: 1
  1000  007E9E  43                 	db	67	;'C'
  1001  007E9F  4F                 	db	79	;'O'
  1002  007EA0  4E                 	db	78	;'N'
  1003  007EA1  46                 	db	70	;'F'
  1004  007EA2  49                 	db	73	;'I'
  1005  007EA3  47                 	db	71	;'G'
  1006  007EA4  55                 	db	85	;'U'
  1007  007EA5  52                 	db	82	;'R'
  1008  007EA6  41                 	db	65	;'A'
  1009  007EA7  43                 	db	67	;'C'
  1010  007EA8  49                 	db	73	;'I'
  1011  007EA9  4F                 	db	79	;'O'
  1012  007EAA  4E                 	db	78	;'N'
  1013  007EAB  20                 	db	32
  1014  007EAC  52                 	db	82	;'R'
  1015  007EAD  54                 	db	84	;'T'
  1016  007EAE  43                 	db	67	;'C'
  1017  007EAF  00                 	db	0
  1018  007EB0                     STR_30:
  1019                           
  1020                           ; BSR set to: 1
  1021  007EB0  43                 	db	67	;'C'
  1022  007EB1  61                 	db	97	;'a'
  1023  007EB2  6E                 	db	110	;'n'
  1024  007EB3  74                 	db	116	;'t'
  1025  007EB4  2E                 	db	46
  1026  007EB5  55                 	db	85	;'U'
  1027  007EB6  73                 	db	115	;'s'
  1028  007EB7  75                 	db	117	;'u'
  1029  007EB8  61                 	db	97	;'a'
  1030  007EB9  72                 	db	114	;'r'
  1031  007EBA  69                 	db	105	;'i'
  1032  007EBB  6F                 	db	111	;'o'
  1033  007EBC  73                 	db	115	;'s'
  1034  007EBD  3A                 	db	58	;':'
  1035  007EBE  00                 	db	0
  1036  007EBF                     STR_63:
  1037                           
  1038                           ; BSR set to: 1
  1039  007EBF  4E                 	db	78	;'N'
  1040  007EC0  55                 	db	85	;'U'
  1041  007EC1  4D                 	db	77	;'M'
  1042  007EC2  45                 	db	69	;'E'
  1043  007EC3  52                 	db	82	;'R'
  1044  007EC4  4F                 	db	79	;'O'
  1045  007EC5  20                 	db	32
  1046  007EC6  55                 	db	85	;'U'
  1047  007EC7  53                 	db	83	;'S'
  1048  007EC8  55                 	db	85	;'U'
  1049  007EC9  41                 	db	65	;'A'
  1050  007ECA  52                 	db	82	;'R'
  1051  007ECB  49                 	db	73	;'I'
  1052  007ECC  4F                 	db	79	;'O'
  1053  007ECD  00                 	db	0
  1054  007ECE                     STR_80:
  1055                           
  1056                           ; BSR set to: 1
  1057  007ECE  52                 	db	82	;'R'
  1058  007ECF  65                 	db	101	;'e'
  1059  007ED0  73                 	db	115	;'s'
  1060  007ED1  74                 	db	116	;'t'
  1061  007ED2  61                 	db	97	;'a'
  1062  007ED3  62                 	db	98	;'b'
  1063  007ED4  6C                 	db	108	;'l'
  1064  007ED5  65                 	db	101	;'e'
  1065  007ED6  63                 	db	99	;'c'
  1066  007ED7  69                 	db	105	;'i'
  1067  007ED8  65                 	db	101	;'e'
  1068  007ED9  6E                 	db	110	;'n'
  1069  007EDA  64                 	db	100	;'d'
  1070  007EDB  6F                 	db	111	;'o'
  1071  007EDC  00                 	db	0
  1072  007EDD                     STR_3:
  1073                           
  1074                           ; BSR set to: 1
  1075  007EDD  56                 	db	86	;'V'
  1076  007EDE  65                 	db	101	;'e'
  1077  007EDF  72                 	db	114	;'r'
  1078  007EE0  69                 	db	105	;'i'
  1079  007EE1  66                 	db	102	;'f'
  1080  007EE2  69                 	db	105	;'i'
  1081  007EE3  63                 	db	99	;'c'
  1082  007EE4  61                 	db	97	;'a'
  1083  007EE5  63                 	db	99	;'c'
  1084  007EE6  69                 	db	105	;'i'
  1085  007EE7  6F                 	db	111	;'o'
  1086  007EE8  6E                 	db	110	;'n'
  1087  007EE9  3A                 	db	58	;':'
  1088  007EEA  00                 	db	0
  1089  007EEB                     STR_35:
  1090                           
  1091                           ; BSR set to: 1
  1092  007EEB  4E                 	db	78	;'N'
  1093  007EEC  6F                 	db	111	;'o'
  1094  007EED  20                 	db	32
  1095  007EEE  64                 	db	100	;'d'
  1096  007EEF  65                 	db	101	;'e'
  1097  007EF0  74                 	db	116	;'t'
  1098  007EF1  65                 	db	101	;'e'
  1099  007EF2  63                 	db	99	;'c'
  1100  007EF3  2E                 	db	46
  1101  007EF4  20                 	db	32
  1102  007EF5  20                 	db	32
  1103  007EF6  00                 	db	0
  1104  007EF7                     
  1105                           ; BSR set to: 1
  1106  007EF7  31                 	db	49	;'1'
  1107  007EF8  3A                 	db	58	;':'
  1108  007EF9  20                 	db	32
  1109  007EFA  43                 	db	67	;'C'
  1110  007EFB  65                 	db	101	;'e'
  1111  007EFC  72                 	db	114	;'r'
  1112  007EFD  72                 	db	114	;'r'
  1113  007EFE  61                 	db	97	;'a'
  1114  007EFF  64                 	db	100	;'d'
  1115  007F00  61                 	db	97	;'a'
  1116  007F01  00                 	db	0
  1117  007F02                     
  1118                           ; BSR set to: 1
  1119  007F02  32                 	db	50	;'2'
  1120  007F03  3A                 	db	58	;':'
  1121  007F04  20                 	db	32
  1122  007F05  43                 	db	67	;'C'
  1123  007F06  65                 	db	101	;'e'
  1124  007F07  72                 	db	114	;'r'
  1125  007F08  72                 	db	114	;'r'
  1126  007F09  61                 	db	97	;'a'
  1127  007F0A  64                 	db	100	;'d'
  1128  007F0B  61                 	db	97	;'a'
  1129  007F0C  00                 	db	0
  1130  007F0D                     
  1131                           ; BSR set to: 1
  1132  007F0D  31                 	db	49	;'1'
  1133  007F0E  3A                 	db	58	;':'
  1134  007F0F  20                 	db	32
  1135  007F10  41                 	db	65	;'A'
  1136  007F11  62                 	db	98	;'b'
  1137  007F12  69                 	db	105	;'i'
  1138  007F13  65                 	db	101	;'e'
  1139  007F14  72                 	db	114	;'r'
  1140  007F15  74                 	db	116	;'t'
  1141  007F16  61                 	db	97	;'a'
  1142  007F17  00                 	db	0
  1143  007F18                     
  1144                           ; BSR set to: 1
  1145  007F18  32                 	db	50	;'2'
  1146  007F19  3A                 	db	58	;':'
  1147  007F1A  20                 	db	32
  1148  007F1B  41                 	db	65	;'A'
  1149  007F1C  62                 	db	98	;'b'
  1150  007F1D  69                 	db	105	;'i'
  1151  007F1E  65                 	db	101	;'e'
  1152  007F1F  72                 	db	114	;'r'
  1153  007F20  74                 	db	116	;'t'
  1154  007F21  61                 	db	97	;'a'
  1155  007F22  00                 	db	0
  1156  007F23                     STR_67:
  1157                           
  1158                           ; BSR set to: 1
  1159  007F23  55                 	db	85	;'U'
  1160  007F24  42                 	db	66	;'B'
  1161  007F25  49                 	db	73	;'I'
  1162  007F26  43                 	db	67	;'C'
  1163  007F27  41                 	db	65	;'A'
  1164  007F28  43                 	db	67	;'C'
  1165  007F29  49                 	db	73	;'I'
  1166  007F2A  4F                 	db	79	;'O'
  1167  007F2B  4E                 	db	78	;'N'
  1168  007F2C  3A                 	db	58	;':'
  1169  007F2D  00                 	db	0
  1170  007F2E                     STR_56:
  1171                           
  1172                           ; BSR set to: 1
  1173  007F2E  31                 	db	49	;'1'
  1174  007F2F  2D                 	db	45
  1175  007F30  41                 	db	65	;'A'
  1176  007F31  47                 	db	71	;'G'
  1177  007F32  52                 	db	82	;'R'
  1178  007F33  45                 	db	69	;'E'
  1179  007F34  47                 	db	71	;'G'
  1180  007F35  41                 	db	65	;'A'
  1181  007F36  52                 	db	82	;'R'
  1182  007F37  00                 	db	0
  1183  007F38                     STR_99:
  1184                           
  1185                           ; BSR set to: 1
  1186  007F38  0A                 	db	10
  1187  007F39  5B                 	db	91	;'['
  1188  007F3A  52                 	db	82	;'R'
  1189  007F3B  43                 	db	67	;'C'
  1190  007F3C  52                 	db	82	;'R'
  1191  007F3D  2C                 	db	44
  1192  007F3E  31                 	db	49	;'1'
  1193  007F3F  2C                 	db	44
  1194  007F40  00                 	db	0
  1195  007F41                     STR_104:
  1196                           
  1197                           ; BSR set to: 1
  1198  007F41  0A                 	db	10
  1199  007F42  5B                 	db	91	;'['
  1200  007F43  52                 	db	82	;'R'
  1201  007F44  43                 	db	67	;'C'
  1202  007F45  52                 	db	82	;'R'
  1203  007F46  2C                 	db	44
  1204  007F47  32                 	db	50	;'2'
  1205  007F48  2C                 	db	44
  1206  007F49  00                 	db	0
  1207  007F4A                     
  1208                           ; BSR set to: 1
  1209  007F4A  73                 	db	115	;'s'
  1210  007F4B  31                 	db	49	;'1'
  1211  007F4C  5F                 	db	95	;'_'
  1212  007F4D  6F                 	db	111	;'o'
  1213  007F4E  66                 	db	102	;'f'
  1214  007F4F  66                 	db	102	;'f'
  1215  007F50  2E                 	db	46
  1216  007F51  00                 	db	0
  1217  007F52                     
  1218                           ; BSR set to: 1
  1219  007F52  73                 	db	115	;'s'
  1220  007F53  32                 	db	50	;'2'
  1221  007F54  5F                 	db	95	;'_'
  1222  007F55  6F                 	db	111	;'o'
  1223  007F56  66                 	db	102	;'f'
  1224  007F57  66                 	db	102	;'f'
  1225  007F58  2E                 	db	46
  1226  007F59  00                 	db	0
  1227  007F5A                     STR_15:
  1228                           
  1229                           ; BSR set to: 1
  1230  007F5A  49                 	db	73	;'I'
  1231  007F5B  44                 	db	68	;'D'
  1232  007F5C  2D                 	db	45
  1233  007F5D  50                 	db	80	;'P'
  1234  007F5E  49                 	db	73	;'I'
  1235  007F5F  43                 	db	67	;'C'
  1236  007F60  3A                 	db	58	;':'
  1237  007F61  00                 	db	0
  1238  007F62                     STR_57:
  1239                           
  1240                           ; BSR set to: 1
  1241  007F62  4F                 	db	79	;'O'
  1242  007F63  50                 	db	80	;'P'
  1243  007F64  43                 	db	67	;'C'
  1244  007F65  49                 	db	73	;'I'
  1245  007F66  4F                 	db	79	;'O'
  1246  007F67  4E                 	db	78	;'N'
  1247  007F68  3A                 	db	58	;':'
  1248  007F69  00                 	db	0
  1249  007F6A                     STR_40:
  1250                           
  1251                           ; BSR set to: 1
  1252  007F6A  4F                 	db	79	;'O'
  1253  007F6B  70                 	db	112	;'p'
  1254  007F6C  63                 	db	99	;'c'
  1255  007F6D  69                 	db	105	;'i'
  1256  007F6E  6F                 	db	111	;'o'
  1257  007F6F  6E                 	db	110	;'n'
  1258  007F70  3A                 	db	58	;':'
  1259  007F71  00                 	db	0
  1260  007F72                     STR_115:
  1261                           
  1262                           ; BSR set to: 1
  1263  007F72  0A                 	db	10
  1264  007F73  5B                 	db	91	;'['
  1265  007F74  52                 	db	82	;'R'
  1266  007F75  50                 	db	80	;'P'
  1267  007F76  41                 	db	65	;'A'
  1268  007F77  2C                 	db	44
  1269  007F78  00                 	db	0
  1270  007F79                     STR_123:
  1271                           
  1272                           ; BSR set to: 1
  1273  007F79  0A                 	db	10
  1274  007F7A  5B                 	db	91	;'['
  1275  007F7B  52                 	db	82	;'R'
  1276  007F7C  43                 	db	67	;'C'
  1277  007F7D  4F                 	db	79	;'O'
  1278  007F7E  2C                 	db	44
  1279  007F7F  00                 	db	0
  1280  007F80                     
  1281                           ; BSR set to: 1
  1282  007F80  73                 	db	115	;'s'
  1283  007F81  31                 	db	49	;'1'
  1284  007F82  5F                 	db	95	;'_'
  1285  007F83  6F                 	db	111	;'o'
  1286  007F84  6E                 	db	110	;'n'
  1287  007F85  2E                 	db	46
  1288  007F86  00                 	db	0
  1289  007F87                     
  1290                           ; BSR set to: 1
  1291  007F87  73                 	db	115	;'s'
  1292  007F88  32                 	db	50	;'2'
  1293  007F89  5F                 	db	95	;'_'
  1294  007F8A  6F                 	db	111	;'o'
  1295  007F8B  6E                 	db	110	;'n'
  1296  007F8C  2E                 	db	46
  1297  007F8D  00                 	db	0
  1298  007F8E                     STR_17:
  1299                           
  1300                           ; BSR set to: 1
  1301  007F8E  46                 	db	70	;'F'
  1302  007F8F  65                 	db	101	;'e'
  1303  007F90  63                 	db	99	;'c'
  1304  007F91  68                 	db	104	;'h'
  1305  007F92  61                 	db	97	;'a'
  1306  007F93  3A                 	db	58	;':'
  1307  007F94  00                 	db	0
  1308  007F95                     STR_31:
  1309                           
  1310                           ; BSR set to: 1
  1311  007F95  25                 	db	37
  1312  007F96  30                 	db	48	;'0'
  1313  007F97  31                 	db	49	;'1'
  1314  007F98  30                 	db	48	;'0'
  1315  007F99  6C                 	db	108	;'l'
  1316  007F9A  75                 	db	117	;'u'
  1317  007F9B  00                 	db	0
  1318  007F9C                     STR_43:
  1319                           
  1320                           ; BSR set to: 1
  1321  007F9C  48                 	db	72	;'H'
  1322  007F9D  4F                 	db	79	;'O'
  1323  007F9E  52                 	db	82	;'R'
  1324  007F9F  41                 	db	65	;'A'
  1325  007FA0  3A                 	db	58	;':'
  1326  007FA1  00                 	db	0
  1327  007FA2                     STR_61:
  1328                           
  1329                           ; BSR set to: 1
  1330  007FA2  52                 	db	82	;'R'
  1331  007FA3  46                 	db	70	;'F'
  1332  007FA4  49                 	db	73	;'I'
  1333  007FA5  44                 	db	68	;'D'
  1334  007FA6  3A                 	db	58	;':'
  1335  007FA7  00                 	db	0
  1336  007FA8                     STR_28:
  1337                           
  1338                           ; BSR set to: 1
  1339  007FA8  43                 	db	67	;'C'
  1340  007FA9  41                 	db	65	;'A'
  1341  007FAA  52                 	db	82	;'R'
  1342  007FAB  44                 	db	68	;'D'
  1343  007FAC  3A                 	db	58	;':'
  1344  007FAD  00                 	db	0
  1345  007FAE                     STR_48:
  1346                           
  1347                           ; BSR set to: 1
  1348  007FAE  59                 	db	89	;'Y'
  1349  007FAF  45                 	db	69	;'E'
  1350  007FB0  41                 	db	65	;'A'
  1351  007FB1  52                 	db	82	;'R'
  1352  007FB2  3A                 	db	58	;':'
  1353  007FB3  00                 	db	0
  1354  007FB4                     STR_16:
  1355                           
  1356                           ; BSR set to: 1
  1357  007FB4  48                 	db	72	;'H'
  1358  007FB5  6F                 	db	111	;'o'
  1359  007FB6  72                 	db	114	;'r'
  1360  007FB7  61                 	db	97	;'a'
  1361  007FB8  3A                 	db	58	;':'
  1362  007FB9  00                 	db	0
  1363  007FBA                     STR_4:
  1364                           
  1365                           ; BSR set to: 1
  1366  007FBA  2E                 	db	46
  1367  007FBB  2E                 	db	46
  1368  007FBC  2E                 	db	46
  1369  007FBD  4F                 	db	79	;'O'
  1370  007FBE  4B                 	db	75	;'K'
  1371  007FBF  00                 	db	0
  1372  007FC0                     STR_5:
  1373                           
  1374                           ; BSR set to: 1
  1375  007FC0  45                 	db	69	;'E'
  1376  007FC1  52                 	db	82	;'R'
  1377  007FC2  52                 	db	82	;'R'
  1378  007FC3  4F                 	db	79	;'O'
  1379  007FC4  52                 	db	82	;'R'
  1380  007FC5  00                 	db	0
  1381  007FC6                     STR_44:
  1382                           
  1383                           ; BSR set to: 1
  1384  007FC6  44                 	db	68	;'D'
  1385  007FC7  49                 	db	73	;'I'
  1386  007FC8  41                 	db	65	;'A'
  1387  007FC9  3A                 	db	58	;':'
  1388  007FCA  00                 	db	0
  1389  007FCB                     STR_47:
  1390                           
  1391                           ; BSR set to: 1
  1392  007FCB  53                 	db	83	;'S'
  1393  007FCC  45                 	db	69	;'E'
  1394  007FCD  47                 	db	71	;'G'
  1395  007FCE  3A                 	db	58	;':'
  1396  007FCF  00                 	db	0
  1397  007FD0                     STR_64:
  1398                           
  1399                           ; BSR set to: 1
  1400  007FD0  4E                 	db	78	;'N'
  1401  007FD1  55                 	db	85	;'U'
  1402  007FD2  4D                 	db	77	;'M'
  1403  007FD3  3A                 	db	58	;':'
  1404  007FD4  00                 	db	0
  1405  007FD5                     STR_45:
  1406                           
  1407                           ; BSR set to: 1
  1408  007FD5  4D                 	db	77	;'M'
  1409  007FD6  49                 	db	73	;'I'
  1410  007FD7  4E                 	db	78	;'N'
  1411  007FD8  3A                 	db	58	;':'
  1412  007FD9  00                 	db	0
  1413  007FDA                     STR_46:
  1414                           
  1415                           ; BSR set to: 1
  1416  007FDA  4D                 	db	77	;'M'
  1417  007FDB  45                 	db	69	;'E'
  1418  007FDC  53                 	db	83	;'S'
  1419  007FDD  3A                 	db	58	;':'
  1420  007FDE  00                 	db	0
  1421  007FDF                     STR_41:
  1422                           
  1423                           ; BSR set to: 1
  1424  007FDF  25                 	db	37
  1425  007FE0  30                 	db	48	;'0'
  1426  007FE1  34                 	db	52	;'4'
  1427  007FE2  64                 	db	100	;'d'
  1428  007FE3  00                 	db	0
  1429  007FE4                     STR_14:
  1430                           
  1431                           ; BSR set to: 1
  1432  007FE4  25                 	db	37
  1433  007FE5  30                 	db	48	;'0'
  1434  007FE6  32                 	db	50	;'2'
  1435  007FE7  64                 	db	100	;'d'
  1436  007FE8  00                 	db	0
  1437  007FE9                     STR_75:
  1438                           
  1439                           ; BSR set to: 1
  1440  007FE9  25                 	db	37
  1441  007FEA  6C                 	db	108	;'l'
  1442  007FEB  75                 	db	117	;'u'
  1443  007FEC  00                 	db	0
  1444  007FED                     STR_138:
  1445                           
  1446                           ; BSR set to: 1
  1447  007FED  6C                 	db	108	;'l'
  1448  007FEE  64                 	db	100	;'d'
  1449  007FEF  00                 	db	0
  1450  007FF0                     STR_142:
  1451                           
  1452                           ; BSR set to: 1
  1453  007FF0  6C                 	db	108	;'l'
  1454  007FF1  69                 	db	105	;'i'
  1455  007FF2  00                 	db	0
  1456  007FF3                     STR_103:
  1457                           
  1458                           ; BSR set to: 1
  1459  007FF3  5D                 	db	93	;']'
  1460  007FF4  0A                 	db	10
  1461  007FF5  00                 	db	0
  1462  007FF6                     STR_33:
  1463                           
  1464                           ; BSR set to: 1
  1465  007FF6  2D                 	db	45
  1466  007FF7  2D                 	db	45
  1467  007FF8  00                 	db	0
  1468  007FF9                     STR_9:
  1469                           
  1470                           ; BSR set to: 1
  1471  007FF9  25                 	db	37
  1472  007FFA  64                 	db	100	;'d'
  1473  007FFB  00                 	db	0
  1474  007FFC                     STR_24:
  1475                           
  1476                           ; BSR set to: 1
  1477  007FFC  2F                 	db	47
  1478  007FFD  00                 	db	0
  1479  007FFE  00                 	db	0	; dummy byte at the end
  1480  0000                     
  1481                           ; #config settings
  1482                           
  1483                           	psect	cinit
  1484  004E5E                     __pcinit:
  1485                           	callstack 0
  1486  004E5E                     start_initialization:
  1487                           	callstack 0
  1488  004E5E                     __initialization:
  1489                           	callstack 0
  1490                           
  1491                           ; Initialize objects allocated to BANK1 (18 bytes)
  1492                           ; load TBLPTR registers with __pidataBANK1
  1493  004E5E  0E24               	movlw	low __pidataBANK1
  1494  004E60  6EF6               	movwf	tblptrl,c
  1495  004E62  0E54               	movlw	high __pidataBANK1
  1496  004E64  6EF7               	movwf	tblptrh,c
  1497  004E66  0E00               	movlw	low (__pidataBANK1 shr (0+16))
  1498  004E68  6EF8               	movwf	tblptru,c
  1499  004E6A  EE01  F0D8         	lfsr	0,__pdataBANK1
  1500  004E6E  EE10 F012          	lfsr	1,18
  1501  004E72                     copy_data0:
  1502  004E72  0009               	tblrd		*+
  1503  004E74  CFF5 FFEE          	movff	tablat,postinc0
  1504  004E78  50E5               	movf	postdec1,w,c
  1505  004E7A  50E1               	movf	fsr1l,w,c
  1506  004E7C  E1FA               	bnz	copy_data0
  1507                           
  1508                           ; Clear objects allocated to BANK1 (107 bytes)
  1509  004E7E  EE01  F06D         	lfsr	0,__pbssBANK1
  1510  004E82  0E6B               	movlw	107
  1511  004E84                     clear_0:
  1512  004E84  6AEE               	clrf	postinc0,c
  1513  004E86  06E8               	decf	wreg,f,c
  1514  004E88  E1FD               	bnz	clear_0
  1515                           
  1516                           ; Clear objects allocated to BANK0 (1 bytes)
  1517  004E8A  0100               	movlb	0
  1518  004E8C  6BF0               	clrf	__pbssBANK0& (0+255),b
  1519                           
  1520                           ; Clear objects allocated to COMRAM (23 bytes)
  1521  004E8E  EE00  F031         	lfsr	0,__pbssCOMRAM
  1522  004E92  0E17               	movlw	23
  1523  004E94                     clear_1:
  1524  004E94  6AEE               	clrf	postinc0,c
  1525  004E96  06E8               	decf	wreg,f,c
  1526  004E98  E1FD               	bnz	clear_1
  1527  004E9A                     end_of_initialization:
  1528                           	callstack 0
  1529  004E9A                     __end_of__initialization:
  1530                           	callstack 0
  1531  004E9A  9048               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1532  004E9C  9248               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1533  004E9E  0E00               	movlw	low (__Lmediumconst shr (0+16))
  1534  004EA0  6EF8               	movwf	tblptru,c
  1535  004EA2  0100               	movlb	0
  1536  004EA4  EF27  F012         	goto	_main	;jump to C main() function
  1537                           
  1538                           	psect	bssCOMRAM
  1539  000031                     __pbssCOMRAM:
  1540                           	callstack 0
  1541  000031                     _codigo_rfid:
  1542                           	callstack 0
  1543  000031                     	ds	8
  1544  000039                     _valor:
  1545                           	callstack 0
  1546  000039                     	ds	2
  1547  00003B                     _Fin_Cad:
  1548                           	callstack 0
  1549  00003B                     	ds	1
  1550  00003C                     _YY:
  1551                           	callstack 0
  1552  00003C                     	ds	1
  1553  00003D                     _XX:
  1554                           	callstack 0
  1555  00003D                     	ds	1
  1556  00003E                     _N:
  1557                           	callstack 0
  1558  00003E                     	ds	1
  1559  00003F                     _year:
  1560                           	callstack 0
  1561  00003F                     	ds	1
  1562  000040                     _mes:
  1563                           	callstack 0
  1564  000040                     	ds	1
  1565  000041                     _dia:
  1566                           	callstack 0
  1567  000041                     	ds	1
  1568  000042                     _seg:
  1569                           	callstack 0
  1570  000042                     	ds	1
  1571  000043                     _min:
  1572                           	callstack 0
  1573  000043                     	ds	1
  1574  000044                     _hora:
  1575                           	callstack 0
  1576  000044                     	ds	1
  1577  000045                     _mod_rtc:
  1578                           	callstack 0
  1579  000045                     	ds	1
  1580  000046                     _tec_p:
  1581                           	callstack 0
  1582  000046                     	ds	1
  1583  000047                     _numero:
  1584                           	callstack 0
  1585  000047                     	ds	1
  1586                           
  1587                           	psect	bssBANK0
  1588  0000F0                     __pbssBANK0:
  1589                           	callstack 0
  1590  0000F0                     _aceptar:
  1591                           	callstack 0
  1592  0000F0                     	ds	1
  1593                           
  1594                           	psect	bssBANK1
  1595  00016D                     __pbssBANK1:
  1596                           	callstack 0
  1597  00016D                     _nout:
  1598                           	callstack 0
  1599  00016D                     	ds	2
  1600  00016F                     _width:
  1601                           	callstack 0
  1602  00016F                     	ds	2
  1603  000171                     _prec:
  1604                           	callstack 0
  1605  000171                     	ds	2
  1606  000173                     _flags:
  1607                           	callstack 0
  1608  000173                     	ds	2
  1609  000175                     _direccion:
  1610                           	callstack 0
  1611  000175                     	ds	2
  1612  000177                     _yy:
  1613                           	callstack 0
  1614  000177                     	ds	2
  1615  000179                     _xx:
  1616                           	callstack 0
  1617  000179                     	ds	2
  1618  00017B                     _rx_recivido:
  1619                           	callstack 0
  1620  00017B                     	ds	1
  1621  00017C                     _Read_Eeprom:
  1622                           	callstack 0
  1623  00017C                     	ds	1
  1624  00017D                     _puerta2:
  1625                           	callstack 0
  1626  00017D                     	ds	1
  1627  00017E                     _puerta1:
  1628                           	callstack 0
  1629  00017E                     	ds	1
  1630  00017F                     _Running:
  1631                           	callstack 0
  1632  00017F                     	ds	1
  1633  000180                     _Task2_Est:
  1634                           	callstack 0
  1635  000180                     	ds	1
  1636  000181                     _Task1_Est:
  1637                           	callstack 0
  1638  000181                     	ds	1
  1639  000182                     _key:
  1640                           	callstack 0
  1641  000182                     	ds	1
  1642  000183                     _Blocked:
  1643                           	callstack 0
  1644  000183                     	ds	1
  1645  000184                     _Ha_Pu:
  1646                           	callstack 0
  1647  000184                     	ds	1
  1648  000185                     _Tarj_Dect:
  1649                           	callstack 0
  1650  000185                     	ds	1
  1651  000186                     _PA:
  1652                           	callstack 0
  1653  000186                     	ds	1
  1654  000187                     _CR:
  1655                           	callstack 0
  1656  000187                     	ds	1
  1657  000188                     _CO:
  1658                           	callstack 0
  1659  000188                     	ds	1
  1660  000189                     _long_cad:
  1661                           	callstack 0
  1662  000189                     	ds	1
  1663  00018A                     _address:
  1664                           	callstack 0
  1665  00018A                     	ds	1
  1666  00018B                     _M_variable:
  1667                           	callstack 0
  1668  00018B                     	ds	1
  1669  00018C                     _opc_rfid:
  1670                           	callstack 0
  1671  00018C                     	ds	1
  1672  00018D                     _I_Con_Rfid:
  1673                           	callstack 0
  1674  00018D                     	ds	1
  1675  00018E                     _mostrar:
  1676                           	callstack 0
  1677  00018E                     	ds	1
  1678  00018F                     _val_rtc:
  1679                           	callstack 0
  1680  00018F                     	ds	1
  1681  000190                     _esc_rtc:
  1682                           	callstack 0
  1683  000190                     	ds	1
  1684  000191                     _cant_user:
  1685                           	callstack 0
  1686  000191                     	ds	1
  1687  000192                     _ACK_EST:
  1688                           	callstack 0
  1689  000192                     	ds	1
  1690  000193                     _Dato:
  1691                           	callstack 0
  1692  000193                     	ds	1
  1693  000194                     _dbuf:
  1694                           	callstack 0
  1695  000194                     	ds	32
  1696  0001B4                     _word:
  1697                           	callstack 0
  1698  0001B4                     	ds	20
  1699  0001C8                     _UID:
  1700                           	callstack 0
  1701  0001C8                     	ds	10
  1702  0001D2                     _llave:
  1703                           	callstack 0
  1704  0001D2                     	ds	4
  1705  0001D6                     _TagType:
  1706                           	callstack 0
  1707  0001D6                     	ds	2
  1708                           
  1709                           	psect	dataBANK1
  1710  0001D8                     __pdataBANK1:
  1711                           	callstack 0
  1712  0001D8                     _Timer_RX:
  1713                           	callstack 0
  1714  0001D8                     	ds	2
  1715  0001DA                     _Timer_Hash:
  1716                           	callstack 0
  1717  0001DA                     	ds	2
  1718  0001DC                     _Timer_Puerta2:
  1719                           	callstack 0
  1720  0001DC                     	ds	2
  1721  0001DE                     _Timer_Puerta1:
  1722                           	callstack 0
  1723  0001DE                     	ds	2
  1724  0001E0                     _Timer_DelayMuestra:
  1725                           	callstack 0
  1726  0001E0                     	ds	2
  1727  0001E2                     _Timer_DelayLcd:
  1728                           	callstack 0
  1729  0001E2                     	ds	2
  1730  0001E4                     _Timer_Rtc:
  1731                           	callstack 0
  1732  0001E4                     	ds	2
  1733  0001E6                     _Timer_Tec:
  1734                           	callstack 0
  1735  0001E6                     	ds	1
  1736  0001E7                     _Timer_Task2:
  1737                           	callstack 0
  1738  0001E7                     	ds	1
  1739  0001E8                     _Timer_Task1:
  1740                           	callstack 0
  1741  0001E8                     	ds	1
  1742  0001E9                     _pos_rtc:
  1743                           	callstack 0
  1744  0001E9                     	ds	1
  1745                           
  1746                           	psect	cstackBANK2
  1747  000200                     __pcstackBANK2:
  1748                           	callstack 0
  1749  000200                     Rfid_Lcd@buffer:
  1750                           	callstack 0
  1751                           
  1752                           ; 20 bytes @ 0x0
  1753  000200                     	ds	20
  1754  000214                     Rfid_Lcd@buffer_1766:
  1755                           	callstack 0
  1756                           
  1757                           ; 20 bytes @ 0x14
  1758  000214                     	ds	20
  1759  000228                     Rfid_Lcd@Fin_Config:
  1760                           	callstack 0
  1761                           
  1762                           ; 1 bytes @ 0x28
  1763  000228                     	ds	1
  1764  000229                     Rfid_Lcd@num_usuario:
  1765                           	callstack 0
  1766                           
  1767                           ; 1 bytes @ 0x29
  1768  000229                     	ds	1
  1769  00022A                     Rfid_Lcd@paso:
  1770                           	callstack 0
  1771                           
  1772                           ; 1 bytes @ 0x2A
  1773  00022A                     	ds	1
  1774  00022B                     Rfid_Lcd@ubicacion:
  1775                           	callstack 0
  1776                           
  1777                           ; 2 bytes @ 0x2B
  1778  00022B                     	ds	2
  1779                           
  1780                           	psect	cstackBANK1
  1781  000100                     __pcstackBANK1:
  1782                           	callstack 0
  1783  000100                     ??_M_Write:
  1784  000100                     ACN_CR_Com@texto2:
  1785                           	callstack 0
  1786                           
  1787                           ; 53 bytes @ 0x0
  1788  000100                     	ds	53
  1789  000135                     ACN_CR_Com@texto1:
  1790                           	callstack 0
  1791                           
  1792                           ; 8 bytes @ 0x35
  1793  000135                     	ds	3
  1794  000138                     M_Write@buffer:
  1795                           	callstack 0
  1796                           
  1797                           ; 11 bytes @ 0x38
  1798  000138                     	ds	5
  1799  00013D                     ACN_CR_Com@buffer:
  1800                           	callstack 0
  1801                           
  1802                           ; 10 bytes @ 0x3D
  1803  00013D                     	ds	6
  1804  000143                     M_Write@dec5:
  1805                           	callstack 0
  1806                           
  1807                           ; 8 bytes @ 0x43
  1808  000143                     	ds	4
  1809  000147                     ACN_CR_Com@cant:
  1810                           	callstack 0
  1811                           
  1812                           ; 1 bytes @ 0x47
  1813  000147                     	ds	1
  1814  000148                     ACN_CR_Com@cant_2113:
  1815                           	callstack 0
  1816                           
  1817                           ; 1 bytes @ 0x48
  1818  000148                     	ds	3
  1819  00014B                     M_Write@MD_1:
  1820                           	callstack 0
  1821                           
  1822                           ; 1 bytes @ 0x4B
  1823  00014B                     	ds	1
  1824  00014C                     M_Write@MD_2:
  1825                           	callstack 0
  1826                           
  1827                           ; 1 bytes @ 0x4C
  1828  00014C                     	ds	1
  1829  00014D                     M_Write@dec4:
  1830                           	callstack 0
  1831                           
  1832                           ; 8 bytes @ 0x4D
  1833  00014D                     	ds	8
  1834  000155                     M_Write@dec3:
  1835                           	callstack 0
  1836                           
  1837                           ; 8 bytes @ 0x55
  1838  000155                     	ds	8
  1839  00015D                     M_Write@dec2:
  1840                           	callstack 0
  1841                           
  1842                           ; 8 bytes @ 0x5D
  1843  00015D                     	ds	8
  1844  000165                     M_Write@dec1:
  1845                           	callstack 0
  1846                           
  1847                           ; 8 bytes @ 0x65
  1848  000165                     	ds	8
  1849                           
  1850                           	psect	cstackBANK0
  1851  000060                     __pcstackBANK0:
  1852                           	callstack 0
  1853  000060                     ?_utoa:
  1854                           	callstack 0
  1855  000060                     MFRC522_ToCard@waitIRq:
  1856                           	callstack 0
  1857  000060                     ___aodiv@counter:
  1858                           	callstack 0
  1859  000060                     utoa@fp:
  1860                           	callstack 0
  1861  000060                     ___omul@product:
  1862                           	callstack 0
  1863                           
  1864                           ; 8 bytes @ 0x0
  1865  000060                     	ds	1
  1866  000061                     MFRC522_ToCard@_status:
  1867                           	callstack 0
  1868  000061                     ___aodiv@sign:
  1869                           	callstack 0
  1870  000061                     utoa@d:
  1871                           	callstack 0
  1872                           
  1873                           ; 8 bytes @ 0x1
  1874  000061                     	ds	1
  1875  000062                     MFRC522_ToCard@lastBits:
  1876                           	callstack 0
  1877  000062                     ___aodiv@quotient:
  1878                           	callstack 0
  1879                           
  1880                           ; 8 bytes @ 0x2
  1881  000062                     	ds	1
  1882  000063                     MFRC522_ToCard@irqEn:
  1883                           	callstack 0
  1884                           
  1885                           ; 1 bytes @ 0x3
  1886  000063                     	ds	1
  1887  000064                     MFRC522_ToCard@command:
  1888                           	callstack 0
  1889                           
  1890                           ; 1 bytes @ 0x4
  1891  000064                     	ds	1
  1892  000065                     MFRC522_ToCard@i:
  1893                           	callstack 0
  1894                           
  1895                           ; 2 bytes @ 0x5
  1896  000065                     	ds	2
  1897  000067                     MFRC522_ToCard@n:
  1898                           	callstack 0
  1899                           
  1900                           ; 1 bytes @ 0x7
  1901  000067                     	ds	1
  1902  000068                     ?_M_Read:
  1903                           	callstack 0
  1904  000068                     MFRC522_Request@reqMode:
  1905                           	callstack 0
  1906  000068                     MFRC522_AntiColl@serNumCheck:
  1907                           	callstack 0
  1908  000068                     M_Read@dir:
  1909                           	callstack 0
  1910                           
  1911                           ; 2 bytes @ 0x8
  1912  000068                     	ds	1
  1913  000069                     ??_utoa:
  1914  000069                     MFRC522_Request@_status:
  1915                           	callstack 0
  1916  000069                     MFRC522_AntiColl@unLen:
  1917                           	callstack 0
  1918                           
  1919                           ; 2 bytes @ 0x9
  1920  000069                     	ds	1
  1921  00006A                     ?_dtoa:
  1922                           	callstack 0
  1923  00006A                     M_Read@c_m_r:
  1924                           	callstack 0
  1925  00006A                     dtoa@fp:
  1926                           	callstack 0
  1927  00006A                     MFRC522_Request@backBits:
  1928                           	callstack 0
  1929                           
  1930                           ; 2 bytes @ 0xA
  1931  00006A                     	ds	1
  1932  00006B                     MFRC522_AntiColl@_status:
  1933                           	callstack 0
  1934  00006B                     dtoa@d:
  1935                           	callstack 0
  1936                           
  1937                           ; 8 bytes @ 0xB
  1938  00006B                     	ds	1
  1939  00006C                     MFRC522_AntiColl@i:
  1940                           	callstack 0
  1941                           
  1942                           ; 1 bytes @ 0xC
  1943  00006C                     	ds	1
  1944  00006D                     MFRC522_ReadCardSerial@str:
  1945                           	callstack 0
  1946                           
  1947                           ; 2 bytes @ 0xD
  1948  00006D                     	ds	3
  1949  000070                     ??_M_Read:
  1950                           
  1951                           ; 1 bytes @ 0x10
  1952  000070                     	ds	1
  1953  000071                     utoa@p:
  1954                           	callstack 0
  1955                           
  1956                           ; 2 bytes @ 0x11
  1957  000071                     	ds	2
  1958  000073                     ??_dtoa:
  1959  000073                     utoa@w:
  1960                           	callstack 0
  1961                           
  1962                           ; 2 bytes @ 0x13
  1963  000073                     	ds	2
  1964  000075                     utoa@n:
  1965                           	callstack 0
  1966                           
  1967                           ; 8 bytes @ 0x15
  1968  000075                     	ds	4
  1969  000079                     M_Read@MD_1:
  1970                           	callstack 0
  1971                           
  1972                           ; 1 bytes @ 0x19
  1973  000079                     	ds	1
  1974  00007A                     M_Read@MD_2:
  1975                           	callstack 0
  1976                           
  1977                           ; 1 bytes @ 0x1A
  1978  00007A                     	ds	1
  1979  00007B                     _dtoa$2935:
  1980                           	callstack 0
  1981  00007B                     M_Read@MR_Dato:
  1982                           	callstack 0
  1983                           
  1984                           ; 8 bytes @ 0x1B
  1985  00007B                     	ds	2
  1986  00007D                     dtoa@p:
  1987                           	callstack 0
  1988  00007D                     utoa@i:
  1989                           	callstack 0
  1990                           
  1991                           ; 2 bytes @ 0x1D
  1992  00007D                     	ds	2
  1993  00007F                     dtoa@w:
  1994                           	callstack 0
  1995                           
  1996                           ; 2 bytes @ 0x1F
  1997  00007F                     	ds	2
  1998  000081                     dtoa@s:
  1999                           	callstack 0
  2000                           
  2001                           ; 2 bytes @ 0x21
  2002  000081                     	ds	2
  2003  000083                     M_Read@i:
  2004                           	callstack 0
  2005  000083                     dtoa@n:
  2006                           	callstack 0
  2007                           
  2008                           ; 8 bytes @ 0x23
  2009  000083                     	ds	1
  2010  000084                     ??_EEPROM_init:
  2011  000084                     ??_User_Scan:
  2012  000084                     Read_Hash_ex@cod_rfid:
  2013                           	callstack 0
  2014                           
  2015                           ; 8 bytes @ 0x24
  2016  000084                     	ds	7
  2017  00008B                     dtoa@i:
  2018                           	callstack 0
  2019                           
  2020                           ; 2 bytes @ 0x2B
  2021  00008B                     	ds	1
  2022  00008C                     ??_Read_Hash_ex:
  2023                           
  2024                           ; 1 bytes @ 0x2C
  2025  00008C                     	ds	1
  2026  00008D                     ?_vfpfcnvrt:
  2027                           	callstack 0
  2028  00008D                     vfpfcnvrt@fp:
  2029                           	callstack 0
  2030                           
  2031                           ; 1 bytes @ 0x2D
  2032  00008D                     	ds	1
  2033  00008E                     vfpfcnvrt@fmt:
  2034                           	callstack 0
  2035                           
  2036                           ; 1 bytes @ 0x2E
  2037  00008E                     	ds	1
  2038  00008F                     vfpfcnvrt@ap:
  2039                           	callstack 0
  2040                           
  2041                           ; 1 bytes @ 0x2F
  2042  00008F                     	ds	1
  2043  000090                     ??_vfpfcnvrt:
  2044                           
  2045                           ; 1 bytes @ 0x30
  2046  000090                     	ds	4
  2047  000094                     Task2@Maquina_Estado:
  2048                           	callstack 0
  2049  000094                     Num_User@hash:
  2050                           	callstack 0
  2051                           
  2052                           ; 8 bytes @ 0x34
  2053  000094                     	ds	1
  2054  000095                     ??_Task2:
  2055                           
  2056                           ; 1 bytes @ 0x35
  2057  000095                     	ds	7
  2058  00009C                     ??_Num_User:
  2059                           
  2060                           ; 1 bytes @ 0x3C
  2061  00009C                     	ds	1
  2062  00009D                     vfpfcnvrt@done:
  2063                           	callstack 0
  2064                           
  2065                           ; 2 bytes @ 0x3D
  2066  00009D                     	ds	2
  2067  00009F                     _vfpfcnvrt$2957:
  2068                           	callstack 0
  2069                           
  2070                           ; 2 bytes @ 0x3F
  2071  00009F                     	ds	2
  2072  0000A1                     vfpfcnvrt@ll:
  2073                           	callstack 0
  2074                           
  2075                           ; 8 bytes @ 0x41
  2076  0000A1                     	ds	8
  2077  0000A9                     vfpfcnvrt@llu:
  2078                           	callstack 0
  2079                           
  2080                           ; 8 bytes @ 0x49
  2081  0000A9                     	ds	8
  2082  0000B1                     ?_vfprintf:
  2083                           	callstack 0
  2084  0000B1                     vfprintf@fp:
  2085                           	callstack 0
  2086                           
  2087                           ; 1 bytes @ 0x51
  2088  0000B1                     	ds	1
  2089  0000B2                     vfprintf@fmt:
  2090                           	callstack 0
  2091                           
  2092                           ; 2 bytes @ 0x52
  2093  0000B2                     	ds	2
  2094  0000B4                     vfprintf@ap:
  2095                           	callstack 0
  2096                           
  2097                           ; 1 bytes @ 0x54
  2098  0000B4                     	ds	1
  2099  0000B5                     vfprintf@cfmt:
  2100                           	callstack 0
  2101                           
  2102                           ; 2 bytes @ 0x55
  2103  0000B5                     	ds	2
  2104  0000B7                     ?_sprintf:
  2105                           	callstack 0
  2106  0000B7                     sprintf@s:
  2107                           	callstack 0
  2108                           
  2109                           ; 2 bytes @ 0x57
  2110  0000B7                     	ds	2
  2111  0000B9                     sprintf@fmt:
  2112                           	callstack 0
  2113                           
  2114                           ; 2 bytes @ 0x59
  2115  0000B9                     	ds	12
  2116  0000C5                     sprintf@ap:
  2117                           	callstack 0
  2118                           
  2119                           ; 1 bytes @ 0x65
  2120  0000C5                     	ds	1
  2121  0000C6                     sprintf@f:
  2122                           	callstack 0
  2123                           
  2124                           ; 6 bytes @ 0x66
  2125  0000C6                     	ds	6
  2126  0000CC                     ??_E_pant1_Lcd:
  2127  0000CC                     ??_E_pant2_Lcd:
  2128  0000CC                     ??_E_Rtc_Lcd:
  2129  0000CC                     ??_ACN_PA_Com:
  2130  0000CC                     ??_ACN_CO_Com:
  2131  0000CC                     M_Write@dir:
  2132                           	callstack 0
  2133  0000CC                     Write_User@dir:
  2134                           	callstack 0
  2135                           
  2136                           ; 2 bytes @ 0x6C
  2137  0000CC                     	ds	1
  2138  0000CD                     E_pant2_Lcd@buffer2:
  2139                           	callstack 0
  2140                           
  2141                           ; 10 bytes @ 0x6D
  2142  0000CD                     	ds	1
  2143  0000CE                     Write_User@usuario:
  2144                           	callstack 0
  2145  0000CE                     M_Write@mw_dato:
  2146                           	callstack 0
  2147  0000CE                     E_Rtc_Lcd@buffer:
  2148                           	callstack 0
  2149  0000CE                     ACN_PA_Com@buffer:
  2150                           	callstack 0
  2151  0000CE                     ACN_CO_Com@buffer:
  2152                           	callstack 0
  2153  0000CE                     E_pant1_Lcd@buffer:
  2154                           	callstack 0
  2155                           
  2156                           ; 20 bytes @ 0x6E
  2157  0000CE                     	ds	1
  2158  0000CF                     Write_User@buffer:
  2159                           	callstack 0
  2160                           
  2161                           ; 5 bytes @ 0x6F
  2162  0000CF                     	ds	5
  2163  0000D4                     Write_User@MD_1:
  2164                           	callstack 0
  2165                           
  2166                           ; 1 bytes @ 0x74
  2167  0000D4                     	ds	1
  2168  0000D5                     Write_User@MD_2:
  2169                           	callstack 0
  2170                           
  2171                           ; 1 bytes @ 0x75
  2172  0000D5                     	ds	1
  2173  0000D6                     Sum_Cant_Usuarios@cant_usuario:
  2174                           	callstack 0
  2175                           
  2176                           ; 1 bytes @ 0x76
  2177  0000D6                     	ds	1
  2178  0000D7                     ??_Rfid_Lcd:
  2179  0000D7                     E_pant2_Lcd@buffer:
  2180                           	callstack 0
  2181                           
  2182                           ; 5 bytes @ 0x77
  2183  0000D7                     	ds	1
  2184  0000D8                     
  2185                           ; 1 bytes @ 0x78
  2186  0000D8                     	ds	1
  2187  0000D9                     Task_Com_USART@aux2:
  2188                           	callstack 0
  2189  0000D9                     E_Teclado_Lcd@buffer:
  2190                           	callstack 0
  2191                           
  2192                           ; 10 bytes @ 0x79
  2193  0000D9                     	ds	1
  2194  0000DA                     Task_Com_USART@i:
  2195                           	callstack 0
  2196                           
  2197                           ; 1 bytes @ 0x7A
  2198  0000DA                     	ds	8
  2199  0000E2                     E_pant1_Lcd@llave:
  2200                           	callstack 0
  2201                           
  2202                           ; 5 bytes @ 0x82
  2203  0000E2                     	ds	5
  2204  0000E7                     E_pant1_Lcd@aux2:
  2205                           	callstack 0
  2206                           
  2207                           ; 1 bytes @ 0x87
  2208  0000E7                     	ds	1
  2209  0000E8                     E_pant1_Lcd@i:
  2210                           	callstack 0
  2211                           
  2212                           ; 1 bytes @ 0x88
  2213  0000E8                     	ds	1
  2214  0000E9                     Task1@Pantalla:
  2215                           	callstack 0
  2216                           
  2217                           ; 1 bytes @ 0x89
  2218  0000E9                     	ds	1
  2219  0000EA                     
  2220                           ; 1 bytes @ 0x8A
  2221  0000EA                     	ds	1
  2222  0000EB                     ??_main:
  2223                           
  2224                           ; 1 bytes @ 0x8B
  2225  0000EB                     	ds	2
  2226  0000ED                     main@aux_portd:
  2227                           	callstack 0
  2228                           
  2229                           ; 1 bytes @ 0x8D
  2230  0000ED                     	ds	1
  2231  0000EE                     main@Est_proj:
  2232                           	callstack 0
  2233                           
  2234                           ; 1 bytes @ 0x8E
  2235  0000EE                     	ds	1
  2236  0000EF                     main@Est_pant:
  2237                           	callstack 0
  2238                           
  2239                           ; 1 bytes @ 0x8F
  2240  0000EF                     	ds	1
  2241                           
  2242                           	psect	cstackCOMRAM
  2243  000001                     __pcstackCOMRAM:
  2244                           	callstack 0
  2245  000001                     ??_antirrebote:
  2246  000001                     ?i2___wmul:
  2247                           	callstack 0
  2248  000001                     i2___wmul@multiplier:
  2249                           	callstack 0
  2250                           
  2251                           ; 2 bytes @ 0x0
  2252  000001                     	ds	2
  2253  000003                     i2___wmul@multiplicand:
  2254                           	callstack 0
  2255                           
  2256                           ; 2 bytes @ 0x2
  2257  000003                     	ds	2
  2258  000005                     i2___wmul@product:
  2259                           	callstack 0
  2260                           
  2261                           ; 2 bytes @ 0x4
  2262  000005                     	ds	2
  2263  000007                     ??_ISR_HighP:
  2264                           
  2265                           ; 1 bytes @ 0x6
  2266  000007                     	ds	5
  2267  00000C                     escaneo@j:
  2268                           	callstack 0
  2269  00000C                     i1i2c_write@date:
  2270                           	callstack 0
  2271  00000C                     i1i2c_read@dato:
  2272                           	callstack 0
  2273                           
  2274                           ; 1 bytes @ 0xB
  2275  00000C                     	ds	1
  2276  00000D                     escaneo@i:
  2277                           	callstack 0
  2278  00000D                     i1i2c_write@i:
  2279                           	callstack 0
  2280  00000D                     i1i2c_read@i:
  2281                           	callstack 0
  2282                           
  2283                           ; 1 bytes @ 0xC
  2284  00000D                     	ds	1
  2285  00000E                     RTC_read_time@aux1:
  2286                           	callstack 0
  2287  00000E                     RTC_read_date@aux1:
  2288                           	callstack 0
  2289                           
  2290                           ; 1 bytes @ 0xD
  2291  00000E                     	ds	1
  2292  00000F                     RTC_read_time@aux2:
  2293                           	callstack 0
  2294  00000F                     RTC_read_date@aux2:
  2295                           	callstack 0
  2296                           
  2297                           ; 1 bytes @ 0xE
  2298  00000F                     	ds	1
  2299  000010                     TaskDetected@i:
  2300                           	callstack 0
  2301                           
  2302                           ; 1 bytes @ 0xF
  2303  000010                     	ds	1
  2304  000011                     ??_ISR_LowP:
  2305                           
  2306                           ; 1 bytes @ 0x10
  2307  000011                     	ds	7
  2308  000018                     ??_Read_Com:
  2309  000018                     ?_Soft_SPI_Read:
  2310                           	callstack 0
  2311  000018                     ?_strlen:
  2312                           	callstack 0
  2313  000018                     ?_isdigit:
  2314                           	callstack 0
  2315  000018                     ?_strncmp:
  2316                           	callstack 0
  2317  000018                     ?_isspace:
  2318                           	callstack 0
  2319  000018                     ?___wmul:
  2320                           	callstack 0
  2321  000018                     ?___lmul:
  2322                           	callstack 0
  2323  000018                     ?___aldiv:
  2324                           	callstack 0
  2325  000018                     ?___aodiv:
  2326                           	callstack 0
  2327  000018                     ?___aomod:
  2328                           	callstack 0
  2329  000018                     ?___lodiv:
  2330                           	callstack 0
  2331  000018                     ?___lomod:
  2332                           	callstack 0
  2333  000018                     Soft_SPI_Write@dato_:
  2334                           	callstack 0
  2335  000018                     i2c_write@date:
  2336                           	callstack 0
  2337  000018                     i2c_read@dato:
  2338                           	callstack 0
  2339  000018                     UART_write@dato:
  2340                           	callstack 0
  2341  000018                     ___lbdiv@divisor:
  2342                           	callstack 0
  2343  000018                     UART_array@cadena:
  2344                           	callstack 0
  2345  000018                     ___wmul@multiplier:
  2346                           	callstack 0
  2347  000018                     isdigit@c:
  2348                           	callstack 0
  2349  000018                     isspace@c:
  2350                           	callstack 0
  2351  000018                     fputc@c:
  2352                           	callstack 0
  2353  000018                     strlen@s:
  2354                           	callstack 0
  2355  000018                     strncmp@_l:
  2356                           	callstack 0
  2357  000018                     ___lmul@multiplier:
  2358                           	callstack 0
  2359  000018                     ___aldiv@dividend:
  2360                           	callstack 0
  2361  000018                     ___aodiv@dividend:
  2362                           	callstack 0
  2363  000018                     ___aomod@dividend:
  2364                           	callstack 0
  2365  000018                     ___lodiv@dividend:
  2366                           	callstack 0
  2367  000018                     ___lomod@dividend:
  2368                           	callstack 0
  2369                           
  2370                           ; 8 bytes @ 0x17
  2371  000018                     	ds	1
  2372  000019                     Soft_SPI_Write@cont_s:
  2373                           	callstack 0
  2374  000019                     i2c_write@i:
  2375                           	callstack 0
  2376  000019                     i2c_read@i:
  2377                           	callstack 0
  2378  000019                     ___lbdiv@dividend:
  2379                           	callstack 0
  2380                           
  2381                           ; 1 bytes @ 0x18
  2382  000019                     	ds	1
  2383  00001A                     ??_LCD_command:
  2384  00001A                     ??_isdigit:
  2385  00001A                     ??_isspace:
  2386  00001A                     ??_LCD_date:
  2387  00001A                     ?___omul:
  2388                           	callstack 0
  2389  00001A                     Soft_SPI_Read@dato_:
  2390                           	callstack 0
  2391  00001A                     ___lbdiv@counter:
  2392                           	callstack 0
  2393  00001A                     fputc@fp:
  2394                           	callstack 0
  2395  00001A                     i2c_array@cadena:
  2396                           	callstack 0
  2397  00001A                     Read_User@dir:
  2398                           	callstack 0
  2399  00001A                     ___wmul@multiplicand:
  2400                           	callstack 0
  2401  00001A                     strlen@a:
  2402                           	callstack 0
  2403  00001A                     strncmp@_r:
  2404                           	callstack 0
  2405  00001A                     ___omul@multiplier:
  2406                           	callstack 0
  2407                           
  2408                           ; 8 bytes @ 0x19
  2409  00001A                     	ds	1
  2410  00001B                     ??_fputc:
  2411  00001B                     Soft_SPI_Read@cont_s:
  2412                           	callstack 0
  2413  00001B                     LCD_command@cmd:
  2414                           	callstack 0
  2415  00001B                     LCD_date@date:
  2416                           	callstack 0
  2417  00001B                     ___lbdiv@quotient:
  2418                           	callstack 0
  2419                           
  2420                           ; 1 bytes @ 0x1A
  2421  00001B                     	ds	1
  2422  00001C                     ??_LCD_init:
  2423  00001C                     RTC_send_hora@uni:
  2424                           	callstack 0
  2425  00001C                     RTC_send_fecha@uni:
  2426                           	callstack 0
  2427  00001C                     Read_User@MD_1:
  2428                           	callstack 0
  2429  00001C                     MFRC522_Rd@addr:
  2430                           	callstack 0
  2431  00001C                     LCD_array@x:
  2432                           	callstack 0
  2433  00001C                     ___wmul@product:
  2434                           	callstack 0
  2435  00001C                     strncmp@n:
  2436                           	callstack 0
  2437  00001C                     ___lmul@multiplicand:
  2438                           	callstack 0
  2439  00001C                     ___aldiv@divisor:
  2440                           	callstack 0
  2441                           
  2442                           ; 4 bytes @ 0x1B
  2443  00001C                     	ds	1
  2444  00001D                     RTC_send_hora@dec:
  2445                           	callstack 0
  2446  00001D                     RTC_send_fecha@dec:
  2447                           	callstack 0
  2448  00001D                     Read_User@MD_2:
  2449                           	callstack 0
  2450  00001D                     MFRC522_Rd@value:
  2451                           	callstack 0
  2452                           
  2453                           ; 1 bytes @ 0x1C
  2454  00001D                     	ds	1
  2455  00001E                     ??_strncmp:
  2456  00001E                     LCD_init@i:
  2457                           	callstack 0
  2458  00001E                     Read_User@MR_Dato:
  2459                           	callstack 0
  2460  00001E                     MFRC522_Wr@value:
  2461                           	callstack 0
  2462  00001E                     _isspace$3010:
  2463                           	callstack 0
  2464  00001E                     LCD_array@y:
  2465                           	callstack 0
  2466                           
  2467                           ; 2 bytes @ 0x1D
  2468  00001E                     	ds	1
  2469  00001F                     ?_atoi:
  2470                           	callstack 0
  2471  00001F                     ?_New_User_Pos:
  2472                           	callstack 0
  2473  00001F                     MFRC522_Wr@addr:
  2474                           	callstack 0
  2475  00001F                     Read_Com@i_2100:
  2476                           	callstack 0
  2477  00001F                     atoi@s:
  2478                           	callstack 0
  2479  00001F                     strncmp@l:
  2480                           	callstack 0
  2481                           
  2482                           ; 2 bytes @ 0x1E
  2483  00001F                     	ds	1
  2484  000020                     MFRC522_Clear_Bit@mask:
  2485                           	callstack 0
  2486  000020                     MFRC522_Set_Bit@mask:
  2487                           	callstack 0
  2488  000020                     Read_Com@i:
  2489                           	callstack 0
  2490  000020                     ___aldiv@counter:
  2491                           	callstack 0
  2492  000020                     LCD_array@date:
  2493                           	callstack 0
  2494  000020                     fputs@s:
  2495                           	callstack 0
  2496  000020                     ___lmul@product:
  2497                           	callstack 0
  2498  000020                     ___aodiv@divisor:
  2499                           	callstack 0
  2500  000020                     ___aomod@divisor:
  2501                           	callstack 0
  2502  000020                     ___lodiv@divisor:
  2503                           	callstack 0
  2504  000020                     ___lomod@divisor:
  2505                           	callstack 0
  2506                           
  2507                           ; 8 bytes @ 0x1F
  2508  000020                     	ds	1
  2509  000021                     ??_atoi:
  2510  000021                     ??_New_User_Pos:
  2511  000021                     ??_MFRC522_Clear_Bit:
  2512  000021                     MFRC522_Set_Bit@addr:
  2513                           	callstack 0
  2514  000021                     ___aldiv@sign:
  2515                           	callstack 0
  2516  000021                     strncmp@r:
  2517                           	callstack 0
  2518                           
  2519                           ; 2 bytes @ 0x20
  2520  000021                     	ds	1
  2521  000022                     ??_LCD_array:
  2522  000022                     MFRC522_Clear_Bit@addr:
  2523                           	callstack 0
  2524  000022                     fputs@fp:
  2525                           	callstack 0
  2526  000022                     ___aldiv@quotient:
  2527                           	callstack 0
  2528  000022                     ___omul@multiplicand:
  2529                           	callstack 0
  2530                           
  2531                           ; 8 bytes @ 0x21
  2532  000022                     	ds	1
  2533  000023                     fputs@c:
  2534                           	callstack 0
  2535  000023                     New_User_Pos@Posicion:
  2536                           	callstack 0
  2537  000023                     MFRC522_ToCard@sendData:
  2538                           	callstack 0
  2539                           
  2540                           ; 2 bytes @ 0x22
  2541  000023                     	ds	1
  2542  000024                     ??_Easter_Egg:
  2543  000024                     ?_Hash_algoritmo:
  2544                           	callstack 0
  2545  000024                     fputs@i:
  2546                           	callstack 0
  2547                           
  2548                           ; 2 bytes @ 0x23
  2549  000024                     	ds	1
  2550  000025                     New_User_Pos@cant_user:
  2551                           	callstack 0
  2552  000025                     MFRC522_ToCard@sendLen:
  2553                           	callstack 0
  2554  000025                     atoi@neg:
  2555                           	callstack 0
  2556                           
  2557                           ; 2 bytes @ 0x24
  2558  000025                     	ds	1
  2559  000026                     ?_pad:
  2560                           	callstack 0
  2561  000026                     pad@fp:
  2562                           	callstack 0
  2563  000026                     UART_init@BAUD:
  2564                           	callstack 0
  2565  000026                     MFRC522_ToCard@backData:
  2566                           	callstack 0
  2567                           
  2568                           ; 2 bytes @ 0x25
  2569  000026                     	ds	1
  2570  000027                     pad@buf:
  2571                           	callstack 0
  2572  000027                     _atoi$2992:
  2573                           	callstack 0
  2574                           
  2575                           ; 2 bytes @ 0x26
  2576  000027                     	ds	1
  2577  000028                     ??_Hash_algoritmo:
  2578  000028                     MFRC522_ToCard@backLen:
  2579                           	callstack 0
  2580  000028                     ___aomod@counter:
  2581                           	callstack 0
  2582  000028                     ___lomod@counter:
  2583                           	callstack 0
  2584  000028                     _UART_init$3371:
  2585                           	callstack 0
  2586  000028                     ___lodiv@quotient:
  2587                           	callstack 0
  2588                           
  2589                           ; 8 bytes @ 0x27
  2590  000028                     	ds	1
  2591  000029                     ??_MFRC522_ToCard:
  2592  000029                     ___aomod@sign:
  2593                           	callstack 0
  2594  000029                     pad@p:
  2595                           	callstack 0
  2596  000029                     _atoi$2994:
  2597                           	callstack 0
  2598  000029                     Hash_algoritmo@hash_acum:
  2599                           	callstack 0
  2600                           
  2601                           ; 4 bytes @ 0x28
  2602  000029                     	ds	1
  2603  00002A                     ?_abs:
  2604                           	callstack 0
  2605  00002A                     User_Scan@num_user:
  2606                           	callstack 0
  2607  00002A                     Read_Hash_ex@OK_HASH:
  2608                           	callstack 0
  2609  00002A                     abs@a:
  2610                           	callstack 0
  2611                           
  2612                           ; 2 bytes @ 0x29
  2613  00002A                     	ds	1
  2614  00002B                     ??_pad:
  2615  00002B                     EEPROM_init@MD_2:
  2616                           	callstack 0
  2617  00002B                     User_Scan@user_exist:
  2618                           	callstack 0
  2619  00002B                     Read_Hash_ex@i:
  2620                           	callstack 0
  2621  00002B                     _atoi$2993:
  2622                           	callstack 0
  2623                           
  2624                           ; 1 bytes @ 0x2A
  2625  00002B                     	ds	1
  2626  00002C                     ??_abs:
  2627  00002C                     User_Scan@i:
  2628                           	callstack 0
  2629  00002C                     Read_Hash_ex@pos_hash:
  2630                           	callstack 0
  2631  00002C                     EEPROM_init@j:
  2632                           	callstack 0
  2633  00002C                     pad@i:
  2634                           	callstack 0
  2635  00002C                     atoi@n:
  2636                           	callstack 0
  2637                           
  2638                           ; 2 bytes @ 0x2B
  2639  00002C                     	ds	1
  2640  00002D                     User_Scan@pos:
  2641                           	callstack 0
  2642  00002D                     Num_User@num_user:
  2643                           	callstack 0
  2644  00002D                     Hash_algoritmo@cont:
  2645                           	callstack 0
  2646  00002D                     MFRC522_Request@TagType:
  2647                           	callstack 0
  2648  00002D                     MFRC522_AntiColl@serNum:
  2649                           	callstack 0
  2650                           
  2651                           ; 2 bytes @ 0x2C
  2652  00002D                     	ds	1
  2653  00002E                     EEPROM_init@c_ok:
  2654                           	callstack 0
  2655  00002E                     Num_User@i:
  2656                           	callstack 0
  2657  00002E                     pad@w:
  2658                           	callstack 0
  2659                           
  2660                           ; 2 bytes @ 0x2D
  2661  00002E                     	ds	1
  2662  00002F                     ??_Erase_Eeprom:
  2663  00002F                     Num_User@pos_h:
  2664                           	callstack 0
  2665  00002F                     MFRC522_isCard@TagType:
  2666                           	callstack 0
  2667                           
  2668                           ; 2 bytes @ 0x2E
  2669  00002F                     	ds	1
  2670  000030                     MFRC522_ReadCardSerial@_status:
  2671                           	callstack 0
  2672  000030                     ___lodiv@counter:
  2673                           	callstack 0
  2674                           
  2675                           ; 1 bytes @ 0x2F
  2676  000030                     	ds	1
  2677  000031                     
  2678                           ; 1 bytes @ 0x30
  2679 ;;
  2680 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2681 ;;
  2682 ;; *************** function _main *****************
  2683 ;; Defined at:
  2684 ;;		line 22 in file "Main.c"
  2685 ;; Parameters:    Size  Location     Type
  2686 ;;		None
  2687 ;; Auto vars:     Size  Location     Type
  2688 ;;  Est_pant        1  143[BANK0 ] unsigned char 
  2689 ;;  Est_proj        1  142[BANK0 ] unsigned char 
  2690 ;;  aux_portd       1  141[BANK0 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      void 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 0/0
  2697 ;;		On exit  : 3F/1
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2700 ;;      Params:         0       0       0       0       0       0       0       0       0
  2701 ;;      Locals:         0       3       0       0       0       0       0       0       0
  2702 ;;      Temps:          0       2       0       0       0       0       0       0       0
  2703 ;;      Totals:         0       5       0       0       0       0       0       0       0
  2704 ;;Total ram usage:        5 bytes
  2705 ;; Hardware stack levels required when called:   20
  2706 ;; This function calls:
  2707 ;;		_LCD_array
  2708 ;;		_LCD_command
  2709 ;;		_LCD_init
  2710 ;;		_MFRC522_Init
  2711 ;;		_OS_init
  2712 ;;		_Soft_SPI_Init
  2713 ;;		_TEC4x4_init
  2714 ;;		_Task1
  2715 ;;		_Task2
  2716 ;;		_Task_Com_USART
  2717 ;;		_UART_init
  2718 ;;		_i2c_init
  2719 ;; This function is called by:
  2720 ;;		Startup code after reset
  2721 ;; This function uses a non-reentrant model
  2722 ;;
  2723                           
  2724                           	psect	text0
  2725  00244E                     __ptext0:
  2726                           	callstack 0
  2727  00244E                     _main:
  2728                           	callstack 11
  2729                           
  2730                           ;incstack = 0
  2731  00244E  0E01               	movlw	1
  2732  002450  0100               	movlb	0	; () banked
  2733  002452  6FEF               	movwf	main@Est_pant& (0+255),b
  2734  002454  0E01               	movlw	1
  2735  002456  6FEE               	movwf	main@Est_proj& (0+255),b
  2736                           
  2737                           ;Main.c: 29:     INTCON = 0;
  2738  002458  0E00               	movlw	0
  2739  00245A  6EF2               	movwf	242,c	;volatile
  2740                           
  2741                           ;Main.c: 32:     TRISA = 0xF0;
  2742  00245C  0EF0               	movlw	240
  2743  00245E  6E92               	movwf	146,c	;volatile
  2744                           
  2745                           ; BSR set to: 0
  2746                           ;Main.c: 33:     TRISC = 0xFF;
  2747  002460  6894               	setf	148,c	;volatile
  2748                           
  2749                           ; BSR set to: 0
  2750                           ;Main.c: 34:     TRISD = 0xFF;
  2751  002462  6895               	setf	149,c	;volatile
  2752                           
  2753                           ; BSR set to: 0
  2754                           ;Main.c: 35:     TRISE = 0xFF;
  2755  002464  6896               	setf	150,c	;volatile
  2756                           
  2757                           ;Main.c: 36:     LATC = 0X00;
  2758  002466  0E00               	movlw	0
  2759  002468  6E8B               	movwf	139,c	;volatile
  2760                           
  2761                           ;Main.c: 37:     LATD = 0x00;
  2762  00246A  0E00               	movlw	0
  2763  00246C  6E8C               	movwf	140,c	;volatile
  2764                           
  2765                           ;Main.c: 38:     LATE = 0x00;
  2766  00246E  0E00               	movlw	0
  2767  002470  6E8D               	movwf	141,c	;volatile
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;Main.c: 42:     TRISDbits.TRISD0 = 1,TRISDbits.TRISD1 = 1;
  2771  002472  8095               	bsf	149,0,c	;volatile
  2772                           
  2773                           ; BSR set to: 0
  2774  002474  8295               	bsf	149,1,c	;volatile
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;Main.c: 43:     TRISDbits.TRISD2 = 1,TRISDbits.TRISD3 = 1;
  2778  002476  8495               	bsf	149,2,c	;volatile
  2779                           
  2780                           ; BSR set to: 0
  2781  002478  8695               	bsf	149,3,c	;volatile
  2782                           
  2783                           ; BSR set to: 0
  2784                           ;Main.c: 44:     TRISDbits.TRISD4 = 1;
  2785  00247A  8895               	bsf	149,4,c	;volatile
  2786                           
  2787                           ;Main.c: 48:     ADCON1bits.PCFG = 0b1111;
  2788  00247C  0E0F               	movlw	15
  2789  00247E  12C1               	iorwf	193,f,c	;volatile
  2790                           
  2791                           ;Main.c: 49:     CMCON=7;
  2792  002480  0E07               	movlw	7
  2793  002482  6EB4               	movwf	180,c	;volatile
  2794                           
  2795                           ; BSR set to: 0
  2796                           ;Main.c: 53:     OS_init();
  2797  002484  ECB0  F029         	call	_OS_init	;wreg free
  2798                           
  2799                           ; BSR set to: 0
  2800                           ;Main.c: 54:     UART_init(9600);
  2801  002488  0E25               	movlw	37
  2802  00248A  6E27               	movwf	(UART_init@BAUD+1)^0,c
  2803  00248C  0E80               	movlw	128
  2804  00248E  6E26               	movwf	UART_init@BAUD^0,c
  2805  002490  EC32  F024         	call	_UART_init	;wreg free
  2806                           
  2807                           ;Main.c: 55:     i2c_init();
  2808  002494  EC46  F02A         	call	_i2c_init	;wreg free
  2809                           
  2810                           ;Main.c: 56:     Soft_SPI_Init();
  2811  002498  EC1B  F02A         	call	_Soft_SPI_Init	;wreg free
  2812                           
  2813                           ;Main.c: 57:     LCD_init();
  2814  00249C  ECCC  F021         	call	_LCD_init	;wreg free
  2815                           
  2816                           ;Main.c: 58:     TEC4x4_init();
  2817  0024A0  ECF3  F028         	call	_TEC4x4_init	;wreg free
  2818                           
  2819                           ;Main.c: 59:     MFRC522_Init();
  2820  0024A4  EC08  F027         	call	_MFRC522_Init	;wreg free
  2821                           
  2822                           ;Main.c: 62:     LCD_command(0x01);
  2823  0024A8  0E01               	movlw	1
  2824  0024AA  EC78  F023         	call	_LCD_command
  2825                           
  2826                           ;Main.c: 63:     LCD_array(1,1," ------------------ ");
  2827  0024AE  0E00               	movlw	0
  2828  0024B0  6E1D               	movwf	(LCD_array@x+1)^0,c
  2829  0024B2  0E01               	movlw	1
  2830  0024B4  6E1C               	movwf	LCD_array@x^0,c
  2831  0024B6  0E00               	movlw	0
  2832  0024B8  6E1F               	movwf	(LCD_array@y+1)^0,c
  2833  0024BA  0E01               	movlw	1
  2834  0024BC  6E1E               	movwf	LCD_array@y^0,c
  2835  0024BE  0E5F               	movlw	low STR_131
  2836  0024C0  6E20               	movwf	LCD_array@date^0,c
  2837  0024C2  0E7C               	movlw	high STR_131
  2838  0024C4  6E21               	movwf	(LCD_array@date+1)^0,c
  2839  0024C6  ECB1  F01F         	call	_LCD_array	;wreg free
  2840                           
  2841                           ;Main.c: 64:     LCD_array(2,1,"|    PIC18F4550    |");
  2842  0024CA  0E00               	movlw	0
  2843  0024CC  6E1D               	movwf	(LCD_array@x+1)^0,c
  2844  0024CE  0E02               	movlw	2
  2845  0024D0  6E1C               	movwf	LCD_array@x^0,c
  2846  0024D2  0E00               	movlw	0
  2847  0024D4  6E1F               	movwf	(LCD_array@y+1)^0,c
  2848  0024D6  0E01               	movlw	1
  2849  0024D8  6E1E               	movwf	LCD_array@y^0,c
  2850  0024DA  0E89               	movlw	low STR_132
  2851  0024DC  6E20               	movwf	LCD_array@date^0,c
  2852  0024DE  0E7C               	movlw	high STR_132
  2853  0024E0  6E21               	movwf	(LCD_array@date+1)^0,c
  2854  0024E2  ECB1  F01F         	call	_LCD_array	;wreg free
  2855                           
  2856                           ;Main.c: 65:     LCD_array(3,1,"| MPLAB X IDE XC8  |");
  2857  0024E6  0E00               	movlw	0
  2858  0024E8  6E1D               	movwf	(LCD_array@x+1)^0,c
  2859  0024EA  0E03               	movlw	3
  2860  0024EC  6E1C               	movwf	LCD_array@x^0,c
  2861  0024EE  0E00               	movlw	0
  2862  0024F0  6E1F               	movwf	(LCD_array@y+1)^0,c
  2863  0024F2  0E01               	movlw	1
  2864  0024F4  6E1E               	movwf	LCD_array@y^0,c
  2865  0024F6  0E9E               	movlw	low STR_133
  2866  0024F8  6E20               	movwf	LCD_array@date^0,c
  2867  0024FA  0E7C               	movlw	high STR_133
  2868  0024FC  6E21               	movwf	(LCD_array@date+1)^0,c
  2869  0024FE  ECB1  F01F         	call	_LCD_array	;wreg free
  2870                           
  2871                           ;Main.c: 66:     LCD_array(4,1," ------------------ ");
  2872  002502  0E00               	movlw	0
  2873  002504  6E1D               	movwf	(LCD_array@x+1)^0,c
  2874  002506  0E04               	movlw	4
  2875  002508  6E1C               	movwf	LCD_array@x^0,c
  2876  00250A  0E00               	movlw	0
  2877  00250C  6E1F               	movwf	(LCD_array@y+1)^0,c
  2878  00250E  0E01               	movlw	1
  2879  002510  6E1E               	movwf	LCD_array@y^0,c
  2880  002512  0E5F               	movlw	low STR_131
  2881  002514  6E20               	movwf	LCD_array@date^0,c
  2882  002516  0E7C               	movlw	high STR_131
  2883  002518  6E21               	movwf	(LCD_array@date+1)^0,c
  2884  00251A  ECB1  F01F         	call	_LCD_array	;wreg free
  2885                           
  2886                           ;Main.c: 67:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  2887  00251E  0E3D               	movlw	61
  2888  002520  0100               	movlb	0	; () banked
  2889  002522  6FEC               	movwf	(??_main+1)& (0+255),b
  2890  002524  0EE1               	movlw	225
  2891  002526  6FEB               	movwf	??_main& (0+255),b
  2892  002528  0E3F               	movlw	63
  2893  00252A                     u10997:
  2894  00252A  2EE8               	decfsz	wreg,f,c
  2895  00252C  D7FE               	bra	u10997
  2896  00252E  2FEB               	decfsz	??_main& (0+255),f,b
  2897  002530  D7FC               	bra	u10997
  2898  002532  2FEC               	decfsz	(??_main+1)& (0+255),f,b
  2899  002534  D7FA               	bra	u10997
  2900  002536  D000               	nop2	
  2901                           
  2902                           ;Main.c: 68:     LCD_command(0x01);
  2903  002538  0E01               	movlw	1
  2904  00253A  EC78  F023         	call	_LCD_command
  2905                           
  2906                           ;Main.c: 69:     LCD_array(1,1," ------------------ ");
  2907  00253E  0E00               	movlw	0
  2908  002540  6E1D               	movwf	(LCD_array@x+1)^0,c
  2909  002542  0E01               	movlw	1
  2910  002544  6E1C               	movwf	LCD_array@x^0,c
  2911  002546  0E00               	movlw	0
  2912  002548  6E1F               	movwf	(LCD_array@y+1)^0,c
  2913  00254A  0E01               	movlw	1
  2914  00254C  6E1E               	movwf	LCD_array@y^0,c
  2915  00254E  0E5F               	movlw	low STR_131
  2916  002550  6E20               	movwf	LCD_array@date^0,c
  2917  002552  0E7C               	movlw	high STR_131
  2918  002554  6E21               	movwf	(LCD_array@date+1)^0,c
  2919  002556  ECB1  F01F         	call	_LCD_array	;wreg free
  2920                           
  2921                           ;Main.c: 70:     LCD_array(2,1,"|    MICROCHIP     |");
  2922  00255A  0E00               	movlw	0
  2923  00255C  6E1D               	movwf	(LCD_array@x+1)^0,c
  2924  00255E  0E02               	movlw	2
  2925  002560  6E1C               	movwf	LCD_array@x^0,c
  2926  002562  0E00               	movlw	0
  2927  002564  6E1F               	movwf	(LCD_array@y+1)^0,c
  2928  002566  0E01               	movlw	1
  2929  002568  6E1E               	movwf	LCD_array@y^0,c
  2930  00256A  0E74               	movlw	low STR_136
  2931  00256C  6E20               	movwf	LCD_array@date^0,c
  2932  00256E  0E7C               	movlw	high STR_136
  2933  002570  6E21               	movwf	(LCD_array@date+1)^0,c
  2934  002572  ECB1  F01F         	call	_LCD_array	;wreg free
  2935                           
  2936                           ;Main.c: 71:     LCD_array(3,1," ------------------ ");
  2937  002576  0E00               	movlw	0
  2938  002578  6E1D               	movwf	(LCD_array@x+1)^0,c
  2939  00257A  0E03               	movlw	3
  2940  00257C  6E1C               	movwf	LCD_array@x^0,c
  2941  00257E  0E00               	movlw	0
  2942  002580  6E1F               	movwf	(LCD_array@y+1)^0,c
  2943  002582  0E01               	movlw	1
  2944  002584  6E1E               	movwf	LCD_array@y^0,c
  2945  002586  0E5F               	movlw	low STR_131
  2946  002588  6E20               	movwf	LCD_array@date^0,c
  2947  00258A  0E7C               	movlw	high STR_131
  2948  00258C  6E21               	movwf	(LCD_array@date+1)^0,c
  2949  00258E  ECB1  F01F         	call	_LCD_array	;wreg free
  2950                           
  2951                           ;Main.c: 72:     _delay((unsigned long)((1000)*(48000000/4000.0)));
  2952  002592  0E3D               	movlw	61
  2953  002594  0100               	movlb	0	; () banked
  2954  002596  6FEC               	movwf	(??_main+1)& (0+255),b
  2955  002598  0EE1               	movlw	225
  2956  00259A  6FEB               	movwf	??_main& (0+255),b
  2957  00259C  0E3F               	movlw	63
  2958  00259E                     u11007:
  2959  00259E  2EE8               	decfsz	wreg,f,c
  2960  0025A0  D7FE               	bra	u11007
  2961  0025A2  2FEB               	decfsz	??_main& (0+255),f,b
  2962  0025A4  D7FC               	bra	u11007
  2963  0025A6  2FEC               	decfsz	(??_main+1)& (0+255),f,b
  2964  0025A8  D7FA               	bra	u11007
  2965  0025AA  D000               	nop2	
  2966                           
  2967                           ;Main.c: 73:     LCD_command(0x01);
  2968  0025AC  0E01               	movlw	1
  2969  0025AE  EC78  F023         	call	_LCD_command
  2970                           
  2971                           ;Main.c: 77:     T0CONbits.TMR0ON = 1;
  2972  0025B2  8ED5               	bsf	213,7,c	;volatile
  2973                           
  2974                           ;Main.c: 78:     INTCONbits.TMR0IE = 1;
  2975  0025B4  8AF2               	bsf	242,5,c	;volatile
  2976                           
  2977                           ;Main.c: 79:     INTCONbits.TMR0IF = 1;
  2978  0025B6  84F2               	bsf	242,2,c	;volatile
  2979                           
  2980                           ;Main.c: 83:     TRISEbits.RE0 = 0;
  2981  0025B8  9096               	bcf	150,0,c	;volatile
  2982                           
  2983                           ;Main.c: 84:     TRISEbits.RE1 = 0;
  2984  0025BA  9296               	bcf	150,1,c	;volatile
  2985                           
  2986                           ;Main.c: 85:     TRISDbits.RD6 = 1;
  2987  0025BC  8C95               	bsf	149,6,c	;volatile
  2988                           
  2989                           ;Main.c: 86:     TRISDbits.RD7 = 1;
  2990  0025BE  8E95               	bsf	149,7,c	;volatile
  2991  0025C0                     l12460:
  2992                           
  2993                           ;Main.c: 117:     {;Main.c: 119:         aux_portd = PORTD;
  2994  0025C0  CF83 F0ED          	movff	3971,main@aux_portd	;volatile
  2995                           
  2996                           ;Main.c: 120:         key = aux_portd & 0x1F;
  2997  0025C4  0100               	movlb	0	; () banked
  2998  0025C6  51ED               	movf	main@aux_portd& (0+255),w,b
  2999  0025C8  0B1F               	andlw	31
  3000  0025CA  0101               	movlb	1	; () banked
  3001  0025CC  6F82               	movwf	_key& (0+255),b
  3002                           
  3003                           ;Main.c: 123:         switch(Running)
  3004  0025CE  D03B               	goto	l12506
  3005  0025D0                     l1769:
  3006                           
  3007                           ; BSR set to: 0
  3008  0025D0  0004               	clrwdt		;# 
  3009                           
  3010                           ;Main.c: 131:             break;
  3011  0025D2  D7F6               	goto	l12460
  3012  0025D4                     l12464:
  3013                           
  3014                           ; BSR set to: 0
  3015                           ;Main.c: 135:             {;Main.c: 136:                 if(Task1_Est)
  3016  0025D4  0101               	movlb	1	; () banked
  3017  0025D6  5181               	movf	_Task1_Est& (0+255),w,b
  3018  0025D8  B4D8               	btfsc	status,2,c
  3019  0025DA  D7F2               	goto	l12460
  3020                           
  3021                           ; BSR set to: 1
  3022                           ;Main.c: 137:                 {;Main.c: 138:                     Task1_Est = 2;
  3023  0025DC  0E02               	movlw	2
  3024  0025DE  6F81               	movwf	_Task1_Est& (0+255),b
  3025                           
  3026                           ; BSR set to: 1
  3027                           ;Main.c: 139:                     Task1(&Est_pant);
  3028  0025E0  0EEF               	movlw	low main@Est_pant
  3029  0025E2  0100               	movlb	0	; () banked
  3030  0025E4  6FE9               	movwf	Task1@Pantalla& (0+255),b
  3031  0025E6  ECB8  F01C         	call	_Task1	;wreg free
  3032                           
  3033                           ;Main.c: 140:                     Task1_Est = 0;
  3034  0025EA  0E00               	movlw	0
  3035  0025EC  0101               	movlb	1	; () banked
  3036  0025EE  6F81               	movwf	_Task1_Est& (0+255),b
  3037                           
  3038                           ; BSR set to: 1
  3039                           ;Main.c: 141:                     Timer_Task1 = 7;
  3040  0025F0  0E07               	movlw	7
  3041  0025F2  6FE8               	movwf	_Timer_Task1& (0+255),b
  3042                           
  3043                           ; BSR set to: 1
  3044                           ;Main.c: 144:                     if(Task2_Est == 0) Running=0;
  3045  0025F4  5180               	movf	_Task2_Est& (0+255),w,b
  3046  0025F6  A4D8               	btfss	status,2,c
  3047  0025F8  D7E3               	goto	l12460
  3048  0025FA                     u10940:
  3049                           
  3050                           ; BSR set to: 1
  3051  0025FA  0E00               	movlw	0
  3052  0025FC  6F7F               	movwf	_Running& (0+255),b
  3053  0025FE  D7E0               	goto	l12460
  3054  002600                     l12478:
  3055                           
  3056                           ; BSR set to: 0
  3057                           ;Main.c: 150:             {;Main.c: 151:                 if(Task2_Est)
  3058  002600  0101               	movlb	1	; () banked
  3059  002602  5180               	movf	_Task2_Est& (0+255),w,b
  3060  002604  B4D8               	btfsc	status,2,c
  3061  002606  D7DC               	goto	l12460
  3062                           
  3063                           ; BSR set to: 1
  3064                           ;Main.c: 152:                 {;Main.c: 153:                     Task2_Est = 2;
  3065  002608  0E02               	movlw	2
  3066  00260A  6F80               	movwf	_Task2_Est& (0+255),b
  3067                           
  3068                           ; BSR set to: 1
  3069                           ;Main.c: 154:                     Task2(&Est_proj);
  3070  00260C  0EEE               	movlw	low main@Est_proj
  3071  00260E  0100               	movlb	0	; () banked
  3072  002610  6F94               	movwf	Task2@Maquina_Estado& (0+255),b
  3073  002612  EC81  F025         	call	_Task2	;wreg free
  3074                           
  3075                           ; BSR set to: 0
  3076                           ;Main.c: 155:                     Task2_Est = 0;
  3077  002616  0E00               	movlw	0
  3078  002618  0101               	movlb	1	; () banked
  3079  00261A  6F80               	movwf	_Task2_Est& (0+255),b
  3080                           
  3081                           ; BSR set to: 1
  3082                           ;Main.c: 156:                     Timer_Task2 = 7;
  3083  00261C  0E07               	movlw	7
  3084  00261E  6FE7               	movwf	_Timer_Task2& (0+255),b
  3085                           
  3086                           ; BSR set to: 1
  3087                           ;Main.c: 159:                     if(Task1_Est == 0) Running=0;
  3088  002620  5181               	movf	_Task1_Est& (0+255),w,b
  3089  002622  B4D8               	btfsc	status,2,c
  3090  002624  D7EA               	goto	u10940
  3091  002626  D7CC               	goto	l12460
  3092  002628                     l1777:
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;Main.c: 167:             {;Main.c: 169:                 GIEH = 0;
  3096  002628  9EF2               	bcf	4082,7,c	;volatile
  3097                           
  3098                           ;Main.c: 170:                 GIEL = 0;
  3099  00262A  9CF2               	bcf	4082,6,c	;volatile
  3100                           
  3101                           ; BSR set to: 0
  3102                           ;Main.c: 173:                 Task_Com_USART();
  3103  00262C  EC18  F01E         	call	_Task_Com_USART	;wreg free
  3104                           
  3105                           ; BSR set to: 1
  3106                           ;Main.c: 174:                 if(!Task1_Est && !Task2_Est) Running=0;
  3107  002630  5181               	movf	_Task1_Est& (0+255),w,b
  3108  002632  A4D8               	btfss	status,2,c
  3109  002634  D005               	goto	l12500
  3110                           
  3111                           ; BSR set to: 1
  3112  002636  5180               	movf	_Task2_Est& (0+255),w,b
  3113  002638  A4D8               	btfss	status,2,c
  3114  00263A  D002               	goto	l12500
  3115                           
  3116                           ; BSR set to: 1
  3117  00263C  0E00               	movlw	0
  3118  00263E  6F7F               	movwf	_Running& (0+255),b
  3119  002640                     l12500:
  3120                           
  3121                           ; BSR set to: 1
  3122                           ;Main.c: 177:                 GIEH = 1;
  3123  002640  8EF2               	bsf	4082,7,c	;volatile
  3124                           
  3125                           ; BSR set to: 1
  3126                           ;Main.c: 178:                 GIEL = 1;
  3127  002642  8CF2               	bsf	4082,6,c	;volatile
  3128                           
  3129                           ;Main.c: 180:             break;
  3130  002644  D7BD               	goto	l12460
  3131  002646                     l12506:
  3132                           
  3133                           ; BSR set to: 1
  3134  002646  517F               	movf	_Running& (0+255),w,b
  3135  002648  0100               	movlb	0	; () banked
  3136  00264A  6FEB               	movwf	??_main& (0+255),b
  3137  00264C  6BEC               	clrf	(??_main+1)& (0+255),b
  3138                           
  3139                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3140                           ; Switch size 1, requested type "simple"
  3141                           ; Number of cases is 1, Range of values is 0 to 0
  3142                           ; switch strategies available:
  3143                           ; Name         Instructions Cycles
  3144                           ; simple_byte            4     3 (average)
  3145                           ;	Chosen strategy is simple_byte
  3146  00264E  51EC               	movf	(??_main+1)& (0+255),w,b
  3147  002650  0A00               	xorlw	0	; case 0
  3148  002652  A4D8               	btfss	status,2,c
  3149  002654  D7B5               	goto	l12460
  3150                           
  3151                           ; BSR set to: 0
  3152                           ; Switch size 1, requested type "simple"
  3153                           ; Number of cases is 4, Range of values is 0 to 3
  3154                           ; switch strategies available:
  3155                           ; Name         Instructions Cycles
  3156                           ; simple_byte           13     7 (average)
  3157                           ;	Chosen strategy is simple_byte
  3158  002656  51EB               	movf	??_main& (0+255),w,b
  3159  002658  0A00               	xorlw	0	; case 0
  3160  00265A  B4D8               	btfsc	status,2,c
  3161  00265C  D7B9               	goto	l1769
  3162  00265E  0A01               	xorlw	1	; case 1
  3163  002660  B4D8               	btfsc	status,2,c
  3164  002662  D7B8               	goto	l12464
  3165  002664  0A03               	xorlw	3	; case 2
  3166  002666  B4D8               	btfsc	status,2,c
  3167  002668  D7CB               	goto	l12478
  3168  00266A  0A01               	xorlw	1	; case 3
  3169  00266C  B4D8               	btfsc	status,2,c
  3170  00266E  D7DC               	goto	l1777
  3171                           
  3172                           ; BSR set to: 1
  3173  002670  D7A7               	goto	l12460
  3174  002672                     __end_of_main:
  3175                           	callstack 0
  3176                           
  3177 ;; *************** function _i2c_init *****************
  3178 ;; Defined at:
  3179 ;;		line 6 in file "SOFT_I2C.c"
  3180 ;; Parameters:    Size  Location     Type
  3181 ;;		None
  3182 ;; Auto vars:     Size  Location     Type
  3183 ;;		None
  3184 ;; Return value:  Size  Location     Type
  3185 ;;                  1    wreg      void 
  3186 ;; Registers used:
  3187 ;;		None
  3188 ;; Tracked objects:
  3189 ;;		On entry : 0/0
  3190 ;;		On exit  : 0/0
  3191 ;;		Unchanged: 0/0
  3192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3193 ;;      Params:         0       0       0       0       0       0       0       0       0
  3194 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3195 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3196 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3197 ;;Total ram usage:        0 bytes
  3198 ;; Hardware stack levels used:    1
  3199 ;; Hardware stack levels required when called:    7
  3200 ;; This function calls:
  3201 ;;		Nothing
  3202 ;; This function is called by:
  3203 ;;		_main
  3204 ;; This function uses a non-reentrant model
  3205 ;;
  3206                           
  3207                           	psect	text1
  3208  00548C                     __ptext1:
  3209                           	callstack 0
  3210  00548C                     _i2c_init:
  3211                           	callstack 23
  3212                           
  3213                           ;SOFT_I2C.c: 8:     TRISCbits.TRISC0 = 1;
  3214                           
  3215                           ; BSR set to: 1
  3216                           ;incstack = 0
  3217  00548C  8094               	bsf	148,0,c	;volatile
  3218                           
  3219                           ;SOFT_I2C.c: 9:     TRISCbits.TRISC1 = 1;
  3220  00548E  8294               	bsf	148,1,c	;volatile
  3221                           
  3222                           ;SOFT_I2C.c: 11:     return;
  3223  005490  0012               	return		;funcret
  3224  005492                     __end_of_i2c_init:
  3225                           	callstack 0
  3226                           
  3227 ;; *************** function _UART_init *****************
  3228 ;; Defined at:
  3229 ;;		line 10 in file "UART_com.c"
  3230 ;; Parameters:    Size  Location     Type
  3231 ;;  BAUD            2   37[COMRAM] unsigned int 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;		None
  3234 ;; Return value:  Size  Location     Type
  3235 ;;                  1    wreg      void 
  3236 ;; Registers used:
  3237 ;;		wreg, status,2, status,0, cstack
  3238 ;; Tracked objects:
  3239 ;;		On entry : 3F/0
  3240 ;;		On exit  : 0/0
  3241 ;;		Unchanged: 0/0
  3242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3243 ;;      Params:         2       0       0       0       0       0       0       0       0
  3244 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3245 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3246 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3247 ;;Total ram usage:        6 bytes
  3248 ;; Hardware stack levels used:    1
  3249 ;; Hardware stack levels required when called:    8
  3250 ;; This function calls:
  3251 ;;		___aldiv
  3252 ;; This function is called by:
  3253 ;;		_main
  3254 ;; This function uses a non-reentrant model
  3255 ;;
  3256                           
  3257                           	psect	text2
  3258  004864                     __ptext2:
  3259                           	callstack 0
  3260  004864                     _UART_init:
  3261                           	callstack 22
  3262                           
  3263                           ; BSR set to: 0
  3264                           ;UART_com.c: 10: void UART_init(unsigned int BAUD);UART_com.c: 11: {;UART_com.c: 13:    
      +                           TRISCbits.TRISC7 = 1;
  3265                           
  3266                           ;incstack = 0
  3267  004864  8E94               	bsf	148,7,c	;volatile
  3268                           
  3269                           ;UART_com.c: 14:     TRISCbits.TRISC6 = 0;
  3270  004866  9C94               	bcf	148,6,c	;volatile
  3271                           
  3272                           ;UART_com.c: 18:     TXSTAbits.BRGH = 0;
  3273  004868  94AC               	bcf	172,2,c	;volatile
  3274                           
  3275                           ; BSR set to: 0
  3276                           ;UART_com.c: 19:     SPBRG = (unsigned char) (((48000000 / BAUD) / 64) - 1);
  3277  00486A  C026  F01C         	movff	UART_init@BAUD,___aldiv@divisor
  3278  00486E  C027  F01D         	movff	UART_init@BAUD+1,___aldiv@divisor+1
  3279  004872  6A1E               	clrf	(___aldiv@divisor+2)^0,c
  3280  004874  6A1F               	clrf	(___aldiv@divisor+3)^0,c
  3281  004876  0E00               	movlw	0
  3282  004878  6E18               	movwf	___aldiv@dividend^0,c
  3283  00487A  0E6C               	movlw	108
  3284  00487C  6E19               	movwf	(___aldiv@dividend+1)^0,c
  3285  00487E  0EDC               	movlw	220
  3286  004880  6E1A               	movwf	(___aldiv@dividend+2)^0,c
  3287  004882  0E02               	movlw	2
  3288  004884  6E1B               	movwf	(___aldiv@dividend+3)^0,c
  3289  004886  ECE7  F01E         	call	___aldiv	;wreg free
  3290  00488A  C018  F028         	movff	?___aldiv,_UART_init$3371
  3291  00488E  C019  F029         	movff	?___aldiv+1,_UART_init$3371+1
  3292  004892  C01A  F02A         	movff	?___aldiv+2,_UART_init$3371+2
  3293  004896  C01B  F02B         	movff	?___aldiv+3,_UART_init$3371+3
  3294                           
  3295                           ;UART_com.c: 19:     SPBRG = (unsigned char) (((48000000 / BAUD) / 64) - 1);
  3296  00489A  C028  F018         	movff	_UART_init$3371,___aldiv@dividend
  3297  00489E  C029  F019         	movff	_UART_init$3371+1,___aldiv@dividend+1
  3298  0048A2  C02A  F01A         	movff	_UART_init$3371+2,___aldiv@dividend+2
  3299  0048A6  C02B  F01B         	movff	_UART_init$3371+3,___aldiv@dividend+3
  3300  0048AA  0E40               	movlw	64
  3301  0048AC  6E1C               	movwf	___aldiv@divisor^0,c
  3302  0048AE  0E00               	movlw	0
  3303  0048B0  6E1D               	movwf	(___aldiv@divisor+1)^0,c
  3304  0048B2  0E00               	movlw	0
  3305  0048B4  6E1E               	movwf	(___aldiv@divisor+2)^0,c
  3306  0048B6  0E00               	movlw	0
  3307  0048B8  6E1F               	movwf	(___aldiv@divisor+3)^0,c
  3308  0048BA  ECE7  F01E         	call	___aldiv	;wreg free
  3309  0048BE  0418               	decf	?___aldiv^0,w,c
  3310  0048C0  6EAF               	movwf	175,c	;volatile
  3311                           
  3312                           ;UART_com.c: 22:     TXSTAbits.SYNC = 0;
  3313  0048C2  98AC               	bcf	172,4,c	;volatile
  3314                           
  3315                           ;UART_com.c: 25:     RCSTAbits.SPEN = 1;
  3316  0048C4  8EAB               	bsf	171,7,c	;volatile
  3317                           
  3318                           ;UART_com.c: 29:     TXSTAbits.TX9 = 0;
  3319  0048C6  9CAC               	bcf	172,6,c	;volatile
  3320                           
  3321                           ;UART_com.c: 30:     TXSTAbits.TXEN = 1;
  3322  0048C8  8AAC               	bsf	172,5,c	;volatile
  3323                           
  3324                           ;UART_com.c: 33:     RCSTAbits.CREN = 1;
  3325  0048CA  88AB               	bsf	171,4,c	;volatile
  3326                           
  3327                           ;UART_com.c: 34:     RCSTAbits.RC9 = 0;
  3328  0048CC  9CAB               	bcf	171,6,c	;volatile
  3329                           
  3330                           ;UART_com.c: 38:     INTCONbits.GIE = 1;
  3331  0048CE  8EF2               	bsf	242,7,c	;volatile
  3332                           
  3333                           ;UART_com.c: 39:     PIE1bits.RCIE = 1;
  3334  0048D0  8A9D               	bsf	157,5,c	;volatile
  3335                           
  3336                           ;UART_com.c: 40:     IPR1bits.RCIP = 1;
  3337  0048D2  8A9F               	bsf	159,5,c	;volatile
  3338                           
  3339                           ;UART_com.c: 41:     INTCONbits.PEIE = 1;
  3340  0048D4  8CF2               	bsf	242,6,c	;volatile
  3341  0048D6  0012               	return		;funcret
  3342  0048D8                     __end_of_UART_init:
  3343                           	callstack 0
  3344                           
  3345 ;; *************** function ___aldiv *****************
  3346 ;; Defined at:
  3347 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\aldiv.c"
  3348 ;; Parameters:    Size  Location     Type
  3349 ;;  dividend        4   23[COMRAM] long 
  3350 ;;  divisor         4   27[COMRAM] long 
  3351 ;; Auto vars:     Size  Location     Type
  3352 ;;  quotient        4   33[COMRAM] long 
  3353 ;;  sign            1   32[COMRAM] unsigned char 
  3354 ;;  counter         1   31[COMRAM] unsigned char 
  3355 ;; Return value:  Size  Location     Type
  3356 ;;                  4   23[COMRAM] long 
  3357 ;; Registers used:
  3358 ;;		wreg, status,2, status,0
  3359 ;; Tracked objects:
  3360 ;;		On entry : 0/0
  3361 ;;		On exit  : 0/0
  3362 ;;		Unchanged: 0/0
  3363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3364 ;;      Params:         8       0       0       0       0       0       0       0       0
  3365 ;;      Locals:         6       0       0       0       0       0       0       0       0
  3366 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3367 ;;      Totals:        14       0       0       0       0       0       0       0       0
  3368 ;;Total ram usage:       14 bytes
  3369 ;; Hardware stack levels used:    1
  3370 ;; Hardware stack levels required when called:    7
  3371 ;; This function calls:
  3372 ;;		Nothing
  3373 ;; This function is called by:
  3374 ;;		_UART_init
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377                           
  3378                           	psect	text3
  3379  003DCE                     __ptext3:
  3380                           	callstack 0
  3381  003DCE                     ___aldiv:
  3382                           	callstack 22
  3383                           
  3384                           ;incstack = 0
  3385  003DCE  0E00               	movlw	0
  3386  003DD0  6E21               	movwf	___aldiv@sign^0,c
  3387  003DD2  AE1F               	btfss	(___aldiv@divisor+3)^0,7,c
  3388  003DD4  D00A               	goto	l9000
  3389  003DD6  1E1F               	comf	(___aldiv@divisor+3)^0,f,c
  3390  003DD8  1E1E               	comf	(___aldiv@divisor+2)^0,f,c
  3391  003DDA  1E1D               	comf	(___aldiv@divisor+1)^0,f,c
  3392  003DDC  6C1C               	negf	___aldiv@divisor^0,c
  3393  003DDE  0E00               	movlw	0
  3394  003DE0  221D               	addwfc	(___aldiv@divisor+1)^0,f,c
  3395  003DE2  221E               	addwfc	(___aldiv@divisor+2)^0,f,c
  3396  003DE4  221F               	addwfc	(___aldiv@divisor+3)^0,f,c
  3397  003DE6  0E01               	movlw	1
  3398  003DE8  6E21               	movwf	___aldiv@sign^0,c
  3399  003DEA                     l9000:
  3400  003DEA  AE1B               	btfss	(___aldiv@dividend+3)^0,7,c
  3401  003DEC  D00A               	goto	l9006
  3402  003DEE  1E1B               	comf	(___aldiv@dividend+3)^0,f,c
  3403  003DF0  1E1A               	comf	(___aldiv@dividend+2)^0,f,c
  3404  003DF2  1E19               	comf	(___aldiv@dividend+1)^0,f,c
  3405  003DF4  6C18               	negf	___aldiv@dividend^0,c
  3406  003DF6  0E00               	movlw	0
  3407  003DF8  2219               	addwfc	(___aldiv@dividend+1)^0,f,c
  3408  003DFA  221A               	addwfc	(___aldiv@dividend+2)^0,f,c
  3409  003DFC  221B               	addwfc	(___aldiv@dividend+3)^0,f,c
  3410  003DFE  0E01               	movlw	1
  3411  003E00  1A21               	xorwf	___aldiv@sign^0,f,c
  3412  003E02                     l9006:
  3413  003E02  0E00               	movlw	0
  3414  003E04  6E22               	movwf	___aldiv@quotient^0,c
  3415  003E06  0E00               	movlw	0
  3416  003E08  6E23               	movwf	(___aldiv@quotient+1)^0,c
  3417  003E0A  0E00               	movlw	0
  3418  003E0C  6E24               	movwf	(___aldiv@quotient+2)^0,c
  3419  003E0E  0E00               	movlw	0
  3420  003E10  6E25               	movwf	(___aldiv@quotient+3)^0,c
  3421  003E12  501C               	movf	___aldiv@divisor^0,w,c
  3422  003E14  101D               	iorwf	(___aldiv@divisor+1)^0,w,c
  3423  003E16  101E               	iorwf	(___aldiv@divisor+2)^0,w,c
  3424  003E18  101F               	iorwf	(___aldiv@divisor+3)^0,w,c
  3425  003E1A  B4D8               	btfsc	status,2,c
  3426  003E1C  D02A               	goto	l9028
  3427  003E1E  0E01               	movlw	1
  3428  003E20  6E20               	movwf	___aldiv@counter^0,c
  3429  003E22  D006               	goto	l9014
  3430  003E24                     l9012:
  3431  003E24  90D8               	bcf	status,0,c
  3432  003E26  361C               	rlcf	___aldiv@divisor^0,f,c
  3433  003E28  361D               	rlcf	(___aldiv@divisor+1)^0,f,c
  3434  003E2A  361E               	rlcf	(___aldiv@divisor+2)^0,f,c
  3435  003E2C  361F               	rlcf	(___aldiv@divisor+3)^0,f,c
  3436  003E2E  2A20               	incf	___aldiv@counter^0,f,c
  3437  003E30                     l9014:
  3438  003E30  AE1F               	btfss	(___aldiv@divisor+3)^0,7,c
  3439  003E32  D7F8               	goto	l9012
  3440  003E34                     u7010:
  3441  003E34  90D8               	bcf	status,0,c
  3442  003E36  3622               	rlcf	___aldiv@quotient^0,f,c
  3443  003E38  3623               	rlcf	(___aldiv@quotient+1)^0,f,c
  3444  003E3A  3624               	rlcf	(___aldiv@quotient+2)^0,f,c
  3445  003E3C  3625               	rlcf	(___aldiv@quotient+3)^0,f,c
  3446  003E3E  501C               	movf	___aldiv@divisor^0,w,c
  3447  003E40  5C18               	subwf	___aldiv@dividend^0,w,c
  3448  003E42  501D               	movf	(___aldiv@divisor+1)^0,w,c
  3449  003E44  5819               	subwfb	(___aldiv@dividend+1)^0,w,c
  3450  003E46  501E               	movf	(___aldiv@divisor+2)^0,w,c
  3451  003E48  581A               	subwfb	(___aldiv@dividend+2)^0,w,c
  3452  003E4A  501F               	movf	(___aldiv@divisor+3)^0,w,c
  3453  003E4C  581B               	subwfb	(___aldiv@dividend+3)^0,w,c
  3454  003E4E  A0D8               	btfss	status,0,c
  3455  003E50  D009               	goto	l9024
  3456  003E52  501C               	movf	___aldiv@divisor^0,w,c
  3457  003E54  5E18               	subwf	___aldiv@dividend^0,f,c
  3458  003E56  501D               	movf	(___aldiv@divisor+1)^0,w,c
  3459  003E58  5A19               	subwfb	(___aldiv@dividend+1)^0,f,c
  3460  003E5A  501E               	movf	(___aldiv@divisor+2)^0,w,c
  3461  003E5C  5A1A               	subwfb	(___aldiv@dividend+2)^0,f,c
  3462  003E5E  501F               	movf	(___aldiv@divisor+3)^0,w,c
  3463  003E60  5A1B               	subwfb	(___aldiv@dividend+3)^0,f,c
  3464  003E62  8022               	bsf	___aldiv@quotient^0,0,c
  3465  003E64                     l9024:
  3466  003E64  90D8               	bcf	status,0,c
  3467  003E66  321F               	rrcf	(___aldiv@divisor+3)^0,f,c
  3468  003E68  321E               	rrcf	(___aldiv@divisor+2)^0,f,c
  3469  003E6A  321D               	rrcf	(___aldiv@divisor+1)^0,f,c
  3470  003E6C  321C               	rrcf	___aldiv@divisor^0,f,c
  3471  003E6E  2E20               	decfsz	___aldiv@counter^0,f,c
  3472  003E70  D7E1               	goto	u7010
  3473  003E72                     l9028:
  3474  003E72  5021               	movf	___aldiv@sign^0,w,c
  3475  003E74  B4D8               	btfsc	status,2,c
  3476  003E76  D008               	goto	l9032
  3477  003E78  1E25               	comf	(___aldiv@quotient+3)^0,f,c
  3478  003E7A  1E24               	comf	(___aldiv@quotient+2)^0,f,c
  3479  003E7C  1E23               	comf	(___aldiv@quotient+1)^0,f,c
  3480  003E7E  6C22               	negf	___aldiv@quotient^0,c
  3481  003E80  0E00               	movlw	0
  3482  003E82  2223               	addwfc	(___aldiv@quotient+1)^0,f,c
  3483  003E84  2224               	addwfc	(___aldiv@quotient+2)^0,f,c
  3484  003E86  2225               	addwfc	(___aldiv@quotient+3)^0,f,c
  3485  003E88                     l9032:
  3486  003E88  C022  F018         	movff	___aldiv@quotient,?___aldiv
  3487  003E8C  C023  F019         	movff	___aldiv@quotient+1,?___aldiv+1
  3488  003E90  C024  F01A         	movff	___aldiv@quotient+2,?___aldiv+2
  3489  003E94  C025  F01B         	movff	___aldiv@quotient+3,?___aldiv+3
  3490  003E98  0012               	return		;funcret
  3491  003E9A                     __end_of___aldiv:
  3492                           	callstack 0
  3493                           
  3494 ;; *************** function _Task_Com_USART *****************
  3495 ;; Defined at:
  3496 ;;		line 43 in file "Task_Com_USART.c"
  3497 ;; Parameters:    Size  Location     Type
  3498 ;;		None
  3499 ;; Auto vars:     Size  Location     Type
  3500 ;;  i               1  122[BANK0 ] unsigned char 
  3501 ;;  aux2            1  121[BANK0 ] unsigned char 
  3502 ;; Return value:  Size  Location     Type
  3503 ;;                  1    wreg      void 
  3504 ;; Registers used:
  3505 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3506 ;; Tracked objects:
  3507 ;;		On entry : 0/0
  3508 ;;		On exit  : 3F/1
  3509 ;;		Unchanged: 0/0
  3510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3511 ;;      Params:         0       0       0       0       0       0       0       0       0
  3512 ;;      Locals:         0       2       0       0       0       0       0       0       0
  3513 ;;      Temps:          0       1       0       0       0       0       0       0       0
  3514 ;;      Totals:         0       3       0       0       0       0       0       0       0
  3515 ;;Total ram usage:        3 bytes
  3516 ;; Hardware stack levels used:    1
  3517 ;; Hardware stack levels required when called:   16
  3518 ;; This function calls:
  3519 ;;		_ACN_CO_Com
  3520 ;;		_ACN_CR_Com
  3521 ;;		_ACN_PA_Com
  3522 ;;		_Read_Com
  3523 ;;		_UART_array
  3524 ;;		_UART_write
  3525 ;; This function is called by:
  3526 ;;		_main
  3527 ;; This function uses a non-reentrant model
  3528 ;;
  3529                           
  3530                           	psect	text4
  3531  003C30                     __ptext4:
  3532                           	callstack 0
  3533  003C30                     _Task_Com_USART:
  3534                           	callstack 14
  3535                           
  3536                           ;Task_Com_USART.c: 45:     char i=0,aux2=key;
  3537                           
  3538                           ;incstack = 0
  3539  003C30  0E00               	movlw	0
  3540  003C32  0100               	movlb	0	; () banked
  3541  003C34  6FDA               	movwf	Task_Com_USART@i& (0+255),b
  3542                           
  3543                           ; BSR set to: 0
  3544  003C36  C182  F0D9         	movff	_key,Task_Com_USART@aux2
  3545                           
  3546                           ;Task_Com_USART.c: 48:     while(i < 5)
  3547  003C3A  D039               	goto	l12364
  3548  003C3C                     l12350:
  3549                           
  3550                           ; BSR set to: 0
  3551                           ;Task_Com_USART.c: 49:     {;Task_Com_USART.c: 50:         llave[4-i] = (int)(aux2 % 2);
  3552  003C3C  51DA               	movf	Task_Com_USART@i& (0+255),w,b
  3553  003C3E  08D6               	sublw	low (_llave+4)
  3554  003C40  6ED9               	movwf	fsr2l,c
  3555  003C42  0E00               	movlw	0
  3556  003C44  A0D8               	btfss	status,0,c
  3557  003C46  2AE8               	incf	wreg,f,c
  3558  003C48  0801               	sublw	high (_llave+4)
  3559  003C4A  6EDA               	movwf	fsr2h,c
  3560  003C4C  51D9               	movf	Task_Com_USART@aux2& (0+255),w,b
  3561  003C4E  0B01               	andlw	1
  3562  003C50  6EDF               	movwf	indf2,c
  3563                           
  3564                           ; BSR set to: 0
  3565                           ;Task_Com_USART.c: 51:         aux2 = (int)aux2/2;
  3566  003C52  90D8               	bcf	status,0,c
  3567  003C54  31D9               	rrcf	Task_Com_USART@aux2& (0+255),w,b
  3568  003C56  6FD9               	movwf	Task_Com_USART@aux2& (0+255),b
  3569                           
  3570                           ; BSR set to: 0
  3571                           ;Task_Com_USART.c: 52:         if(llave[4-i] == 0) llave[4-i] = '0';
  3572  003C58  51DA               	movf	Task_Com_USART@i& (0+255),w,b
  3573  003C5A  08D6               	sublw	low (_llave+4)
  3574  003C5C  6ED9               	movwf	fsr2l,c
  3575  003C5E  0E00               	movlw	0
  3576  003C60  A0D8               	btfss	status,0,c
  3577  003C62  2AE8               	incf	wreg,f,c
  3578  003C64  0801               	sublw	high (_llave+4)
  3579  003C66  6EDA               	movwf	fsr2h,c
  3580  003C68  50DF               	movf	indf2,w,c
  3581  003C6A  A4D8               	btfss	status,2,c
  3582  003C6C  D00A               	goto	l12358
  3583                           
  3584                           ; BSR set to: 0
  3585  003C6E  51DA               	movf	Task_Com_USART@i& (0+255),w,b
  3586  003C70  08D6               	sublw	low (_llave+4)
  3587  003C72  6ED9               	movwf	fsr2l,c
  3588  003C74  0E00               	movlw	0
  3589  003C76  A0D8               	btfss	status,0,c
  3590  003C78  2AE8               	incf	wreg,f,c
  3591  003C7A  0801               	sublw	high (_llave+4)
  3592  003C7C  6EDA               	movwf	fsr2h,c
  3593  003C7E  0E30               	movlw	48
  3594  003C80  D014               	goto	L1
  3595  003C82                     l12358:
  3596                           
  3597                           ; BSR set to: 0
  3598  003C82  51DA               	movf	Task_Com_USART@i& (0+255),w,b
  3599  003C84  08D6               	sublw	low (_llave+4)
  3600  003C86  6ED9               	movwf	fsr2l,c
  3601  003C88  0E00               	movlw	0
  3602  003C8A  A0D8               	btfss	status,0,c
  3603  003C8C  2AE8               	incf	wreg,f,c
  3604  003C8E  0801               	sublw	high (_llave+4)
  3605  003C90  6EDA               	movwf	fsr2h,c
  3606  003C92  04DE               	decf	postinc2,w,c
  3607  003C94  A4D8               	btfss	status,2,c
  3608  003C96  D00A               	goto	l12362
  3609                           
  3610                           ; BSR set to: 0
  3611  003C98  51DA               	movf	Task_Com_USART@i& (0+255),w,b
  3612  003C9A  08D6               	sublw	low (_llave+4)
  3613  003C9C  6ED9               	movwf	fsr2l,c
  3614  003C9E  0E00               	movlw	0
  3615  003CA0  A0D8               	btfss	status,0,c
  3616  003CA2  2AE8               	incf	wreg,f,c
  3617  003CA4  0801               	sublw	high (_llave+4)
  3618  003CA6  6EDA               	movwf	fsr2h,c
  3619  003CA8  0E31               	movlw	49
  3620  003CAA                     L1:
  3621  003CAA  6EDF               	movwf	indf2,c
  3622  003CAC                     l12362:
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;Task_Com_USART.c: 54:         i++;
  3626  003CAC  2BDA               	incf	Task_Com_USART@i& (0+255),f,b
  3627  003CAE                     l12364:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;Task_Com_USART.c: 48:     while(i < 5)
  3631  003CAE  0E04               	movlw	4
  3632  003CB0  65DA               	cpfsgt	Task_Com_USART@i& (0+255),b
  3633  003CB2  D7C4               	goto	l12350
  3634                           
  3635                           ; BSR set to: 0
  3636                           ;Task_Com_USART.c: 58:     Read_Com();
  3637                           
  3638                           ; BSR set to: 0
  3639  003CB4  ECEB  F016         	call	_Read_Com	;wreg free
  3640                           
  3641                           ;Task_Com_USART.c: 61:     if(address == key)
  3642  003CB8  0101               	movlb	1	; () banked
  3643  003CBA  5182               	movf	_key& (0+255),w,b
  3644  003CBC  198A               	xorwf	_address& (0+255),w,b
  3645  003CBE  A4D8               	btfss	status,2,c
  3646  003CC0  D012               	goto	l12384
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;Task_Com_USART.c: 62:     {;Task_Com_USART.c: 63:         if(CR == 1) ACN_CR_Com();
  3650  003CC2  0587               	decf	_CR& (0+255),w,b
  3651  003CC4  A4D8               	btfss	status,2,c
  3652  003CC6  D003               	goto	l12376
  3653                           
  3654                           ; BSR set to: 1
  3655  003CC8  EC32  F01A         	call	_ACN_CR_Com	;wreg free
  3656  003CCC  D015               	goto	l12388
  3657  003CCE                     l12376:
  3658                           
  3659                           ; BSR set to: 1
  3660  003CCE  0586               	decf	_PA& (0+255),w,b
  3661  003CD0  A4D8               	btfss	status,2,c
  3662  003CD2  D003               	goto	l12380
  3663                           
  3664                           ; BSR set to: 1
  3665  003CD4  EC31  F00D         	call	_ACN_PA_Com	;wreg free
  3666  003CD8  D00F               	goto	l12388
  3667  003CDA                     l12380:
  3668                           
  3669                           ; BSR set to: 1
  3670  003CDA  0588               	decf	_CO& (0+255),w,b
  3671  003CDC  A4D8               	btfss	status,2,c
  3672  003CDE  D00C               	goto	l12388
  3673                           
  3674                           ; BSR set to: 1
  3675  003CE0  EC0A  F016         	call	_ACN_CO_Com	;wreg free
  3676                           
  3677                           ; BSR set to: 1
  3678                           ;Task_Com_USART.c: 66:     }
  3679  003CE4  D009               	goto	l12388
  3680  003CE6                     l12384:
  3681                           
  3682                           ; BSR set to: 1
  3683  003CE6  0EF4               	movlw	low (STR_103+1)
  3684  003CE8  6E18               	movwf	UART_array@cadena^0,c
  3685  003CEA  0E7F               	movlw	high (STR_103+1)
  3686  003CEC  6E19               	movwf	(UART_array@cadena+1)^0,c
  3687  003CEE  EC65  F026         	call	_UART_array	;wreg free
  3688  003CF2  0E0D               	movlw	13
  3689  003CF4  EC24  F02A         	call	_UART_write
  3690  003CF8                     l12388:
  3691                           
  3692                           ;Task_Com_USART.c: 69:     address = 0;
  3693  003CF8  0E00               	movlw	0
  3694  003CFA  0101               	movlb	1	; () banked
  3695  003CFC  6F8A               	movwf	_address& (0+255),b
  3696                           
  3697                           ; BSR set to: 1
  3698  003CFE  0012               	return		;funcret
  3699  003D00                     __end_of_Task_Com_USART:
  3700                           	callstack 0
  3701                           
  3702 ;; *************** function _Read_Com *****************
  3703 ;; Defined at:
  3704 ;;		line 76 in file "Task_Com_USART.c"
  3705 ;; Parameters:    Size  Location     Type
  3706 ;;		None
  3707 ;; Auto vars:     Size  Location     Type
  3708 ;;  i               1   31[COMRAM] unsigned char 
  3709 ;;  i               1   30[COMRAM] unsigned char 
  3710 ;; Return value:  Size  Location     Type
  3711 ;;                  1    wreg      void 
  3712 ;; Registers used:
  3713 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3714 ;; Tracked objects:
  3715 ;;		On entry : 3F/0
  3716 ;;		On exit  : 3E/0
  3717 ;;		Unchanged: 0/0
  3718 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3719 ;;      Params:         0       0       0       0       0       0       0       0       0
  3720 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3721 ;;      Temps:          7       0       0       0       0       0       0       0       0
  3722 ;;      Totals:         9       0       0       0       0       0       0       0       0
  3723 ;;Total ram usage:        9 bytes
  3724 ;; Hardware stack levels used:    1
  3725 ;; Hardware stack levels required when called:    7
  3726 ;; This function calls:
  3727 ;;		Nothing
  3728 ;; This function is called by:
  3729 ;;		_Task_Com_USART
  3730 ;; This function uses a non-reentrant model
  3731 ;;
  3732                           
  3733                           	psect	text5
  3734  002DD6                     __ptext5:
  3735                           	callstack 0
  3736  002DD6                     _Read_Com:
  3737                           	callstack 22
  3738                           
  3739                           ; BSR set to: 0
  3740                           ;Task_Com_USART.c: 78:     if(Fin_Cad == 1)
  3741                           
  3742                           ; BSR set to: 1
  3743                           ;incstack = 0
  3744  002DD6  043B               	decf	_Fin_Cad^0,w,c
  3745  002DD8  A4D8               	btfss	status,2,c
  3746  002DDA  0012               	return	
  3747                           
  3748                           ; BSR set to: 0
  3749                           ;Task_Com_USART.c: 79:     {;Task_Com_USART.c: 80:         if(( word[0] == '[' ) && ( wo
      +                          rd[long_cad-1] == ']' ))
  3750  002DDC  0E5B               	movlw	91
  3751  002DDE  0101               	movlb	1	; () banked
  3752  002DE0  19B4               	xorwf	_word& (0+255),w,b
  3753  002DE2  A4D8               	btfss	status,2,c
  3754  002DE4  D0C3               	goto	u6760
  3755                           
  3756                           ; BSR set to: 1
  3757  002DE6  0EB3               	movlw	low (_word+65535)
  3758  002DE8  2589               	addwf	_long_cad& (0+255),w,b
  3759  002DEA  6ED9               	movwf	fsr2l,c
  3760  002DEC  6ADA               	clrf	fsr2h,c
  3761  002DEE  0E01               	movlw	high (_word+65535)
  3762  002DF0  22DA               	addwfc	fsr2h,f,c
  3763  002DF2  0E5D               	movlw	93
  3764  002DF4  18DE               	xorwf	postinc2,w,c
  3765  002DF6  A4D8               	btfss	status,2,c
  3766  002DF8  D0B9               	goto	u6760
  3767                           
  3768                           ; BSR set to: 1
  3769                           ;Task_Com_USART.c: 81:         {;Task_Com_USART.c: 83:             for(char i=1;i<=(long
      +                          _cad-2);i++)
  3770  002DFA  0E01               	movlw	1
  3771  002DFC  6E20               	movwf	Read_Com@i^0,c
  3772  002DFE  D09E               	goto	l8720
  3773  002E00                     l8644:
  3774                           
  3775                           ; BSR set to: 1
  3776                           ;Task_Com_USART.c: 84:             {;Task_Com_USART.c: 86:                 if(i >= 1 && 
      +                          i <= 2)
  3777  002E00  5020               	movf	Read_Com@i^0,w,c
  3778  002E02  B4D8               	btfsc	status,2,c
  3779  002E04  D024               	goto	l8666
  3780                           
  3781                           ; BSR set to: 1
  3782  002E06  0E03               	movlw	3
  3783  002E08  6020               	cpfslt	Read_Com@i^0,c
  3784  002E0A  D021               	goto	l8666
  3785                           
  3786                           ; BSR set to: 1
  3787                           ;Task_Com_USART.c: 87:                 {;Task_Com_USART.c: 88:                     if(wo
      +                          rd[1] == 'C' && word[2] == 'O') CO = 1;
  3788  002E0C  0E43               	movlw	67
  3789  002E0E  19B5               	xorwf	(_word+1)& (0+255),w,b
  3790  002E10  A4D8               	btfss	status,2,c
  3791  002E12  D007               	goto	l8654
  3792                           
  3793                           ; BSR set to: 1
  3794  002E14  0E4F               	movlw	79
  3795  002E16  19B6               	xorwf	(_word+2)& (0+255),w,b
  3796  002E18  A4D8               	btfss	status,2,c
  3797  002E1A  D003               	goto	l8654
  3798                           
  3799                           ; BSR set to: 1
  3800  002E1C  0E01               	movlw	1
  3801  002E1E  6F88               	movwf	_CO& (0+255),b
  3802  002E20  D08C               	goto	l8718
  3803  002E22                     l8654:
  3804                           
  3805                           ; BSR set to: 1
  3806  002E22  0E43               	movlw	67
  3807  002E24  19B5               	xorwf	(_word+1)& (0+255),w,b
  3808  002E26  A4D8               	btfss	status,2,c
  3809  002E28  D007               	goto	l8660
  3810                           
  3811                           ; BSR set to: 1
  3812  002E2A  0E52               	movlw	82
  3813  002E2C  19B6               	xorwf	(_word+2)& (0+255),w,b
  3814  002E2E  A4D8               	btfss	status,2,c
  3815  002E30  D003               	goto	l8660
  3816                           
  3817                           ; BSR set to: 1
  3818  002E32  0E01               	movlw	1
  3819  002E34  6F87               	movwf	_CR& (0+255),b
  3820  002E36  D081               	goto	l8718
  3821  002E38                     l8660:
  3822                           
  3823                           ; BSR set to: 1
  3824  002E38  0E50               	movlw	80
  3825  002E3A  19B5               	xorwf	(_word+1)& (0+255),w,b
  3826  002E3C  A4D8               	btfss	status,2,c
  3827  002E3E  D07D               	goto	l8718
  3828                           
  3829                           ; BSR set to: 1
  3830  002E40  0E41               	movlw	65
  3831  002E42  19B6               	xorwf	(_word+2)& (0+255),w,b
  3832  002E44  A4D8               	btfss	status,2,c
  3833  002E46  D079               	goto	l8718
  3834                           
  3835                           ; BSR set to: 1
  3836  002E48  0E01               	movlw	1
  3837  002E4A  6F86               	movwf	_PA& (0+255),b
  3838                           
  3839                           ; BSR set to: 1
  3840  002E4C  D076               	goto	l8718
  3841  002E4E                     l8666:
  3842                           
  3843                           ; BSR set to: 1
  3844  002E4E  0E04               	movlw	4
  3845  002E50  1820               	xorwf	Read_Com@i^0,w,c
  3846  002E52  A4D8               	btfss	status,2,c
  3847  002E54  D019               	goto	l8684
  3848                           
  3849                           ; BSR set to: 1
  3850                           ;Task_Com_USART.c: 94:                 {;Task_Com_USART.c: 95:                     if(wo
      +                          rd[4] == '1') N = 1;
  3851  002E56  0E31               	movlw	49
  3852  002E58  19B8               	xorwf	(_word+4)& (0+255),w,b
  3853  002E5A  A4D8               	btfss	status,2,c
  3854  002E5C  D002               	goto	l8672
  3855                           
  3856                           ; BSR set to: 1
  3857  002E5E  0E01               	movlw	1
  3858  002E60  D011               	goto	L4
  3859  002E62                     l8672:
  3860                           
  3861                           ; BSR set to: 1
  3862  002E62  0E32               	movlw	50
  3863  002E64  19B8               	xorwf	(_word+4)& (0+255),w,b
  3864  002E66  A4D8               	btfss	status,2,c
  3865  002E68  D002               	goto	l8676
  3866                           
  3867                           ; BSR set to: 1
  3868  002E6A  0E02               	movlw	2
  3869  002E6C  D00B               	goto	L4
  3870  002E6E                     l8676:
  3871                           
  3872                           ; BSR set to: 1
  3873  002E6E  0E33               	movlw	51
  3874  002E70  19B8               	xorwf	(_word+4)& (0+255),w,b
  3875  002E72  A4D8               	btfss	status,2,c
  3876  002E74  D002               	goto	l8680
  3877                           
  3878                           ; BSR set to: 1
  3879  002E76  0E03               	movlw	3
  3880  002E78  D005               	goto	L4
  3881  002E7A                     l8680:
  3882                           
  3883                           ; BSR set to: 1
  3884  002E7A  0E34               	movlw	52
  3885  002E7C  19B8               	xorwf	(_word+4)& (0+255),w,b
  3886  002E7E  A4D8               	btfss	status,2,c
  3887  002E80  D05C               	goto	l8718
  3888                           
  3889                           ; BSR set to: 1
  3890  002E82  0E04               	movlw	4
  3891  002E84                     L4:
  3892  002E84  6E3E               	movwf	_N^0,c
  3893  002E86  D059               	goto	l8718
  3894  002E88                     l8684:
  3895                           
  3896                           ; BSR set to: 1
  3897  002E88  0E05               	movlw	5
  3898  002E8A  6420               	cpfsgt	Read_Com@i^0,c
  3899  002E8C  D014               	goto	l8698
  3900                           
  3901                           ; BSR set to: 1
  3902  002E8E  0E0B               	movlw	11
  3903  002E90  6020               	cpfslt	Read_Com@i^0,c
  3904  002E92  D011               	goto	l8698
  3905                           
  3906                           ; BSR set to: 1
  3907                           ;Task_Com_USART.c: 102:                 {;Task_Com_USART.c: 103:                     if(
      +                          word[i] == '1') address |= 1;
  3908  002E94  0EB4               	movlw	low _word
  3909  002E96  2420               	addwf	Read_Com@i^0,w,c
  3910  002E98  6ED9               	movwf	fsr2l,c
  3911  002E9A  6ADA               	clrf	fsr2h,c
  3912  002E9C  0E01               	movlw	high _word
  3913  002E9E  22DA               	addwfc	fsr2h,f,c
  3914  002EA0  0E31               	movlw	49
  3915  002EA2  18DE               	xorwf	postinc2,w,c
  3916  002EA4  B4D8               	btfsc	status,2,c
  3917                           
  3918                           ; BSR set to: 1
  3919  002EA6  818A               	bsf	_address& (0+255),0,b
  3920                           
  3921                           ; BSR set to: 1
  3922                           ;Task_Com_USART.c: 105:                     if(i != 10) address <<= 1;
  3923                           
  3924                           ; BSR set to: 1
  3925  002EA8  0E0A               	movlw	10
  3926  002EAA  1820               	xorwf	Read_Com@i^0,w,c
  3927  002EAC  B4D8               	btfsc	status,2,c
  3928  002EAE  D045               	goto	l8718
  3929                           
  3930                           ; BSR set to: 1
  3931  002EB0  90D8               	bcf	status,0,c
  3932  002EB2  378A               	rlcf	_address& (0+255),f,b
  3933  002EB4  D042               	goto	l8718
  3934  002EB6                     l8698:
  3935                           
  3936                           ; BSR set to: 1
  3937  002EB6  0E0B               	movlw	11
  3938  002EB8  6420               	cpfsgt	Read_Com@i^0,c
  3939  002EBA  D03F               	goto	l8718
  3940                           
  3941                           ; BSR set to: 1
  3942  002EBC  0E11               	movlw	17
  3943  002EBE  6020               	cpfslt	Read_Com@i^0,c
  3944  002EC0  D03C               	goto	l8718
  3945                           
  3946                           ; BSR set to: 1
  3947                           ;Task_Com_USART.c: 109:                 {;Task_Com_USART.c: 110:                     if(
      +                          i == 12) XX = 10 * (word[i] - 48);
  3948  002EC2  0E0C               	movlw	12
  3949  002EC4  1820               	xorwf	Read_Com@i^0,w,c
  3950  002EC6  A4D8               	btfss	status,2,c
  3951  002EC8  D00C               	goto	l8706
  3952                           
  3953                           ; BSR set to: 1
  3954  002ECA  0EB4               	movlw	low _word
  3955  002ECC  2420               	addwf	Read_Com@i^0,w,c
  3956  002ECE  6ED9               	movwf	fsr2l,c
  3957  002ED0  6ADA               	clrf	fsr2h,c
  3958  002ED2  0E01               	movlw	high _word
  3959  002ED4  22DA               	addwfc	fsr2h,f,c
  3960  002ED6  50DF               	movf	indf2,w,c
  3961  002ED8  0FD0               	addlw	208
  3962  002EDA  0D0A               	mullw	10
  3963  002EDC  CFF3 F03D          	movff	prodl,_XX
  3964  002EE0  D00E               	goto	l8710
  3965  002EE2                     l8706:
  3966                           
  3967                           ; BSR set to: 1
  3968  002EE2  0E0D               	movlw	13
  3969  002EE4  1820               	xorwf	Read_Com@i^0,w,c
  3970  002EE6  A4D8               	btfss	status,2,c
  3971  002EE8  D00A               	goto	l8710
  3972                           
  3973                           ; BSR set to: 1
  3974  002EEA  0EB4               	movlw	low _word
  3975  002EEC  2420               	addwf	Read_Com@i^0,w,c
  3976  002EEE  6ED9               	movwf	fsr2l,c
  3977  002EF0  6ADA               	clrf	fsr2h,c
  3978  002EF2  0E01               	movlw	high _word
  3979  002EF4  22DA               	addwfc	fsr2h,f,c
  3980  002EF6  50DF               	movf	indf2,w,c
  3981  002EF8  243D               	addwf	_XX^0,w,c
  3982  002EFA  0FD0               	addlw	208
  3983  002EFC  6E3D               	movwf	_XX^0,c
  3984  002EFE                     l8710:
  3985                           
  3986                           ; BSR set to: 1
  3987                           ;Task_Com_USART.c: 112:                     if(i == 15) YY = 10 * (word[i] - 48);
  3988  002EFE  0E0F               	movlw	15
  3989  002F00  1820               	xorwf	Read_Com@i^0,w,c
  3990  002F02  A4D8               	btfss	status,2,c
  3991  002F04  D00C               	goto	l8714
  3992                           
  3993                           ; BSR set to: 1
  3994  002F06  0EB4               	movlw	low _word
  3995  002F08  2420               	addwf	Read_Com@i^0,w,c
  3996  002F0A  6ED9               	movwf	fsr2l,c
  3997  002F0C  6ADA               	clrf	fsr2h,c
  3998  002F0E  0E01               	movlw	high _word
  3999  002F10  22DA               	addwfc	fsr2h,f,c
  4000  002F12  50DF               	movf	indf2,w,c
  4001  002F14  0FD0               	addlw	208
  4002  002F16  0D0A               	mullw	10
  4003  002F18  CFF3 F03C          	movff	prodl,_YY
  4004  002F1C  D00E               	goto	l8718
  4005  002F1E                     l8714:
  4006                           
  4007                           ; BSR set to: 1
  4008  002F1E  0E10               	movlw	16
  4009  002F20  1820               	xorwf	Read_Com@i^0,w,c
  4010  002F22  A4D8               	btfss	status,2,c
  4011  002F24  D00A               	goto	l8718
  4012                           
  4013                           ; BSR set to: 1
  4014  002F26  0EB4               	movlw	low _word
  4015  002F28  2420               	addwf	Read_Com@i^0,w,c
  4016  002F2A  6ED9               	movwf	fsr2l,c
  4017  002F2C  6ADA               	clrf	fsr2h,c
  4018  002F2E  0E01               	movlw	high _word
  4019  002F30  22DA               	addwfc	fsr2h,f,c
  4020  002F32  50DF               	movf	indf2,w,c
  4021  002F34  243C               	addwf	_YY^0,w,c
  4022  002F36  0FD0               	addlw	208
  4023  002F38  6E3C               	movwf	_YY^0,c
  4024  002F3A                     l8718:
  4025                           
  4026                           ; BSR set to: 1
  4027                           ;Task_Com_USART.c: 115:             }
  4028  002F3A  2A20               	incf	Read_Com@i^0,f,c
  4029  002F3C                     l8720:
  4030                           
  4031                           ; BSR set to: 1
  4032  002F3C  5020               	movf	Read_Com@i^0,w,c
  4033  002F3E  6E18               	movwf	??_Read_Com^0,c
  4034  002F40  6A19               	clrf	(??_Read_Com+1)^0,c
  4035  002F42  0EFE               	movlw	254
  4036  002F44  6E1A               	movwf	(??_Read_Com+2)^0,c
  4037  002F46  0EFF               	movlw	255
  4038  002F48  6E1B               	movwf	(??_Read_Com+3)^0,c
  4039  002F4A  5189               	movf	_long_cad& (0+255),w,b
  4040  002F4C  6E1C               	movwf	(??_Read_Com+4)^0,c
  4041  002F4E  6A1D               	clrf	(??_Read_Com+5)^0,c
  4042  002F50  501A               	movf	(??_Read_Com+2)^0,w,c
  4043  002F52  261C               	addwf	(??_Read_Com+4)^0,f,c
  4044  002F54  501B               	movf	(??_Read_Com+3)^0,w,c
  4045  002F56  221D               	addwfc	(??_Read_Com+5)^0,f,c
  4046  002F58  5018               	movf	??_Read_Com^0,w,c
  4047  002F5A  5C1C               	subwf	(??_Read_Com+4)^0,w,c
  4048  002F5C  501D               	movf	(??_Read_Com+5)^0,w,c
  4049  002F5E  0A80               	xorlw	128
  4050  002F60  6E1E               	movwf	(??_Read_Com+6)^0,c
  4051  002F62  5019               	movf	(??_Read_Com+1)^0,w,c
  4052  002F64  0A80               	xorlw	128
  4053  002F66  581E               	subwfb	(??_Read_Com+6)^0,w,c
  4054  002F68  B0D8               	btfsc	status,0,c
  4055  002F6A  D74A               	goto	l8644
  4056  002F6C                     u6760:
  4057                           
  4058                           ; BSR set to: 1
  4059                           ;Task_Com_USART.c: 118:         for(char i=0;i<20;i++) word[i] = 0;
  4060  002F6C  0E00               	movlw	0
  4061  002F6E  6E1F               	movwf	Read_Com@i_2100^0,c
  4062  002F70                     l8728:
  4063  002F70  0EB4               	movlw	low _word
  4064  002F72  241F               	addwf	Read_Com@i_2100^0,w,c
  4065  002F74  6ED9               	movwf	fsr2l,c
  4066  002F76  6ADA               	clrf	fsr2h,c
  4067  002F78  0E01               	movlw	high _word
  4068  002F7A  22DA               	addwfc	fsr2h,f,c
  4069  002F7C  0E00               	movlw	0
  4070  002F7E  6EDF               	movwf	indf2,c
  4071  002F80  2A1F               	incf	Read_Com@i_2100^0,f,c
  4072  002F82  0E13               	movlw	19
  4073  002F84  641F               	cpfsgt	Read_Com@i_2100^0,c
  4074  002F86  D7F4               	goto	l8728
  4075                           
  4076                           ;Task_Com_USART.c: 119:         Fin_Cad = 0,long_cad = 0;
  4077  002F88  0E00               	movlw	0
  4078  002F8A  6E3B               	movwf	_Fin_Cad^0,c
  4079  002F8C  0E00               	movlw	0
  4080  002F8E  0101               	movlb	1	; () banked
  4081  002F90  6F89               	movwf	_long_cad& (0+255),b
  4082  002F92  0012               	return		;funcret
  4083  002F94                     __end_of_Read_Com:
  4084                           	callstack 0
  4085                           
  4086 ;; *************** function _ACN_PA_Com *****************
  4087 ;; Defined at:
  4088 ;;		line 161 in file "Task_Com_USART.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  buffer         10  110[BANK0 ] unsigned char [10]
  4093 ;; Return value:  Size  Location     Type
  4094 ;;                  1    wreg      void 
  4095 ;; Registers used:
  4096 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4097 ;; Tracked objects:
  4098 ;;		On entry : 3F/1
  4099 ;;		On exit  : 0/0
  4100 ;;		Unchanged: 0/0
  4101 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4102 ;;      Params:         0       0       0       0       0       0       0       0       0
  4103 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4104 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4105 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4106 ;;Total ram usage:       12 bytes
  4107 ;; Hardware stack levels used:    1
  4108 ;; Hardware stack levels required when called:   15
  4109 ;; This function calls:
  4110 ;;		_Erase_Eeprom
  4111 ;;		_LCD_array
  4112 ;;		_LCD_command
  4113 ;;		_RTC_send_fecha
  4114 ;;		_RTC_send_hora
  4115 ;;		_UART_array
  4116 ;;		_UART_write
  4117 ;;		_sprintf
  4118 ;; This function is called by:
  4119 ;;		_Task_Com_USART
  4120 ;; This function uses a non-reentrant model
  4121 ;;
  4122                           
  4123                           	psect	text6
  4124  001A62                     __ptext6:
  4125                           	callstack 0
  4126  001A62                     _ACN_PA_Com:
  4127                           	callstack 14
  4128                           
  4129                           ; BSR set to: 1
  4130                           ;Task_Com_USART.c: 163:     char buffer[10];;Task_Com_USART.c: 166:     switch(N)
  4131                           
  4132                           ;incstack = 0
  4133  001A62  D0D9               	goto	l12114
  4134  001A64                     l12032:
  4135                           
  4136                           ; BSR set to: 0
  4137                           ;Task_Com_USART.c: 170:         {;Task_Com_USART.c: 171:             if(XX == 01) Ha_Pu=
      +                          1;
  4138  001A64  043D               	decf	_XX^0,w,c
  4139  001A66  A4D8               	btfss	status,2,c
  4140  001A68  D002               	goto	l12036
  4141                           
  4142                           ; BSR set to: 0
  4143  001A6A  0E01               	movlw	1
  4144  001A6C  D001               	goto	L5
  4145  001A6E                     l12036:
  4146                           
  4147                           ; BSR set to: 0
  4148  001A6E  0E00               	movlw	0
  4149  001A70                     L5:
  4150  001A70  0101               	movlb	1	; () banked
  4151  001A72  6F84               	movwf	_Ha_Pu& (0+255),b
  4152                           
  4153                           ; BSR set to: 1
  4154                           ;Task_Com_USART.c: 174:             if(Ha_Pu == 1)
  4155  001A74  0584               	decf	_Ha_Pu& (0+255),w,b
  4156  001A76  A4D8               	btfss	status,2,c
  4157  001A78  D017               	goto	l12056
  4158                           
  4159                           ; BSR set to: 1
  4160                           ;Task_Com_USART.c: 175:             {;Task_Com_USART.c: 176:                 if((YY == 0
      +                          1) && (PORTDbits.RD6 == 0)) LATEbits.LATE1=1,puerta1=1,puerta2=0;
  4161  001A7A  043C               	decf	_YY^0,w,c
  4162  001A7C  B4D8               	btfsc	status,2,c
  4163                           
  4164                           ; BSR set to: 1
  4165  001A7E  BC83               	btfsc	131,6,c	;volatile
  4166  001A80  D006               	goto	l1558
  4167                           
  4168                           ; BSR set to: 1
  4169  001A82  828D               	bsf	141,1,c	;volatile
  4170                           
  4171                           ; BSR set to: 1
  4172  001A84  0E01               	movlw	1
  4173  001A86  6F7E               	movwf	_puerta1& (0+255),b
  4174  001A88  0E00               	movlw	0
  4175  001A8A  6F7D               	movwf	_puerta2& (0+255),b
  4176  001A8C  D001               	goto	l12048
  4177  001A8E                     l1558:
  4178                           
  4179                           ; BSR set to: 1
  4180  001A8E  928D               	bcf	141,1,c	;volatile
  4181  001A90                     l12048:
  4182                           
  4183                           ; BSR set to: 1
  4184                           ;Task_Com_USART.c: 178:                 if((YY == 02) && (PORTDbits.RD7 == 0)) LATEbits.
      +                          LATE0=1,puerta2=1,puerta1=0;
  4185  001A90  0E02               	movlw	2
  4186  001A92  183C               	xorwf	_YY^0,w,c
  4187  001A94  B4D8               	btfsc	status,2,c
  4188                           
  4189                           ; BSR set to: 1
  4190  001A96  BE83               	btfsc	131,7,c	;volatile
  4191  001A98  D006               	goto	l1560
  4192                           
  4193                           ; BSR set to: 1
  4194  001A9A  808D               	bsf	141,0,c	;volatile
  4195                           
  4196                           ; BSR set to: 1
  4197  001A9C  0E01               	movlw	1
  4198  001A9E  6F7D               	movwf	_puerta2& (0+255),b
  4199  001AA0  0E00               	movlw	0
  4200  001AA2  6F7E               	movwf	_puerta1& (0+255),b
  4201  001AA4  D001               	goto	l12056
  4202  001AA6                     l1560:
  4203                           
  4204                           ; BSR set to: 1
  4205  001AA6  908D               	bcf	141,0,c	;volatile
  4206  001AA8                     l12056:
  4207                           
  4208                           ; BSR set to: 1
  4209                           ;Task_Com_USART.c: 181:             if(Ha_Pu == 0) LATEbits.LATE1=0,LATEbits.LATE0=0;
  4210  001AA8  5184               	movf	_Ha_Pu& (0+255),w,b
  4211  001AAA  A4D8               	btfss	status,2,c
  4212  001AAC  D002               	goto	l12060
  4213                           
  4214                           ; BSR set to: 1
  4215  001AAE  928D               	bcf	141,1,c	;volatile
  4216  001AB0  908D               	bcf	141,0,c	;volatile
  4217  001AB2                     l12060:
  4218                           
  4219                           ; BSR set to: 1
  4220                           ;Task_Com_USART.c: 183:             Ha_Pu = 0;
  4221  001AB2  0E00               	movlw	0
  4222  001AB4  6F84               	movwf	_Ha_Pu& (0+255),b
  4223                           
  4224                           ;Task_Com_USART.c: 185:         break;
  4225  001AB6  D0C4               	goto	l12116
  4226  001AB8                     l12062:
  4227                           
  4228                           ; BSR set to: 0
  4229                           ;Task_Com_USART.c: 190:         {;Task_Com_USART.c: 191:             LCD_command(0x01);
  4230  001AB8  0E01               	movlw	1
  4231  001ABA  EC78  F023         	call	_LCD_command
  4232                           
  4233                           ;Task_Com_USART.c: 193:             LCD_array(2,1,"     Modificando    ");
  4234  001ABE  0E00               	movlw	0
  4235  001AC0  6E1D               	movwf	(LCD_array@x+1)^0,c
  4236  001AC2  0E02               	movlw	2
  4237  001AC4  6E1C               	movwf	LCD_array@x^0,c
  4238  001AC6  0E00               	movlw	0
  4239  001AC8  6E1F               	movwf	(LCD_array@y+1)^0,c
  4240  001ACA  0E01               	movlw	1
  4241  001ACC  6E1E               	movwf	LCD_array@y^0,c
  4242  001ACE  0EC8               	movlw	low STR_109
  4243  001AD0  6E20               	movwf	LCD_array@date^0,c
  4244  001AD2  0E7C               	movlw	high STR_109
  4245  001AD4  6E21               	movwf	(LCD_array@date+1)^0,c
  4246  001AD6  ECB1  F01F         	call	_LCD_array	;wreg free
  4247                           
  4248                           ;Task_Com_USART.c: 194:             LCD_array(3,1,"     valores ...    ");
  4249  001ADA  0E00               	movlw	0
  4250  001ADC  6E1D               	movwf	(LCD_array@x+1)^0,c
  4251  001ADE  0E03               	movlw	3
  4252  001AE0  6E1C               	movwf	LCD_array@x^0,c
  4253  001AE2  0E00               	movlw	0
  4254  001AE4  6E1F               	movwf	(LCD_array@y+1)^0,c
  4255  001AE6  0E01               	movlw	1
  4256  001AE8  6E1E               	movwf	LCD_array@y^0,c
  4257  001AEA  0EB3               	movlw	low STR_110
  4258  001AEC  6E20               	movwf	LCD_array@date^0,c
  4259  001AEE  0E7C               	movlw	high STR_110
  4260  001AF0  6E21               	movwf	(LCD_array@date+1)^0,c
  4261  001AF2  ECB1  F01F         	call	_LCD_array	;wreg free
  4262                           
  4263                           ;Task_Com_USART.c: 195:             _delay((unsigned long)((1000)*(48000000/4000.0)));
  4264  001AF6  0E3D               	movlw	61
  4265  001AF8  0100               	movlb	0	; () banked
  4266  001AFA  6FCD               	movwf	(??_ACN_PA_Com+1)& (0+255),b
  4267  001AFC  0EE1               	movlw	225
  4268  001AFE  6FCC               	movwf	??_ACN_PA_Com& (0+255),b
  4269  001B00  0E3F               	movlw	63
  4270  001B02                     u11017:
  4271  001B02  2EE8               	decfsz	wreg,f,c
  4272  001B04  D7FE               	bra	u11017
  4273  001B06  2FCC               	decfsz	??_ACN_PA_Com& (0+255),f,b
  4274  001B08  D7FC               	bra	u11017
  4275  001B0A  2FCD               	decfsz	(??_ACN_PA_Com+1)& (0+255),f,b
  4276  001B0C  D7FA               	bra	u11017
  4277  001B0E  D000               	nop2	
  4278                           
  4279                           ;Task_Com_USART.c: 196:             LCD_command(0x01);
  4280  001B10  0E01               	movlw	1
  4281  001B12  EC78  F023         	call	_LCD_command
  4282                           
  4283                           ;Task_Com_USART.c: 198:             hora = XX, min = YY, seg = 1;
  4284  001B16  C03D  F044         	movff	_XX,_hora
  4285  001B1A  C03C  F043         	movff	_YY,_min
  4286  001B1E  0E01               	movlw	1
  4287  001B20  6E42               	movwf	_seg^0,c
  4288                           
  4289                           ;Task_Com_USART.c: 199:             RTC_send_hora();
  4290  001B22  ECB8  F023         	call	_RTC_send_hora	;wreg free
  4291                           
  4292                           ;Task_Com_USART.c: 200:             LCD_array(2,1,"     Terminado     ");
  4293  001B26  0E00               	movlw	0
  4294  001B28  6E1D               	movwf	(LCD_array@x+1)^0,c
  4295  001B2A  0E02               	movlw	2
  4296  001B2C  6E1C               	movwf	LCD_array@x^0,c
  4297  001B2E  0E00               	movlw	0
  4298  001B30  6E1F               	movwf	(LCD_array@y+1)^0,c
  4299  001B32  0E01               	movlw	1
  4300  001B34  6E1E               	movwf	LCD_array@y^0,c
  4301  001B36  0E18               	movlw	low STR_111
  4302  001B38  6E20               	movwf	LCD_array@date^0,c
  4303  001B3A  0E7E               	movlw	high STR_111
  4304  001B3C  6E21               	movwf	(LCD_array@date+1)^0,c
  4305  001B3E  ECB1  F01F         	call	_LCD_array	;wreg free
  4306                           
  4307                           ;Task_Com_USART.c: 201:             _delay((unsigned long)((1000)*(48000000/4000.0)));
  4308  001B42  0E3D               	movlw	61
  4309  001B44  0100               	movlb	0	; () banked
  4310  001B46  6FCD               	movwf	(??_ACN_PA_Com+1)& (0+255),b
  4311  001B48  0EE1               	movlw	225
  4312  001B4A  6FCC               	movwf	??_ACN_PA_Com& (0+255),b
  4313  001B4C  0E3F               	movlw	63
  4314  001B4E                     u11027:
  4315  001B4E  2EE8               	decfsz	wreg,f,c
  4316  001B50  D7FE               	bra	u11027
  4317  001B52  2FCC               	decfsz	??_ACN_PA_Com& (0+255),f,b
  4318  001B54  D7FC               	bra	u11027
  4319  001B56  2FCD               	decfsz	(??_ACN_PA_Com+1)& (0+255),f,b
  4320  001B58  D7FA               	bra	u11027
  4321  001B5A  D000               	nop2	
  4322                           
  4323                           ;Task_Com_USART.c: 203:             LCD_command(0x01);
  4324  001B5C  0E01               	movlw	1
  4325  001B5E  EC78  F023         	call	_LCD_command
  4326                           
  4327                           ;Task_Com_USART.c: 205:         break;
  4328  001B62  D06E               	goto	l12116
  4329  001B64                     l12086:
  4330                           
  4331                           ; BSR set to: 0
  4332                           ;Task_Com_USART.c: 210:         {;Task_Com_USART.c: 211:             LCD_command(0x01);
  4333  001B64  0E01               	movlw	1
  4334  001B66  EC78  F023         	call	_LCD_command
  4335                           
  4336                           ;Task_Com_USART.c: 214:             LCD_array(2,1,"     Modificando    ");
  4337  001B6A  0E00               	movlw	0
  4338  001B6C  6E1D               	movwf	(LCD_array@x+1)^0,c
  4339  001B6E  0E02               	movlw	2
  4340  001B70  6E1C               	movwf	LCD_array@x^0,c
  4341  001B72  0E00               	movlw	0
  4342  001B74  6E1F               	movwf	(LCD_array@y+1)^0,c
  4343  001B76  0E01               	movlw	1
  4344  001B78  6E1E               	movwf	LCD_array@y^0,c
  4345  001B7A  0EC8               	movlw	low STR_109
  4346  001B7C  6E20               	movwf	LCD_array@date^0,c
  4347  001B7E  0E7C               	movlw	high STR_109
  4348  001B80  6E21               	movwf	(LCD_array@date+1)^0,c
  4349  001B82  ECB1  F01F         	call	_LCD_array	;wreg free
  4350                           
  4351                           ;Task_Com_USART.c: 215:             LCD_array(3,1,"     valores ...    ");
  4352  001B86  0E00               	movlw	0
  4353  001B88  6E1D               	movwf	(LCD_array@x+1)^0,c
  4354  001B8A  0E03               	movlw	3
  4355  001B8C  6E1C               	movwf	LCD_array@x^0,c
  4356  001B8E  0E00               	movlw	0
  4357  001B90  6E1F               	movwf	(LCD_array@y+1)^0,c
  4358  001B92  0E01               	movlw	1
  4359  001B94  6E1E               	movwf	LCD_array@y^0,c
  4360  001B96  0EB3               	movlw	low STR_110
  4361  001B98  6E20               	movwf	LCD_array@date^0,c
  4362  001B9A  0E7C               	movlw	high STR_110
  4363  001B9C  6E21               	movwf	(LCD_array@date+1)^0,c
  4364  001B9E  ECB1  F01F         	call	_LCD_array	;wreg free
  4365                           
  4366                           ;Task_Com_USART.c: 216:             _delay((unsigned long)((1000)*(48000000/4000.0)));
  4367  001BA2  0E3D               	movlw	61
  4368  001BA4  0100               	movlb	0	; () banked
  4369  001BA6  6FCD               	movwf	(??_ACN_PA_Com+1)& (0+255),b
  4370  001BA8  0EE1               	movlw	225
  4371  001BAA  6FCC               	movwf	??_ACN_PA_Com& (0+255),b
  4372  001BAC  0E3F               	movlw	63
  4373  001BAE                     u11037:
  4374  001BAE  2EE8               	decfsz	wreg,f,c
  4375  001BB0  D7FE               	bra	u11037
  4376  001BB2  2FCC               	decfsz	??_ACN_PA_Com& (0+255),f,b
  4377  001BB4  D7FC               	bra	u11037
  4378  001BB6  2FCD               	decfsz	(??_ACN_PA_Com+1)& (0+255),f,b
  4379  001BB8  D7FA               	bra	u11037
  4380  001BBA  D000               	nop2	
  4381                           
  4382                           ;Task_Com_USART.c: 217:             LCD_command(0x01);
  4383  001BBC  0E01               	movlw	1
  4384  001BBE  EC78  F023         	call	_LCD_command
  4385                           
  4386                           ;Task_Com_USART.c: 219:             dia = XX, mes = YY, year = 20;
  4387  001BC2  C03D  F041         	movff	_XX,_dia
  4388  001BC6  C03C  F040         	movff	_YY,_mes
  4389  001BCA  0E14               	movlw	20
  4390  001BCC  6E3F               	movwf	_year^0,c
  4391                           
  4392                           ;Task_Com_USART.c: 220:             RTC_send_fecha();
  4393  001BCE  ECF5  F023         	call	_RTC_send_fecha	;wreg free
  4394                           
  4395                           ;Task_Com_USART.c: 221:             LCD_array(2,1,"     Terminado     ");
  4396  001BD2  0E00               	movlw	0
  4397  001BD4  6E1D               	movwf	(LCD_array@x+1)^0,c
  4398  001BD6  0E02               	movlw	2
  4399  001BD8  6E1C               	movwf	LCD_array@x^0,c
  4400  001BDA  0E00               	movlw	0
  4401  001BDC  6E1F               	movwf	(LCD_array@y+1)^0,c
  4402  001BDE  0E01               	movlw	1
  4403  001BE0  6E1E               	movwf	LCD_array@y^0,c
  4404  001BE2  0E18               	movlw	low STR_111
  4405  001BE4  6E20               	movwf	LCD_array@date^0,c
  4406  001BE6  0E7E               	movlw	high STR_111
  4407  001BE8  6E21               	movwf	(LCD_array@date+1)^0,c
  4408  001BEA  ECB1  F01F         	call	_LCD_array	;wreg free
  4409                           
  4410                           ;Task_Com_USART.c: 222:             _delay((unsigned long)((1000)*(48000000/4000.0)));
  4411  001BEE  0E3D               	movlw	61
  4412  001BF0  0100               	movlb	0	; () banked
  4413  001BF2  6FCD               	movwf	(??_ACN_PA_Com+1)& (0+255),b
  4414  001BF4  0EE1               	movlw	225
  4415  001BF6  6FCC               	movwf	??_ACN_PA_Com& (0+255),b
  4416  001BF8  0E3F               	movlw	63
  4417  001BFA                     u11047:
  4418  001BFA  2EE8               	decfsz	wreg,f,c
  4419  001BFC  D7FE               	bra	u11047
  4420  001BFE  2FCC               	decfsz	??_ACN_PA_Com& (0+255),f,b
  4421  001C00  D7FC               	bra	u11047
  4422  001C02  2FCD               	decfsz	(??_ACN_PA_Com+1)& (0+255),f,b
  4423  001C04  D7FA               	bra	u11047
  4424  001C06  D000               	nop2	
  4425                           
  4426                           ;Task_Com_USART.c: 224:             LCD_command(0x01);
  4427  001C08  0E01               	movlw	1
  4428  001C0A  EC78  F023         	call	_LCD_command
  4429                           
  4430                           ;Task_Com_USART.c: 226:         break;
  4431  001C0E  D018               	goto	l12116
  4432  001C10                     l12110:
  4433                           
  4434                           ; BSR set to: 0
  4435                           ;Task_Com_USART.c: 231:         {;Task_Com_USART.c: 232:             Erase_Eeprom();
  4436  001C10  ECE0  F025         	call	_Erase_Eeprom	;wreg free
  4437                           
  4438                           ;Task_Com_USART.c: 234:         break;
  4439  001C14  D015               	goto	l12116
  4440  001C16                     l12114:
  4441                           
  4442                           ; BSR set to: 1
  4443  001C16  503E               	movf	_N^0,w,c
  4444  001C18  0100               	movlb	0	; () banked
  4445  001C1A  6FCC               	movwf	??_ACN_PA_Com& (0+255),b
  4446  001C1C  6BCD               	clrf	(??_ACN_PA_Com+1)& (0+255),b
  4447                           
  4448                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4449                           ; Switch size 1, requested type "simple"
  4450                           ; Number of cases is 1, Range of values is 0 to 0
  4451                           ; switch strategies available:
  4452                           ; Name         Instructions Cycles
  4453                           ; simple_byte            4     3 (average)
  4454                           ;	Chosen strategy is simple_byte
  4455  001C1E  51CD               	movf	(??_ACN_PA_Com+1)& (0+255),w,b
  4456  001C20  0A00               	xorlw	0	; case 0
  4457  001C22  A4D8               	btfss	status,2,c
  4458  001C24  D00D               	goto	l12116
  4459                           
  4460                           ; BSR set to: 0
  4461                           ; Switch size 1, requested type "simple"
  4462                           ; Number of cases is 4, Range of values is 1 to 4
  4463                           ; switch strategies available:
  4464                           ; Name         Instructions Cycles
  4465                           ; simple_byte           13     7 (average)
  4466                           ;	Chosen strategy is simple_byte
  4467  001C26  51CC               	movf	??_ACN_PA_Com& (0+255),w,b
  4468  001C28  0A01               	xorlw	1	; case 1
  4469  001C2A  B4D8               	btfsc	status,2,c
  4470  001C2C  D71B               	goto	l12032
  4471  001C2E  0A03               	xorlw	3	; case 2
  4472  001C30  B4D8               	btfsc	status,2,c
  4473  001C32  D742               	goto	l12062
  4474  001C34  0A01               	xorlw	1	; case 3
  4475  001C36  B4D8               	btfsc	status,2,c
  4476  001C38  D795               	goto	l12086
  4477  001C3A  0A07               	xorlw	7	; case 4
  4478  001C3C  B4D8               	btfsc	status,2,c
  4479  001C3E  D7E8               	goto	l12110
  4480  001C40                     l12116:
  4481                           
  4482                           ;Task_Com_USART.c: 238:     PA=0,CR=0,CO=0;
  4483  001C40  0E00               	movlw	0
  4484  001C42  0101               	movlb	1	; () banked
  4485  001C44  6F86               	movwf	_PA& (0+255),b
  4486  001C46  0E00               	movlw	0
  4487  001C48  6F87               	movwf	_CR& (0+255),b
  4488  001C4A  0E00               	movlw	0
  4489  001C4C  6F88               	movwf	_CO& (0+255),b
  4490                           
  4491                           ; BSR set to: 1
  4492                           ;Task_Com_USART.c: 241:     UART_array("\n[RPA,"), sprintf(buffer,"%d",N);
  4493  001C4E  0E72               	movlw	low STR_115
  4494  001C50  6E18               	movwf	UART_array@cadena^0,c
  4495  001C52  0E7F               	movlw	high STR_115
  4496  001C54  6E19               	movwf	(UART_array@cadena+1)^0,c
  4497  001C56  EC65  F026         	call	_UART_array	;wreg free
  4498  001C5A  0ECE               	movlw	low ACN_PA_Com@buffer
  4499  001C5C  0100               	movlb	0	; () banked
  4500  001C5E  6FB7               	movwf	sprintf@s& (0+255),b
  4501  001C60  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  4502  001C62  0EF9               	movlw	low STR_9
  4503  001C64  6FB9               	movwf	sprintf@fmt& (0+255),b
  4504  001C66  0E7F               	movlw	high STR_9
  4505  001C68  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  4506  001C6A  C03E  F0BB         	movff	_N,?_sprintf+4
  4507  001C6E  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  4508  001C70  EC78  F027         	call	_sprintf	;wreg free
  4509                           
  4510                           ; BSR set to: 0
  4511                           ;Task_Com_USART.c: 242:     UART_array(buffer), UART_array(",");
  4512  001C74  0ECE               	movlw	low ACN_PA_Com@buffer
  4513  001C76  6E18               	movwf	UART_array@cadena^0,c
  4514  001C78  6A19               	clrf	(UART_array@cadena+1)^0,c
  4515  001C7A  EC65  F026         	call	_UART_array	;wreg free
  4516  001C7E  0E3F               	movlw	low (STR_99+7)
  4517  001C80  6E18               	movwf	UART_array@cadena^0,c
  4518  001C82  0E7F               	movlw	high (STR_99+7)
  4519  001C84  6E19               	movwf	(UART_array@cadena+1)^0,c
  4520  001C86  EC65  F026         	call	_UART_array	;wreg free
  4521                           
  4522                           ;Task_Com_USART.c: 243:     UART_array(llave), sprintf(buffer,"%02d",XX);
  4523  001C8A  0ED2               	movlw	low _llave
  4524  001C8C  6E18               	movwf	UART_array@cadena^0,c
  4525  001C8E  0E01               	movlw	high _llave
  4526  001C90  6E19               	movwf	(UART_array@cadena+1)^0,c
  4527  001C92  EC65  F026         	call	_UART_array	;wreg free
  4528  001C96  0ECE               	movlw	low ACN_PA_Com@buffer
  4529  001C98  0100               	movlb	0	; () banked
  4530  001C9A  6FB7               	movwf	sprintf@s& (0+255),b
  4531  001C9C  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  4532  001C9E  0EE4               	movlw	low STR_14
  4533  001CA0  6FB9               	movwf	sprintf@fmt& (0+255),b
  4534  001CA2  0E7F               	movlw	high STR_14
  4535  001CA4  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  4536  001CA6  C03D  F0BB         	movff	_XX,?_sprintf+4
  4537  001CAA  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  4538  001CAC  EC78  F027         	call	_sprintf	;wreg free
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;Task_Com_USART.c: 244:     UART_array(","), UART_array(buffer);
  4542  001CB0  0E3F               	movlw	low (STR_99+7)
  4543  001CB2  6E18               	movwf	UART_array@cadena^0,c
  4544  001CB4  0E7F               	movlw	high (STR_99+7)
  4545  001CB6  6E19               	movwf	(UART_array@cadena+1)^0,c
  4546  001CB8  EC65  F026         	call	_UART_array	;wreg free
  4547  001CBC  0ECE               	movlw	low ACN_PA_Com@buffer
  4548  001CBE  6E18               	movwf	UART_array@cadena^0,c
  4549  001CC0  6A19               	clrf	(UART_array@cadena+1)^0,c
  4550  001CC2  EC65  F026         	call	_UART_array	;wreg free
  4551                           
  4552                           ;Task_Com_USART.c: 245:     sprintf(buffer,"%02d",YY), UART_array(",");
  4553  001CC6  0ECE               	movlw	low ACN_PA_Com@buffer
  4554  001CC8  0100               	movlb	0	; () banked
  4555  001CCA  6FB7               	movwf	sprintf@s& (0+255),b
  4556  001CCC  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  4557  001CCE  0EE4               	movlw	low STR_14
  4558  001CD0  6FB9               	movwf	sprintf@fmt& (0+255),b
  4559  001CD2  0E7F               	movlw	high STR_14
  4560  001CD4  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  4561  001CD6  C03C  F0BB         	movff	_YY,?_sprintf+4
  4562  001CDA  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  4563  001CDC  EC78  F027         	call	_sprintf	;wreg free
  4564                           
  4565                           ; BSR set to: 0
  4566  001CE0  0E3F               	movlw	low (STR_99+7)
  4567  001CE2  6E18               	movwf	UART_array@cadena^0,c
  4568  001CE4  0E7F               	movlw	high (STR_99+7)
  4569  001CE6  6E19               	movwf	(UART_array@cadena+1)^0,c
  4570  001CE8  EC65  F026         	call	_UART_array	;wreg free
  4571                           
  4572                           ;Task_Com_USART.c: 246:     UART_array(buffer), UART_array("]\n");
  4573  001CEC  0ECE               	movlw	low ACN_PA_Com@buffer
  4574  001CEE  6E18               	movwf	UART_array@cadena^0,c
  4575  001CF0  6A19               	clrf	(UART_array@cadena+1)^0,c
  4576  001CF2  EC65  F026         	call	_UART_array	;wreg free
  4577  001CF6  0EF3               	movlw	low STR_103
  4578  001CF8  6E18               	movwf	UART_array@cadena^0,c
  4579  001CFA  0E7F               	movlw	high STR_103
  4580  001CFC  6E19               	movwf	(UART_array@cadena+1)^0,c
  4581  001CFE  EC65  F026         	call	_UART_array	;wreg free
  4582                           
  4583                           ;Task_Com_USART.c: 247:     UART_write(13);
  4584  001D02  0E0D               	movlw	13
  4585  001D04  EC24  F02A         	call	_UART_write
  4586  001D08  0012               	return		;funcret
  4587  001D0A                     __end_of_ACN_PA_Com:
  4588                           	callstack 0
  4589                           
  4590 ;; *************** function _ACN_CR_Com *****************
  4591 ;; Defined at:
  4592 ;;		line 127 in file "Task_Com_USART.c"
  4593 ;; Parameters:    Size  Location     Type
  4594 ;;		None
  4595 ;; Auto vars:     Size  Location     Type
  4596 ;;  cant            1   72[BANK1 ] const unsigned char 
  4597 ;;  cant            1   71[BANK1 ] const unsigned char 
  4598 ;;  texto2         53    0[BANK1 ] const unsigned char [53]
  4599 ;;  buffer         10   61[BANK1 ] unsigned char [10]
  4600 ;;  texto1          8   53[BANK1 ] const unsigned char [8]
  4601 ;; Return value:  Size  Location     Type
  4602 ;;                  1    wreg      void 
  4603 ;; Registers used:
  4604 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4605 ;; Tracked objects:
  4606 ;;		On entry : 3F/1
  4607 ;;		On exit  : 3F/1
  4608 ;;		Unchanged: 0/0
  4609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4610 ;;      Params:         0       0       0       0       0       0       0       0       0
  4611 ;;      Locals:         0       0      73       0       0       0       0       0       0
  4612 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4613 ;;      Totals:         0       0      73       0       0       0       0       0       0
  4614 ;;Total ram usage:       73 bytes
  4615 ;; Hardware stack levels used:    1
  4616 ;; Hardware stack levels required when called:   15
  4617 ;; This function calls:
  4618 ;;		_UART_array
  4619 ;;		_UART_write
  4620 ;;		_sprintf
  4621 ;;		_strlen
  4622 ;; This function is called by:
  4623 ;;		_Task_Com_USART
  4624 ;; This function uses a non-reentrant model
  4625 ;;
  4626                           
  4627                           	psect	text7
  4628  003464                     __ptext7:
  4629                           	callstack 0
  4630  003464                     _ACN_CR_Com:
  4631                           	callstack 14
  4632                           
  4633                           ; BSR set to: 1
  4634                           ;Task_Com_USART.c: 129:     const char texto1[] = "Disp_LZ";
  4635                           
  4636                           ;incstack = 0
  4637  003464  0E48               	movlw	low ACN_CR_Com@F3821
  4638  003466  6EF6               	movwf	tblptrl,c
  4639  003468                     	if	1	;There is more than 1 active tblptr byte
  4640  003468  0E7C               	movlw	high ACN_CR_Com@F3821
  4641  00346A  6EF7               	movwf	tblptrh,c
  4642  00346C                     	endif
  4643  00346C                     	if	0	;There are less than 3 active tblptr bytes
  4644  00346C                     	endif
  4645  00346C  EE21  F035         	lfsr	2,ACN_CR_Com@texto1
  4646  003470  0E07               	movlw	7
  4647  003472                     u10450:
  4648  003472  0009               	tblrd		*+
  4649  003474  CFF5 FFDE          	movff	tablat,postinc2
  4650  003478  06E8               	decf	wreg,f,c
  4651  00347A  E2FB               	bc	u10450
  4652                           
  4653                           ;Task_Com_USART.c: 130:     const char texto2[] = "Disp que controla una puerta,mediante
      +                           un lector Rfid";
  4654  00347C  0E13               	movlw	low ACN_CR_Com@F3823
  4655  00347E  6EF6               	movwf	tblptrl,c
  4656  003480                     	if	1	;There is more than 1 active tblptr byte
  4657  003480  0E7C               	movlw	high ACN_CR_Com@F3823
  4658  003482  6EF7               	movwf	tblptrh,c
  4659  003484                     	endif
  4660  003484                     	if	0	;There are less than 3 active tblptr bytes
  4661  003484                     	endif
  4662  003484  EE21  F000         	lfsr	2,ACN_CR_Com@texto2
  4663  003488  0E34               	movlw	52
  4664  00348A                     u10460:
  4665  00348A  0009               	tblrd		*+
  4666  00348C  CFF5 FFDE          	movff	tablat,postinc2
  4667  003490  06E8               	decf	wreg,f,c
  4668  003492  E2FB               	bc	u10460
  4669                           
  4670                           ; BSR set to: 1
  4671                           ;Task_Com_USART.c: 132:     char buffer[10];;Task_Com_USART.c: 135:     if(N == 1)
  4672  003494  043E               	decf	_N^0,w,c
  4673  003496  A4D8               	btfss	status,2,c
  4674  003498  D044               	goto	l12000
  4675                           
  4676                           ; BSR set to: 1
  4677                           ;Task_Com_USART.c: 136:     {;Task_Com_USART.c: 137:         const char cant = strlen(te
      +                          xto1);
  4678  00349A  0E35               	movlw	low ACN_CR_Com@texto1
  4679  00349C  6E18               	movwf	strlen@s^0,c
  4680  00349E  0E01               	movlw	high ACN_CR_Com@texto1
  4681  0034A0  6E19               	movwf	(strlen@s+1)^0,c
  4682  0034A2  ECDE  F028         	call	_strlen	;wreg free
  4683  0034A6  5018               	movf	?_strlen^0,w,c
  4684  0034A8  0101               	movlb	1	; () banked
  4685  0034AA  6F47               	movwf	ACN_CR_Com@cant& (0+255),b
  4686                           
  4687                           ; BSR set to: 1
  4688                           ;Task_Com_USART.c: 139:         UART_array("\n[RCR,1,"),UART_array(llave);
  4689  0034AC  0E38               	movlw	low STR_99
  4690  0034AE  6E18               	movwf	UART_array@cadena^0,c
  4691  0034B0  0E7F               	movlw	high STR_99
  4692  0034B2  6E19               	movwf	(UART_array@cadena+1)^0,c
  4693  0034B4  EC65  F026         	call	_UART_array	;wreg free
  4694  0034B8  0ED2               	movlw	low _llave
  4695  0034BA  6E18               	movwf	UART_array@cadena^0,c
  4696  0034BC  0E01               	movlw	high _llave
  4697  0034BE  6E19               	movwf	(UART_array@cadena+1)^0,c
  4698  0034C0  EC65  F026         	call	_UART_array	;wreg free
  4699                           
  4700                           ;Task_Com_USART.c: 140:         UART_array(","), sprintf(buffer,"%d",cant),UART_array(bu
      +                          ffer);
  4701  0034C4  0E3F               	movlw	low (STR_99+7)
  4702  0034C6  6E18               	movwf	UART_array@cadena^0,c
  4703  0034C8  0E7F               	movlw	high (STR_99+7)
  4704  0034CA  6E19               	movwf	(UART_array@cadena+1)^0,c
  4705  0034CC  EC65  F026         	call	_UART_array	;wreg free
  4706  0034D0  0E3D               	movlw	low ACN_CR_Com@buffer
  4707  0034D2  0100               	movlb	0	; () banked
  4708  0034D4  6FB7               	movwf	sprintf@s& (0+255),b
  4709  0034D6  0E01               	movlw	high ACN_CR_Com@buffer
  4710  0034D8  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  4711  0034DA  0EF9               	movlw	low STR_9
  4712  0034DC  6FB9               	movwf	sprintf@fmt& (0+255),b
  4713  0034DE  0E7F               	movlw	high STR_9
  4714  0034E0  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  4715  0034E2  C147  F0BB         	movff	ACN_CR_Com@cant,?_sprintf+4
  4716  0034E6  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  4717  0034E8  EC78  F027         	call	_sprintf	;wreg free
  4718                           
  4719                           ; BSR set to: 0
  4720  0034EC  0E3D               	movlw	low ACN_CR_Com@buffer
  4721  0034EE  6E18               	movwf	UART_array@cadena^0,c
  4722  0034F0  0E01               	movlw	high ACN_CR_Com@buffer
  4723  0034F2  6E19               	movwf	(UART_array@cadena+1)^0,c
  4724  0034F4  EC65  F026         	call	_UART_array	;wreg free
  4725                           
  4726                           ;Task_Com_USART.c: 141:         UART_array(","), UART_array(texto1);
  4727  0034F8  0E3F               	movlw	low (STR_99+7)
  4728  0034FA  6E18               	movwf	UART_array@cadena^0,c
  4729  0034FC  0E7F               	movlw	high (STR_99+7)
  4730  0034FE  6E19               	movwf	(UART_array@cadena+1)^0,c
  4731  003500  EC65  F026         	call	_UART_array	;wreg free
  4732  003504  0E35               	movlw	low ACN_CR_Com@texto1
  4733  003506  6E18               	movwf	UART_array@cadena^0,c
  4734  003508  0E01               	movlw	high ACN_CR_Com@texto1
  4735  00350A  6E19               	movwf	(UART_array@cadena+1)^0,c
  4736  00350C  EC65  F026         	call	_UART_array	;wreg free
  4737                           
  4738                           ;Task_Com_USART.c: 142:         UART_array("]\n"), UART_write(13);
  4739  003510  0EF3               	movlw	low STR_103
  4740  003512  6E18               	movwf	UART_array@cadena^0,c
  4741  003514  0E7F               	movlw	high STR_103
  4742  003516  6E19               	movwf	(UART_array@cadena+1)^0,c
  4743  003518  EC65  F026         	call	_UART_array	;wreg free
  4744  00351C  0E0D               	movlw	13
  4745  00351E  EC24  F02A         	call	_UART_write
  4746  003522                     l12000:
  4747                           
  4748                           ;Task_Com_USART.c: 145:     if(N == 2)
  4749  003522  0E02               	movlw	2
  4750  003524  183E               	xorwf	_N^0,w,c
  4751  003526  A4D8               	btfss	status,2,c
  4752  003528  D044               	goto	l12022
  4753                           
  4754                           ;Task_Com_USART.c: 146:     {;Task_Com_USART.c: 147:         const char cant = strlen(te
      +                          xto2);
  4755  00352A  0E00               	movlw	low ACN_CR_Com@texto2
  4756  00352C  6E18               	movwf	strlen@s^0,c
  4757  00352E  0E01               	movlw	high ACN_CR_Com@texto2
  4758  003530  6E19               	movwf	(strlen@s+1)^0,c
  4759  003532  ECDE  F028         	call	_strlen	;wreg free
  4760  003536  5018               	movf	?_strlen^0,w,c
  4761  003538  0101               	movlb	1	; () banked
  4762  00353A  6F48               	movwf	ACN_CR_Com@cant_2113& (0+255),b
  4763                           
  4764                           ; BSR set to: 1
  4765                           ;Task_Com_USART.c: 149:         UART_array("\n[RCR,2,"),UART_array(llave);
  4766  00353C  0E41               	movlw	low STR_104
  4767  00353E  6E18               	movwf	UART_array@cadena^0,c
  4768  003540  0E7F               	movlw	high STR_104
  4769  003542  6E19               	movwf	(UART_array@cadena+1)^0,c
  4770  003544  EC65  F026         	call	_UART_array	;wreg free
  4771  003548  0ED2               	movlw	low _llave
  4772  00354A  6E18               	movwf	UART_array@cadena^0,c
  4773  00354C  0E01               	movlw	high _llave
  4774  00354E  6E19               	movwf	(UART_array@cadena+1)^0,c
  4775  003550  EC65  F026         	call	_UART_array	;wreg free
  4776                           
  4777                           ;Task_Com_USART.c: 150:         UART_array(","), sprintf(buffer,"%d",cant),UART_array(bu
      +                          ffer);
  4778  003554  0E3F               	movlw	low (STR_99+7)
  4779  003556  6E18               	movwf	UART_array@cadena^0,c
  4780  003558  0E7F               	movlw	high (STR_99+7)
  4781  00355A  6E19               	movwf	(UART_array@cadena+1)^0,c
  4782  00355C  EC65  F026         	call	_UART_array	;wreg free
  4783  003560  0E3D               	movlw	low ACN_CR_Com@buffer
  4784  003562  0100               	movlb	0	; () banked
  4785  003564  6FB7               	movwf	sprintf@s& (0+255),b
  4786  003566  0E01               	movlw	high ACN_CR_Com@buffer
  4787  003568  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  4788  00356A  0EF9               	movlw	low STR_9
  4789  00356C  6FB9               	movwf	sprintf@fmt& (0+255),b
  4790  00356E  0E7F               	movlw	high STR_9
  4791  003570  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  4792  003572  C148  F0BB         	movff	ACN_CR_Com@cant_2113,?_sprintf+4
  4793  003576  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  4794  003578  EC78  F027         	call	_sprintf	;wreg free
  4795                           
  4796                           ; BSR set to: 0
  4797  00357C  0E3D               	movlw	low ACN_CR_Com@buffer
  4798  00357E  6E18               	movwf	UART_array@cadena^0,c
  4799  003580  0E01               	movlw	high ACN_CR_Com@buffer
  4800  003582  6E19               	movwf	(UART_array@cadena+1)^0,c
  4801  003584  EC65  F026         	call	_UART_array	;wreg free
  4802                           
  4803                           ;Task_Com_USART.c: 151:         UART_array(","), UART_array(texto2);
  4804  003588  0E3F               	movlw	low (STR_99+7)
  4805  00358A  6E18               	movwf	UART_array@cadena^0,c
  4806  00358C  0E7F               	movlw	high (STR_99+7)
  4807  00358E  6E19               	movwf	(UART_array@cadena+1)^0,c
  4808  003590  EC65  F026         	call	_UART_array	;wreg free
  4809  003594  0E00               	movlw	low ACN_CR_Com@texto2
  4810  003596  6E18               	movwf	UART_array@cadena^0,c
  4811  003598  0E01               	movlw	high ACN_CR_Com@texto2
  4812  00359A  6E19               	movwf	(UART_array@cadena+1)^0,c
  4813  00359C  EC65  F026         	call	_UART_array	;wreg free
  4814                           
  4815                           ;Task_Com_USART.c: 152:         UART_array("]\n"), UART_write(13);
  4816  0035A0  0EF3               	movlw	low STR_103
  4817  0035A2  6E18               	movwf	UART_array@cadena^0,c
  4818  0035A4  0E7F               	movlw	high STR_103
  4819  0035A6  6E19               	movwf	(UART_array@cadena+1)^0,c
  4820  0035A8  EC65  F026         	call	_UART_array	;wreg free
  4821  0035AC  0E0D               	movlw	13
  4822  0035AE  EC24  F02A         	call	_UART_write
  4823  0035B2                     l12022:
  4824                           
  4825                           ;Task_Com_USART.c: 154:     CR=0,CO=0,PA=0;
  4826  0035B2  0E00               	movlw	0
  4827  0035B4  0101               	movlb	1	; () banked
  4828  0035B6  6F87               	movwf	_CR& (0+255),b
  4829                           
  4830                           ; BSR set to: 1
  4831  0035B8  0E00               	movlw	0
  4832  0035BA  6F88               	movwf	_CO& (0+255),b
  4833                           
  4834                           ; BSR set to: 1
  4835  0035BC  0E00               	movlw	0
  4836  0035BE  6F86               	movwf	_PA& (0+255),b
  4837                           
  4838                           ; BSR set to: 1
  4839  0035C0  0012               	return		;funcret
  4840  0035C2                     __end_of_ACN_CR_Com:
  4841                           	callstack 0
  4842                           
  4843 ;; *************** function _ACN_CO_Com *****************
  4844 ;; Defined at:
  4845 ;;		line 254 in file "Task_Com_USART.c"
  4846 ;; Parameters:    Size  Location     Type
  4847 ;;		None
  4848 ;; Auto vars:     Size  Location     Type
  4849 ;;  buffer         10  110[BANK0 ] unsigned char [10]
  4850 ;; Return value:  Size  Location     Type
  4851 ;;                  1    wreg      void 
  4852 ;; Registers used:
  4853 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4854 ;; Tracked objects:
  4855 ;;		On entry : 3F/1
  4856 ;;		On exit  : 3F/1
  4857 ;;		Unchanged: 0/0
  4858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4859 ;;      Params:         0       0       0       0       0       0       0       0       0
  4860 ;;      Locals:         0      10       0       0       0       0       0       0       0
  4861 ;;      Temps:          0       2       0       0       0       0       0       0       0
  4862 ;;      Totals:         0      12       0       0       0       0       0       0       0
  4863 ;;Total ram usage:       12 bytes
  4864 ;; Hardware stack levels used:    1
  4865 ;; Hardware stack levels required when called:   15
  4866 ;; This function calls:
  4867 ;;		_UART_array
  4868 ;;		_UART_write
  4869 ;;		_User_Scan
  4870 ;;		_sprintf
  4871 ;; This function is called by:
  4872 ;;		_Task_Com_USART
  4873 ;; This function uses a non-reentrant model
  4874 ;;
  4875                           
  4876                           	psect	text8
  4877  002C14                     __ptext8:
  4878                           	callstack 0
  4879  002C14                     _ACN_CO_Com:
  4880                           	callstack 14
  4881                           
  4882                           ; BSR set to: 1
  4883                           ;Task_Com_USART.c: 256:     char buffer[10];;Task_Com_USART.c: 259:     switch(N)
  4884                           
  4885                           ; BSR set to: 1
  4886                           ;incstack = 0
  4887  002C14  D05B               	goto	l12188
  4888  002C16                     l12154:
  4889                           
  4890                           ; BSR set to: 0
  4891                           ;Task_Com_USART.c: 263:         {;Task_Com_USART.c: 264:             if(XX == 01) if(POR
      +                          TDbits.RD6 == 1) xx=01, yy=01;
  4892  002C16  043D               	decf	_XX^0,w,c
  4893  002C18  B4D8               	btfsc	status,2,c
  4894                           
  4895                           ; BSR set to: 0
  4896  002C1A  AC83               	btfss	131,6,c	;volatile
  4897  002C1C  D009               	goto	l12160
  4898                           
  4899                           ; BSR set to: 0
  4900  002C1E  0E00               	movlw	0
  4901  002C20  0101               	movlb	1	; () banked
  4902  002C22  6F7A               	movwf	(_xx+1)& (0+255),b
  4903  002C24  0E01               	movlw	1
  4904  002C26  6F79               	movwf	_xx& (0+255),b
  4905  002C28  0E00               	movlw	0
  4906  002C2A  6F78               	movwf	(_yy+1)& (0+255),b
  4907  002C2C  0E01               	movlw	1
  4908  002C2E  6F77               	movwf	_yy& (0+255),b
  4909  002C30                     l12160:
  4910                           
  4911                           ;Task_Com_USART.c: 265:             if(XX == 02) if(PORTDbits.RD7 == 1) xx=02, yy=01;
  4912  002C30  0E02               	movlw	2
  4913  002C32  183D               	xorwf	_XX^0,w,c
  4914  002C34  B4D8               	btfsc	status,2,c
  4915  002C36  AE83               	btfss	131,7,c	;volatile
  4916  002C38  D009               	goto	l12166
  4917  002C3A  0E00               	movlw	0
  4918  002C3C  0101               	movlb	1	; () banked
  4919  002C3E  6F7A               	movwf	(_xx+1)& (0+255),b
  4920  002C40  0E02               	movlw	2
  4921  002C42  6F79               	movwf	_xx& (0+255),b
  4922  002C44  0E00               	movlw	0
  4923  002C46  6F78               	movwf	(_yy+1)& (0+255),b
  4924  002C48  0E01               	movlw	1
  4925  002C4A  6F77               	movwf	_yy& (0+255),b
  4926  002C4C                     l12166:
  4927                           
  4928                           ;Task_Com_USART.c: 266:             if(XX == 01) if(PORTDbits.RD6 == 0) xx=01, yy=00;
  4929  002C4C  043D               	decf	_XX^0,w,c
  4930  002C4E  B4D8               	btfsc	status,2,c
  4931  002C50  BC83               	btfsc	131,6,c	;volatile
  4932  002C52  D009               	goto	l12172
  4933  002C54  0E00               	movlw	0
  4934  002C56  0101               	movlb	1	; () banked
  4935  002C58  6F7A               	movwf	(_xx+1)& (0+255),b
  4936  002C5A  0E01               	movlw	1
  4937  002C5C  6F79               	movwf	_xx& (0+255),b
  4938  002C5E  0E00               	movlw	0
  4939  002C60  6F78               	movwf	(_yy+1)& (0+255),b
  4940  002C62  0E00               	movlw	0
  4941  002C64  6F77               	movwf	_yy& (0+255),b
  4942  002C66                     l12172:
  4943                           
  4944                           ;Task_Com_USART.c: 267:             if(XX == 02) if(PORTDbits.RD7 == 0) xx=02, yy=00;
  4945  002C66  0E02               	movlw	2
  4946  002C68  183D               	xorwf	_XX^0,w,c
  4947  002C6A  B4D8               	btfsc	status,2,c
  4948  002C6C  BE83               	btfsc	131,7,c	;volatile
  4949  002C6E  D043               	goto	l12190
  4950  002C70  0E00               	movlw	0
  4951  002C72  0101               	movlb	1	; () banked
  4952  002C74  6F7A               	movwf	(_xx+1)& (0+255),b
  4953  002C76  0E02               	movlw	2
  4954  002C78  6F79               	movwf	_xx& (0+255),b
  4955  002C7A  0E00               	movlw	0
  4956  002C7C  6F78               	movwf	(_yy+1)& (0+255),b
  4957  002C7E  0E00               	movlw	0
  4958  002C80  6F77               	movwf	_yy& (0+255),b
  4959  002C82  D039               	goto	l12190
  4960  002C84                     l12178:
  4961                           
  4962                           ; BSR set to: 0
  4963                           ;Task_Com_USART.c: 274:         {;Task_Com_USART.c: 275:             if(User_Scan(YY)) y
      +                          y = YY, xx = 1;
  4964  002C84  503C               	movf	_YY^0,w,c
  4965  002C86  EC39  F01D         	call	_User_Scan
  4966  002C8A  0900               	iorlw	0
  4967  002C8C  B4D8               	btfsc	status,2,c
  4968  002C8E  D008               	goto	l1582
  4969  002C90  C03C  F177         	movff	_YY,_yy
  4970  002C94  0101               	movlb	1	; () banked
  4971  002C96  6B78               	clrf	(_yy+1)& (0+255),b
  4972                           
  4973                           ; BSR set to: 1
  4974  002C98  0E00               	movlw	0
  4975  002C9A  6F7A               	movwf	(_xx+1)& (0+255),b
  4976  002C9C  0E01               	movlw	1
  4977  002C9E  D007               	goto	L6
  4978  002CA0                     l1582:
  4979  002CA0  C03C  F177         	movff	_YY,_yy
  4980  002CA4  0101               	movlb	1	; () banked
  4981  002CA6  6B78               	clrf	(_yy+1)& (0+255),b
  4982                           
  4983                           ; BSR set to: 1
  4984  002CA8  0E00               	movlw	0
  4985  002CAA  6F7A               	movwf	(_xx+1)& (0+255),b
  4986  002CAC  0E00               	movlw	0
  4987  002CAE                     L6:
  4988  002CAE  6F79               	movwf	_xx& (0+255),b
  4989  002CB0  D022               	goto	l12190
  4990  002CB2                     l1584:
  4991                           
  4992                           ; BSR set to: 0
  4993                           ;Task_Com_USART.c: 283:         {;Task_Com_USART.c: 284:             xx = cant_user;
  4994  002CB2  C191  F179         	movff	_cant_user,_xx
  4995  002CB6  0101               	movlb	1	; () banked
  4996  002CB8  6B7A               	clrf	(_xx+1)& (0+255),b
  4997                           
  4998                           ;Task_Com_USART.c: 286:         break;
  4999  002CBA  D01D               	goto	l12190
  5000  002CBC                     l1585:
  5001                           
  5002                           ; BSR set to: 0
  5003                           ;Task_Com_USART.c: 291:         {;Task_Com_USART.c: 292:             xx=hora;
  5004  002CBC  C044  F179         	movff	_hora,_xx
  5005  002CC0  0101               	movlb	1	; () banked
  5006  002CC2  6B7A               	clrf	(_xx+1)& (0+255),b
  5007                           
  5008                           ;Task_Com_USART.c: 293:             yy=min;
  5009  002CC4  C043  F177         	movff	_min,_yy
  5010  002CC8  6B78               	clrf	(_yy+1)& (0+255),b
  5011                           
  5012                           ;Task_Com_USART.c: 295:         break;
  5013  002CCA  D015               	goto	l12190
  5014  002CCC                     l12188:
  5015                           
  5016                           ; BSR set to: 1
  5017  002CCC  503E               	movf	_N^0,w,c
  5018  002CCE  0100               	movlb	0	; () banked
  5019  002CD0  6FCC               	movwf	??_ACN_CO_Com& (0+255),b
  5020  002CD2  6BCD               	clrf	(??_ACN_CO_Com+1)& (0+255),b
  5021                           
  5022                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5023                           ; Switch size 1, requested type "simple"
  5024                           ; Number of cases is 1, Range of values is 0 to 0
  5025                           ; switch strategies available:
  5026                           ; Name         Instructions Cycles
  5027                           ; simple_byte            4     3 (average)
  5028                           ;	Chosen strategy is simple_byte
  5029  002CD4  51CD               	movf	(??_ACN_CO_Com+1)& (0+255),w,b
  5030  002CD6  0A00               	xorlw	0	; case 0
  5031  002CD8  A4D8               	btfss	status,2,c
  5032  002CDA  D00D               	goto	l12190
  5033                           
  5034                           ; BSR set to: 0
  5035                           ; Switch size 1, requested type "simple"
  5036                           ; Number of cases is 4, Range of values is 1 to 4
  5037                           ; switch strategies available:
  5038                           ; Name         Instructions Cycles
  5039                           ; simple_byte           13     7 (average)
  5040                           ;	Chosen strategy is simple_byte
  5041  002CDC  51CC               	movf	??_ACN_CO_Com& (0+255),w,b
  5042  002CDE  0A01               	xorlw	1	; case 1
  5043  002CE0  B4D8               	btfsc	status,2,c
  5044  002CE2  D799               	goto	l12154
  5045  002CE4  0A03               	xorlw	3	; case 2
  5046  002CE6  B4D8               	btfsc	status,2,c
  5047  002CE8  D7CD               	goto	l12178
  5048  002CEA  0A01               	xorlw	1	; case 3
  5049  002CEC  B4D8               	btfsc	status,2,c
  5050  002CEE  D7E1               	goto	l1584
  5051  002CF0  0A07               	xorlw	7	; case 4
  5052  002CF2  B4D8               	btfsc	status,2,c
  5053  002CF4  D7E3               	goto	l1585
  5054  002CF6                     l12190:
  5055                           
  5056                           ;Task_Com_USART.c: 299:     CO=0,PA=0,CR=0;
  5057  002CF6  0E00               	movlw	0
  5058  002CF8  0101               	movlb	1	; () banked
  5059  002CFA  6F88               	movwf	_CO& (0+255),b
  5060  002CFC  0E00               	movlw	0
  5061  002CFE  6F86               	movwf	_PA& (0+255),b
  5062  002D00  0E00               	movlw	0
  5063  002D02  6F87               	movwf	_CR& (0+255),b
  5064                           
  5065                           ; BSR set to: 1
  5066                           ;Task_Com_USART.c: 302:     UART_array("\n[RCO,"), sprintf(buffer,"%d",N);
  5067  002D04  0E79               	movlw	low STR_123
  5068  002D06  6E18               	movwf	UART_array@cadena^0,c
  5069  002D08  0E7F               	movlw	high STR_123
  5070  002D0A  6E19               	movwf	(UART_array@cadena+1)^0,c
  5071  002D0C  EC65  F026         	call	_UART_array	;wreg free
  5072  002D10  0ECE               	movlw	low ACN_CO_Com@buffer
  5073  002D12  0100               	movlb	0	; () banked
  5074  002D14  6FB7               	movwf	sprintf@s& (0+255),b
  5075  002D16  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5076  002D18  0EF9               	movlw	low STR_9
  5077  002D1A  6FB9               	movwf	sprintf@fmt& (0+255),b
  5078  002D1C  0E7F               	movlw	high STR_9
  5079  002D1E  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5080  002D20  C03E  F0BB         	movff	_N,?_sprintf+4
  5081  002D24  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  5082  002D26  EC78  F027         	call	_sprintf	;wreg free
  5083                           
  5084                           ; BSR set to: 0
  5085                           ;Task_Com_USART.c: 303:     UART_array(buffer), UART_array(",");
  5086  002D2A  0ECE               	movlw	low ACN_CO_Com@buffer
  5087  002D2C  6E18               	movwf	UART_array@cadena^0,c
  5088  002D2E  6A19               	clrf	(UART_array@cadena+1)^0,c
  5089  002D30  EC65  F026         	call	_UART_array	;wreg free
  5090  002D34  0E3F               	movlw	low (STR_99+7)
  5091  002D36  6E18               	movwf	UART_array@cadena^0,c
  5092  002D38  0E7F               	movlw	high (STR_99+7)
  5093  002D3A  6E19               	movwf	(UART_array@cadena+1)^0,c
  5094  002D3C  EC65  F026         	call	_UART_array	;wreg free
  5095                           
  5096                           ;Task_Com_USART.c: 304:     UART_array(llave), sprintf(buffer,"%02d",xx);
  5097  002D40  0ED2               	movlw	low _llave
  5098  002D42  6E18               	movwf	UART_array@cadena^0,c
  5099  002D44  0E01               	movlw	high _llave
  5100  002D46  6E19               	movwf	(UART_array@cadena+1)^0,c
  5101  002D48  EC65  F026         	call	_UART_array	;wreg free
  5102  002D4C  0ECE               	movlw	low ACN_CO_Com@buffer
  5103  002D4E  0100               	movlb	0	; () banked
  5104  002D50  6FB7               	movwf	sprintf@s& (0+255),b
  5105  002D52  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5106  002D54  0EE4               	movlw	low STR_14
  5107  002D56  6FB9               	movwf	sprintf@fmt& (0+255),b
  5108  002D58  0E7F               	movlw	high STR_14
  5109  002D5A  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5110  002D5C  C179  F0BB         	movff	_xx,?_sprintf+4
  5111  002D60  C17A  F0BC         	movff	_xx+1,?_sprintf+5
  5112  002D64  EC78  F027         	call	_sprintf	;wreg free
  5113                           
  5114                           ; BSR set to: 0
  5115                           ;Task_Com_USART.c: 305:     UART_array(","), UART_array(buffer);
  5116  002D68  0E3F               	movlw	low (STR_99+7)
  5117  002D6A  6E18               	movwf	UART_array@cadena^0,c
  5118  002D6C  0E7F               	movlw	high (STR_99+7)
  5119  002D6E  6E19               	movwf	(UART_array@cadena+1)^0,c
  5120  002D70  EC65  F026         	call	_UART_array	;wreg free
  5121  002D74  0ECE               	movlw	low ACN_CO_Com@buffer
  5122  002D76  6E18               	movwf	UART_array@cadena^0,c
  5123  002D78  6A19               	clrf	(UART_array@cadena+1)^0,c
  5124  002D7A  EC65  F026         	call	_UART_array	;wreg free
  5125                           
  5126                           ;Task_Com_USART.c: 306:     sprintf(buffer,"%02d",yy), UART_array(",");
  5127  002D7E  0ECE               	movlw	low ACN_CO_Com@buffer
  5128  002D80  0100               	movlb	0	; () banked
  5129  002D82  6FB7               	movwf	sprintf@s& (0+255),b
  5130  002D84  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5131  002D86  0EE4               	movlw	low STR_14
  5132  002D88  6FB9               	movwf	sprintf@fmt& (0+255),b
  5133  002D8A  0E7F               	movlw	high STR_14
  5134  002D8C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5135  002D8E  C177  F0BB         	movff	_yy,?_sprintf+4
  5136  002D92  C178  F0BC         	movff	_yy+1,?_sprintf+5
  5137  002D96  EC78  F027         	call	_sprintf	;wreg free
  5138                           
  5139                           ; BSR set to: 0
  5140  002D9A  0E3F               	movlw	low (STR_99+7)
  5141  002D9C  6E18               	movwf	UART_array@cadena^0,c
  5142  002D9E  0E7F               	movlw	high (STR_99+7)
  5143  002DA0  6E19               	movwf	(UART_array@cadena+1)^0,c
  5144  002DA2  EC65  F026         	call	_UART_array	;wreg free
  5145                           
  5146                           ;Task_Com_USART.c: 307:     UART_array(buffer), UART_array("]\n");
  5147  002DA6  0ECE               	movlw	low ACN_CO_Com@buffer
  5148  002DA8  6E18               	movwf	UART_array@cadena^0,c
  5149  002DAA  6A19               	clrf	(UART_array@cadena+1)^0,c
  5150  002DAC  EC65  F026         	call	_UART_array	;wreg free
  5151  002DB0  0EF3               	movlw	low STR_103
  5152  002DB2  6E18               	movwf	UART_array@cadena^0,c
  5153  002DB4  0E7F               	movlw	high STR_103
  5154  002DB6  6E19               	movwf	(UART_array@cadena+1)^0,c
  5155  002DB8  EC65  F026         	call	_UART_array	;wreg free
  5156                           
  5157                           ;Task_Com_USART.c: 308:     UART_write(13);
  5158  002DBC  0E0D               	movlw	13
  5159  002DBE  EC24  F02A         	call	_UART_write
  5160                           
  5161                           ;Task_Com_USART.c: 310:     xx=00,yy=00;
  5162  002DC2  0E00               	movlw	0
  5163  002DC4  0101               	movlb	1	; () banked
  5164  002DC6  6F7A               	movwf	(_xx+1)& (0+255),b
  5165  002DC8  0E00               	movlw	0
  5166  002DCA  6F79               	movwf	_xx& (0+255),b
  5167                           
  5168                           ; BSR set to: 1
  5169  002DCC  0E00               	movlw	0
  5170  002DCE  6F78               	movwf	(_yy+1)& (0+255),b
  5171  002DD0  0E00               	movlw	0
  5172  002DD2  6F77               	movwf	_yy& (0+255),b
  5173                           
  5174                           ; BSR set to: 1
  5175  002DD4  0012               	return		;funcret
  5176  002DD6                     __end_of_ACN_CO_Com:
  5177                           	callstack 0
  5178                           
  5179 ;; *************** function _Task2 *****************
  5180 ;; Defined at:
  5181 ;;		line 8 in file "Task2.c"
  5182 ;; Parameters:    Size  Location     Type
  5183 ;;  Maquina_Esta    1   52[BANK0 ] PTR unsigned char 
  5184 ;;		 -> main@Est_proj(1), 
  5185 ;; Auto vars:     Size  Location     Type
  5186 ;;		None
  5187 ;; Return value:  Size  Location     Type
  5188 ;;                  1    wreg      void 
  5189 ;; Registers used:
  5190 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5191 ;; Tracked objects:
  5192 ;;		On entry : 3F/0
  5193 ;;		On exit  : 3F/0
  5194 ;;		Unchanged: 0/0
  5195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5196 ;;      Params:         0       1       0       0       0       0       0       0       0
  5197 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5198 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5199 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5200 ;;Total ram usage:        2 bytes
  5201 ;; Hardware stack levels used:    1
  5202 ;; Hardware stack levels required when called:   14
  5203 ;; This function calls:
  5204 ;;		_E_Ingresos
  5205 ;;		_E_Rfid_Proj
  5206 ;; This function is called by:
  5207 ;;		_main
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           	psect	text9
  5212  004B02                     __ptext9:
  5213                           	callstack 0
  5214  004B02                     _Task2:
  5215                           	callstack 16
  5216                           
  5217                           ; BSR set to: 0
  5218                           ;Task2.c: 8: void Task2(unsigned char *Maquina_Estado);Task2.c: 9: {;Task2.c: 15:     if
      +                          (*Maquina_Estado == 1 && (Timer_Hash == 700)) E_Rfid_Proj();
  5219                           
  5220                           ; BSR set to: 1
  5221                           ;incstack = 0
  5222  004B02  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5223  004B04  6ED9               	movwf	fsr2l,c
  5224  004B06  6ADA               	clrf	fsr2h,c
  5225  004B08  04DE               	decf	postinc2,w,c
  5226  004B0A  A4D8               	btfss	status,2,c
  5227  004B0C  D00B               	goto	l12334
  5228                           
  5229                           ; BSR set to: 0
  5230  004B0E  0EBC               	movlw	188
  5231  004B10  0101               	movlb	1	; () banked
  5232  004B12  19DA               	xorwf	_Timer_Hash& (0+255),w,b
  5233  004B14  E107               	bnz	l12334
  5234  004B16  0E02               	movlw	2
  5235  004B18  19DB               	xorwf	(_Timer_Hash+1)& (0+255),w,b
  5236  004B1A  A4D8               	btfss	status,2,c
  5237  004B1C  D003               	goto	l12334
  5238                           
  5239                           ; BSR set to: 1
  5240  004B1E  ECB2  F025         	call	_E_Rfid_Proj	;wreg free
  5241  004B22  D009               	goto	l12338
  5242  004B24                     l12334:
  5243  004B24  0100               	movlb	0	; () banked
  5244  004B26  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5245  004B28  6ED9               	movwf	fsr2l,c
  5246  004B2A  6ADA               	clrf	fsr2h,c
  5247  004B2C  0E02               	movlw	2
  5248  004B2E  18DE               	xorwf	postinc2,w,c
  5249  004B30  B4D8               	btfsc	status,2,c
  5250                           
  5251                           ; BSR set to: 0
  5252  004B32  ECE1  F026         	call	_E_Ingresos	;wreg free
  5253  004B36                     l12338:
  5254                           
  5255                           ;Task2.c: 18:     *Maquina_Estado = *Maquina_Estado+1;
  5256  004B36  0100               	movlb	0	; () banked
  5257  004B38  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5258  004B3A  6ED9               	movwf	fsr2l,c
  5259  004B3C  6ADA               	clrf	fsr2h,c
  5260  004B3E  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5261  004B40  6EE1               	movwf	fsr1l,c
  5262  004B42  6AE2               	clrf	fsr1h,c
  5263  004B44  50E7               	movf	indf1,w,c
  5264  004B46  6F95               	movwf	??_Task2& (0+255),b
  5265  004B48  2995               	incf	??_Task2& (0+255),w,b
  5266  004B4A  6EDF               	movwf	indf2,c
  5267                           
  5268                           ; BSR set to: 0
  5269                           ;Task2.c: 19:     if(*Maquina_Estado > 2) *Maquina_Estado = 1;
  5270  004B4C  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5271  004B4E  6ED9               	movwf	fsr2l,c
  5272  004B50  6ADA               	clrf	fsr2h,c
  5273  004B52  0E02               	movlw	2
  5274  004B54  64DF               	cpfsgt	indf2,c
  5275  004B56  0012               	return	
  5276                           
  5277                           ; BSR set to: 0
  5278  004B58  5194               	movf	Task2@Maquina_Estado& (0+255),w,b
  5279  004B5A  6ED9               	movwf	fsr2l,c
  5280  004B5C  6ADA               	clrf	fsr2h,c
  5281  004B5E  0E01               	movlw	1
  5282  004B60  6EDF               	movwf	indf2,c
  5283                           
  5284                           ; BSR set to: 0
  5285  004B62  0012               	return		;funcret
  5286  004B64                     __end_of_Task2:
  5287                           	callstack 0
  5288                           
  5289 ;; *************** function _E_Ingresos *****************
  5290 ;; Defined at:
  5291 ;;		line 65 in file "Task2.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5300 ;; Tracked objects:
  5301 ;;		On entry : 3F/0
  5302 ;;		On exit  : 3E/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:   11
  5312 ;; This function calls:
  5313 ;;		_Read_Hash_ex
  5314 ;; This function is called by:
  5315 ;;		_Task2
  5316 ;; This function uses a non-reentrant model
  5317 ;;
  5318                           
  5319                           	psect	text10
  5320  004DC2                     __ptext10:
  5321                           	callstack 0
  5322  004DC2                     _E_Ingresos:
  5323                           	callstack 18
  5324                           
  5325                           ; BSR set to: 0
  5326                           ;Task2.c: 68:     if(Tarj_Dect == 1 && Timer_Puerta1!=0)
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;incstack = 0
  5330  004DC2  0101               	movlb	1	; () banked
  5331  004DC4  0585               	decf	_Tarj_Dect& (0+255),w,b
  5332  004DC6  A4D8               	btfss	status,2,c
  5333  004DC8  0012               	return	
  5334                           
  5335                           ; BSR set to: 1
  5336  004DCA  51DE               	movf	_Timer_Puerta1& (0+255),w,b
  5337  004DCC  11DF               	iorwf	(_Timer_Puerta1+1)& (0+255),w,b
  5338  004DCE  B4D8               	btfsc	status,2,c
  5339  004DD0  0012               	return	
  5340                           
  5341                           ; BSR set to: 1
  5342                           ;Task2.c: 69:     {;Task2.c: 72:         if(Read_Hash_ex(codigo_rfid) == 1 && PORTDbits.
      +                          RD6 == 0)
  5343  004DD2  C031  F084         	movff	_codigo_rfid,Read_Hash_ex@cod_rfid
  5344  004DD6  C032  F085         	movff	_codigo_rfid+1,Read_Hash_ex@cod_rfid+1
  5345  004DDA  C033  F086         	movff	_codigo_rfid+2,Read_Hash_ex@cod_rfid+2
  5346  004DDE  C034  F087         	movff	_codigo_rfid+3,Read_Hash_ex@cod_rfid+3
  5347  004DE2  C035  F088         	movff	_codigo_rfid+4,Read_Hash_ex@cod_rfid+4
  5348  004DE6  C036  F089         	movff	_codigo_rfid+5,Read_Hash_ex@cod_rfid+5
  5349  004DEA  C037  F08A         	movff	_codigo_rfid+6,Read_Hash_ex@cod_rfid+6
  5350  004DEE  C038  F08B         	movff	_codigo_rfid+7,Read_Hash_ex@cod_rfid+7
  5351  004DF2  EC22  F021         	call	_Read_Hash_ex	;wreg free
  5352  004DF6  06E8               	decf	wreg,f,c
  5353  004DF8  A4D8               	btfss	status,2,c
  5354  004DFA  0012               	return	
  5355  004DFC  BC83               	btfsc	131,6,c	;volatile
  5356  004DFE  0012               	return	
  5357                           
  5358                           ;Task2.c: 73:         {;Task2.c: 74:             LATEbits.LATE1=1;
  5359  004E00  828D               	bsf	141,1,c	;volatile
  5360                           
  5361                           ;Task2.c: 75:             LATEbits.LATE0=1;
  5362  004E02  808D               	bsf	141,0,c	;volatile
  5363                           
  5364                           ;Task2.c: 76:             puerta1=1;
  5365  004E04  0E01               	movlw	1
  5366  004E06  0101               	movlb	1	; () banked
  5367  004E08  6F7E               	movwf	_puerta1& (0+255),b
  5368                           
  5369                           ;Task2.c: 77:             puerta2=0;
  5370  004E0A  0E00               	movlw	0
  5371  004E0C  6F7D               	movwf	_puerta2& (0+255),b
  5372  004E0E  0012               	return		;funcret
  5373  004E10                     __end_of_E_Ingresos:
  5374                           	callstack 0
  5375                           
  5376 ;; *************** function _Task1 *****************
  5377 ;; Defined at:
  5378 ;;		line 10 in file "Task1.c"
  5379 ;; Parameters:    Size  Location     Type
  5380 ;;  Pantalla        1  137[BANK0 ] PTR unsigned char 
  5381 ;;		 -> main@Est_pant(1), 
  5382 ;; Auto vars:     Size  Location     Type
  5383 ;;		None
  5384 ;; Return value:  Size  Location     Type
  5385 ;;                  1    wreg      void 
  5386 ;; Registers used:
  5387 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5388 ;; Tracked objects:
  5389 ;;		On entry : 3F/0
  5390 ;;		On exit  : 3E/0
  5391 ;;		Unchanged: 0/0
  5392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5393 ;;      Params:         0       1       0       0       0       0       0       0       0
  5394 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5395 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5396 ;;      Totals:         0       2       0       0       0       0       0       0       0
  5397 ;;Total ram usage:        2 bytes
  5398 ;; Hardware stack levels used:    1
  5399 ;; Hardware stack levels required when called:   19
  5400 ;; This function calls:
  5401 ;;		_E_Rtc_Lcd
  5402 ;;		_E_Teclado_Lcd
  5403 ;;		_E_pant1_Lcd
  5404 ;;		_E_pant2_Lcd
  5405 ;;		_LCD_command
  5406 ;; This function is called by:
  5407 ;;		_main
  5408 ;; This function uses a non-reentrant model
  5409 ;;
  5410                           
  5411                           	psect	text11
  5412  003970                     __ptext11:
  5413                           	callstack 0
  5414  003970                     _Task1:
  5415                           	callstack 11
  5416                           
  5417                           ; BSR set to: 0
  5418                           ;Task1.c: 10: void Task1(unsigned char *Pantalla);Task1.c: 11: {;Task1.c: 13:     if(Tim
      +                          er_DelayLcd == 0 && tec_p == 0 && mod_rtc == 0)
  5419                           
  5420                           ;incstack = 0
  5421  003970  0101               	movlb	1	; () banked
  5422  003972  51E2               	movf	_Timer_DelayLcd& (0+255),w,b
  5423  003974  11E3               	iorwf	(_Timer_DelayLcd+1)& (0+255),w,b
  5424  003976  A4D8               	btfss	status,2,c
  5425  003978  D035               	goto	l12294
  5426                           
  5427                           ; BSR set to: 1
  5428  00397A  5046               	movf	_tec_p^0,w,c
  5429  00397C  A4D8               	btfss	status,2,c
  5430  00397E  D032               	goto	l12294
  5431                           
  5432                           ; BSR set to: 1
  5433  003980  5045               	movf	_mod_rtc^0,w,c
  5434  003982  A4D8               	btfss	status,2,c
  5435  003984  D02F               	goto	l12294
  5436                           
  5437                           ; BSR set to: 1
  5438                           ;Task1.c: 14:     {;Task1.c: 15:         if(*Pantalla == 1) *Pantalla = 2;
  5439  003986  0100               	movlb	0	; () banked
  5440  003988  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5441  00398A  6ED9               	movwf	fsr2l,c
  5442  00398C  6ADA               	clrf	fsr2h,c
  5443  00398E  04DE               	decf	postinc2,w,c
  5444  003990  A4D8               	btfss	status,2,c
  5445  003992  D005               	goto	l12280
  5446                           
  5447                           ; BSR set to: 0
  5448  003994  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5449  003996  6ED9               	movwf	fsr2l,c
  5450  003998  6ADA               	clrf	fsr2h,c
  5451  00399A  0E02               	movlw	2
  5452  00399C  D00B               	goto	L7
  5453  00399E                     l12280:
  5454                           
  5455                           ; BSR set to: 0
  5456  00399E  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5457  0039A0  6ED9               	movwf	fsr2l,c
  5458  0039A2  6ADA               	clrf	fsr2h,c
  5459  0039A4  0E02               	movlw	2
  5460  0039A6  18DE               	xorwf	postinc2,w,c
  5461  0039A8  A4D8               	btfss	status,2,c
  5462  0039AA  D006               	goto	l12284
  5463  0039AC                     u10700:
  5464                           
  5465                           ; BSR set to: 0
  5466  0039AC  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5467  0039AE  6ED9               	movwf	fsr2l,c
  5468  0039B0  6ADA               	clrf	fsr2h,c
  5469  0039B2  0E01               	movlw	1
  5470  0039B4                     L7:
  5471  0039B4  6EDF               	movwf	indf2,c
  5472  0039B6  D00E               	goto	l12290
  5473  0039B8                     l12284:
  5474                           
  5475                           ; BSR set to: 0
  5476  0039B8  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5477  0039BA  6ED9               	movwf	fsr2l,c
  5478  0039BC  6ADA               	clrf	fsr2h,c
  5479  0039BE  0E03               	movlw	3
  5480  0039C0  18DE               	xorwf	postinc2,w,c
  5481  0039C2  B4D8               	btfsc	status,2,c
  5482  0039C4  D7F3               	goto	u10700
  5483                           
  5484                           ; BSR set to: 0
  5485  0039C6  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5486  0039C8  6ED9               	movwf	fsr2l,c
  5487  0039CA  6ADA               	clrf	fsr2h,c
  5488  0039CC  0E04               	movlw	4
  5489  0039CE  18DE               	xorwf	postinc2,w,c
  5490  0039D0  B4D8               	btfsc	status,2,c
  5491  0039D2  D7EC               	goto	u10700
  5492  0039D4                     l12290:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;Task1.c: 19:         Timer_DelayLcd = 300;
  5496  0039D4  0E01               	movlw	1
  5497  0039D6  0101               	movlb	1	; () banked
  5498  0039D8  6FE3               	movwf	(_Timer_DelayLcd+1)& (0+255),b
  5499  0039DA  0E2C               	movlw	44
  5500  0039DC  6FE2               	movwf	_Timer_DelayLcd& (0+255),b
  5501                           
  5502                           ; BSR set to: 1
  5503                           ;Task1.c: 20:         mostrar = 0;
  5504  0039DE  0E00               	movlw	0
  5505  0039E0  6F8E               	movwf	_mostrar& (0+255),b
  5506                           
  5507                           ;Task1.c: 21:     }
  5508  0039E2  D018               	goto	l12306
  5509  0039E4                     l12294:
  5510                           
  5511                           ; BSR set to: 1
  5512  0039E4  0446               	decf	_tec_p^0,w,c
  5513  0039E6  A4D8               	btfss	status,2,c
  5514  0039E8  D009               	goto	l12300
  5515                           
  5516                           ; BSR set to: 1
  5517  0039EA  5045               	movf	_mod_rtc^0,w,c
  5518  0039EC  A4D8               	btfss	status,2,c
  5519  0039EE  D006               	goto	l12300
  5520                           
  5521                           ; BSR set to: 1
  5522  0039F0  0100               	movlb	0	; () banked
  5523  0039F2  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5524  0039F4  6ED9               	movwf	fsr2l,c
  5525  0039F6  6ADA               	clrf	fsr2h,c
  5526  0039F8  0E03               	movlw	3
  5527  0039FA  D00B               	goto	L8
  5528  0039FC                     l12300:
  5529                           
  5530                           ; BSR set to: 1
  5531  0039FC  0445               	decf	_mod_rtc^0,w,c
  5532  0039FE  A4D8               	btfss	status,2,c
  5533  003A00  D009               	goto	l12306
  5534                           
  5535                           ; BSR set to: 1
  5536  003A02  5046               	movf	_tec_p^0,w,c
  5537  003A04  A4D8               	btfss	status,2,c
  5538  003A06  D006               	goto	l12306
  5539                           
  5540                           ; BSR set to: 1
  5541  003A08  0100               	movlb	0	; () banked
  5542  003A0A  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5543  003A0C  6ED9               	movwf	fsr2l,c
  5544  003A0E  6ADA               	clrf	fsr2h,c
  5545  003A10  0E04               	movlw	4
  5546  003A12                     L8:
  5547  003A12  6EDF               	movwf	indf2,c
  5548  003A14                     l12306:
  5549                           
  5550                           ;Task1.c: 26:     if(!mostrar) LCD_command(0x01);
  5551  003A14  0101               	movlb	1	; () banked
  5552  003A16  518E               	movf	_mostrar& (0+255),w,b
  5553  003A18  A4D8               	btfss	status,2,c
  5554  003A1A  D003               	goto	l12310
  5555                           
  5556                           ; BSR set to: 1
  5557  003A1C  0E01               	movlw	1
  5558  003A1E  EC78  F023         	call	_LCD_command
  5559  003A22                     l12310:
  5560                           
  5561                           ;Task1.c: 29:     if(*Pantalla == 1) E_pant1_Lcd();
  5562  003A22  0100               	movlb	0	; () banked
  5563  003A24  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5564  003A26  6ED9               	movwf	fsr2l,c
  5565  003A28  6ADA               	clrf	fsr2h,c
  5566  003A2A  04DE               	decf	postinc2,w,c
  5567  003A2C  A4D8               	btfss	status,2,c
  5568  003A2E  D003               	goto	l12314
  5569                           
  5570                           ; BSR set to: 0
  5571  003A30  ECD2  F00B         	call	_E_pant1_Lcd	;wreg free
  5572  003A34  0012               	return	
  5573  003A36                     l12314:
  5574                           
  5575                           ; BSR set to: 0
  5576  003A36  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5577  003A38  6ED9               	movwf	fsr2l,c
  5578  003A3A  6ADA               	clrf	fsr2h,c
  5579  003A3C  0E02               	movlw	2
  5580  003A3E  18DE               	xorwf	postinc2,w,c
  5581  003A40  A4D8               	btfss	status,2,c
  5582  003A42  D003               	goto	l12318
  5583                           
  5584                           ; BSR set to: 0
  5585  003A44  ECFF  F010         	call	_E_pant2_Lcd	;wreg free
  5586  003A48  0012               	return	
  5587  003A4A                     l12318:
  5588                           
  5589                           ; BSR set to: 0
  5590  003A4A  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5591  003A4C  6ED9               	movwf	fsr2l,c
  5592  003A4E  6ADA               	clrf	fsr2h,c
  5593  003A50  0E03               	movlw	3
  5594  003A52  18DE               	xorwf	postinc2,w,c
  5595  003A54  A4D8               	btfss	status,2,c
  5596  003A56  D003               	goto	l12322
  5597                           
  5598                           ; BSR set to: 0
  5599  003A58  ECA6  F018         	call	_E_Teclado_Lcd	;wreg free
  5600  003A5C  0012               	return	
  5601  003A5E                     l12322:
  5602                           
  5603                           ; BSR set to: 0
  5604  003A5E  51E9               	movf	Task1@Pantalla& (0+255),w,b
  5605  003A60  6ED9               	movwf	fsr2l,c
  5606  003A62  6ADA               	clrf	fsr2h,c
  5607  003A64  0E04               	movlw	4
  5608  003A66  18DE               	xorwf	postinc2,w,c
  5609  003A68  A4D8               	btfss	status,2,c
  5610  003A6A  0012               	return	
  5611                           
  5612                           ; BSR set to: 0
  5613  003A6C  EC29  F00A         	call	_E_Rtc_Lcd	;wreg free
  5614  003A70  0012               	return	
  5615  003A72                     __end_of_Task1:
  5616                           	callstack 0
  5617                           
  5618 ;; *************** function _E_pant2_Lcd *****************
  5619 ;; Defined at:
  5620 ;;		line 96 in file "Task1.c"
  5621 ;; Parameters:    Size  Location     Type
  5622 ;;		None
  5623 ;; Auto vars:     Size  Location     Type
  5624 ;;  buffer2        10  109[BANK0 ] unsigned char [10]
  5625 ;;  buffer          5  119[BANK0 ] unsigned char [5]
  5626 ;; Return value:  Size  Location     Type
  5627 ;;                  1    wreg      void 
  5628 ;; Registers used:
  5629 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5630 ;; Tracked objects:
  5631 ;;		On entry : 3F/0
  5632 ;;		On exit  : 3F/1
  5633 ;;		Unchanged: 0/0
  5634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5635 ;;      Params:         0       0       0       0       0       0       0       0       0
  5636 ;;      Locals:         0      15       0       0       0       0       0       0       0
  5637 ;;      Temps:          0       1       0       0       0       0       0       0       0
  5638 ;;      Totals:         0      16       0       0       0       0       0       0       0
  5639 ;;Total ram usage:       16 bytes
  5640 ;; Hardware stack levels used:    1
  5641 ;; Hardware stack levels required when called:   15
  5642 ;; This function calls:
  5643 ;;		_LCD_array
  5644 ;;		_Num_User
  5645 ;;		_Read_User
  5646 ;;		_sprintf
  5647 ;; This function is called by:
  5648 ;;		_Task1
  5649 ;; This function uses a non-reentrant model
  5650 ;;
  5651                           
  5652                           	psect	text12
  5653  0021FE                     __ptext12:
  5654                           	callstack 0
  5655  0021FE                     _E_pant2_Lcd:
  5656                           	callstack 14
  5657                           
  5658                           ; BSR set to: 0
  5659                           ;Task1.c: 98:     char buffer[5], buffer2[10];;Task1.c: 100:     if(!Timer_DelayMuestra)
  5660                           
  5661                           ;incstack = 0
  5662  0021FE  0101               	movlb	1	; () banked
  5663  002200  51E0               	movf	_Timer_DelayMuestra& (0+255),w,b
  5664  002202  11E1               	iorwf	(_Timer_DelayMuestra+1)& (0+255),w,b
  5665  002204  A4D8               	btfss	status,2,c
  5666  002206  0012               	return	
  5667                           
  5668                           ; BSR set to: 1
  5669                           ;Task1.c: 101:     {;Task1.c: 102:         if(mostrar == 0)
  5670  002208  518E               	movf	_mostrar& (0+255),w,b
  5671  00220A  A4D8               	btfss	status,2,c
  5672  00220C  D02D               	goto	l11744
  5673                           
  5674                           ; BSR set to: 1
  5675                           ;Task1.c: 103:         {;Task1.c: 105:             LCD_array(1,1,"CARD:");
  5676  00220E  0E00               	movlw	0
  5677  002210  6E1D               	movwf	(LCD_array@x+1)^0,c
  5678  002212  0E01               	movlw	1
  5679  002214  6E1C               	movwf	LCD_array@x^0,c
  5680  002216  0E00               	movlw	0
  5681  002218  6E1F               	movwf	(LCD_array@y+1)^0,c
  5682  00221A  0E01               	movlw	1
  5683  00221C  6E1E               	movwf	LCD_array@y^0,c
  5684  00221E  0EA8               	movlw	low STR_28
  5685  002220  6E20               	movwf	LCD_array@date^0,c
  5686  002222  0E7F               	movlw	high STR_28
  5687  002224  6E21               	movwf	(LCD_array@date+1)^0,c
  5688  002226  ECB1  F01F         	call	_LCD_array	;wreg free
  5689                           
  5690                           ;Task1.c: 106:             LCD_array(2,1,"USUARIO:");
  5691  00222A  0E00               	movlw	0
  5692  00222C  6E1D               	movwf	(LCD_array@x+1)^0,c
  5693  00222E  0E02               	movlw	2
  5694  002230  6E1C               	movwf	LCD_array@x^0,c
  5695  002232  0E00               	movlw	0
  5696  002234  6E1F               	movwf	(LCD_array@y+1)^0,c
  5697  002236  0E01               	movlw	1
  5698  002238  6E1E               	movwf	LCD_array@y^0,c
  5699  00223A  0E5C               	movlw	low (STR_73+10)
  5700  00223C  6E20               	movwf	LCD_array@date^0,c
  5701  00223E  0E7E               	movlw	high (STR_73+10)
  5702  002240  6E21               	movwf	(LCD_array@date+1)^0,c
  5703  002242  ECB1  F01F         	call	_LCD_array	;wreg free
  5704                           
  5705                           ;Task1.c: 107:             LCD_array(4,1,"Cant.Usuarios:");
  5706  002246  0E00               	movlw	0
  5707  002248  6E1D               	movwf	(LCD_array@x+1)^0,c
  5708  00224A  0E04               	movlw	4
  5709  00224C  6E1C               	movwf	LCD_array@x^0,c
  5710  00224E  0E00               	movlw	0
  5711  002250  6E1F               	movwf	(LCD_array@y+1)^0,c
  5712  002252  0E01               	movlw	1
  5713  002254  6E1E               	movwf	LCD_array@y^0,c
  5714  002256  0EB0               	movlw	low STR_30
  5715  002258  6E20               	movwf	LCD_array@date^0,c
  5716  00225A  0E7E               	movlw	high STR_30
  5717  00225C  6E21               	movwf	(LCD_array@date+1)^0,c
  5718  00225E  ECB1  F01F         	call	_LCD_array	;wreg free
  5719                           
  5720                           ;Task1.c: 108:             mostrar = 1;
  5721  002262  0E01               	movlw	1
  5722  002264  0101               	movlb	1	; () banked
  5723  002266  6F8E               	movwf	_mostrar& (0+255),b
  5724  002268                     l11744:
  5725                           
  5726                           ; BSR set to: 1
  5727                           ;Task1.c: 111:         if(codigo_rfid != 0)
  5728  002268  5031               	movf	_codigo_rfid^0,w,c
  5729  00226A  1032               	iorwf	(_codigo_rfid+1)^0,w,c
  5730  00226C  1033               	iorwf	(_codigo_rfid+2)^0,w,c
  5731  00226E  1034               	iorwf	(_codigo_rfid+3)^0,w,c
  5732  002270  1035               	iorwf	(_codigo_rfid+4)^0,w,c
  5733  002272  1036               	iorwf	(_codigo_rfid+5)^0,w,c
  5734  002274  1037               	iorwf	(_codigo_rfid+6)^0,w,c
  5735  002276  1038               	iorwf	(_codigo_rfid+7)^0,w,c
  5736  002278  B4D8               	btfsc	status,2,c
  5737  00227A  D09B               	goto	l11762
  5738                           
  5739                           ; BSR set to: 1
  5740                           ;Task1.c: 112:         {;Task1.c: 114:             sprintf(buffer2,"%010lu",codigo_rfid)
      +                          ;
  5741  00227C  0ECD               	movlw	low E_pant2_Lcd@buffer2
  5742  00227E  0100               	movlb	0	; () banked
  5743  002280  6FB7               	movwf	sprintf@s& (0+255),b
  5744  002282  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5745  002284  0E95               	movlw	low STR_31
  5746  002286  6FB9               	movwf	sprintf@fmt& (0+255),b
  5747  002288  0E7F               	movlw	high STR_31
  5748  00228A  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5749  00228C  C031  F0BB         	movff	_codigo_rfid,?_sprintf+4
  5750  002290  C032  F0BC         	movff	_codigo_rfid+1,?_sprintf+5
  5751  002294  C033  F0BD         	movff	_codigo_rfid+2,?_sprintf+6
  5752  002298  C034  F0BE         	movff	_codigo_rfid+3,?_sprintf+7
  5753  00229C  C035  F0BF         	movff	_codigo_rfid+4,?_sprintf+8
  5754  0022A0  C036  F0C0         	movff	_codigo_rfid+5,?_sprintf+9
  5755  0022A4  C037  F0C1         	movff	_codigo_rfid+6,?_sprintf+10
  5756  0022A8  C038  F0C2         	movff	_codigo_rfid+7,?_sprintf+11
  5757  0022AC  EC78  F027         	call	_sprintf	;wreg free
  5758                           
  5759                           ; BSR set to: 0
  5760                           ;Task1.c: 115:             LCD_array(1,6,buffer2);
  5761  0022B0  0E00               	movlw	0
  5762  0022B2  6E1D               	movwf	(LCD_array@x+1)^0,c
  5763  0022B4  0E01               	movlw	1
  5764  0022B6  6E1C               	movwf	LCD_array@x^0,c
  5765  0022B8  0E00               	movlw	0
  5766  0022BA  6E1F               	movwf	(LCD_array@y+1)^0,c
  5767  0022BC  0E06               	movlw	6
  5768  0022BE  6E1E               	movwf	LCD_array@y^0,c
  5769  0022C0  0ECD               	movlw	low E_pant2_Lcd@buffer2
  5770  0022C2  6E20               	movwf	LCD_array@date^0,c
  5771  0022C4  6A21               	clrf	(LCD_array@date+1)^0,c
  5772  0022C6  ECB1  F01F         	call	_LCD_array	;wreg free
  5773                           
  5774                           ;Task1.c: 118:             if(Num_User(codigo_rfid) != 0)
  5775  0022CA  C031  F094         	movff	_codigo_rfid,Num_User@hash
  5776  0022CE  C032  F095         	movff	_codigo_rfid+1,Num_User@hash+1
  5777  0022D2  C033  F096         	movff	_codigo_rfid+2,Num_User@hash+2
  5778  0022D6  C034  F097         	movff	_codigo_rfid+3,Num_User@hash+3
  5779  0022DA  C035  F098         	movff	_codigo_rfid+4,Num_User@hash+4
  5780  0022DE  C036  F099         	movff	_codigo_rfid+5,Num_User@hash+5
  5781  0022E2  C037  F09A         	movff	_codigo_rfid+6,Num_User@hash+6
  5782  0022E6  C038  F09B         	movff	_codigo_rfid+7,Num_User@hash+7
  5783  0022EA  ECAE  F01D         	call	_Num_User	;wreg free
  5784  0022EE  0900               	iorlw	0
  5785  0022F0  B4D8               	btfsc	status,2,c
  5786  0022F2  D02F               	goto	l11756
  5787                           
  5788                           ;Task1.c: 119:             {;Task1.c: 120:                 sprintf(buffer,"%02d",Num_Use
      +                          r(codigo_rfid));
  5789  0022F4  0ED7               	movlw	low E_pant2_Lcd@buffer
  5790  0022F6  0100               	movlb	0	; () banked
  5791  0022F8  6FB7               	movwf	sprintf@s& (0+255),b
  5792  0022FA  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5793  0022FC  0EE4               	movlw	low STR_14
  5794  0022FE  6FB9               	movwf	sprintf@fmt& (0+255),b
  5795  002300  0E7F               	movlw	high STR_14
  5796  002302  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5797  002304  C031  F094         	movff	_codigo_rfid,Num_User@hash
  5798  002308  C032  F095         	movff	_codigo_rfid+1,Num_User@hash+1
  5799  00230C  C033  F096         	movff	_codigo_rfid+2,Num_User@hash+2
  5800  002310  C034  F097         	movff	_codigo_rfid+3,Num_User@hash+3
  5801  002314  C035  F098         	movff	_codigo_rfid+4,Num_User@hash+4
  5802  002318  C036  F099         	movff	_codigo_rfid+5,Num_User@hash+5
  5803  00231C  C037  F09A         	movff	_codigo_rfid+6,Num_User@hash+6
  5804  002320  C038  F09B         	movff	_codigo_rfid+7,Num_User@hash+7
  5805  002324  ECAE  F01D         	call	_Num_User	;wreg free
  5806  002328  0100               	movlb	0	; () banked
  5807  00232A  6FCC               	movwf	??_E_pant2_Lcd& (0+255),b
  5808  00232C  51CC               	movf	??_E_pant2_Lcd& (0+255),w,b
  5809  00232E  6FBB               	movwf	(?_sprintf+4)& (0+255),b
  5810  002330  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  5811  002332  EC78  F027         	call	_sprintf	;wreg free
  5812                           
  5813                           ; BSR set to: 0
  5814                           ;Task1.c: 121:                 LCD_array(2,9,buffer);
  5815  002336  0E00               	movlw	0
  5816  002338  6E1D               	movwf	(LCD_array@x+1)^0,c
  5817  00233A  0E02               	movlw	2
  5818  00233C  6E1C               	movwf	LCD_array@x^0,c
  5819  00233E  0E00               	movlw	0
  5820  002340  6E1F               	movwf	(LCD_array@y+1)^0,c
  5821  002342  0E09               	movlw	9
  5822  002344  6E1E               	movwf	LCD_array@y^0,c
  5823  002346  0ED7               	movlw	low E_pant2_Lcd@buffer
  5824  002348  6E20               	movwf	LCD_array@date^0,c
  5825  00234A  6A21               	clrf	(LCD_array@date+1)^0,c
  5826  00234C  ECB1  F01F         	call	_LCD_array	;wreg free
  5827                           
  5828                           ;Task1.c: 122:             }
  5829  002350  D00E               	goto	l11758
  5830  002352                     l11756:
  5831  002352  0E00               	movlw	0
  5832  002354  6E1D               	movwf	(LCD_array@x+1)^0,c
  5833  002356  0E02               	movlw	2
  5834  002358  6E1C               	movwf	LCD_array@x^0,c
  5835  00235A  0E00               	movlw	0
  5836  00235C  6E1F               	movwf	(LCD_array@y+1)^0,c
  5837  00235E  0E09               	movlw	9
  5838  002360  6E1E               	movwf	LCD_array@y^0,c
  5839  002362  0EF6               	movlw	low STR_33
  5840  002364  6E20               	movwf	LCD_array@date^0,c
  5841  002366  0E7F               	movlw	high STR_33
  5842  002368  6E21               	movwf	(LCD_array@date+1)^0,c
  5843  00236A  ECB1  F01F         	call	_LCD_array	;wreg free
  5844  00236E                     l11758:
  5845                           
  5846                           ;Task1.c: 126:             sprintf(buffer,"%02d",Read_User(0));
  5847  00236E  0ED7               	movlw	low E_pant2_Lcd@buffer
  5848  002370  0100               	movlb	0	; () banked
  5849  002372  6FB7               	movwf	sprintf@s& (0+255),b
  5850  002374  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5851  002376  0EE4               	movlw	low STR_14
  5852  002378  6FB9               	movwf	sprintf@fmt& (0+255),b
  5853  00237A  0E7F               	movlw	high STR_14
  5854  00237C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5855  00237E  0E00               	movlw	0
  5856  002380  6E1B               	movwf	(Read_User@dir+1)^0,c
  5857  002382  0E00               	movlw	0
  5858  002384  6E1A               	movwf	Read_User@dir^0,c
  5859  002386  EC4E  F025         	call	_Read_User	;wreg free
  5860  00238A  0100               	movlb	0	; () banked
  5861  00238C  6FCC               	movwf	??_E_pant2_Lcd& (0+255),b
  5862  00238E  51CC               	movf	??_E_pant2_Lcd& (0+255),w,b
  5863  002390  6FBB               	movwf	(?_sprintf+4)& (0+255),b
  5864  002392  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  5865  002394  EC78  F027         	call	_sprintf	;wreg free
  5866                           
  5867                           ; BSR set to: 0
  5868                           ;Task1.c: 127:             LCD_array(4,15,buffer);
  5869  002398  0E00               	movlw	0
  5870  00239A  6E1D               	movwf	(LCD_array@x+1)^0,c
  5871  00239C  0E04               	movlw	4
  5872  00239E  6E1C               	movwf	LCD_array@x^0,c
  5873  0023A0  0E00               	movlw	0
  5874  0023A2  6E1F               	movwf	(LCD_array@y+1)^0,c
  5875  0023A4  0E0F               	movlw	15
  5876  0023A6  6E1E               	movwf	LCD_array@y^0,c
  5877  0023A8  0ED7               	movlw	low E_pant2_Lcd@buffer
  5878  0023AA  6E20               	movwf	LCD_array@date^0,c
  5879  0023AC  6A21               	clrf	(LCD_array@date+1)^0,c
  5880  0023AE  ECB1  F01F         	call	_LCD_array	;wreg free
  5881  0023B2                     l11762:
  5882                           
  5883                           ;Task1.c: 130:         if(codigo_rfid == 0)
  5884  0023B2  5031               	movf	_codigo_rfid^0,w,c
  5885  0023B4  1032               	iorwf	(_codigo_rfid+1)^0,w,c
  5886  0023B6  1033               	iorwf	(_codigo_rfid+2)^0,w,c
  5887  0023B8  1034               	iorwf	(_codigo_rfid+3)^0,w,c
  5888  0023BA  1035               	iorwf	(_codigo_rfid+4)^0,w,c
  5889  0023BC  1036               	iorwf	(_codigo_rfid+5)^0,w,c
  5890  0023BE  1037               	iorwf	(_codigo_rfid+6)^0,w,c
  5891  0023C0  1038               	iorwf	(_codigo_rfid+7)^0,w,c
  5892  0023C2  A4D8               	btfss	status,2,c
  5893  0023C4  D03E               	goto	l11770
  5894                           
  5895                           ;Task1.c: 131:         {;Task1.c: 132:             LCD_array(1,6,"No detec.  ");
  5896  0023C6  0E00               	movlw	0
  5897  0023C8  6E1D               	movwf	(LCD_array@x+1)^0,c
  5898  0023CA  0E01               	movlw	1
  5899  0023CC  6E1C               	movwf	LCD_array@x^0,c
  5900  0023CE  0E00               	movlw	0
  5901  0023D0  6E1F               	movwf	(LCD_array@y+1)^0,c
  5902  0023D2  0E06               	movlw	6
  5903  0023D4  6E1E               	movwf	LCD_array@y^0,c
  5904  0023D6  0EEB               	movlw	low STR_35
  5905  0023D8  6E20               	movwf	LCD_array@date^0,c
  5906  0023DA  0E7E               	movlw	high STR_35
  5907  0023DC  6E21               	movwf	(LCD_array@date+1)^0,c
  5908  0023DE  ECB1  F01F         	call	_LCD_array	;wreg free
  5909                           
  5910                           ;Task1.c: 135:             LCD_array(2,9,"--");
  5911  0023E2  0E00               	movlw	0
  5912  0023E4  6E1D               	movwf	(LCD_array@x+1)^0,c
  5913  0023E6  0E02               	movlw	2
  5914  0023E8  6E1C               	movwf	LCD_array@x^0,c
  5915  0023EA  0E00               	movlw	0
  5916  0023EC  6E1F               	movwf	(LCD_array@y+1)^0,c
  5917  0023EE  0E09               	movlw	9
  5918  0023F0  6E1E               	movwf	LCD_array@y^0,c
  5919  0023F2  0EF6               	movlw	low STR_33
  5920  0023F4  6E20               	movwf	LCD_array@date^0,c
  5921  0023F6  0E7F               	movlw	high STR_33
  5922  0023F8  6E21               	movwf	(LCD_array@date+1)^0,c
  5923  0023FA  ECB1  F01F         	call	_LCD_array	;wreg free
  5924                           
  5925                           ;Task1.c: 138:             sprintf(buffer,"%02d",Read_User(0));
  5926  0023FE  0ED7               	movlw	low E_pant2_Lcd@buffer
  5927  002400  0100               	movlb	0	; () banked
  5928  002402  6FB7               	movwf	sprintf@s& (0+255),b
  5929  002404  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  5930  002406  0EE4               	movlw	low STR_14
  5931  002408  6FB9               	movwf	sprintf@fmt& (0+255),b
  5932  00240A  0E7F               	movlw	high STR_14
  5933  00240C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  5934  00240E  0E00               	movlw	0
  5935  002410  6E1B               	movwf	(Read_User@dir+1)^0,c
  5936  002412  0E00               	movlw	0
  5937  002414  6E1A               	movwf	Read_User@dir^0,c
  5938  002416  EC4E  F025         	call	_Read_User	;wreg free
  5939  00241A  0100               	movlb	0	; () banked
  5940  00241C  6FCC               	movwf	??_E_pant2_Lcd& (0+255),b
  5941  00241E  51CC               	movf	??_E_pant2_Lcd& (0+255),w,b
  5942  002420  6FBB               	movwf	(?_sprintf+4)& (0+255),b
  5943  002422  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  5944  002424  EC78  F027         	call	_sprintf	;wreg free
  5945                           
  5946                           ; BSR set to: 0
  5947                           ;Task1.c: 139:             LCD_array(4,15,buffer);
  5948  002428  0E00               	movlw	0
  5949  00242A  6E1D               	movwf	(LCD_array@x+1)^0,c
  5950  00242C  0E04               	movlw	4
  5951  00242E  6E1C               	movwf	LCD_array@x^0,c
  5952  002430  0E00               	movlw	0
  5953  002432  6E1F               	movwf	(LCD_array@y+1)^0,c
  5954  002434  0E0F               	movlw	15
  5955  002436  6E1E               	movwf	LCD_array@y^0,c
  5956  002438  0ED7               	movlw	low E_pant2_Lcd@buffer
  5957  00243A  6E20               	movwf	LCD_array@date^0,c
  5958  00243C  6A21               	clrf	(LCD_array@date+1)^0,c
  5959  00243E  ECB1  F01F         	call	_LCD_array	;wreg free
  5960  002442                     l11770:
  5961                           
  5962                           ;Task1.c: 142:         Timer_DelayMuestra = 50;
  5963  002442  0E00               	movlw	0
  5964  002444  0101               	movlb	1	; () banked
  5965  002446  6FE1               	movwf	(_Timer_DelayMuestra+1)& (0+255),b
  5966  002448  0E32               	movlw	50
  5967  00244A  6FE0               	movwf	_Timer_DelayMuestra& (0+255),b
  5968                           
  5969                           ; BSR set to: 1
  5970  00244C  0012               	return		;funcret
  5971  00244E                     __end_of_E_pant2_Lcd:
  5972                           	callstack 0
  5973                           
  5974 ;; *************** function _Num_User *****************
  5975 ;; Defined at:
  5976 ;;		line 233 in file "EEPROM_EX.c"
  5977 ;; Parameters:    Size  Location     Type
  5978 ;;  hash            8   52[BANK0 ] long long 
  5979 ;; Auto vars:     Size  Location     Type
  5980 ;;  i               1   45[COMRAM] unsigned char 
  5981 ;;  pos_h           1   46[COMRAM] unsigned char 
  5982 ;;  num_user        1   44[COMRAM] unsigned char 
  5983 ;; Return value:  Size  Location     Type
  5984 ;;                  1    wreg      unsigned char 
  5985 ;; Registers used:
  5986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5987 ;; Tracked objects:
  5988 ;;		On entry : 0/0
  5989 ;;		On exit  : 3E/0
  5990 ;;		Unchanged: 0/0
  5991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5992 ;;      Params:         0       8       0       0       0       0       0       0       0
  5993 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5994 ;;      Temps:          0       8       0       0       0       0       0       0       0
  5995 ;;      Totals:         3      16       0       0       0       0       0       0       0
  5996 ;;Total ram usage:       19 bytes
  5997 ;; Hardware stack levels used:    1
  5998 ;; Hardware stack levels required when called:   11
  5999 ;; This function calls:
  6000 ;;		_M_Read
  6001 ;;		_Read_Hash_ex
  6002 ;;		_Read_User
  6003 ;; This function is called by:
  6004 ;;		_E_pant2_Lcd
  6005 ;; This function uses a non-reentrant model
  6006 ;;
  6007                           
  6008                           	psect	text13
  6009  003B5C                     __ptext13:
  6010                           	callstack 0
  6011  003B5C                     _Num_User:
  6012                           	callstack 17
  6013                           
  6014                           ;EEPROM_EX.c: 233: unsigned char Num_User(long long hash);EEPROM_EX.c: 234: {;EEPROM_EX.
      +                          c: 235:     unsigned char pos_h=0,num_user=0;
  6015                           
  6016                           ; BSR set to: 1
  6017                           ;incstack = 0
  6018  003B5C  0E00               	movlw	0
  6019  003B5E  6E2F               	movwf	Num_User@pos_h^0,c
  6020  003B60  0E00               	movlw	0
  6021  003B62  6E2D               	movwf	Num_User@num_user^0,c
  6022                           
  6023                           ;EEPROM_EX.c: 237:     if(Read_Hash_ex(hash) == 1)
  6024  003B64  C094  F084         	movff	Num_User@hash,Read_Hash_ex@cod_rfid
  6025  003B68  C095  F085         	movff	Num_User@hash+1,Read_Hash_ex@cod_rfid+1
  6026  003B6C  C096  F086         	movff	Num_User@hash+2,Read_Hash_ex@cod_rfid+2
  6027  003B70  C097  F087         	movff	Num_User@hash+3,Read_Hash_ex@cod_rfid+3
  6028  003B74  C098  F088         	movff	Num_User@hash+4,Read_Hash_ex@cod_rfid+4
  6029  003B78  C099  F089         	movff	Num_User@hash+5,Read_Hash_ex@cod_rfid+5
  6030  003B7C  C09A  F08A         	movff	Num_User@hash+6,Read_Hash_ex@cod_rfid+6
  6031  003B80  C09B  F08B         	movff	Num_User@hash+7,Read_Hash_ex@cod_rfid+7
  6032  003B84  EC22  F021         	call	_Read_Hash_ex	;wreg free
  6033  003B88  06E8               	decf	wreg,f,c
  6034  003B8A  A4D8               	btfss	status,2,c
  6035  003B8C  D04F               	goto	l11434
  6036                           
  6037                           ;EEPROM_EX.c: 238:     {;EEPROM_EX.c: 239:         for(char i=0;i<cant_user;i++)
  6038  003B8E  0E00               	movlw	0
  6039  003B90  6E2E               	movwf	Num_User@i^0,c
  6040  003B92  D045               	goto	l11426
  6041  003B94                     l11414:
  6042                           
  6043                           ; BSR set to: 1
  6044                           ;EEPROM_EX.c: 240:         {;EEPROM_EX.c: 241:             if(i == 0) pos_h=7;
  6045  003B94  502E               	movf	Num_User@i^0,w,c
  6046  003B96  A4D8               	btfss	status,2,c
  6047  003B98  D002               	goto	l11418
  6048                           
  6049                           ; BSR set to: 1
  6050  003B9A  0E07               	movlw	7
  6051  003B9C  D002               	goto	L9
  6052  003B9E                     l11418:
  6053                           
  6054                           ; BSR set to: 1
  6055  003B9E  502F               	movf	Num_User@pos_h^0,w,c
  6056  003BA0  0F0F               	addlw	15
  6057  003BA2                     L9:
  6058  003BA2  6E2F               	movwf	Num_User@pos_h^0,c
  6059                           
  6060                           ; BSR set to: 1
  6061                           ;EEPROM_EX.c: 244:             if((hash) == (M_Read(pos_h,10)))
  6062  003BA4  C02F  F068         	movff	Num_User@pos_h,M_Read@dir
  6063  003BA8  0100               	movlb	0	; () banked
  6064  003BAA  6B69               	clrf	(M_Read@dir+1)& (0+255),b
  6065  003BAC  0E0A               	movlw	10
  6066  003BAE  6F6A               	movwf	M_Read@c_m_r& (0+255),b
  6067  003BB0  EC26  F015         	call	_M_Read	;wreg free
  6068  003BB4  C068  F09C         	movff	?_M_Read,??_Num_User
  6069  003BB8  C069  F09D         	movff	?_M_Read+1,??_Num_User+1
  6070  003BBC  C06A  F09E         	movff	?_M_Read+2,??_Num_User+2
  6071  003BC0  C06B  F09F         	movff	?_M_Read+3,??_Num_User+3
  6072  003BC4  C06C  F0A0         	movff	?_M_Read+4,??_Num_User+4
  6073  003BC8  C06D  F0A1         	movff	?_M_Read+5,??_Num_User+5
  6074  003BCC  C06E  F0A2         	movff	?_M_Read+6,??_Num_User+6
  6075  003BD0  C06F  F0A3         	movff	?_M_Read+7,??_Num_User+7
  6076  003BD4  0100               	movlb	0	; () banked
  6077  003BD6  5194               	movf	Num_User@hash& (0+255),w,b
  6078  003BD8  199C               	xorwf	??_Num_User& (0+255),w,b
  6079  003BDA  E120               	bnz	l11424
  6080  003BDC  5195               	movf	(Num_User@hash+1)& (0+255),w,b
  6081  003BDE  199D               	xorwf	(??_Num_User+1)& (0+255),w,b
  6082  003BE0  E11D               	bnz	l11424
  6083  003BE2  5196               	movf	(Num_User@hash+2)& (0+255),w,b
  6084  003BE4  199E               	xorwf	(??_Num_User+2)& (0+255),w,b
  6085  003BE6  E11A               	bnz	l11424
  6086  003BE8  5197               	movf	(Num_User@hash+3)& (0+255),w,b
  6087  003BEA  199F               	xorwf	(??_Num_User+3)& (0+255),w,b
  6088  003BEC  E117               	bnz	l11424
  6089  003BEE  5198               	movf	(Num_User@hash+4)& (0+255),w,b
  6090  003BF0  19A0               	xorwf	(??_Num_User+4)& (0+255),w,b
  6091  003BF2  E114               	bnz	l11424
  6092  003BF4  5199               	movf	(Num_User@hash+5)& (0+255),w,b
  6093  003BF6  19A1               	xorwf	(??_Num_User+5)& (0+255),w,b
  6094  003BF8  E111               	bnz	l11424
  6095  003BFA  519A               	movf	(Num_User@hash+6)& (0+255),w,b
  6096  003BFC  19A2               	xorwf	(??_Num_User+6)& (0+255),w,b
  6097  003BFE  E10E               	bnz	l11424
  6098  003C00  519B               	movf	(Num_User@hash+7)& (0+255),w,b
  6099  003C02  19A3               	xorwf	(??_Num_User+7)& (0+255),w,b
  6100  003C04  A4D8               	btfss	status,2,c
  6101  003C06  D00A               	goto	l11424
  6102                           
  6103                           ; BSR set to: 0
  6104                           ;EEPROM_EX.c: 245:             {;EEPROM_EX.c: 246:                 num_user = (Read_User
      +                          (pos_h-3));
  6105  003C08  0EFD               	movlw	253
  6106  003C0A  242F               	addwf	Num_User@pos_h^0,w,c
  6107  003C0C  6E1A               	movwf	Read_User@dir^0,c
  6108  003C0E  6A1B               	clrf	(Read_User@dir+1)^0,c
  6109  003C10  0EFF               	movlw	255
  6110  003C12  221B               	addwfc	(Read_User@dir+1)^0,f,c
  6111  003C14  EC4E  F025         	call	_Read_User	;wreg free
  6112  003C18  6E2D               	movwf	Num_User@num_user^0,c
  6113                           
  6114                           ;EEPROM_EX.c: 247:                 break;
  6115  003C1A  D006               	goto	u9870
  6116  003C1C                     l11424:
  6117                           
  6118                           ; BSR set to: 0
  6119                           ;EEPROM_EX.c: 249:         }
  6120  003C1C  2A2E               	incf	Num_User@i^0,f,c
  6121  003C1E                     l11426:
  6122  003C1E  0101               	movlb	1	; () banked
  6123  003C20  5191               	movf	_cant_user& (0+255),w,b
  6124  003C22  5C2E               	subwf	Num_User@i^0,w,c
  6125  003C24  A0D8               	btfss	status,0,c
  6126  003C26  D7B6               	goto	l11414
  6127  003C28                     u9870:
  6128                           
  6129                           ; BSR set to: 1
  6130                           ;EEPROM_EX.c: 250:         return num_user;
  6131  003C28  502D               	movf	Num_User@num_user^0,w,c
  6132  003C2A  0012               	return	
  6133  003C2C                     l11434:
  6134  003C2C  0E00               	movlw	0
  6135  003C2E  0012               	return		;funcret
  6136  003C30                     __end_of_Num_User:
  6137                           	callstack 0
  6138                           
  6139 ;; *************** function _E_pant1_Lcd *****************
  6140 ;; Defined at:
  6141 ;;		line 39 in file "Task1.c"
  6142 ;; Parameters:    Size  Location     Type
  6143 ;;		None
  6144 ;; Auto vars:     Size  Location     Type
  6145 ;;  buffer         20  110[BANK0 ] unsigned char [20]
  6146 ;;  llave           5  130[BANK0 ] unsigned char [5]
  6147 ;;  i               1  136[BANK0 ] unsigned char 
  6148 ;;  aux2            1  135[BANK0 ] unsigned char 
  6149 ;; Return value:  Size  Location     Type
  6150 ;;                  1    wreg      void 
  6151 ;; Registers used:
  6152 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6153 ;; Tracked objects:
  6154 ;;		On entry : 3F/0
  6155 ;;		On exit  : 3F/1
  6156 ;;		Unchanged: 0/0
  6157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6158 ;;      Params:         0       0       0       0       0       0       0       0       0
  6159 ;;      Locals:         0      27       0       0       0       0       0       0       0
  6160 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6161 ;;      Totals:         0      29       0       0       0       0       0       0       0
  6162 ;;Total ram usage:       29 bytes
  6163 ;; Hardware stack levels used:    1
  6164 ;; Hardware stack levels required when called:   15
  6165 ;; This function calls:
  6166 ;;		_LCD_array
  6167 ;;		_sprintf
  6168 ;; This function is called by:
  6169 ;;		_Task1
  6170 ;; This function uses a non-reentrant model
  6171 ;;
  6172                           
  6173                           	psect	text14
  6174  0017A4                     __ptext14:
  6175                           	callstack 0
  6176  0017A4                     _E_pant1_Lcd:
  6177                           	callstack 14
  6178                           
  6179                           ; BSR set to: 0
  6180                           ;Task1.c: 41:     char llave[5],i=0,buffer[20],aux2=key;
  6181                           
  6182                           ;incstack = 0
  6183  0017A4  0E00               	movlw	0
  6184  0017A6  6FE8               	movwf	E_pant1_Lcd@i& (0+255),b
  6185                           
  6186                           ; BSR set to: 0
  6187  0017A8  C182  F0E7         	movff	_key,E_pant1_Lcd@aux2
  6188                           
  6189                           ;Task1.c: 44:     if(mostrar == 0)
  6190  0017AC  0101               	movlb	1	; () banked
  6191  0017AE  518E               	movf	_mostrar& (0+255),w,b
  6192  0017B0  A4D8               	btfss	status,2,c
  6193  0017B2  D064               	goto	l11702
  6194                           
  6195                           ; BSR set to: 1
  6196                           ;Task1.c: 45:     {;Task1.c: 46:         LCD_array(1,1,"ID-PIC:");
  6197  0017B4  0E00               	movlw	0
  6198  0017B6  6E1D               	movwf	(LCD_array@x+1)^0,c
  6199  0017B8  0E01               	movlw	1
  6200  0017BA  6E1C               	movwf	LCD_array@x^0,c
  6201  0017BC  0E00               	movlw	0
  6202  0017BE  6E1F               	movwf	(LCD_array@y+1)^0,c
  6203  0017C0  0E01               	movlw	1
  6204  0017C2  6E1E               	movwf	LCD_array@y^0,c
  6205  0017C4  0E5A               	movlw	low STR_15
  6206  0017C6  6E20               	movwf	LCD_array@date^0,c
  6207  0017C8  0E7F               	movlw	high STR_15
  6208  0017CA  6E21               	movwf	(LCD_array@date+1)^0,c
  6209  0017CC  ECB1  F01F         	call	_LCD_array	;wreg free
  6210                           
  6211                           ;Task1.c: 47:         LCD_array(3,1,"Hora:"),LCD_array(4,1,"Fecha:");
  6212  0017D0  0E00               	movlw	0
  6213  0017D2  6E1D               	movwf	(LCD_array@x+1)^0,c
  6214  0017D4  0E03               	movlw	3
  6215  0017D6  6E1C               	movwf	LCD_array@x^0,c
  6216  0017D8  0E00               	movlw	0
  6217  0017DA  6E1F               	movwf	(LCD_array@y+1)^0,c
  6218  0017DC  0E01               	movlw	1
  6219  0017DE  6E1E               	movwf	LCD_array@y^0,c
  6220  0017E0  0EB4               	movlw	low STR_16
  6221  0017E2  6E20               	movwf	LCD_array@date^0,c
  6222  0017E4  0E7F               	movlw	high STR_16
  6223  0017E6  6E21               	movwf	(LCD_array@date+1)^0,c
  6224  0017E8  ECB1  F01F         	call	_LCD_array	;wreg free
  6225  0017EC  0E00               	movlw	0
  6226  0017EE  6E1D               	movwf	(LCD_array@x+1)^0,c
  6227  0017F0  0E04               	movlw	4
  6228  0017F2  6E1C               	movwf	LCD_array@x^0,c
  6229  0017F4  0E00               	movlw	0
  6230  0017F6  6E1F               	movwf	(LCD_array@y+1)^0,c
  6231  0017F8  0E01               	movlw	1
  6232  0017FA  6E1E               	movwf	LCD_array@y^0,c
  6233  0017FC  0E8E               	movlw	low STR_17
  6234  0017FE  6E20               	movwf	LCD_array@date^0,c
  6235  001800  0E7F               	movlw	high STR_17
  6236  001802  6E21               	movwf	(LCD_array@date+1)^0,c
  6237  001804  ECB1  F01F         	call	_LCD_array	;wreg free
  6238                           
  6239                           ;Task1.c: 48:         mostrar = 1;
  6240  001808  0E01               	movlw	1
  6241  00180A  0101               	movlb	1	; () banked
  6242  00180C  6F8E               	movwf	_mostrar& (0+255),b
  6243                           
  6244                           ; BSR set to: 1
  6245                           ;Task1.c: 49:         M_variable = 1;
  6246  00180E  0E01               	movlw	1
  6247  001810  6F8B               	movwf	_M_variable& (0+255),b
  6248  001812  D034               	goto	l11702
  6249  001814                     l11688:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;Task1.c: 54:     {;Task1.c: 55:         llave[4-i] = (int)(aux2 % 2);
  6253  001814  51E8               	movf	E_pant1_Lcd@i& (0+255),w,b
  6254  001816  0804               	sublw	4
  6255  001818  6FCC               	movwf	??_E_pant1_Lcd& (0+255),b
  6256  00181A  51CC               	movf	??_E_pant1_Lcd& (0+255),w,b
  6257  00181C  0FE2               	addlw	low E_pant1_Lcd@llave
  6258  00181E  6ED9               	movwf	fsr2l,c
  6259  001820  6ADA               	clrf	fsr2h,c
  6260  001822  51E7               	movf	E_pant1_Lcd@aux2& (0+255),w,b
  6261  001824  0B01               	andlw	1
  6262  001826  6EDF               	movwf	indf2,c
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;Task1.c: 56:         aux2 = (int)aux2/2;
  6266  001828  90D8               	bcf	status,0,c
  6267  00182A  31E7               	rrcf	E_pant1_Lcd@aux2& (0+255),w,b
  6268  00182C  6FE7               	movwf	E_pant1_Lcd@aux2& (0+255),b
  6269                           
  6270                           ; BSR set to: 0
  6271                           ;Task1.c: 57:         if(llave[4-i] == 0) llave[4-i] = '0';
  6272  00182E  51E8               	movf	E_pant1_Lcd@i& (0+255),w,b
  6273  001830  0804               	sublw	4
  6274  001832  6FCC               	movwf	??_E_pant1_Lcd& (0+255),b
  6275  001834  51CC               	movf	??_E_pant1_Lcd& (0+255),w,b
  6276  001836  0FE2               	addlw	low E_pant1_Lcd@llave
  6277  001838  6ED9               	movwf	fsr2l,c
  6278  00183A  6ADA               	clrf	fsr2h,c
  6279  00183C  50DF               	movf	indf2,w,c
  6280  00183E  A4D8               	btfss	status,2,c
  6281  001840  D009               	goto	l11696
  6282                           
  6283                           ; BSR set to: 0
  6284  001842  51E8               	movf	E_pant1_Lcd@i& (0+255),w,b
  6285  001844  0804               	sublw	4
  6286  001846  6FCC               	movwf	??_E_pant1_Lcd& (0+255),b
  6287  001848  51CC               	movf	??_E_pant1_Lcd& (0+255),w,b
  6288  00184A  0FE2               	addlw	low E_pant1_Lcd@llave
  6289  00184C  6ED9               	movwf	fsr2l,c
  6290  00184E  6ADA               	clrf	fsr2h,c
  6291  001850  0E30               	movlw	48
  6292  001852  D012               	goto	L10
  6293  001854                     l11696:
  6294                           
  6295                           ; BSR set to: 0
  6296  001854  51E8               	movf	E_pant1_Lcd@i& (0+255),w,b
  6297  001856  0804               	sublw	4
  6298  001858  6FCC               	movwf	??_E_pant1_Lcd& (0+255),b
  6299  00185A  51CC               	movf	??_E_pant1_Lcd& (0+255),w,b
  6300  00185C  0FE2               	addlw	low E_pant1_Lcd@llave
  6301  00185E  6ED9               	movwf	fsr2l,c
  6302  001860  6ADA               	clrf	fsr2h,c
  6303  001862  04DE               	decf	postinc2,w,c
  6304  001864  A4D8               	btfss	status,2,c
  6305  001866  D009               	goto	l11700
  6306                           
  6307                           ; BSR set to: 0
  6308  001868  51E8               	movf	E_pant1_Lcd@i& (0+255),w,b
  6309  00186A  0804               	sublw	4
  6310  00186C  6FCC               	movwf	??_E_pant1_Lcd& (0+255),b
  6311  00186E  51CC               	movf	??_E_pant1_Lcd& (0+255),w,b
  6312  001870  0FE2               	addlw	low E_pant1_Lcd@llave
  6313  001872  6ED9               	movwf	fsr2l,c
  6314  001874  6ADA               	clrf	fsr2h,c
  6315  001876  0E31               	movlw	49
  6316  001878                     L10:
  6317  001878  6EDF               	movwf	indf2,c
  6318  00187A                     l11700:
  6319                           
  6320                           ; BSR set to: 0
  6321                           ;Task1.c: 59:         i++;
  6322  00187A  2BE8               	incf	E_pant1_Lcd@i& (0+255),f,b
  6323  00187C                     l11702:
  6324                           
  6325                           ;Task1.c: 53:     while(i<5)
  6326  00187C  0E04               	movlw	4
  6327  00187E  0100               	movlb	0	; () banked
  6328  001880  65E8               	cpfsgt	E_pant1_Lcd@i& (0+255),b
  6329  001882  D7C8               	goto	l11688
  6330                           
  6331                           ; BSR set to: 0
  6332                           ;Task1.c: 62:     if(!Timer_DelayMuestra)
  6333  001884  0101               	movlb	1	; () banked
  6334  001886  51E0               	movf	_Timer_DelayMuestra& (0+255),w,b
  6335  001888  11E1               	iorwf	(_Timer_DelayMuestra+1)& (0+255),w,b
  6336  00188A  A4D8               	btfss	status,2,c
  6337  00188C  0012               	return	
  6338                           
  6339                           ; BSR set to: 1
  6340                           ;Task1.c: 63:     {;Task1.c: 64:         if(mostrar)
  6341  00188E  518E               	movf	_mostrar& (0+255),w,b
  6342  001890  B4D8               	btfsc	status,2,c
  6343  001892  D0E1               	goto	l11732
  6344                           
  6345                           ; BSR set to: 1
  6346                           ;Task1.c: 65:         {;Task1.c: 66:             LCD_array(1,8,llave);
  6347  001894  0E00               	movlw	0
  6348  001896  6E1D               	movwf	(LCD_array@x+1)^0,c
  6349  001898  0E01               	movlw	1
  6350  00189A  6E1C               	movwf	LCD_array@x^0,c
  6351  00189C  0E00               	movlw	0
  6352  00189E  6E1F               	movwf	(LCD_array@y+1)^0,c
  6353  0018A0  0E08               	movlw	8
  6354  0018A2  6E1E               	movwf	LCD_array@y^0,c
  6355  0018A4  0EE2               	movlw	low E_pant1_Lcd@llave
  6356  0018A6  6E20               	movwf	LCD_array@date^0,c
  6357  0018A8  6A21               	clrf	(LCD_array@date+1)^0,c
  6358  0018AA  ECB1  F01F         	call	_LCD_array	;wreg free
  6359                           
  6360                           ;Task1.c: 68:             sprintf(buffer,"%02d",hora);
  6361  0018AE  0ECE               	movlw	low E_pant1_Lcd@buffer
  6362  0018B0  0100               	movlb	0	; () banked
  6363  0018B2  6FB7               	movwf	sprintf@s& (0+255),b
  6364  0018B4  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6365  0018B6  0EE4               	movlw	low STR_14
  6366  0018B8  6FB9               	movwf	sprintf@fmt& (0+255),b
  6367  0018BA  0E7F               	movlw	high STR_14
  6368  0018BC  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6369  0018BE  C044  F0BB         	movff	_hora,?_sprintf+4
  6370  0018C2  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6371  0018C4  EC78  F027         	call	_sprintf	;wreg free
  6372                           
  6373                           ; BSR set to: 0
  6374                           ;Task1.c: 69:             LCD_array(3,7,buffer),LCD_array(3,9,":");
  6375  0018C8  0E00               	movlw	0
  6376  0018CA  6E1D               	movwf	(LCD_array@x+1)^0,c
  6377  0018CC  0E03               	movlw	3
  6378  0018CE  6E1C               	movwf	LCD_array@x^0,c
  6379  0018D0  0E00               	movlw	0
  6380  0018D2  6E1F               	movwf	(LCD_array@y+1)^0,c
  6381  0018D4  0E07               	movlw	7
  6382  0018D6  6E1E               	movwf	LCD_array@y^0,c
  6383  0018D8  0ECE               	movlw	low E_pant1_Lcd@buffer
  6384  0018DA  6E20               	movwf	LCD_array@date^0,c
  6385  0018DC  6A21               	clrf	(LCD_array@date+1)^0,c
  6386  0018DE  ECB1  F01F         	call	_LCD_array	;wreg free
  6387  0018E2  0E00               	movlw	0
  6388  0018E4  6E1D               	movwf	(LCD_array@x+1)^0,c
  6389  0018E6  0E03               	movlw	3
  6390  0018E8  6E1C               	movwf	LCD_array@x^0,c
  6391  0018EA  0E00               	movlw	0
  6392  0018EC  6E1F               	movwf	(LCD_array@y+1)^0,c
  6393  0018EE  0E09               	movlw	9
  6394  0018F0  6E1E               	movwf	LCD_array@y^0,c
  6395  0018F2  0EC9               	movlw	low (STR_44+3)
  6396  0018F4  6E20               	movwf	LCD_array@date^0,c
  6397  0018F6  0E7F               	movlw	high (STR_44+3)
  6398  0018F8  6E21               	movwf	(LCD_array@date+1)^0,c
  6399  0018FA  ECB1  F01F         	call	_LCD_array	;wreg free
  6400                           
  6401                           ;Task1.c: 71:             sprintf(buffer,"%02d",min);
  6402  0018FE  0ECE               	movlw	low E_pant1_Lcd@buffer
  6403  001900  0100               	movlb	0	; () banked
  6404  001902  6FB7               	movwf	sprintf@s& (0+255),b
  6405  001904  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6406  001906  0EE4               	movlw	low STR_14
  6407  001908  6FB9               	movwf	sprintf@fmt& (0+255),b
  6408  00190A  0E7F               	movlw	high STR_14
  6409  00190C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6410  00190E  C043  F0BB         	movff	_min,?_sprintf+4
  6411  001912  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6412  001914  EC78  F027         	call	_sprintf	;wreg free
  6413                           
  6414                           ;Task1.c: 72:             LCD_array(3,10,buffer),LCD_array(3,12,":");
  6415  001918  0E00               	movlw	0
  6416  00191A  6E1D               	movwf	(LCD_array@x+1)^0,c
  6417  00191C  0E03               	movlw	3
  6418  00191E  6E1C               	movwf	LCD_array@x^0,c
  6419  001920  0E00               	movlw	0
  6420  001922  6E1F               	movwf	(LCD_array@y+1)^0,c
  6421  001924  0E0A               	movlw	10
  6422  001926  6E1E               	movwf	LCD_array@y^0,c
  6423  001928  0ECE               	movlw	low E_pant1_Lcd@buffer
  6424  00192A  6E20               	movwf	LCD_array@date^0,c
  6425  00192C  6A21               	clrf	(LCD_array@date+1)^0,c
  6426  00192E  ECB1  F01F         	call	_LCD_array	;wreg free
  6427  001932  0E00               	movlw	0
  6428  001934  6E1D               	movwf	(LCD_array@x+1)^0,c
  6429  001936  0E03               	movlw	3
  6430  001938  6E1C               	movwf	LCD_array@x^0,c
  6431  00193A  0E00               	movlw	0
  6432  00193C  6E1F               	movwf	(LCD_array@y+1)^0,c
  6433  00193E  0E0C               	movlw	12
  6434  001940  6E1E               	movwf	LCD_array@y^0,c
  6435  001942  0EC9               	movlw	low (STR_44+3)
  6436  001944  6E20               	movwf	LCD_array@date^0,c
  6437  001946  0E7F               	movlw	high (STR_44+3)
  6438  001948  6E21               	movwf	(LCD_array@date+1)^0,c
  6439  00194A  ECB1  F01F         	call	_LCD_array	;wreg free
  6440                           
  6441                           ;Task1.c: 74:             sprintf(buffer,"%02d",seg);
  6442  00194E  0ECE               	movlw	low E_pant1_Lcd@buffer
  6443  001950  0100               	movlb	0	; () banked
  6444  001952  6FB7               	movwf	sprintf@s& (0+255),b
  6445  001954  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6446  001956  0EE4               	movlw	low STR_14
  6447  001958  6FB9               	movwf	sprintf@fmt& (0+255),b
  6448  00195A  0E7F               	movlw	high STR_14
  6449  00195C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6450  00195E  C042  F0BB         	movff	_seg,?_sprintf+4
  6451  001962  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6452  001964  EC78  F027         	call	_sprintf	;wreg free
  6453                           
  6454                           ; BSR set to: 0
  6455                           ;Task1.c: 75:             LCD_array(3,13,buffer);
  6456  001968  0E00               	movlw	0
  6457  00196A  6E1D               	movwf	(LCD_array@x+1)^0,c
  6458  00196C  0E03               	movlw	3
  6459  00196E  6E1C               	movwf	LCD_array@x^0,c
  6460  001970  0E00               	movlw	0
  6461  001972  6E1F               	movwf	(LCD_array@y+1)^0,c
  6462  001974  0E0D               	movlw	13
  6463  001976  6E1E               	movwf	LCD_array@y^0,c
  6464  001978  0ECE               	movlw	low E_pant1_Lcd@buffer
  6465  00197A  6E20               	movwf	LCD_array@date^0,c
  6466  00197C  6A21               	clrf	(LCD_array@date+1)^0,c
  6467  00197E  ECB1  F01F         	call	_LCD_array	;wreg free
  6468                           
  6469                           ;Task1.c: 77:             sprintf(buffer,"%02d",dia);
  6470  001982  0ECE               	movlw	low E_pant1_Lcd@buffer
  6471  001984  0100               	movlb	0	; () banked
  6472  001986  6FB7               	movwf	sprintf@s& (0+255),b
  6473  001988  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6474  00198A  0EE4               	movlw	low STR_14
  6475  00198C  6FB9               	movwf	sprintf@fmt& (0+255),b
  6476  00198E  0E7F               	movlw	high STR_14
  6477  001990  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6478  001992  C041  F0BB         	movff	_dia,?_sprintf+4
  6479  001996  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6480  001998  EC78  F027         	call	_sprintf	;wreg free
  6481                           
  6482                           ; BSR set to: 0
  6483                           ;Task1.c: 78:             LCD_array(4,7,buffer),LCD_array(4,9,"/");
  6484  00199C  0E00               	movlw	0
  6485  00199E  6E1D               	movwf	(LCD_array@x+1)^0,c
  6486  0019A0  0E04               	movlw	4
  6487  0019A2  6E1C               	movwf	LCD_array@x^0,c
  6488  0019A4  0E00               	movlw	0
  6489  0019A6  6E1F               	movwf	(LCD_array@y+1)^0,c
  6490  0019A8  0E07               	movlw	7
  6491  0019AA  6E1E               	movwf	LCD_array@y^0,c
  6492  0019AC  0ECE               	movlw	low E_pant1_Lcd@buffer
  6493  0019AE  6E20               	movwf	LCD_array@date^0,c
  6494  0019B0  6A21               	clrf	(LCD_array@date+1)^0,c
  6495  0019B2  ECB1  F01F         	call	_LCD_array	;wreg free
  6496  0019B6  0E00               	movlw	0
  6497  0019B8  6E1D               	movwf	(LCD_array@x+1)^0,c
  6498  0019BA  0E04               	movlw	4
  6499  0019BC  6E1C               	movwf	LCD_array@x^0,c
  6500  0019BE  0E00               	movlw	0
  6501  0019C0  6E1F               	movwf	(LCD_array@y+1)^0,c
  6502  0019C2  0E09               	movlw	9
  6503  0019C4  6E1E               	movwf	LCD_array@y^0,c
  6504  0019C6  0EFC               	movlw	low STR_24
  6505  0019C8  6E20               	movwf	LCD_array@date^0,c
  6506  0019CA  0E7F               	movlw	high STR_24
  6507  0019CC  6E21               	movwf	(LCD_array@date+1)^0,c
  6508  0019CE  ECB1  F01F         	call	_LCD_array	;wreg free
  6509                           
  6510                           ;Task1.c: 80:             sprintf(buffer,"%02d",mes);
  6511  0019D2  0ECE               	movlw	low E_pant1_Lcd@buffer
  6512  0019D4  0100               	movlb	0	; () banked
  6513  0019D6  6FB7               	movwf	sprintf@s& (0+255),b
  6514  0019D8  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6515  0019DA  0EE4               	movlw	low STR_14
  6516  0019DC  6FB9               	movwf	sprintf@fmt& (0+255),b
  6517  0019DE  0E7F               	movlw	high STR_14
  6518  0019E0  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6519  0019E2  C040  F0BB         	movff	_mes,?_sprintf+4
  6520  0019E6  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6521  0019E8  EC78  F027         	call	_sprintf	;wreg free
  6522                           
  6523                           ; BSR set to: 0
  6524                           ;Task1.c: 81:             LCD_array(4,10,buffer),LCD_array(4,12,"/");
  6525  0019EC  0E00               	movlw	0
  6526  0019EE  6E1D               	movwf	(LCD_array@x+1)^0,c
  6527  0019F0  0E04               	movlw	4
  6528  0019F2  6E1C               	movwf	LCD_array@x^0,c
  6529  0019F4  0E00               	movlw	0
  6530  0019F6  6E1F               	movwf	(LCD_array@y+1)^0,c
  6531  0019F8  0E0A               	movlw	10
  6532  0019FA  6E1E               	movwf	LCD_array@y^0,c
  6533  0019FC  0ECE               	movlw	low E_pant1_Lcd@buffer
  6534  0019FE  6E20               	movwf	LCD_array@date^0,c
  6535  001A00  6A21               	clrf	(LCD_array@date+1)^0,c
  6536  001A02  ECB1  F01F         	call	_LCD_array	;wreg free
  6537  001A06  0E00               	movlw	0
  6538  001A08  6E1D               	movwf	(LCD_array@x+1)^0,c
  6539  001A0A  0E04               	movlw	4
  6540  001A0C  6E1C               	movwf	LCD_array@x^0,c
  6541  001A0E  0E00               	movlw	0
  6542  001A10  6E1F               	movwf	(LCD_array@y+1)^0,c
  6543  001A12  0E0C               	movlw	12
  6544  001A14  6E1E               	movwf	LCD_array@y^0,c
  6545  001A16  0EFC               	movlw	low STR_24
  6546  001A18  6E20               	movwf	LCD_array@date^0,c
  6547  001A1A  0E7F               	movlw	high STR_24
  6548  001A1C  6E21               	movwf	(LCD_array@date+1)^0,c
  6549  001A1E  ECB1  F01F         	call	_LCD_array	;wreg free
  6550                           
  6551                           ;Task1.c: 83:             sprintf(buffer,"%02d",year);
  6552  001A22  0ECE               	movlw	low E_pant1_Lcd@buffer
  6553  001A24  0100               	movlb	0	; () banked
  6554  001A26  6FB7               	movwf	sprintf@s& (0+255),b
  6555  001A28  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6556  001A2A  0EE4               	movlw	low STR_14
  6557  001A2C  6FB9               	movwf	sprintf@fmt& (0+255),b
  6558  001A2E  0E7F               	movlw	high STR_14
  6559  001A30  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6560  001A32  C03F  F0BB         	movff	_year,?_sprintf+4
  6561  001A36  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  6562  001A38  EC78  F027         	call	_sprintf	;wreg free
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;Task1.c: 84:             LCD_array(4,13,buffer);
  6566  001A3C  0E00               	movlw	0
  6567  001A3E  6E1D               	movwf	(LCD_array@x+1)^0,c
  6568  001A40  0E04               	movlw	4
  6569  001A42  6E1C               	movwf	LCD_array@x^0,c
  6570  001A44  0E00               	movlw	0
  6571  001A46  6E1F               	movwf	(LCD_array@y+1)^0,c
  6572  001A48  0E0D               	movlw	13
  6573  001A4A  6E1E               	movwf	LCD_array@y^0,c
  6574  001A4C  0ECE               	movlw	low E_pant1_Lcd@buffer
  6575  001A4E  6E20               	movwf	LCD_array@date^0,c
  6576  001A50  6A21               	clrf	(LCD_array@date+1)^0,c
  6577  001A52  ECB1  F01F         	call	_LCD_array	;wreg free
  6578  001A56                     l11732:
  6579                           
  6580                           ;Task1.c: 88:         Timer_DelayMuestra = 50;
  6581  001A56  0E00               	movlw	0
  6582  001A58  0101               	movlb	1	; () banked
  6583  001A5A  6FE1               	movwf	(_Timer_DelayMuestra+1)& (0+255),b
  6584  001A5C  0E32               	movlw	50
  6585  001A5E  6FE0               	movwf	_Timer_DelayMuestra& (0+255),b
  6586                           
  6587                           ; BSR set to: 1
  6588  001A60  0012               	return		;funcret
  6589  001A62                     __end_of_E_pant1_Lcd:
  6590                           	callstack 0
  6591                           
  6592 ;; *************** function _E_Teclado_Lcd *****************
  6593 ;; Defined at:
  6594 ;;		line 150 in file "Task1.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  buffer         10  121[BANK0 ] unsigned char [10]
  6599 ;; Return value:  Size  Location     Type
  6600 ;;                  1    wreg      void 
  6601 ;; Registers used:
  6602 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6603 ;; Tracked objects:
  6604 ;;		On entry : 3F/0
  6605 ;;		On exit  : 3F/1
  6606 ;;		Unchanged: 0/0
  6607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6608 ;;      Params:         0       0       0       0       0       0       0       0       0
  6609 ;;      Locals:         0      10       0       0       0       0       0       0       0
  6610 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6611 ;;      Totals:         0      10       0       0       0       0       0       0       0
  6612 ;;Total ram usage:       10 bytes
  6613 ;; Hardware stack levels used:    1
  6614 ;; Hardware stack levels required when called:   18
  6615 ;; This function calls:
  6616 ;;		_Easter_Egg
  6617 ;;		_Erase_Eeprom
  6618 ;;		_LCD_array
  6619 ;;		_Rfid_Lcd
  6620 ;;		_sprintf
  6621 ;; This function is called by:
  6622 ;;		_Task1
  6623 ;; This function uses a non-reentrant model
  6624 ;;
  6625                           
  6626                           	psect	text15
  6627  00314C                     __ptext15:
  6628                           	callstack 0
  6629  00314C                     _E_Teclado_Lcd:
  6630                           	callstack 11
  6631                           
  6632                           ; BSR set to: 0
  6633                           ;Task1.c: 152:     char buffer[10];;Task1.c: 155:     if(!Timer_DelayMuestra)
  6634                           
  6635                           ; BSR set to: 1
  6636                           ;incstack = 0
  6637  00314C  0101               	movlb	1	; () banked
  6638  00314E  51E0               	movf	_Timer_DelayMuestra& (0+255),w,b
  6639  003150  11E1               	iorwf	(_Timer_DelayMuestra+1)& (0+255),w,b
  6640  003152  A4D8               	btfss	status,2,c
  6641  003154  0012               	return	
  6642                           
  6643                           ; BSR set to: 1
  6644                           ;Task1.c: 156:     {;Task1.c: 158:         if(mostrar == 0)
  6645  003156  518E               	movf	_mostrar& (0+255),w,b
  6646  003158  A4D8               	btfss	status,2,c
  6647  00315A  D02D               	goto	l11782
  6648                           
  6649                           ; BSR set to: 1
  6650                           ;Task1.c: 159:         {;Task1.c: 160:             LCD_array(1,1,"SETEAR CONFIGURACION")
      +                          ;
  6651  00315C  0E00               	movlw	0
  6652  00315E  6E1D               	movwf	(LCD_array@x+1)^0,c
  6653  003160  0E01               	movlw	1
  6654  003162  6E1C               	movwf	LCD_array@x^0,c
  6655  003164  0E00               	movlw	0
  6656  003166  6E1F               	movwf	(LCD_array@y+1)^0,c
  6657  003168  0E01               	movlw	1
  6658  00316A  6E1E               	movwf	LCD_array@y^0,c
  6659  00316C  0EC4               	movlw	low STR_38
  6660  00316E  6E20               	movwf	LCD_array@date^0,c
  6661  003170  0E7D               	movlw	high STR_38
  6662  003172  6E21               	movwf	(LCD_array@date+1)^0,c
  6663  003174  ECB1  F01F         	call	_LCD_array	;wreg free
  6664                           
  6665                           ;Task1.c: 161:             LCD_array(4,1,"Luego Presione 'A'");
  6666  003178  0E00               	movlw	0
  6667  00317A  6E1D               	movwf	(LCD_array@x+1)^0,c
  6668  00317C  0E04               	movlw	4
  6669  00317E  6E1C               	movwf	LCD_array@x^0,c
  6670  003180  0E00               	movlw	0
  6671  003182  6E1F               	movwf	(LCD_array@y+1)^0,c
  6672  003184  0E01               	movlw	1
  6673  003186  6E1E               	movwf	LCD_array@y^0,c
  6674  003188  0E2C               	movlw	low STR_39
  6675  00318A  6E20               	movwf	LCD_array@date^0,c
  6676  00318C  0E7E               	movlw	high STR_39
  6677  00318E  6E21               	movwf	(LCD_array@date+1)^0,c
  6678  003190  ECB1  F01F         	call	_LCD_array	;wreg free
  6679                           
  6680                           ;Task1.c: 162:             LCD_array(2,1,"Opcion:");
  6681  003194  0E00               	movlw	0
  6682  003196  6E1D               	movwf	(LCD_array@x+1)^0,c
  6683  003198  0E02               	movlw	2
  6684  00319A  6E1C               	movwf	LCD_array@x^0,c
  6685  00319C  0E00               	movlw	0
  6686  00319E  6E1F               	movwf	(LCD_array@y+1)^0,c
  6687  0031A0  0E01               	movlw	1
  6688  0031A2  6E1E               	movwf	LCD_array@y^0,c
  6689  0031A4  0E6A               	movlw	low STR_40
  6690  0031A6  6E20               	movwf	LCD_array@date^0,c
  6691  0031A8  0E7F               	movlw	high STR_40
  6692  0031AA  6E21               	movwf	(LCD_array@date+1)^0,c
  6693  0031AC  ECB1  F01F         	call	_LCD_array	;wreg free
  6694                           
  6695                           ;Task1.c: 163:             mostrar = 1;
  6696  0031B0  0E01               	movlw	1
  6697  0031B2  0101               	movlb	1	; () banked
  6698  0031B4  6F8E               	movwf	_mostrar& (0+255),b
  6699  0031B6                     l11782:
  6700                           
  6701                           ; BSR set to: 1
  6702                           ;Task1.c: 167:         if(valor > 9999) valor=0;
  6703  0031B6  0E10               	movlw	16
  6704  0031B8  5C39               	subwf	_valor^0,w,c
  6705  0031BA  0E27               	movlw	39
  6706  0031BC  583A               	subwfb	(_valor+1)^0,w,c
  6707  0031BE  A0D8               	btfss	status,0,c
  6708  0031C0  D004               	goto	l11786
  6709                           
  6710                           ; BSR set to: 1
  6711  0031C2  0E00               	movlw	0
  6712  0031C4  6E3A               	movwf	(_valor+1)^0,c
  6713  0031C6  0E00               	movlw	0
  6714  0031C8  6E39               	movwf	_valor^0,c
  6715  0031CA                     l11786:
  6716                           
  6717                           ; BSR set to: 1
  6718                           ;Task1.c: 168:         sprintf(buffer,"%04d",valor),LCD_array(2,8,buffer);
  6719  0031CA  0ED9               	movlw	low E_Teclado_Lcd@buffer
  6720  0031CC  0100               	movlb	0	; () banked
  6721  0031CE  6FB7               	movwf	sprintf@s& (0+255),b
  6722  0031D0  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  6723  0031D2  0EDF               	movlw	low STR_41
  6724  0031D4  6FB9               	movwf	sprintf@fmt& (0+255),b
  6725  0031D6  0E7F               	movlw	high STR_41
  6726  0031D8  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  6727  0031DA  C039  F0BB         	movff	_valor,?_sprintf+4
  6728  0031DE  C03A  F0BC         	movff	_valor+1,?_sprintf+5
  6729  0031E2  EC78  F027         	call	_sprintf	;wreg free
  6730                           
  6731                           ; BSR set to: 0
  6732  0031E6  0E00               	movlw	0
  6733  0031E8  6E1D               	movwf	(LCD_array@x+1)^0,c
  6734  0031EA  0E02               	movlw	2
  6735  0031EC  6E1C               	movwf	LCD_array@x^0,c
  6736  0031EE  0E00               	movlw	0
  6737  0031F0  6E1F               	movwf	(LCD_array@y+1)^0,c
  6738  0031F2  0E08               	movlw	8
  6739  0031F4  6E1E               	movwf	LCD_array@y^0,c
  6740  0031F6  0ED9               	movlw	low E_Teclado_Lcd@buffer
  6741  0031F8  6E20               	movwf	LCD_array@date^0,c
  6742  0031FA  6A21               	clrf	(LCD_array@date+1)^0,c
  6743  0031FC  ECB1  F01F         	call	_LCD_array	;wreg free
  6744                           
  6745                           ;Task1.c: 171:         if(valor == 3231 && aceptar == 1) tec_p=0,valor=0,mod_rtc=1,mostr
      +                          ar=0,aceptar=0;
  6746  003200  0E9F               	movlw	159
  6747  003202  1839               	xorwf	_valor^0,w,c
  6748  003204  E111               	bnz	l11796
  6749  003206  0E0C               	movlw	12
  6750  003208  183A               	xorwf	(_valor+1)^0,w,c
  6751  00320A  A4D8               	btfss	status,2,c
  6752  00320C  D00D               	goto	l11796
  6753  00320E  0100               	movlb	0	; () banked
  6754  003210  05F0               	decf	_aceptar& (0+255),w,b
  6755  003212  A4D8               	btfss	status,2,c
  6756  003214  D009               	goto	l11796
  6757                           
  6758                           ; BSR set to: 0
  6759  003216  0E00               	movlw	0
  6760  003218  6E46               	movwf	_tec_p^0,c
  6761  00321A  0E00               	movlw	0
  6762  00321C  6E3A               	movwf	(_valor+1)^0,c
  6763  00321E  0E00               	movlw	0
  6764  003220  6E39               	movwf	_valor^0,c
  6765  003222  0E01               	movlw	1
  6766  003224  6E45               	movwf	_mod_rtc^0,c
  6767  003226  D05A               	goto	L11
  6768  003228                     l11796:
  6769  003228  0E0A               	movlw	10
  6770  00322A  1839               	xorwf	_valor^0,w,c
  6771  00322C  E11E               	bnz	l11806
  6772  00322E  0E02               	movlw	2
  6773  003230  183A               	xorwf	(_valor+1)^0,w,c
  6774  003232  A4D8               	btfss	status,2,c
  6775  003234  D01A               	goto	l11806
  6776  003236  0100               	movlb	0	; () banked
  6777  003238  05F0               	decf	_aceptar& (0+255),w,b
  6778  00323A  A4D8               	btfss	status,2,c
  6779  00323C  D016               	goto	l11806
  6780                           
  6781                           ; BSR set to: 0
  6782  00323E  0E00               	movlw	0
  6783  003240  6E46               	movwf	_tec_p^0,c
  6784  003242  0E00               	movlw	0
  6785  003244  6E3A               	movwf	(_valor+1)^0,c
  6786  003246  0E00               	movlw	0
  6787  003248  6E39               	movwf	_valor^0,c
  6788  00324A  0E00               	movlw	0
  6789  00324C  0101               	movlb	1	; () banked
  6790  00324E  6F8E               	movwf	_mostrar& (0+255),b
  6791  003250  0E00               	movlw	0
  6792  003252  0100               	movlb	0	; () banked
  6793  003254  6FF0               	movwf	_aceptar& (0+255),b
  6794  003256  0E00               	movlw	0
  6795  003258  0101               	movlb	1	; () banked
  6796  00325A  6F8C               	movwf	_opc_rfid& (0+255),b
  6797  00325C  0E01               	movlw	1
  6798  00325E  6F8D               	movwf	_I_Con_Rfid& (0+255),b
  6799                           
  6800                           ; BSR set to: 1
  6801  003260  EC26  F005         	call	_Rfid_Lcd	;wreg free
  6802  003264                     l11804:
  6803  003264  0E00               	movlw	0
  6804  003266  6E46               	movwf	_tec_p^0,c
  6805  003268  D03F               	goto	l1085
  6806  00326A                     l11806:
  6807  00326A  043A               	decf	(_valor+1)^0,w,c
  6808  00326C  1039               	iorwf	_valor^0,w,c
  6809  00326E  A4D8               	btfss	status,2,c
  6810  003270  D00F               	goto	l11816
  6811  003272  0100               	movlb	0	; () banked
  6812  003274  05F0               	decf	_aceptar& (0+255),w,b
  6813  003276  A4D8               	btfss	status,2,c
  6814  003278  D00B               	goto	l11816
  6815                           
  6816                           ; BSR set to: 0
  6817  00327A  0E00               	movlw	0
  6818  00327C  6E46               	movwf	_tec_p^0,c
  6819  00327E  0E00               	movlw	0
  6820  003280  6E3A               	movwf	(_valor+1)^0,c
  6821  003282  0E00               	movlw	0
  6822  003284  6E39               	movwf	_valor^0,c
  6823  003286  0E00               	movlw	0
  6824  003288  6FF0               	movwf	_aceptar& (0+255),b
  6825                           
  6826                           ; BSR set to: 0
  6827  00328A  ECE0  F025         	call	_Erase_Eeprom	;wreg free
  6828  00328E  D7EA               	goto	l11804
  6829  003290                     l11816:
  6830  003290  0E09               	movlw	9
  6831  003292  1839               	xorwf	_valor^0,w,c
  6832  003294  E10B               	bnz	l11822
  6833  003296  0E03               	movlw	3
  6834  003298  183A               	xorwf	(_valor+1)^0,w,c
  6835  00329A  A4D8               	btfss	status,2,c
  6836  00329C  D007               	goto	l11822
  6837  00329E  0100               	movlb	0	; () banked
  6838  0032A0  05F0               	decf	_aceptar& (0+255),w,b
  6839  0032A2  A4D8               	btfss	status,2,c
  6840  0032A4  D003               	goto	l11822
  6841                           
  6842                           ; BSR set to: 0
  6843  0032A6  EC7A  F019         	call	_Easter_Egg	;wreg free
  6844  0032AA  D01E               	goto	l1085
  6845  0032AC                     l11822:
  6846  0032AC  0E9F               	movlw	159
  6847  0032AE  1839               	xorwf	_valor^0,w,c
  6848  0032B0  E104               	bnz	u10230
  6849  0032B2  0E0C               	movlw	12
  6850  0032B4  183A               	xorwf	(_valor+1)^0,w,c
  6851  0032B6  B4D8               	btfsc	status,2,c
  6852  0032B8  D017               	goto	l1085
  6853  0032BA                     u10230:
  6854  0032BA  0E0A               	movlw	10
  6855  0032BC  1839               	xorwf	_valor^0,w,c
  6856  0032BE  E104               	bnz	u10240
  6857  0032C0  0E02               	movlw	2
  6858  0032C2  183A               	xorwf	(_valor+1)^0,w,c
  6859  0032C4  B4D8               	btfsc	status,2,c
  6860  0032C6  D010               	goto	l1085
  6861  0032C8                     u10240:
  6862  0032C8  0100               	movlb	0	; () banked
  6863  0032CA  05F0               	decf	_aceptar& (0+255),w,b
  6864  0032CC  A4D8               	btfss	status,2,c
  6865  0032CE  D00C               	goto	l1085
  6866                           
  6867                           ; BSR set to: 0
  6868  0032D0  0E00               	movlw	0
  6869  0032D2  6E46               	movwf	_tec_p^0,c
  6870  0032D4  0E00               	movlw	0
  6871  0032D6  6E3A               	movwf	(_valor+1)^0,c
  6872  0032D8  0E00               	movlw	0
  6873  0032DA  6E39               	movwf	_valor^0,c
  6874  0032DC                     L11:
  6875  0032DC  0E00               	movlw	0
  6876  0032DE  0101               	movlb	1	; () banked
  6877  0032E0  6F8E               	movwf	_mostrar& (0+255),b
  6878  0032E2  0E00               	movlw	0
  6879  0032E4  0100               	movlb	0	; () banked
  6880  0032E6  6FF0               	movwf	_aceptar& (0+255),b
  6881  0032E8                     l1085:
  6882                           
  6883                           ;Task1.c: 177:         Timer_DelayMuestra = 50;
  6884  0032E8  0E00               	movlw	0
  6885  0032EA  0101               	movlb	1	; () banked
  6886  0032EC  6FE1               	movwf	(_Timer_DelayMuestra+1)& (0+255),b
  6887  0032EE  0E32               	movlw	50
  6888  0032F0  6FE0               	movwf	_Timer_DelayMuestra& (0+255),b
  6889                           
  6890                           ; BSR set to: 1
  6891  0032F2  0012               	return		;funcret
  6892  0032F4                     __end_of_E_Teclado_Lcd:
  6893                           	callstack 0
  6894                           
  6895 ;; *************** function _Rfid_Lcd *****************
  6896 ;; Defined at:
  6897 ;;		line 265 in file "Task1.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  buffer         20   20[BANK2 ] unsigned char [20]
  6902 ;;  ubicacion       2   43[BANK2 ] unsigned int 
  6903 ;;  paso            1   42[BANK2 ] unsigned char 
  6904 ;;  buffer         20    0[BANK2 ] unsigned char [20]
  6905 ;;  num_usuario     1   41[BANK2 ] unsigned char 
  6906 ;;  Fin_Config      1   40[BANK2 ] unsigned char 
  6907 ;; Return value:  Size  Location     Type
  6908 ;;                  1    wreg      void 
  6909 ;; Registers used:
  6910 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6911 ;; Tracked objects:
  6912 ;;		On entry : 3F/1
  6913 ;;		On exit  : 3F/1
  6914 ;;		Unchanged: 0/0
  6915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6916 ;;      Params:         0       0       0       0       0       0       0       0       0
  6917 ;;      Locals:         0       0       0      45       0       0       0       0       0
  6918 ;;      Temps:          0       2       0       0       0       0       0       0       0
  6919 ;;      Totals:         0       2       0      45       0       0       0       0       0
  6920 ;;Total ram usage:       47 bytes
  6921 ;; Hardware stack levels used:    1
  6922 ;; Hardware stack levels required when called:   17
  6923 ;; This function calls:
  6924 ;;		_E_Rfid_Proj
  6925 ;;		_LCD_array
  6926 ;;		_LCD_command
  6927 ;;		_M_Read
  6928 ;;		_M_Write
  6929 ;;		_New_User_Pos
  6930 ;;		_Read_Hash_ex
  6931 ;;		_Read_User
  6932 ;;		_Sum_Cant_Usuarios
  6933 ;;		_UART_array
  6934 ;;		_UART_write
  6935 ;;		_User_Scan
  6936 ;;		_Write_User
  6937 ;;		_sprintf
  6938 ;; This function is called by:
  6939 ;;		_E_Teclado_Lcd
  6940 ;; This function uses a non-reentrant model
  6941 ;;
  6942                           
  6943                           	psect	text16
  6944  000A4C                     __ptext16:
  6945                           	callstack 0
  6946  000A4C                     _Rfid_Lcd:
  6947                           	callstack 11
  6948                           
  6949                           ; BSR set to: 1
  6950                           ;Task1.c: 267:     char buffer[20];;Task1.c: 268:     unsigned char num_usuario=0,Fin_Co
      +                          nfig=0;
  6951                           
  6952                           ; BSR set to: 1
  6953                           ;incstack = 0
  6954  000A4C  0E00               	movlw	0
  6955  000A4E  0102               	movlb	2	; () banked
  6956  000A50  6F29               	movwf	Rfid_Lcd@num_usuario& (0+255),b
  6957  000A52  0E00               	movlw	0
  6958  000A54  6F28               	movwf	Rfid_Lcd@Fin_Config& (0+255),b
  6959                           
  6960                           ; BSR set to: 2
  6961                           ;Task1.c: 270:     LCD_command(0x01);
  6962  000A56  0E01               	movlw	1
  6963  000A58  EC78  F023         	call	_LCD_command
  6964  000A5C                     l11442:
  6965                           
  6966                           ;Task1.c: 273:     {;Task1.c: 275:         if(!opc_rfid)
  6967  000A5C  0101               	movlb	1	; () banked
  6968  000A5E  518C               	movf	_opc_rfid& (0+255),w,b
  6969  000A60  A4D8               	btfss	status,2,c
  6970  000A62  D2B0               	goto	l11608
  6971                           
  6972                           ; BSR set to: 1
  6973                           ;Task1.c: 276:         {;Task1.c: 277:             LCD_array(1,1,"  CONFIG. TARJETA   ")
      +                          ;
  6974  000A64  0E00               	movlw	0
  6975  000A66  6E1D               	movwf	(LCD_array@x+1)^0,c
  6976  000A68  0E01               	movlw	1
  6977  000A6A  6E1C               	movwf	LCD_array@x^0,c
  6978  000A6C  0E00               	movlw	0
  6979  000A6E  6E1F               	movwf	(LCD_array@y+1)^0,c
  6980  000A70  0E01               	movlw	1
  6981  000A72  6E1E               	movwf	LCD_array@y^0,c
  6982  000A74  0E1C               	movlw	low STR_55
  6983  000A76  6E20               	movwf	LCD_array@date^0,c
  6984  000A78  0E7D               	movlw	high STR_55
  6985  000A7A  6E21               	movwf	(LCD_array@date+1)^0,c
  6986  000A7C  ECB1  F01F         	call	_LCD_array	;wreg free
  6987                           
  6988                           ;Task1.c: 278:             LCD_array(2,1,"1-AGREGAR");
  6989  000A80  0E00               	movlw	0
  6990  000A82  6E1D               	movwf	(LCD_array@x+1)^0,c
  6991  000A84  0E02               	movlw	2
  6992  000A86  6E1C               	movwf	LCD_array@x^0,c
  6993  000A88  0E00               	movlw	0
  6994  000A8A  6E1F               	movwf	(LCD_array@y+1)^0,c
  6995  000A8C  0E01               	movlw	1
  6996  000A8E  6E1E               	movwf	LCD_array@y^0,c
  6997  000A90  0E2E               	movlw	low STR_56
  6998  000A92  6E20               	movwf	LCD_array@date^0,c
  6999  000A94  0E7F               	movlw	high STR_56
  7000  000A96  6E21               	movwf	(LCD_array@date+1)^0,c
  7001  000A98  ECB1  F01F         	call	_LCD_array	;wreg free
  7002                           
  7003                           ;Task1.c: 279:             LCD_array(4,1,"OPCION:");
  7004  000A9C  0E00               	movlw	0
  7005  000A9E  6E1D               	movwf	(LCD_array@x+1)^0,c
  7006  000AA0  0E04               	movlw	4
  7007  000AA2  6E1C               	movwf	LCD_array@x^0,c
  7008  000AA4  0E00               	movlw	0
  7009  000AA6  6E1F               	movwf	(LCD_array@y+1)^0,c
  7010  000AA8  0E01               	movlw	1
  7011  000AAA  6E1E               	movwf	LCD_array@y^0,c
  7012  000AAC  0E62               	movlw	low STR_57
  7013  000AAE  6E20               	movwf	LCD_array@date^0,c
  7014  000AB0  0E7F               	movlw	high STR_57
  7015  000AB2  6E21               	movwf	(LCD_array@date+1)^0,c
  7016  000AB4  ECB1  F01F         	call	_LCD_array	;wreg free
  7017  000AB8  D285               	goto	l11608
  7018  000ABA                     l11446:
  7019                           
  7020                           ; BSR set to: 0
  7021                           ;Task1.c: 285:             {;Task1.c: 286:                 if(valor >= 2) valor=0;
  7022  000ABA  503A               	movf	(_valor+1)^0,w,c
  7023  000ABC  E104               	bnz	u9890
  7024  000ABE  0E02               	movlw	2
  7025  000AC0  5C39               	subwf	_valor^0,w,c
  7026  000AC2  A0D8               	btfss	status,0,c
  7027  000AC4  D004               	goto	l11450
  7028  000AC6                     u9890:
  7029                           
  7030                           ; BSR set to: 0
  7031  000AC6  0E00               	movlw	0
  7032  000AC8  6E3A               	movwf	(_valor+1)^0,c
  7033  000ACA  0E00               	movlw	0
  7034  000ACC  6E39               	movwf	_valor^0,c
  7035  000ACE                     l11450:
  7036                           
  7037                           ; BSR set to: 0
  7038                           ;Task1.c: 287:                 opc_rfid = valor;
  7039  000ACE  C039  F18C         	movff	_valor,_opc_rfid
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;Task1.c: 288:                 sprintf(buffer,"%d",opc_rfid);
  7043  000AD2  0E00               	movlw	low Rfid_Lcd@buffer
  7044  000AD4  6FB7               	movwf	sprintf@s& (0+255),b
  7045  000AD6  0E02               	movlw	high Rfid_Lcd@buffer
  7046  000AD8  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7047  000ADA  0EF9               	movlw	low STR_9
  7048  000ADC  6FB9               	movwf	sprintf@fmt& (0+255),b
  7049  000ADE  0E7F               	movlw	high STR_9
  7050  000AE0  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7051  000AE2  C18C  F0BB         	movff	_opc_rfid,?_sprintf+4
  7052  000AE6  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  7053  000AE8  EC78  F027         	call	_sprintf	;wreg free
  7054                           
  7055                           ; BSR set to: 0
  7056                           ;Task1.c: 289:                 LCD_array(4,8,buffer);
  7057  000AEC  0E00               	movlw	0
  7058  000AEE  6E1D               	movwf	(LCD_array@x+1)^0,c
  7059  000AF0  0E04               	movlw	4
  7060  000AF2  6E1C               	movwf	LCD_array@x^0,c
  7061  000AF4  0E00               	movlw	0
  7062  000AF6  6E1F               	movwf	(LCD_array@y+1)^0,c
  7063  000AF8  0E08               	movlw	8
  7064  000AFA  6E1E               	movwf	LCD_array@y^0,c
  7065  000AFC  0E00               	movlw	low Rfid_Lcd@buffer
  7066  000AFE  6E20               	movwf	LCD_array@date^0,c
  7067  000B00  0E02               	movlw	high Rfid_Lcd@buffer
  7068  000B02  6E21               	movwf	(LCD_array@date+1)^0,c
  7069  000B04  ECB1  F01F         	call	_LCD_array	;wreg free
  7070                           
  7071                           ;Task1.c: 291:                 break;
  7072  000B08  D26D               	goto	l11610
  7073  000B0A                     l11456:
  7074                           
  7075                           ; BSR set to: 0
  7076                           ;Task1.c: 294:             {;Task1.c: 295:                 char paso=0;
  7077  000B0A  0E00               	movlw	0
  7078  000B0C  0102               	movlb	2	; () banked
  7079  000B0E  6F2A               	movwf	Rfid_Lcd@paso& (0+255),b
  7080                           
  7081                           ; BSR set to: 2
  7082                           ;Task1.c: 298:                 LCD_array(1,1,"ACERQUE LA TARJETA");
  7083  000B10  0E00               	movlw	0
  7084  000B12  6E1D               	movwf	(LCD_array@x+1)^0,c
  7085  000B14  0E01               	movlw	1
  7086  000B16  6E1C               	movwf	LCD_array@x^0,c
  7087  000B18  0E00               	movlw	0
  7088  000B1A  6E1F               	movwf	(LCD_array@y+1)^0,c
  7089  000B1C  0E01               	movlw	1
  7090  000B1E  6E1E               	movwf	LCD_array@y^0,c
  7091  000B20  0E78               	movlw	low STR_59
  7092  000B22  6E20               	movwf	LCD_array@date^0,c
  7093  000B24  0E7E               	movlw	high STR_59
  7094  000B26  6E21               	movwf	(LCD_array@date+1)^0,c
  7095  000B28  ECB1  F01F         	call	_LCD_array	;wreg free
  7096                           
  7097                           ;Task1.c: 299:                 LCD_array(2,1,"Luego presione 'A'");
  7098  000B2C  0E00               	movlw	0
  7099  000B2E  6E1D               	movwf	(LCD_array@x+1)^0,c
  7100  000B30  0E02               	movlw	2
  7101  000B32  6E1C               	movwf	LCD_array@x^0,c
  7102  000B34  0E00               	movlw	0
  7103  000B36  6E1F               	movwf	(LCD_array@y+1)^0,c
  7104  000B38  0E01               	movlw	1
  7105  000B3A  6E1E               	movwf	LCD_array@y^0,c
  7106  000B3C  0E3F               	movlw	low STR_60
  7107  000B3E  6E20               	movwf	LCD_array@date^0,c
  7108  000B40  0E7E               	movlw	high STR_60
  7109  000B42  6E21               	movwf	(LCD_array@date+1)^0,c
  7110  000B44  ECB1  F01F         	call	_LCD_array	;wreg free
  7111                           
  7112                           ;Task1.c: 300:                 LCD_array(4,1,"RFID:");
  7113  000B48  0E00               	movlw	0
  7114  000B4A  6E1D               	movwf	(LCD_array@x+1)^0,c
  7115  000B4C  0E04               	movlw	4
  7116  000B4E  6E1C               	movwf	LCD_array@x^0,c
  7117  000B50  0E00               	movlw	0
  7118  000B52  6E1F               	movwf	(LCD_array@y+1)^0,c
  7119  000B54  0E01               	movlw	1
  7120  000B56  6E1E               	movwf	LCD_array@y^0,c
  7121  000B58  0EA2               	movlw	low STR_61
  7122  000B5A  6E20               	movwf	LCD_array@date^0,c
  7123  000B5C  0E7F               	movlw	high STR_61
  7124  000B5E  6E21               	movwf	(LCD_array@date+1)^0,c
  7125  000B60  ECB1  F01F         	call	_LCD_array	;wreg free
  7126                           
  7127                           ;Task1.c: 303:                 codigo_rfid = 0;
  7128  000B64  EE20  F031         	lfsr	2,_codigo_rfid
  7129  000B68  0E07               	movlw	7
  7130  000B6A                     u9901:
  7131  000B6A  6ADE               	clrf	postinc2,c
  7132  000B6C  06E8               	decf	wreg,f,c
  7133  000B6E  E2FD               	bc	u9901
  7134                           
  7135                           ;Task1.c: 304:                 valor = 0;
  7136  000B70  0E00               	movlw	0
  7137  000B72  6E3A               	movwf	(_valor+1)^0,c
  7138  000B74  0E00               	movlw	0
  7139  000B76  6E39               	movwf	_valor^0,c
  7140  000B78                     l11468:
  7141                           
  7142                           ;Task1.c: 307:                 {;Task1.c: 309:                     if(codigo_rfid == 0)
  7143  000B78  5031               	movf	_codigo_rfid^0,w,c
  7144  000B7A  1032               	iorwf	(_codigo_rfid+1)^0,w,c
  7145  000B7C  1033               	iorwf	(_codigo_rfid+2)^0,w,c
  7146  000B7E  1034               	iorwf	(_codigo_rfid+3)^0,w,c
  7147  000B80  1035               	iorwf	(_codigo_rfid+4)^0,w,c
  7148  000B82  1036               	iorwf	(_codigo_rfid+5)^0,w,c
  7149  000B84  1037               	iorwf	(_codigo_rfid+6)^0,w,c
  7150  000B86  1038               	iorwf	(_codigo_rfid+7)^0,w,c
  7151  000B88  A4D8               	btfss	status,2,c
  7152  000B8A  D02B               	goto	l11476
  7153                           
  7154                           ;Task1.c: 310:                     {;Task1.c: 311:                         E_Rfid_Proj()
      +                          ;
  7155  000B8C  ECB2  F025         	call	_E_Rfid_Proj	;wreg free
  7156                           
  7157                           ;Task1.c: 312:                         sprintf(buffer,"%010lu",codigo_rfid);
  7158  000B90  0E00               	movlw	low Rfid_Lcd@buffer
  7159  000B92  0100               	movlb	0	; () banked
  7160  000B94  6FB7               	movwf	sprintf@s& (0+255),b
  7161  000B96  0E02               	movlw	high Rfid_Lcd@buffer
  7162  000B98  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7163  000B9A  0E95               	movlw	low STR_31
  7164  000B9C  6FB9               	movwf	sprintf@fmt& (0+255),b
  7165  000B9E  0E7F               	movlw	high STR_31
  7166  000BA0  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7167  000BA2  C031  F0BB         	movff	_codigo_rfid,?_sprintf+4
  7168  000BA6  C032  F0BC         	movff	_codigo_rfid+1,?_sprintf+5
  7169  000BAA  C033  F0BD         	movff	_codigo_rfid+2,?_sprintf+6
  7170  000BAE  C034  F0BE         	movff	_codigo_rfid+3,?_sprintf+7
  7171  000BB2  C035  F0BF         	movff	_codigo_rfid+4,?_sprintf+8
  7172  000BB6  C036  F0C0         	movff	_codigo_rfid+5,?_sprintf+9
  7173  000BBA  C037  F0C1         	movff	_codigo_rfid+6,?_sprintf+10
  7174  000BBE  C038  F0C2         	movff	_codigo_rfid+7,?_sprintf+11
  7175  000BC2  EC78  F027         	call	_sprintf	;wreg free
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;Task1.c: 313:                         LCD_array(4,6,buffer);
  7179  000BC6  0E00               	movlw	0
  7180  000BC8  6E1D               	movwf	(LCD_array@x+1)^0,c
  7181  000BCA  0E04               	movlw	4
  7182  000BCC  6E1C               	movwf	LCD_array@x^0,c
  7183  000BCE  0E00               	movlw	0
  7184  000BD0  6E1F               	movwf	(LCD_array@y+1)^0,c
  7185  000BD2  0E06               	movlw	6
  7186  000BD4  6E1E               	movwf	LCD_array@y^0,c
  7187  000BD6  0E00               	movlw	low Rfid_Lcd@buffer
  7188  000BD8  6E20               	movwf	LCD_array@date^0,c
  7189  000BDA  0E02               	movlw	high Rfid_Lcd@buffer
  7190  000BDC  6E21               	movwf	(LCD_array@date+1)^0,c
  7191  000BDE  ECB1  F01F         	call	_LCD_array	;wreg free
  7192  000BE2                     l11476:
  7193                           
  7194                           ;Task1.c: 317:                     if(aceptar == 1) LCD_command(0x01),paso+=1,valor=0,ac
      +                          eptar=0;
  7195  000BE2  0100               	movlb	0	; () banked
  7196  000BE4  05F0               	decf	_aceptar& (0+255),w,b
  7197  000BE6  A4D8               	btfss	status,2,c
  7198  000BE8  D058               	goto	l11504
  7199                           
  7200                           ; BSR set to: 0
  7201  000BEA  0E01               	movlw	1
  7202  000BEC  EC78  F023         	call	_LCD_command
  7203  000BF0  0102               	movlb	2	; () banked
  7204  000BF2  2B2A               	incf	Rfid_Lcd@paso& (0+255),f,b
  7205                           
  7206                           ; BSR set to: 2
  7207  000BF4  0E00               	movlw	0
  7208  000BF6  6E3A               	movwf	(_valor+1)^0,c
  7209  000BF8  0E00               	movlw	0
  7210  000BFA  6E39               	movwf	_valor^0,c
  7211  000BFC                     l11484:
  7212                           
  7213                           ; BSR set to: 2
  7214  000BFC  0E00               	movlw	0
  7215  000BFE  0100               	movlb	0	; () banked
  7216  000C00  6FF0               	movwf	_aceptar& (0+255),b
  7217  000C02  D04B               	goto	l11504
  7218  000C04                     l11486:
  7219                           
  7220                           ; BSR set to: 2
  7221                           ;Task1.c: 321:                     {;Task1.c: 323:                         LCD_array(1,1
      +                          ,"NUMERO USUARIO");
  7222  000C04  0E00               	movlw	0
  7223  000C06  6E1D               	movwf	(LCD_array@x+1)^0,c
  7224  000C08  0E01               	movlw	1
  7225  000C0A  6E1C               	movwf	LCD_array@x^0,c
  7226  000C0C  0E00               	movlw	0
  7227  000C0E  6E1F               	movwf	(LCD_array@y+1)^0,c
  7228  000C10  0E01               	movlw	1
  7229  000C12  6E1E               	movwf	LCD_array@y^0,c
  7230  000C14  0EBF               	movlw	low STR_63
  7231  000C16  6E20               	movwf	LCD_array@date^0,c
  7232  000C18  0E7E               	movlw	high STR_63
  7233  000C1A  6E21               	movwf	(LCD_array@date+1)^0,c
  7234  000C1C  ECB1  F01F         	call	_LCD_array	;wreg free
  7235                           
  7236                           ;Task1.c: 324:                         LCD_array(4,1,"NUM:");
  7237  000C20  0E00               	movlw	0
  7238  000C22  6E1D               	movwf	(LCD_array@x+1)^0,c
  7239  000C24  0E04               	movlw	4
  7240  000C26  6E1C               	movwf	LCD_array@x^0,c
  7241  000C28  0E00               	movlw	0
  7242  000C2A  6E1F               	movwf	(LCD_array@y+1)^0,c
  7243  000C2C  0E01               	movlw	1
  7244  000C2E  6E1E               	movwf	LCD_array@y^0,c
  7245  000C30  0ED0               	movlw	low STR_64
  7246  000C32  6E20               	movwf	LCD_array@date^0,c
  7247  000C34  0E7F               	movlw	high STR_64
  7248  000C36  6E21               	movwf	(LCD_array@date+1)^0,c
  7249  000C38  ECB1  F01F         	call	_LCD_array	;wreg free
  7250                           
  7251                           ;Task1.c: 326:                         if(valor > 99) valor=0;
  7252  000C3C  503A               	movf	(_valor+1)^0,w,c
  7253  000C3E  E104               	bnz	u9930
  7254  000C40  0E64               	movlw	100
  7255  000C42  5C39               	subwf	_valor^0,w,c
  7256  000C44  A0D8               	btfss	status,0,c
  7257  000C46  D004               	goto	l11492
  7258  000C48                     u9930:
  7259  000C48  0E00               	movlw	0
  7260  000C4A  6E3A               	movwf	(_valor+1)^0,c
  7261  000C4C  0E00               	movlw	0
  7262  000C4E  6E39               	movwf	_valor^0,c
  7263  000C50                     l11492:
  7264                           
  7265                           ;Task1.c: 327:                         num_usuario = valor;
  7266  000C50  C039  F229         	movff	_valor,Rfid_Lcd@num_usuario
  7267                           
  7268                           ;Task1.c: 328:                         sprintf(buffer,"%02d",num_usuario);
  7269  000C54  0E00               	movlw	low Rfid_Lcd@buffer
  7270  000C56  0100               	movlb	0	; () banked
  7271  000C58  6FB7               	movwf	sprintf@s& (0+255),b
  7272  000C5A  0E02               	movlw	high Rfid_Lcd@buffer
  7273  000C5C  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7274  000C5E  0EE4               	movlw	low STR_14
  7275  000C60  6FB9               	movwf	sprintf@fmt& (0+255),b
  7276  000C62  0E7F               	movlw	high STR_14
  7277  000C64  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7278  000C66  C229  F0BB         	movff	Rfid_Lcd@num_usuario,?_sprintf+4
  7279  000C6A  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  7280  000C6C  EC78  F027         	call	_sprintf	;wreg free
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;Task1.c: 329:                         LCD_array(4,5,buffer);
  7284  000C70  0E00               	movlw	0
  7285  000C72  6E1D               	movwf	(LCD_array@x+1)^0,c
  7286  000C74  0E04               	movlw	4
  7287  000C76  6E1C               	movwf	LCD_array@x^0,c
  7288  000C78  0E00               	movlw	0
  7289  000C7A  6E1F               	movwf	(LCD_array@y+1)^0,c
  7290  000C7C  0E05               	movlw	5
  7291  000C7E  6E1E               	movwf	LCD_array@y^0,c
  7292  000C80  0E00               	movlw	low Rfid_Lcd@buffer
  7293  000C82  6E20               	movwf	LCD_array@date^0,c
  7294  000C84  0E02               	movlw	high Rfid_Lcd@buffer
  7295  000C86  6E21               	movwf	(LCD_array@date+1)^0,c
  7296  000C88  ECB1  F01F         	call	_LCD_array	;wreg free
  7297                           
  7298                           ;Task1.c: 331:                         if(aceptar == 1) paso+=1,aceptar=0;
  7299  000C8C  0100               	movlb	0	; () banked
  7300  000C8E  05F0               	decf	_aceptar& (0+255),w,b
  7301  000C90  A4D8               	btfss	status,2,c
  7302  000C92  D003               	goto	l11504
  7303                           
  7304                           ; BSR set to: 0
  7305  000C94  0102               	movlb	2	; () banked
  7306  000C96  2B2A               	incf	Rfid_Lcd@paso& (0+255),f,b
  7307  000C98  D7B1               	goto	l11484
  7308  000C9A                     l11504:
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;Task1.c: 320:                     while(paso == 1)
  7312  000C9A  0102               	movlb	2	; () banked
  7313  000C9C  052A               	decf	Rfid_Lcd@paso& (0+255),w,b
  7314  000C9E  A4D8               	btfss	status,2,c
  7315  000CA0  D188               	goto	l11600
  7316  000CA2  D7B0               	goto	l11486
  7317  000CA4                     l11506:
  7318                           
  7319                           ; BSR set to: 2
  7320                           ;Task1.c: 336:                     {;Task1.c: 339:                         if((User_Scan
      +                          (num_usuario)==0) && (Read_Hash_ex(codigo_rfid) == 0))
  7321  000CA4  5129               	movf	Rfid_Lcd@num_usuario& (0+255),w,b
  7322  000CA6  EC39  F01D         	call	_User_Scan
  7323  000CAA  0900               	iorlw	0
  7324  000CAC  A4D8               	btfss	status,2,c
  7325  000CAE  D158               	goto	l11586
  7326  000CB0  C031  F084         	movff	_codigo_rfid,Read_Hash_ex@cod_rfid
  7327  000CB4  C032  F085         	movff	_codigo_rfid+1,Read_Hash_ex@cod_rfid+1
  7328  000CB8  C033  F086         	movff	_codigo_rfid+2,Read_Hash_ex@cod_rfid+2
  7329  000CBC  C034  F087         	movff	_codigo_rfid+3,Read_Hash_ex@cod_rfid+3
  7330  000CC0  C035  F088         	movff	_codigo_rfid+4,Read_Hash_ex@cod_rfid+4
  7331  000CC4  C036  F089         	movff	_codigo_rfid+5,Read_Hash_ex@cod_rfid+5
  7332  000CC8  C037  F08A         	movff	_codigo_rfid+6,Read_Hash_ex@cod_rfid+6
  7333  000CCC  C038  F08B         	movff	_codigo_rfid+7,Read_Hash_ex@cod_rfid+7
  7334  000CD0  EC22  F021         	call	_Read_Hash_ex	;wreg free
  7335  000CD4  0900               	iorlw	0
  7336  000CD6  A4D8               	btfss	status,2,c
  7337  000CD8  D143               	goto	l11586
  7338                           
  7339                           ;Task1.c: 343:                             ubicacion = New_User_Pos();
  7340  000CDA  EC54  F027         	call	_New_User_Pos	;wreg free
  7341  000CDE  C01F  F22B         	movff	?_New_User_Pos,Rfid_Lcd@ubicacion
  7342  000CE2  C020  F22C         	movff	?_New_User_Pos+1,Rfid_Lcd@ubicacion+1
  7343                           
  7344                           ; BSR set to: 1
  7345                           ;Task1.c: 344:                             Write_User(ubicacion,num_usuario);
  7346  000CE6  C22B  F0CC         	movff	Rfid_Lcd@ubicacion,Write_User@dir
  7347  000CEA  C22C  F0CD         	movff	Rfid_Lcd@ubicacion+1,Write_User@dir+1
  7348  000CEE  C229  F0CE         	movff	Rfid_Lcd@num_usuario,Write_User@usuario
  7349  000CF2  EC1A  F025         	call	_Write_User	;wreg free
  7350                           
  7351                           ;Task1.c: 345:                             _delay((unsigned long)((20)*(48000000/4000.0)
      +                          ));
  7352  000CF6  0E02               	movlw	2
  7353  000CF8  0100               	movlb	0	; () banked
  7354  000CFA  6FD8               	movwf	(??_Rfid_Lcd+1)& (0+255),b
  7355  000CFC  0E38               	movlw	56
  7356  000CFE  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7357  000D00  0EAD               	movlw	173
  7358  000D02                     u11057:
  7359  000D02  2EE8               	decfsz	wreg,f,c
  7360  000D04  D7FE               	bra	u11057
  7361  000D06  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7362  000D08  D7FC               	bra	u11057
  7363  000D0A  2FD8               	decfsz	(??_Rfid_Lcd+1)& (0+255),f,b
  7364  000D0C  D7FA               	bra	u11057
  7365                           
  7366                           ;Task1.c: 346:                             M_Write((ubicacion+3),codigo_rfid);
  7367  000D0E  0E03               	movlw	3
  7368  000D10  0102               	movlb	2	; () banked
  7369  000D12  252B               	addwf	Rfid_Lcd@ubicacion& (0+255),w,b
  7370  000D14  0100               	movlb	0	; () banked
  7371  000D16  6FCC               	movwf	M_Write@dir& (0+255),b
  7372  000D18  0E00               	movlw	0
  7373  000D1A  0102               	movlb	2	; () banked
  7374  000D1C  212C               	addwfc	(Rfid_Lcd@ubicacion+1)& (0+255),w,b
  7375  000D1E  0100               	movlb	0	; () banked
  7376  000D20  6FCD               	movwf	(M_Write@dir+1)& (0+255),b
  7377  000D22  C031  F0CE         	movff	_codigo_rfid,M_Write@mw_dato
  7378  000D26  C032  F0CF         	movff	_codigo_rfid+1,M_Write@mw_dato+1
  7379  000D2A  C033  F0D0         	movff	_codigo_rfid+2,M_Write@mw_dato+2
  7380  000D2E  C034  F0D1         	movff	_codigo_rfid+3,M_Write@mw_dato+3
  7381  000D32  C035  F0D2         	movff	_codigo_rfid+4,M_Write@mw_dato+4
  7382  000D36  C036  F0D3         	movff	_codigo_rfid+5,M_Write@mw_dato+5
  7383  000D3A  C037  F0D4         	movff	_codigo_rfid+6,M_Write@mw_dato+6
  7384  000D3E  C038  F0D5         	movff	_codigo_rfid+7,M_Write@mw_dato+7
  7385  000D42  ECAA  F000         	call	_M_Write	;wreg free
  7386                           
  7387                           ;Task1.c: 347:                             _delay((unsigned long)((20)*(48000000/4000.0)
      +                          ));
  7388  000D46  0E02               	movlw	2
  7389  000D48  0100               	movlb	0	; () banked
  7390  000D4A  6FD8               	movwf	(??_Rfid_Lcd+1)& (0+255),b
  7391  000D4C  0E38               	movlw	56
  7392  000D4E  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7393  000D50  0EAD               	movlw	173
  7394  000D52                     u11067:
  7395  000D52  2EE8               	decfsz	wreg,f,c
  7396  000D54  D7FE               	bra	u11067
  7397  000D56  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7398  000D58  D7FC               	bra	u11067
  7399  000D5A  2FD8               	decfsz	(??_Rfid_Lcd+1)& (0+255),f,b
  7400  000D5C  D7FA               	bra	u11067
  7401                           
  7402                           ;Task1.c: 348:                             Sum_Cant_Usuarios();
  7403  000D5E  EC07  F029         	call	_Sum_Cant_Usuarios	;wreg free
  7404                           
  7405                           ;Task1.c: 349:                             _delay((unsigned long)((20)*(48000000/4000.0)
      +                          ));
  7406  000D62  0E02               	movlw	2
  7407  000D64  0100               	movlb	0	; () banked
  7408  000D66  6FD8               	movwf	(??_Rfid_Lcd+1)& (0+255),b
  7409  000D68  0E38               	movlw	56
  7410  000D6A  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7411  000D6C  0EAD               	movlw	173
  7412  000D6E                     u11077:
  7413  000D6E  2EE8               	decfsz	wreg,f,c
  7414  000D70  D7FE               	bra	u11077
  7415  000D72  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7416  000D74  D7FC               	bra	u11077
  7417  000D76  2FD8               	decfsz	(??_Rfid_Lcd+1)& (0+255),f,b
  7418  000D78  D7FA               	bra	u11077
  7419                           
  7420                           ;Task1.c: 351:                             valor=0,Fin_Config=1;
  7421  000D7A  0E00               	movlw	0
  7422  000D7C  6E3A               	movwf	(_valor+1)^0,c
  7423  000D7E  0E00               	movlw	0
  7424  000D80  6E39               	movwf	_valor^0,c
  7425  000D82  0E01               	movlw	1
  7426  000D84  0102               	movlb	2	; () banked
  7427  000D86  6F28               	movwf	Rfid_Lcd@Fin_Config& (0+255),b
  7428                           
  7429                           ; BSR set to: 2
  7430                           ;Task1.c: 353:                             char buffer[20];;Task1.c: 357:               
      +                                        sprintf(buffer,"%d",ubicacion);
  7431  000D88  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7432  000D8A  0100               	movlb	0	; () banked
  7433  000D8C  6FB7               	movwf	sprintf@s& (0+255),b
  7434  000D8E  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7435  000D90  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7436  000D92  0EF9               	movlw	low STR_9
  7437  000D94  6FB9               	movwf	sprintf@fmt& (0+255),b
  7438  000D96  0E7F               	movlw	high STR_9
  7439  000D98  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7440  000D9A  C22B  F0BB         	movff	Rfid_Lcd@ubicacion,?_sprintf+4
  7441  000D9E  C22C  F0BC         	movff	Rfid_Lcd@ubicacion+1,?_sprintf+5
  7442  000DA2  EC78  F027         	call	_sprintf	;wreg free
  7443                           
  7444                           ; BSR set to: 0
  7445                           ;Task1.c: 358:                             UART_array("UBICACION:"),UART_array(buffer),U
      +                          ART_array("\n"),UART_write(13);
  7446  000DA6  0E23               	movlw	low STR_67
  7447  000DA8  6E18               	movwf	UART_array@cadena^0,c
  7448  000DAA  0E7F               	movlw	high STR_67
  7449  000DAC  6E19               	movwf	(UART_array@cadena+1)^0,c
  7450  000DAE  EC65  F026         	call	_UART_array	;wreg free
  7451  000DB2  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7452  000DB4  6E18               	movwf	UART_array@cadena^0,c
  7453  000DB6  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7454  000DB8  6E19               	movwf	(UART_array@cadena+1)^0,c
  7455  000DBA  EC65  F026         	call	_UART_array	;wreg free
  7456  000DBE  0EF4               	movlw	low (STR_103+1)
  7457  000DC0  6E18               	movwf	UART_array@cadena^0,c
  7458  000DC2  0E7F               	movlw	high (STR_103+1)
  7459  000DC4  6E19               	movwf	(UART_array@cadena+1)^0,c
  7460  000DC6  EC65  F026         	call	_UART_array	;wreg free
  7461  000DCA  0E0D               	movlw	13
  7462  000DCC  EC24  F02A         	call	_UART_write
  7463                           
  7464                           ;Task1.c: 359:                             _delay((unsigned long)((5)*(48000000/4000.0))
      +                          );
  7465  000DD0  0E4E               	movlw	78
  7466  000DD2  0100               	movlb	0	; () banked
  7467  000DD4  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7468  000DD6  0EEB               	movlw	235
  7469  000DD8                     u11087:
  7470  000DD8  2EE8               	decfsz	wreg,f,c
  7471  000DDA  D7FE               	bra	u11087
  7472  000DDC  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7473  000DDE  D7FC               	bra	u11087
  7474                           
  7475                           ;Task1.c: 361:                             sprintf(buffer,"%d",Read_User(0));
  7476  000DE0  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7477  000DE2  0100               	movlb	0	; () banked
  7478  000DE4  6FB7               	movwf	sprintf@s& (0+255),b
  7479  000DE6  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7480  000DE8  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7481  000DEA  0EF9               	movlw	low STR_9
  7482  000DEC  6FB9               	movwf	sprintf@fmt& (0+255),b
  7483  000DEE  0E7F               	movlw	high STR_9
  7484  000DF0  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7485  000DF2  0E00               	movlw	0
  7486  000DF4  6E1B               	movwf	(Read_User@dir+1)^0,c
  7487  000DF6  0E00               	movlw	0
  7488  000DF8  6E1A               	movwf	Read_User@dir^0,c
  7489  000DFA  EC4E  F025         	call	_Read_User	;wreg free
  7490  000DFE  0100               	movlb	0	; () banked
  7491  000E00  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7492  000E02  51D7               	movf	??_Rfid_Lcd& (0+255),w,b
  7493  000E04  6FBB               	movwf	(?_sprintf+4)& (0+255),b
  7494  000E06  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  7495  000E08  EC78  F027         	call	_sprintf	;wreg free
  7496                           
  7497                           ; BSR set to: 0
  7498                           ;Task1.c: 362:                             UART_array("CANTIDAD USUARIOS:"),UART_array(b
      +                          uffer),UART_array("\n"),UART_write(13);
  7499  000E0C  0E65               	movlw	low STR_70
  7500  000E0E  6E18               	movwf	UART_array@cadena^0,c
  7501  000E10  0E7E               	movlw	high STR_70
  7502  000E12  6E19               	movwf	(UART_array@cadena+1)^0,c
  7503  000E14  EC65  F026         	call	_UART_array	;wreg free
  7504  000E18  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7505  000E1A  6E18               	movwf	UART_array@cadena^0,c
  7506  000E1C  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7507  000E1E  6E19               	movwf	(UART_array@cadena+1)^0,c
  7508  000E20  EC65  F026         	call	_UART_array	;wreg free
  7509  000E24  0EF4               	movlw	low (STR_103+1)
  7510  000E26  6E18               	movwf	UART_array@cadena^0,c
  7511  000E28  0E7F               	movlw	high (STR_103+1)
  7512  000E2A  6E19               	movwf	(UART_array@cadena+1)^0,c
  7513  000E2C  EC65  F026         	call	_UART_array	;wreg free
  7514  000E30  0E0D               	movlw	13
  7515  000E32  EC24  F02A         	call	_UART_write
  7516                           
  7517                           ;Task1.c: 364:                             sprintf(buffer,"%d",Read_User(ubicacion));
  7518  000E36  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7519  000E38  0100               	movlb	0	; () banked
  7520  000E3A  6FB7               	movwf	sprintf@s& (0+255),b
  7521  000E3C  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7522  000E3E  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7523  000E40  0EF9               	movlw	low STR_9
  7524  000E42  6FB9               	movwf	sprintf@fmt& (0+255),b
  7525  000E44  0E7F               	movlw	high STR_9
  7526  000E46  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7527  000E48  C22B  F01A         	movff	Rfid_Lcd@ubicacion,Read_User@dir
  7528  000E4C  C22C  F01B         	movff	Rfid_Lcd@ubicacion+1,Read_User@dir+1
  7529  000E50  EC4E  F025         	call	_Read_User	;wreg free
  7530  000E54  0100               	movlb	0	; () banked
  7531  000E56  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7532  000E58  51D7               	movf	??_Rfid_Lcd& (0+255),w,b
  7533  000E5A  6FBB               	movwf	(?_sprintf+4)& (0+255),b
  7534  000E5C  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  7535  000E5E  EC78  F027         	call	_sprintf	;wreg free
  7536                           
  7537                           ; BSR set to: 0
  7538                           ;Task1.c: 365:                             UART_array("NUMERO DE USUARIO:"),UART_array(b
      +                          uffer),UART_array("\n"),UART_write(13);
  7539  000E62  0E52               	movlw	low STR_73
  7540  000E64  6E18               	movwf	UART_array@cadena^0,c
  7541  000E66  0E7E               	movlw	high STR_73
  7542  000E68  6E19               	movwf	(UART_array@cadena+1)^0,c
  7543  000E6A  EC65  F026         	call	_UART_array	;wreg free
  7544  000E6E  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7545  000E70  6E18               	movwf	UART_array@cadena^0,c
  7546  000E72  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7547  000E74  6E19               	movwf	(UART_array@cadena+1)^0,c
  7548  000E76  EC65  F026         	call	_UART_array	;wreg free
  7549  000E7A  0EF4               	movlw	low (STR_103+1)
  7550  000E7C  6E18               	movwf	UART_array@cadena^0,c
  7551  000E7E  0E7F               	movlw	high (STR_103+1)
  7552  000E80  6E19               	movwf	(UART_array@cadena+1)^0,c
  7553  000E82  EC65  F026         	call	_UART_array	;wreg free
  7554  000E86  0E0D               	movlw	13
  7555  000E88  EC24  F02A         	call	_UART_write
  7556                           
  7557                           ;Task1.c: 366:                             _delay((unsigned long)((5)*(48000000/4000.0))
      +                          );
  7558  000E8C  0E4E               	movlw	78
  7559  000E8E  0100               	movlb	0	; () banked
  7560  000E90  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7561  000E92  0EEB               	movlw	235
  7562  000E94                     u11097:
  7563  000E94  2EE8               	decfsz	wreg,f,c
  7564  000E96  D7FE               	bra	u11097
  7565  000E98  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7566  000E9A  D7FC               	bra	u11097
  7567                           
  7568                           ;Task1.c: 368:                             sprintf(buffer,"%lu",M_Read((ubicacion+3),10)
      +                          );
  7569  000E9C  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7570  000E9E  0100               	movlb	0	; () banked
  7571  000EA0  6FB7               	movwf	sprintf@s& (0+255),b
  7572  000EA2  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7573  000EA4  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  7574  000EA6  0EE9               	movlw	low STR_75
  7575  000EA8  6FB9               	movwf	sprintf@fmt& (0+255),b
  7576  000EAA  0E7F               	movlw	high STR_75
  7577  000EAC  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  7578  000EAE  0E03               	movlw	3
  7579  000EB0  0102               	movlb	2	; () banked
  7580  000EB2  252B               	addwf	Rfid_Lcd@ubicacion& (0+255),w,b
  7581  000EB4  0100               	movlb	0	; () banked
  7582  000EB6  6F68               	movwf	M_Read@dir& (0+255),b
  7583  000EB8  0E00               	movlw	0
  7584  000EBA  0102               	movlb	2	; () banked
  7585  000EBC  212C               	addwfc	(Rfid_Lcd@ubicacion+1)& (0+255),w,b
  7586  000EBE  0100               	movlb	0	; () banked
  7587  000EC0  6F69               	movwf	(M_Read@dir+1)& (0+255),b
  7588  000EC2  0E0A               	movlw	10
  7589  000EC4  6F6A               	movwf	M_Read@c_m_r& (0+255),b
  7590  000EC6  EC26  F015         	call	_M_Read	;wreg free
  7591  000ECA  C068  F0BB         	movff	?_M_Read,?_sprintf+4
  7592  000ECE  C069  F0BC         	movff	?_M_Read+1,?_sprintf+5
  7593  000ED2  C06A  F0BD         	movff	?_M_Read+2,?_sprintf+6
  7594  000ED6  C06B  F0BE         	movff	?_M_Read+3,?_sprintf+7
  7595  000EDA  C06C  F0BF         	movff	?_M_Read+4,?_sprintf+8
  7596  000EDE  C06D  F0C0         	movff	?_M_Read+5,?_sprintf+9
  7597  000EE2  C06E  F0C1         	movff	?_M_Read+6,?_sprintf+10
  7598  000EE6  C06F  F0C2         	movff	?_M_Read+7,?_sprintf+11
  7599  000EEA  EC78  F027         	call	_sprintf	;wreg free
  7600                           
  7601                           ; BSR set to: 0
  7602                           ;Task1.c: 369:                             UART_array("RFID:"),UART_array(buffer),UART_a
      +                          rray("\n"),UART_write(13);
  7603  000EEE  0EA2               	movlw	low STR_61
  7604  000EF0  6E18               	movwf	UART_array@cadena^0,c
  7605  000EF2  0E7F               	movlw	high STR_61
  7606  000EF4  6E19               	movwf	(UART_array@cadena+1)^0,c
  7607  000EF6  EC65  F026         	call	_UART_array	;wreg free
  7608  000EFA  0E14               	movlw	low Rfid_Lcd@buffer_1766
  7609  000EFC  6E18               	movwf	UART_array@cadena^0,c
  7610  000EFE  0E02               	movlw	high Rfid_Lcd@buffer_1766
  7611  000F00  6E19               	movwf	(UART_array@cadena+1)^0,c
  7612  000F02  EC65  F026         	call	_UART_array	;wreg free
  7613  000F06  0EF4               	movlw	low (STR_103+1)
  7614  000F08  6E18               	movwf	UART_array@cadena^0,c
  7615  000F0A  0E7F               	movlw	high (STR_103+1)
  7616  000F0C  6E19               	movwf	(UART_array@cadena+1)^0,c
  7617  000F0E  EC65  F026         	call	_UART_array	;wreg free
  7618  000F12  0E0D               	movlw	13
  7619  000F14  EC24  F02A         	call	_UART_write
  7620                           
  7621                           ;Task1.c: 371:                             LCD_command(0x01),LCD_array(2,1,"  USUARIO AG
      +                          REGADO  ");
  7622  000F18  0E01               	movlw	1
  7623  000F1A  EC78  F023         	call	_LCD_command
  7624  000F1E  0E00               	movlw	0
  7625  000F20  6E1D               	movwf	(LCD_array@x+1)^0,c
  7626  000F22  0E02               	movlw	2
  7627  000F24  6E1C               	movwf	LCD_array@x^0,c
  7628  000F26  0E00               	movlw	0
  7629  000F28  6E1F               	movwf	(LCD_array@y+1)^0,c
  7630  000F2A  0E01               	movlw	1
  7631  000F2C  6E1E               	movwf	LCD_array@y^0,c
  7632  000F2E  0E46               	movlw	low STR_78
  7633  000F30  6E20               	movwf	LCD_array@date^0,c
  7634  000F32  0E7D               	movlw	high STR_78
  7635  000F34  6E21               	movwf	(LCD_array@date+1)^0,c
  7636  000F36  ECB1  F01F         	call	_LCD_array	;wreg free
  7637                           
  7638                           ;Task1.c: 372:                             _delay((unsigned long)((1000)*(48000000/4000.
      +                          0)));
  7639  000F3A  0E3D               	movlw	61
  7640  000F3C  0100               	movlb	0	; () banked
  7641  000F3E  6FD8               	movwf	(??_Rfid_Lcd+1)& (0+255),b
  7642  000F40  0EE1               	movlw	225
  7643  000F42  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7644  000F44  0E3F               	movlw	63
  7645  000F46                     u11107:
  7646  000F46  2EE8               	decfsz	wreg,f,c
  7647  000F48  D7FE               	bra	u11107
  7648  000F4A  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7649  000F4C  D7FC               	bra	u11107
  7650  000F4E  2FD8               	decfsz	(??_Rfid_Lcd+1)& (0+255),f,b
  7651  000F50  D7FA               	bra	u11107
  7652  000F52  D000               	nop2	
  7653                           
  7654                           ;Task1.c: 373:                             LCD_command(0x01);
  7655  000F54  0E01               	movlw	1
  7656  000F56  EC78  F023         	call	_LCD_command
  7657  000F5A                     l11582:
  7658                           
  7659                           ;Task1.c: 375:                             paso+=1;
  7660  000F5A  0102               	movlb	2	; () banked
  7661  000F5C  2B2A               	incf	Rfid_Lcd@paso& (0+255),f,b
  7662                           
  7663                           ;Task1.c: 377:                             break;
  7664  000F5E  D02D               	goto	u9980
  7665  000F60                     l11586:
  7666                           
  7667                           ;Task1.c: 380:                         {;Task1.c: 381:                             LCD_c
      +                          ommand(0x01),LCD_array(2,1,"  USUARIO EXISTENTE "),_delay((unsigned long)((1000)*(480000
      +                          00/4000.0))),valor=0,mostrar=0;
  7668  000F60  0E01               	movlw	1
  7669  000F62  EC78  F023         	call	_LCD_command
  7670  000F66  0E00               	movlw	0
  7671  000F68  6E1D               	movwf	(LCD_array@x+1)^0,c
  7672  000F6A  0E02               	movlw	2
  7673  000F6C  6E1C               	movwf	LCD_array@x^0,c
  7674  000F6E  0E00               	movlw	0
  7675  000F70  6E1F               	movwf	(LCD_array@y+1)^0,c
  7676  000F72  0E01               	movlw	1
  7677  000F74  6E1E               	movwf	LCD_array@y^0,c
  7678  000F76  0E5B               	movlw	low STR_79
  7679  000F78  6E20               	movwf	LCD_array@date^0,c
  7680  000F7A  0E7D               	movlw	high STR_79
  7681  000F7C  6E21               	movwf	(LCD_array@date+1)^0,c
  7682  000F7E  ECB1  F01F         	call	_LCD_array	;wreg free
  7683  000F82  0E3D               	movlw	61
  7684  000F84  0100               	movlb	0	; () banked
  7685  000F86  6FD8               	movwf	(??_Rfid_Lcd+1)& (0+255),b
  7686  000F88  0EE1               	movlw	225
  7687  000F8A  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7688  000F8C  0E3F               	movlw	63
  7689  000F8E                     u11117:
  7690  000F8E  2EE8               	decfsz	wreg,f,c
  7691  000F90  D7FE               	bra	u11117
  7692  000F92  2FD7               	decfsz	??_Rfid_Lcd& (0+255),f,b
  7693  000F94  D7FC               	bra	u11117
  7694  000F96  2FD8               	decfsz	(??_Rfid_Lcd+1)& (0+255),f,b
  7695  000F98  D7FA               	bra	u11117
  7696  000F9A  D000               	nop2	
  7697  000F9C  0E00               	movlw	0
  7698  000F9E  6E3A               	movwf	(_valor+1)^0,c
  7699  000FA0  0E00               	movlw	0
  7700  000FA2  6E39               	movwf	_valor^0,c
  7701  000FA4  0E00               	movlw	0
  7702  000FA6  0101               	movlb	1	; () banked
  7703  000FA8  6F8E               	movwf	_mostrar& (0+255),b
  7704                           
  7705                           ; BSR set to: 1
  7706                           ;Task1.c: 382:                             Fin_Config=1;
  7707  000FAA  0E01               	movlw	1
  7708  000FAC  0102               	movlb	2	; () banked
  7709  000FAE  6F28               	movwf	Rfid_Lcd@Fin_Config& (0+255),b
  7710  000FB0  D7D4               	goto	l11582
  7711  000FB2                     l11600:
  7712                           
  7713                           ; BSR set to: 2
  7714                           ;Task1.c: 335:                     while(paso == 2)
  7715  000FB2  0E02               	movlw	2
  7716  000FB4  192A               	xorwf	Rfid_Lcd@paso& (0+255),w,b
  7717  000FB6  B4D8               	btfsc	status,2,c
  7718  000FB8  D675               	goto	l11506
  7719  000FBA                     u9980:
  7720                           
  7721                           ; BSR set to: 2
  7722                           ;Task1.c: 388:                     if(paso == 3) break;
  7723  000FBA  0E03               	movlw	3
  7724  000FBC  192A               	xorwf	Rfid_Lcd@paso& (0+255),w,b
  7725  000FBE  B4D8               	btfsc	status,2,c
  7726  000FC0  D011               	goto	l11610
  7727  000FC2  D5DA               	goto	l11468
  7728  000FC4                     l11608:
  7729  000FC4  0101               	movlb	1	; () banked
  7730  000FC6  518C               	movf	_opc_rfid& (0+255),w,b
  7731  000FC8  0100               	movlb	0	; () banked
  7732  000FCA  6FD7               	movwf	??_Rfid_Lcd& (0+255),b
  7733  000FCC  6BD8               	clrf	(??_Rfid_Lcd+1)& (0+255),b
  7734                           
  7735                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7736                           ; Switch size 1, requested type "simple"
  7737                           ; Number of cases is 1, Range of values is 0 to 0
  7738                           ; switch strategies available:
  7739                           ; Name         Instructions Cycles
  7740                           ; simple_byte            4     3 (average)
  7741                           ;	Chosen strategy is simple_byte
  7742  000FCE  51D8               	movf	(??_Rfid_Lcd+1)& (0+255),w,b
  7743  000FD0  0A00               	xorlw	0	; case 0
  7744  000FD2  A4D8               	btfss	status,2,c
  7745  000FD4  D007               	goto	l11610
  7746                           
  7747                           ; BSR set to: 0
  7748                           ; Switch size 1, requested type "simple"
  7749                           ; Number of cases is 2, Range of values is 0 to 1
  7750                           ; switch strategies available:
  7751                           ; Name         Instructions Cycles
  7752                           ; simple_byte            7     4 (average)
  7753                           ;	Chosen strategy is simple_byte
  7754  000FD6  51D7               	movf	??_Rfid_Lcd& (0+255),w,b
  7755  000FD8  0A00               	xorlw	0	; case 0
  7756  000FDA  B4D8               	btfsc	status,2,c
  7757  000FDC  D56E               	goto	l11446
  7758  000FDE  0A01               	xorlw	1	; case 1
  7759  000FE0  B4D8               	btfsc	status,2,c
  7760  000FE2  D593               	goto	l11456
  7761  000FE4                     l11610:
  7762                           
  7763                           ;Task1.c: 393:         if(Fin_Config == 1) break;
  7764  000FE4  0102               	movlb	2	; () banked
  7765  000FE6  0528               	decf	Rfid_Lcd@Fin_Config& (0+255),w,b
  7766  000FE8  A4D8               	btfss	status,2,c
  7767  000FEA  D538               	goto	l11442
  7768                           
  7769                           ; BSR set to: 2
  7770                           ;Task1.c: 396:     I_Con_Rfid = 0;
  7771  000FEC  0E00               	movlw	0
  7772  000FEE  0101               	movlb	1	; () banked
  7773  000FF0  6F8D               	movwf	_I_Con_Rfid& (0+255),b
  7774                           
  7775                           ; BSR set to: 1
  7776  000FF2  0012               	return		;funcret
  7777  000FF4                     __end_of_Rfid_Lcd:
  7778                           	callstack 0
  7779                           
  7780 ;; *************** function _User_Scan *****************
  7781 ;; Defined at:
  7782 ;;		line 195 in file "EEPROM_EX.c"
  7783 ;; Parameters:    Size  Location     Type
  7784 ;;  num_user        1    wreg     unsigned char 
  7785 ;; Auto vars:     Size  Location     Type
  7786 ;;  num_user        1   41[COMRAM] unsigned char 
  7787 ;;  i               1   43[COMRAM] unsigned char 
  7788 ;;  pos             1   44[COMRAM] unsigned char 
  7789 ;;  user_exist      1   42[COMRAM] _Bool 
  7790 ;; Return value:  Size  Location     Type
  7791 ;;                  1    wreg      _Bool 
  7792 ;; Registers used:
  7793 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  7794 ;; Tracked objects:
  7795 ;;		On entry : 3C/0
  7796 ;;		On exit  : 3E/0
  7797 ;;		Unchanged: 0/0
  7798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7799 ;;      Params:         0       0       0       0       0       0       0       0       0
  7800 ;;      Locals:         4       0       0       0       0       0       0       0       0
  7801 ;;      Temps:          0      16       0       0       0       0       0       0       0
  7802 ;;      Totals:         4      16       0       0       0       0       0       0       0
  7803 ;;Total ram usage:       20 bytes
  7804 ;; Hardware stack levels used:    1
  7805 ;; Hardware stack levels required when called:   10
  7806 ;; This function calls:
  7807 ;;		_M_Read
  7808 ;; This function is called by:
  7809 ;;		_Rfid_Lcd
  7810 ;;		_ACN_CO_Com
  7811 ;; This function uses a non-reentrant model
  7812 ;;
  7813                           
  7814                           	psect	text17
  7815  003A72                     __ptext17:
  7816                           	callstack 0
  7817  003A72                     _User_Scan:
  7818                           	callstack 18
  7819                           
  7820                           ; BSR set to: 1
  7821                           ;incstack = 0
  7822                           ;User_Scan@num_user stored from wreg
  7823  003A72  6E2A               	movwf	User_Scan@num_user^0,c
  7824                           
  7825                           ;EEPROM_EX.c: 195: _Bool User_Scan(unsigned char num_user);EEPROM_EX.c: 196: {;EEPROM_EX
      +                          .c: 197:     _Bool user_exist=0;
  7826  003A74  0E00               	movlw	0
  7827  003A76  6E2B               	movwf	User_Scan@user_exist^0,c
  7828                           
  7829                           ;EEPROM_EX.c: 198:     unsigned char pos=0;
  7830  003A78  0E00               	movlw	0
  7831  003A7A  6E2D               	movwf	User_Scan@pos^0,c
  7832                           
  7833                           ;EEPROM_EX.c: 201:     cant_user = M_Read(0,2);
  7834  003A7C  0E00               	movlw	0
  7835  003A7E  0100               	movlb	0	; () banked
  7836  003A80  6F69               	movwf	(M_Read@dir+1)& (0+255),b
  7837  003A82  0E00               	movlw	0
  7838  003A84  6F68               	movwf	M_Read@dir& (0+255),b
  7839  003A86  0E02               	movlw	2
  7840  003A88  6F6A               	movwf	M_Read@c_m_r& (0+255),b
  7841  003A8A  EC26  F015         	call	_M_Read	;wreg free
  7842  003A8E  C068  F084         	movff	?_M_Read,??_User_Scan
  7843  003A92  C069  F085         	movff	?_M_Read+1,??_User_Scan+1
  7844  003A96  C06A  F086         	movff	?_M_Read+2,??_User_Scan+2
  7845  003A9A  C06B  F087         	movff	?_M_Read+3,??_User_Scan+3
  7846  003A9E  C06C  F088         	movff	?_M_Read+4,??_User_Scan+4
  7847  003AA2  C06D  F089         	movff	?_M_Read+5,??_User_Scan+5
  7848  003AA6  C06E  F08A         	movff	?_M_Read+6,??_User_Scan+6
  7849  003AAA  C06F  F08B         	movff	?_M_Read+7,??_User_Scan+7
  7850  003AAE  0100               	movlb	0	; () banked
  7851  003AB0  5184               	movf	??_User_Scan& (0+255),w,b
  7852  003AB2  0101               	movlb	1	; () banked
  7853  003AB4  6F91               	movwf	_cant_user& (0+255),b
  7854                           
  7855                           ; BSR set to: 1
  7856                           ;EEPROM_EX.c: 204:     for(char i=0;i<cant_user;i++)
  7857  003AB6  0E00               	movlw	0
  7858  003AB8  6E2C               	movwf	User_Scan@i^0,c
  7859  003ABA  D049               	goto	l11260
  7860  003ABC                     l11246:
  7861                           
  7862                           ; BSR set to: 1
  7863                           ;EEPROM_EX.c: 205:     {;EEPROM_EX.c: 206:         if(i != 0) pos = pos + 15;
  7864  003ABC  502C               	movf	User_Scan@i^0,w,c
  7865  003ABE  B4D8               	btfsc	status,2,c
  7866  003AC0  D003               	goto	l11250
  7867                           
  7868                           ; BSR set to: 1
  7869  003AC2  502D               	movf	User_Scan@pos^0,w,c
  7870  003AC4  0F0F               	addlw	15
  7871  003AC6  D001               	goto	L12
  7872  003AC8                     l11250:
  7873                           
  7874                           ; BSR set to: 1
  7875  003AC8  0E04               	movlw	4
  7876  003ACA                     L12:
  7877  003ACA  6E2D               	movwf	User_Scan@pos^0,c
  7878                           
  7879                           ; BSR set to: 1
  7880                           ;EEPROM_EX.c: 208:         if(num_user == (M_Read(pos,2))) user_exist=1;
  7881  003ACC  C02D  F068         	movff	User_Scan@pos,M_Read@dir
  7882  003AD0  0100               	movlb	0	; () banked
  7883  003AD2  6B69               	clrf	(M_Read@dir+1)& (0+255),b
  7884  003AD4  0E02               	movlw	2
  7885  003AD6  6F6A               	movwf	M_Read@c_m_r& (0+255),b
  7886  003AD8  EC26  F015         	call	_M_Read	;wreg free
  7887  003ADC  C068  F084         	movff	?_M_Read,??_User_Scan
  7888  003AE0  C069  F085         	movff	?_M_Read+1,??_User_Scan+1
  7889  003AE4  C06A  F086         	movff	?_M_Read+2,??_User_Scan+2
  7890  003AE8  C06B  F087         	movff	?_M_Read+3,??_User_Scan+3
  7891  003AEC  C06C  F088         	movff	?_M_Read+4,??_User_Scan+4
  7892  003AF0  C06D  F089         	movff	?_M_Read+5,??_User_Scan+5
  7893  003AF4  C06E  F08A         	movff	?_M_Read+6,??_User_Scan+6
  7894  003AF8  C06F  F08B         	movff	?_M_Read+7,??_User_Scan+7
  7895  003AFC  C02A  F08C         	movff	User_Scan@num_user,??_User_Scan+8
  7896  003B00  0100               	movlb	0	; () banked
  7897  003B02  6B8D               	clrf	(??_User_Scan+9)& (0+255),b
  7898  003B04  6B8E               	clrf	(??_User_Scan+10)& (0+255),b
  7899  003B06  6B8F               	clrf	(??_User_Scan+11)& (0+255),b
  7900  003B08  6B90               	clrf	(??_User_Scan+12)& (0+255),b
  7901  003B0A  6B91               	clrf	(??_User_Scan+13)& (0+255),b
  7902  003B0C  6B92               	clrf	(??_User_Scan+14)& (0+255),b
  7903  003B0E  6B93               	clrf	(??_User_Scan+15)& (0+255),b
  7904  003B10  5184               	movf	??_User_Scan& (0+255),w,b
  7905  003B12  198C               	xorwf	(??_User_Scan+8)& (0+255),w,b
  7906  003B14  E118               	bnz	l667
  7907  003B16  5185               	movf	(??_User_Scan+1)& (0+255),w,b
  7908  003B18  198D               	xorwf	(??_User_Scan+9)& (0+255),w,b
  7909  003B1A  E115               	bnz	l667
  7910  003B1C  5186               	movf	(??_User_Scan+2)& (0+255),w,b
  7911  003B1E  198E               	xorwf	(??_User_Scan+10)& (0+255),w,b
  7912  003B20  E112               	bnz	l667
  7913  003B22  5187               	movf	(??_User_Scan+3)& (0+255),w,b
  7914  003B24  198F               	xorwf	(??_User_Scan+11)& (0+255),w,b
  7915  003B26  E10F               	bnz	l667
  7916  003B28  5188               	movf	(??_User_Scan+4)& (0+255),w,b
  7917  003B2A  1990               	xorwf	(??_User_Scan+12)& (0+255),w,b
  7918  003B2C  E10C               	bnz	l667
  7919  003B2E  5189               	movf	(??_User_Scan+5)& (0+255),w,b
  7920  003B30  1991               	xorwf	(??_User_Scan+13)& (0+255),w,b
  7921  003B32  E109               	bnz	l667
  7922  003B34  518A               	movf	(??_User_Scan+6)& (0+255),w,b
  7923  003B36  1992               	xorwf	(??_User_Scan+14)& (0+255),w,b
  7924  003B38  E106               	bnz	l667
  7925  003B3A  518B               	movf	(??_User_Scan+7)& (0+255),w,b
  7926  003B3C  1993               	xorwf	(??_User_Scan+15)& (0+255),w,b
  7927  003B3E  A4D8               	btfss	status,2,c
  7928  003B40  D002               	goto	l667
  7929                           
  7930                           ; BSR set to: 0
  7931  003B42  0E01               	movlw	1
  7932  003B44  6E2B               	movwf	User_Scan@user_exist^0,c
  7933  003B46                     l667:
  7934                           
  7935                           ; BSR set to: 0
  7936                           ;EEPROM_EX.c: 210:         if(user_exist) break;
  7937  003B46  502B               	movf	User_Scan@user_exist^0,w,c
  7938  003B48  A4D8               	btfss	status,2,c
  7939  003B4A  D006               	goto	u9750
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;EEPROM_EX.c: 211:     }
  7943  003B4C  2A2C               	incf	User_Scan@i^0,f,c
  7944  003B4E                     l11260:
  7945  003B4E  0101               	movlb	1	; () banked
  7946  003B50  5191               	movf	_cant_user& (0+255),w,b
  7947  003B52  5C2C               	subwf	User_Scan@i^0,w,c
  7948  003B54  A0D8               	btfss	status,0,c
  7949  003B56  D7B2               	goto	l11246
  7950  003B58                     u9750:
  7951                           
  7952                           ;EEPROM_EX.c: 213:     return user_exist;
  7953  003B58  502B               	movf	User_Scan@user_exist^0,w,c
  7954  003B5A  0012               	return		;funcret
  7955  003B5C                     __end_of_User_Scan:
  7956                           	callstack 0
  7957                           
  7958 ;; *************** function _UART_write *****************
  7959 ;; Defined at:
  7960 ;;		line 53 in file "UART_com.c"
  7961 ;; Parameters:    Size  Location     Type
  7962 ;;  dato            1    wreg     unsigned char 
  7963 ;; Auto vars:     Size  Location     Type
  7964 ;;  dato            1   23[COMRAM] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;                  1    wreg      void 
  7967 ;; Registers used:
  7968 ;;		wreg
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/1
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0
  7975 ;;      Locals:         1       0       0       0       0       0       0       0       0
  7976 ;;      Temps:          0       0       0       0       0       0       0       0       0
  7977 ;;      Totals:         1       0       0       0       0       0       0       0       0
  7978 ;;Total ram usage:        1 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    7
  7981 ;; This function calls:
  7982 ;;		Nothing
  7983 ;; This function is called by:
  7984 ;;		_Rfid_Lcd
  7985 ;;		_Task_Com_USART
  7986 ;;		_ACN_CR_Com
  7987 ;;		_ACN_PA_Com
  7988 ;;		_ACN_CO_Com
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text18
  7993  005448                     __ptext18:
  7994                           	callstack 0
  7995  005448                     _UART_write:
  7996                           	callstack 22
  7997                           
  7998                           ;incstack = 0
  7999                           ;UART_write@dato stored from wreg
  8000  005448  6E18               	movwf	UART_write@dato^0,c
  8001                           
  8002                           ;UART_com.c: 53: void UART_write(char dato);UART_com.c: 54: {;UART_com.c: 55:     TXREG 
      +                          = dato;
  8003  00544A  C018  FFAD         	movff	UART_write@dato,4013	;volatile
  8004  00544E                     l115:
  8005  00544E  B2AC               	btfsc	172,1,c	;volatile
  8006  005450  0012               	return	
  8007  005452  D7FD               	goto	l115
  8008  005454                     __end_of_UART_write:
  8009                           	callstack 0
  8010                           
  8011 ;; *************** function _UART_array *****************
  8012 ;; Defined at:
  8013 ;;		line 67 in file "UART_com.c"
  8014 ;; Parameters:    Size  Location     Type
  8015 ;;  cadena          2   23[COMRAM] PTR const unsigned char 
  8016 ;;		 -> STR_130(3), STR_129(2), STR_127(2), STR_125(2), 
  8017 ;;		 -> STR_123(7), ACN_CO_Com@buffer(10), STR_122(3), STR_121(2), 
  8018 ;;		 -> STR_119(2), STR_117(2), STR_115(7), ACN_PA_Com@buffer(10), 
  8019 ;;		 -> STR_108(3), STR_107(2), STR_105(2), STR_104(9), 
  8020 ;;		 -> STR_103(3), STR_102(2), STR_100(2), ACN_CR_Com@buffer(10), 
  8021 ;;		 -> STR_99(9), ACN_CR_Com@texto2(53), ACN_CR_Com@texto1(8), STR_98(2), 
  8022 ;;		 -> llave(4), STR_97(11), STR_96(11), STR_95(11), 
  8023 ;;		 -> STR_94(11), STR_77(2), STR_76(6), STR_74(2), 
  8024 ;;		 -> STR_73(19), STR_71(2), STR_70(19), STR_68(2), 
  8025 ;;		 -> STR_67(11), Rfid_Lcd@buffer_1766(20), 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;		None
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/1
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8037 ;;      Params:         2       0       0       0       0       0       0       0       0
  8038 ;;      Locals:         0       0       0       0       0       0       0       0       0
  8039 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8040 ;;      Totals:         2       0       0       0       0       0       0       0       0
  8041 ;;Total ram usage:        2 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    7
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_Rfid_Lcd
  8048 ;;		_Task_Com_USART
  8049 ;;		_ACN_CR_Com
  8050 ;;		_ACN_PA_Com
  8051 ;;		_ACN_CO_Com
  8052 ;; This function uses a non-reentrant model
  8053 ;;
  8054                           
  8055                           	psect	text19
  8056  004CCA                     __ptext19:
  8057                           	callstack 0
  8058  004CCA                     _UART_array:
  8059                           	callstack 22
  8060                           
  8061                           ;UART_com.c: 67: void UART_array(const char* cadena);UART_com.c: 68: {;UART_com.c: 69:  
      +                             while(*cadena)
  8062                           
  8063                           ;incstack = 0
  8064  004CCA  D015               	goto	l11076
  8065  004CCC                     l11072:
  8066                           
  8067                           ;UART_com.c: 70:     {;UART_com.c: 71:         TXREG = *cadena;
  8068  004CCC  C018  FFF6         	movff	UART_array@cadena,tblptrl
  8069  004CD0  C019  FFF7         	movff	UART_array@cadena+1,tblptrh
  8070  004CD4  6AF8               	clrf	tblptru,c
  8071  004CD6  0E07               	movlw	(high __ramtop+-1)
  8072  004CD8  64F7               	cpfsgt	tblptrh,c
  8073  004CDA  D003               	bra	u9637
  8074  004CDC  0008               	tblrd		*
  8075  004CDE  50F5               	movf	tablat,w,c
  8076  004CE0  D005               	bra	u9630
  8077  004CE2                     u9637:
  8078  004CE2  CFF6 FFE1          	movff	tblptrl,fsr1l
  8079  004CE6  CFF7 FFE2          	movff	tblptrh,fsr1h
  8080  004CEA  50E7               	movf	indf1,w,c
  8081  004CEC                     u9630:
  8082  004CEC  6EAD               	movwf	173,c	;volatile
  8083  004CEE                     l123:
  8084  004CEE  A2AC               	btfss	172,1,c	;volatile
  8085  004CF0  D7FE               	goto	l123
  8086                           
  8087                           ;UART_com.c: 73:         cadena++;
  8088  004CF2  4A18               	infsnz	UART_array@cadena^0,f,c
  8089  004CF4  2A19               	incf	(UART_array@cadena+1)^0,f,c
  8090  004CF6                     l11076:
  8091                           
  8092                           ;UART_com.c: 69:     while(*cadena)
  8093  004CF6  C018  FFF6         	movff	UART_array@cadena,tblptrl
  8094  004CFA  C019  FFF7         	movff	UART_array@cadena+1,tblptrh
  8095  004CFE  6AF8               	clrf	tblptru,c
  8096  004D00  0E07               	movlw	(high __ramtop+-1)
  8097  004D02  64F7               	cpfsgt	tblptrh,c
  8098  004D04  D003               	bra	u9657
  8099  004D06  0008               	tblrd		*
  8100  004D08  50F5               	movf	tablat,w,c
  8101  004D0A  D005               	bra	u9650
  8102  004D0C                     u9657:
  8103  004D0C  CFF6 FFE1          	movff	tblptrl,fsr1l
  8104  004D10  CFF7 FFE2          	movff	tblptrh,fsr1h
  8105  004D14  50E7               	movf	indf1,w,c
  8106  004D16                     u9650:
  8107  004D16  0900               	iorlw	0
  8108  004D18  B4D8               	btfsc	status,2,c
  8109  004D1A  0012               	return	
  8110  004D1C  D7D7               	goto	l11072
  8111  004D1E                     __end_of_UART_array:
  8112                           	callstack 0
  8113                           
  8114 ;; *************** function _Sum_Cant_Usuarios *****************
  8115 ;; Defined at:
  8116 ;;		line 339 in file "EEPROM_EX.c"
  8117 ;; Parameters:    Size  Location     Type
  8118 ;;		None
  8119 ;; Auto vars:     Size  Location     Type
  8120 ;;  cant_usuario    1  118[BANK0 ] unsigned char 
  8121 ;; Return value:  Size  Location     Type
  8122 ;;                  1    wreg      void 
  8123 ;; Registers used:
  8124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8125 ;; Tracked objects:
  8126 ;;		On entry : 0/1
  8127 ;;		On exit  : 0/0
  8128 ;;		Unchanged: 0/0
  8129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8130 ;;      Params:         0       0       0       0       0       0       0       0       0
  8131 ;;      Locals:         0       1       0       0       0       0       0       0       0
  8132 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8133 ;;      Totals:         0       1       0       0       0       0       0       0       0
  8134 ;;Total ram usage:        1 bytes
  8135 ;; Hardware stack levels used:    1
  8136 ;; Hardware stack levels required when called:   16
  8137 ;; This function calls:
  8138 ;;		_Read_User
  8139 ;;		_Write_User
  8140 ;; This function is called by:
  8141 ;;		_Rfid_Lcd
  8142 ;; This function uses a non-reentrant model
  8143 ;;
  8144                           
  8145                           	psect	text20
  8146  00520E                     __ptext20:
  8147                           	callstack 0
  8148  00520E                     _Sum_Cant_Usuarios:
  8149                           	callstack 11
  8150                           
  8151                           ;EEPROM_EX.c: 343:     cant_usuario = Read_User(0);
  8152                           
  8153                           ;incstack = 0
  8154  00520E  0E00               	movlw	0
  8155  005210  6E1B               	movwf	(Read_User@dir+1)^0,c
  8156  005212  0E00               	movlw	0
  8157  005214  6E1A               	movwf	Read_User@dir^0,c
  8158  005216  EC4E  F025         	call	_Read_User	;wreg free
  8159  00521A  0100               	movlb	0	; () banked
  8160  00521C  6FD6               	movwf	Sum_Cant_Usuarios@cant_usuario& (0+255),b
  8161                           
  8162                           ; BSR set to: 0
  8163                           ;EEPROM_EX.c: 345:     cant_usuario = cant_usuario + 1;
  8164  00521E  29D6               	incf	Sum_Cant_Usuarios@cant_usuario& (0+255),w,b
  8165  005220  6FD6               	movwf	Sum_Cant_Usuarios@cant_usuario& (0+255),b
  8166                           
  8167                           ; BSR set to: 0
  8168                           ;EEPROM_EX.c: 347:     Write_User(0,cant_usuario);
  8169  005222  0E00               	movlw	0
  8170  005224  6FCD               	movwf	(Write_User@dir+1)& (0+255),b
  8171  005226  0E00               	movlw	0
  8172  005228  6FCC               	movwf	Write_User@dir& (0+255),b
  8173  00522A  C0D6  F0CE         	movff	Sum_Cant_Usuarios@cant_usuario,Write_User@usuario
  8174  00522E  EC1A  F025         	call	_Write_User	;wreg free
  8175  005232  0012               	return		;funcret
  8176  005234                     __end_of_Sum_Cant_Usuarios:
  8177                           	callstack 0
  8178                           
  8179 ;; *************** function _Write_User *****************
  8180 ;; Defined at:
  8181 ;;		line 354 in file "EEPROM_EX.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;  dir             2  108[BANK0 ] unsigned int 
  8184 ;;  usuario         1  110[BANK0 ] unsigned char 
  8185 ;; Auto vars:     Size  Location     Type
  8186 ;;  buffer          5  111[BANK0 ] unsigned char [5]
  8187 ;;  MD_2            1  117[BANK0 ] unsigned char 
  8188 ;;  MD_1            1  116[BANK0 ] unsigned char 
  8189 ;; Return value:  Size  Location     Type
  8190 ;;                  1    wreg      void 
  8191 ;; Registers used:
  8192 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8193 ;; Tracked objects:
  8194 ;;		On entry : 3E/1
  8195 ;;		On exit  : 0/0
  8196 ;;		Unchanged: 0/0
  8197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8198 ;;      Params:         0       3       0       0       0       0       0       0       0
  8199 ;;      Locals:         0       7       0       0       0       0       0       0       0
  8200 ;;      Temps:          0       0       0       0       0       0       0       0       0
  8201 ;;      Totals:         0      10       0       0       0       0       0       0       0
  8202 ;;Total ram usage:       10 bytes
  8203 ;; Hardware stack levels used:    1
  8204 ;; Hardware stack levels required when called:   15
  8205 ;; This function calls:
  8206 ;;		_i2c_array
  8207 ;;		_i2c_start
  8208 ;;		_i2c_stop
  8209 ;;		_i2c_write
  8210 ;;		_sprintf
  8211 ;; This function is called by:
  8212 ;;		_Sum_Cant_Usuarios
  8213 ;;		_Rfid_Lcd
  8214 ;; This function uses a non-reentrant model
  8215 ;;
  8216                           
  8217                           	psect	text21
  8218  004A34                     __ptext21:
  8219                           	callstack 0
  8220  004A34                     _Write_User:
  8221                           	callstack 12
  8222                           
  8223                           ;incstack = 0
  8224  004A34  0E00               	movlw	0
  8225  004A36  0100               	movlb	0	; () banked
  8226  004A38  6FD5               	movwf	Write_User@MD_2& (0+255),b
  8227                           
  8228                           ; BSR set to: 0
  8229                           ;EEPROM_EX.c: 362:     MD_1 = (dir & 0xff00) >> 8;
  8230  004A3A  C0CD  F0D4         	movff	Write_User@dir+1,Write_User@MD_1
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;EEPROM_EX.c: 363:     MD_2 = dir & 0x00ff;
  8234  004A3E  C0CC  F0D5         	movff	Write_User@dir,Write_User@MD_2
  8235                           
  8236                           ; BSR set to: 0
  8237                           ;EEPROM_EX.c: 365:     i2c_start();
  8238  004A42  ECC1  F029         	call	_i2c_start	;wreg free
  8239                           
  8240                           ;EEPROM_EX.c: 367:     i2c_write(0b10100000);
  8241  004A46  0EA0               	movlw	160
  8242  004A48  ECA6  F024         	call	_i2c_write
  8243                           
  8244                           ;EEPROM_EX.c: 369:     if(dir > 0)
  8245  004A4C  0100               	movlb	0	; () banked
  8246  004A4E  51CC               	movf	Write_User@dir& (0+255),w,b
  8247  004A50  11CD               	iorwf	(Write_User@dir+1)& (0+255),w,b
  8248  004A52  B4D8               	btfsc	status,2,c
  8249  004A54  D008               	goto	l11018
  8250                           
  8251                           ; BSR set to: 0
  8252                           ;EEPROM_EX.c: 370:     {;EEPROM_EX.c: 371:         i2c_write(MD_1);
  8253  004A56  51D4               	movf	Write_User@MD_1& (0+255),w,b
  8254  004A58  ECA6  F024         	call	_i2c_write
  8255                           
  8256                           ;EEPROM_EX.c: 372:         i2c_write(MD_2);
  8257  004A5C  0100               	movlb	0	; () banked
  8258  004A5E  51D5               	movf	Write_User@MD_2& (0+255),w,b
  8259  004A60  ECA6  F024         	call	_i2c_write
  8260                           
  8261                           ;EEPROM_EX.c: 373:     }
  8262  004A64  D006               	goto	l11020
  8263  004A66                     l11018:
  8264                           
  8265                           ; BSR set to: 0
  8266                           ;EEPROM_EX.c: 375:     {;EEPROM_EX.c: 376:         i2c_write(0);
  8267  004A66  0E00               	movlw	0
  8268  004A68  ECA6  F024         	call	_i2c_write
  8269                           
  8270                           ;EEPROM_EX.c: 377:         i2c_write(0);
  8271  004A6C  0E00               	movlw	0
  8272  004A6E  ECA6  F024         	call	_i2c_write
  8273  004A72                     l11020:
  8274                           
  8275                           ;EEPROM_EX.c: 380:     sprintf(buffer,"%02d",usuario);
  8276  004A72  0ECF               	movlw	low Write_User@buffer
  8277  004A74  0100               	movlb	0	; () banked
  8278  004A76  6FB7               	movwf	sprintf@s& (0+255),b
  8279  004A78  6BB8               	clrf	(sprintf@s+1)& (0+255),b
  8280  004A7A  0EE4               	movlw	low STR_14
  8281  004A7C  6FB9               	movwf	sprintf@fmt& (0+255),b
  8282  004A7E  0E7F               	movlw	high STR_14
  8283  004A80  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  8284  004A82  C0CE  F0BB         	movff	Write_User@usuario,?_sprintf+4
  8285  004A86  6BBC               	clrf	(?_sprintf+5)& (0+255),b
  8286  004A88  EC78  F027         	call	_sprintf	;wreg free
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;EEPROM_EX.c: 381:     i2c_array(buffer);
  8290  004A8C  0ECF               	movlw	low Write_User@buffer
  8291  004A8E  6E1A               	movwf	i2c_array@cadena^0,c
  8292  004A90  6A1B               	clrf	(i2c_array@cadena+1)^0,c
  8293  004A92  EC8C  F029         	call	_i2c_array	;wreg free
  8294                           
  8295                           ;EEPROM_EX.c: 383:     i2c_stop();
  8296  004A96  EC40  F029         	call	_i2c_stop	;wreg free
  8297  004A9A  0012               	return		;funcret
  8298  004A9C                     __end_of_Write_User:
  8299                           	callstack 0
  8300                           
  8301 ;; *************** function _Read_Hash_ex *****************
  8302 ;; Defined at:
  8303 ;;		line 313 in file "EEPROM_EX.c"
  8304 ;; Parameters:    Size  Location     Type
  8305 ;;  cod_rfid        8   36[BANK0 ] long long 
  8306 ;; Auto vars:     Size  Location     Type
  8307 ;;  i               1   42[COMRAM] unsigned char 
  8308 ;;  pos_hash        1   43[COMRAM] unsigned char 
  8309 ;;  OK_HASH         1   41[COMRAM] _Bool 
  8310 ;; Return value:  Size  Location     Type
  8311 ;;                  1    wreg      _Bool 
  8312 ;; Registers used:
  8313 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8314 ;; Tracked objects:
  8315 ;;		On entry : 0/1
  8316 ;;		On exit  : 3E/0
  8317 ;;		Unchanged: 0/0
  8318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8319 ;;      Params:         0       8       0       0       0       0       0       0       0
  8320 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8321 ;;      Temps:          0       8       0       0       0       0       0       0       0
  8322 ;;      Totals:         3      16       0       0       0       0       0       0       0
  8323 ;;Total ram usage:       19 bytes
  8324 ;; Hardware stack levels used:    1
  8325 ;; Hardware stack levels required when called:   10
  8326 ;; This function calls:
  8327 ;;		_M_Read
  8328 ;;		_Read_User
  8329 ;; This function is called by:
  8330 ;;		_Num_User
  8331 ;;		_Rfid_Lcd
  8332 ;;		_E_Ingresos
  8333 ;; This function uses a non-reentrant model
  8334 ;;
  8335                           
  8336                           	psect	text22
  8337  004244                     __ptext22:
  8338                           	callstack 0
  8339  004244                     _Read_Hash_ex:
  8340                           	callstack 18
  8341                           
  8342                           ;EEPROM_EX.c: 313: _Bool Read_Hash_ex(long long cod_rfid);EEPROM_EX.c: 314: {;EEPROM_EX.
      +                          c: 315:     _Bool OK_HASH=0;
  8343                           
  8344                           ;incstack = 0
  8345  004244  0E00               	movlw	0
  8346  004246  6E2A               	movwf	Read_Hash_ex@OK_HASH^0,c
  8347                           
  8348                           ;EEPROM_EX.c: 316:     unsigned char pos_hash=0;
  8349  004248  0E00               	movlw	0
  8350  00424A  6E2C               	movwf	Read_Hash_ex@pos_hash^0,c
  8351                           
  8352                           ;EEPROM_EX.c: 318:     cant_user = Read_User(0);
  8353  00424C  0E00               	movlw	0
  8354  00424E  6E1B               	movwf	(Read_User@dir+1)^0,c
  8355  004250  0E00               	movlw	0
  8356  004252  6E1A               	movwf	Read_User@dir^0,c
  8357  004254  EC4E  F025         	call	_Read_User	;wreg free
  8358  004258  6F91               	movwf	_cant_user& (0+255),b
  8359                           
  8360                           ; BSR set to: 1
  8361                           ;EEPROM_EX.c: 321:     for(char i=0;i<cant_user;i++)
  8362  00425A  0E00               	movlw	0
  8363  00425C  6E2B               	movwf	Read_Hash_ex@i^0,c
  8364  00425E  D040               	goto	l11302
  8365  004260                     l11286:
  8366                           
  8367                           ; BSR set to: 1
  8368                           ;EEPROM_EX.c: 322:     {;EEPROM_EX.c: 323:         if(i == 0) pos_hash=7;
  8369  004260  502B               	movf	Read_Hash_ex@i^0,w,c
  8370  004262  A4D8               	btfss	status,2,c
  8371  004264  D002               	goto	l11290
  8372                           
  8373                           ; BSR set to: 1
  8374  004266  0E07               	movlw	7
  8375  004268  D002               	goto	L13
  8376  00426A                     l11290:
  8377                           
  8378                           ; BSR set to: 1
  8379  00426A  502C               	movf	Read_Hash_ex@pos_hash^0,w,c
  8380  00426C  0F0F               	addlw	15
  8381  00426E                     L13:
  8382  00426E  6E2C               	movwf	Read_Hash_ex@pos_hash^0,c
  8383                           
  8384                           ; BSR set to: 1
  8385                           ;EEPROM_EX.c: 326:         if(cod_rfid == M_Read(pos_hash,10))
  8386  004270  C02C  F068         	movff	Read_Hash_ex@pos_hash,M_Read@dir
  8387  004274  0100               	movlb	0	; () banked
  8388  004276  6B69               	clrf	(M_Read@dir+1)& (0+255),b
  8389  004278  0E0A               	movlw	10
  8390  00427A  6F6A               	movwf	M_Read@c_m_r& (0+255),b
  8391  00427C  EC26  F015         	call	_M_Read	;wreg free
  8392  004280  C068  F08C         	movff	?_M_Read,??_Read_Hash_ex
  8393  004284  C069  F08D         	movff	?_M_Read+1,??_Read_Hash_ex+1
  8394  004288  C06A  F08E         	movff	?_M_Read+2,??_Read_Hash_ex+2
  8395  00428C  C06B  F08F         	movff	?_M_Read+3,??_Read_Hash_ex+3
  8396  004290  C06C  F090         	movff	?_M_Read+4,??_Read_Hash_ex+4
  8397  004294  C06D  F091         	movff	?_M_Read+5,??_Read_Hash_ex+5
  8398  004298  C06E  F092         	movff	?_M_Read+6,??_Read_Hash_ex+6
  8399  00429C  C06F  F093         	movff	?_M_Read+7,??_Read_Hash_ex+7
  8400  0042A0  0100               	movlb	0	; () banked
  8401  0042A2  5184               	movf	Read_Hash_ex@cod_rfid& (0+255),w,b
  8402  0042A4  198C               	xorwf	??_Read_Hash_ex& (0+255),w,b
  8403  0042A6  E119               	bnz	l11298
  8404  0042A8  5185               	movf	(Read_Hash_ex@cod_rfid+1)& (0+255),w,b
  8405  0042AA  198D               	xorwf	(??_Read_Hash_ex+1)& (0+255),w,b
  8406  0042AC  E116               	bnz	l11298
  8407  0042AE  5186               	movf	(Read_Hash_ex@cod_rfid+2)& (0+255),w,b
  8408  0042B0  198E               	xorwf	(??_Read_Hash_ex+2)& (0+255),w,b
  8409  0042B2  E113               	bnz	l11298
  8410  0042B4  5187               	movf	(Read_Hash_ex@cod_rfid+3)& (0+255),w,b
  8411  0042B6  198F               	xorwf	(??_Read_Hash_ex+3)& (0+255),w,b
  8412  0042B8  E110               	bnz	l11298
  8413  0042BA  5188               	movf	(Read_Hash_ex@cod_rfid+4)& (0+255),w,b
  8414  0042BC  1990               	xorwf	(??_Read_Hash_ex+4)& (0+255),w,b
  8415  0042BE  E10D               	bnz	l11298
  8416  0042C0  5189               	movf	(Read_Hash_ex@cod_rfid+5)& (0+255),w,b
  8417  0042C2  1991               	xorwf	(??_Read_Hash_ex+5)& (0+255),w,b
  8418  0042C4  E10A               	bnz	l11298
  8419  0042C6  518A               	movf	(Read_Hash_ex@cod_rfid+6)& (0+255),w,b
  8420  0042C8  1992               	xorwf	(??_Read_Hash_ex+6)& (0+255),w,b
  8421  0042CA  E107               	bnz	l11298
  8422  0042CC  518B               	movf	(Read_Hash_ex@cod_rfid+7)& (0+255),w,b
  8423  0042CE  1993               	xorwf	(??_Read_Hash_ex+7)& (0+255),w,b
  8424  0042D0  A4D8               	btfss	status,2,c
  8425  0042D2  D003               	goto	l11298
  8426                           
  8427                           ; BSR set to: 0
  8428                           ;EEPROM_EX.c: 327:         {;EEPROM_EX.c: 328:             OK_HASH = 1;
  8429  0042D4  0E01               	movlw	1
  8430  0042D6  6E2A               	movwf	Read_Hash_ex@OK_HASH^0,c
  8431                           
  8432                           ;EEPROM_EX.c: 329:             break;
  8433  0042D8  D008               	goto	u9790
  8434  0042DA                     l11298:
  8435                           
  8436                           ; BSR set to: 0
  8437  0042DA  0E00               	movlw	0
  8438  0042DC  6E2A               	movwf	Read_Hash_ex@OK_HASH^0,c
  8439                           
  8440                           ; BSR set to: 0
  8441                           ;EEPROM_EX.c: 332:     }
  8442  0042DE  2A2B               	incf	Read_Hash_ex@i^0,f,c
  8443  0042E0                     l11302:
  8444  0042E0  0101               	movlb	1	; () banked
  8445  0042E2  5191               	movf	_cant_user& (0+255),w,b
  8446  0042E4  5C2B               	subwf	Read_Hash_ex@i^0,w,c
  8447  0042E6  A0D8               	btfss	status,0,c
  8448  0042E8  D7BB               	goto	l11286
  8449  0042EA                     u9790:
  8450                           
  8451                           ;EEPROM_EX.c: 334:     return OK_HASH;
  8452  0042EA  502A               	movf	Read_Hash_ex@OK_HASH^0,w,c
  8453  0042EC  0012               	return		;funcret
  8454  0042EE                     __end_of_Read_Hash_ex:
  8455                           	callstack 0
  8456                           
  8457 ;; *************** function _New_User_Pos *****************
  8458 ;; Defined at:
  8459 ;;		line 218 in file "EEPROM_EX.c"
  8460 ;; Parameters:    Size  Location     Type
  8461 ;;		None
  8462 ;; Auto vars:     Size  Location     Type
  8463 ;;  Posicion        2   34[COMRAM] unsigned int 
  8464 ;;  cant_user       1   36[COMRAM] unsigned char 
  8465 ;; Return value:  Size  Location     Type
  8466 ;;                  2   30[COMRAM] unsigned int 
  8467 ;; Registers used:
  8468 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8469 ;; Tracked objects:
  8470 ;;		On entry : 3E/0
  8471 ;;		On exit  : 3F/1
  8472 ;;		Unchanged: 0/0
  8473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8474 ;;      Params:         2       0       0       0       0       0       0       0       0
  8475 ;;      Locals:         3       0       0       0       0       0       0       0       0
  8476 ;;      Temps:          2       0       0       0       0       0       0       0       0
  8477 ;;      Totals:         7       0       0       0       0       0       0       0       0
  8478 ;;Total ram usage:        7 bytes
  8479 ;; Hardware stack levels used:    1
  8480 ;; Hardware stack levels required when called:   10
  8481 ;; This function calls:
  8482 ;;		_Read_User
  8483 ;; This function is called by:
  8484 ;;		_Rfid_Lcd
  8485 ;; This function uses a non-reentrant model
  8486 ;;
  8487                           
  8488                           	psect	text23
  8489  004EA8                     __ptext23:
  8490                           	callstack 0
  8491  004EA8                     _New_User_Pos:
  8492                           	callstack 17
  8493                           
  8494                           ;EEPROM_EX.c: 221:     unsigned int Posicion=0;
  8495                           
  8496                           ;incstack = 0
  8497  004EA8  0E00               	movlw	0
  8498  004EAA  6E24               	movwf	(New_User_Pos@Posicion+1)^0,c
  8499  004EAC  0E00               	movlw	0
  8500  004EAE  6E23               	movwf	New_User_Pos@Posicion^0,c
  8501                           
  8502                           ;EEPROM_EX.c: 223:     cant_user = Read_User(0);
  8503  004EB0  0E00               	movlw	0
  8504  004EB2  6E1B               	movwf	(Read_User@dir+1)^0,c
  8505  004EB4  0E00               	movlw	0
  8506  004EB6  6E1A               	movwf	Read_User@dir^0,c
  8507  004EB8  EC4E  F025         	call	_Read_User	;wreg free
  8508  004EBC  6E25               	movwf	New_User_Pos@cant_user^0,c
  8509                           
  8510                           ; BSR set to: 1
  8511                           ;EEPROM_EX.c: 225:     if(cant_user != 0) Posicion = (cant_user * 15) + 4;
  8512  004EBE  5025               	movf	New_User_Pos@cant_user^0,w,c
  8513  004EC0  B4D8               	btfsc	status,2,c
  8514  004EC2  D00D               	goto	l11274
  8515                           
  8516                           ; BSR set to: 1
  8517  004EC4  5025               	movf	New_User_Pos@cant_user^0,w,c
  8518  004EC6  0D0F               	mullw	15
  8519  004EC8  CFF3 F021          	movff	prodl,??_New_User_Pos
  8520  004ECC  CFF4 F022          	movff	prodh,??_New_User_Pos+1
  8521  004ED0  0E04               	movlw	4
  8522  004ED2  2421               	addwf	??_New_User_Pos^0,w,c
  8523  004ED4  6E23               	movwf	New_User_Pos@Posicion^0,c
  8524  004ED6  0E00               	movlw	0
  8525  004ED8  2022               	addwfc	(??_New_User_Pos+1)^0,w,c
  8526  004EDA  6E24               	movwf	(New_User_Pos@Posicion+1)^0,c
  8527  004EDC  D004               	goto	l11276
  8528  004EDE                     l11274:
  8529                           
  8530                           ; BSR set to: 1
  8531  004EDE  0E00               	movlw	0
  8532  004EE0  6E24               	movwf	(New_User_Pos@Posicion+1)^0,c
  8533  004EE2  0E04               	movlw	4
  8534  004EE4  6E23               	movwf	New_User_Pos@Posicion^0,c
  8535  004EE6                     l11276:
  8536                           
  8537                           ; BSR set to: 1
  8538                           ;EEPROM_EX.c: 228:     return Posicion;
  8539  004EE6  C023  F01F         	movff	New_User_Pos@Posicion,?_New_User_Pos
  8540  004EEA  C024  F020         	movff	New_User_Pos@Posicion+1,?_New_User_Pos+1
  8541                           
  8542                           ; BSR set to: 1
  8543  004EEE  0012               	return		;funcret
  8544  004EF0                     __end_of_New_User_Pos:
  8545                           	callstack 0
  8546                           
  8547 ;; *************** function _M_Write *****************
  8548 ;; Defined at:
  8549 ;;		line 86 in file "EEPROM_EX.c"
  8550 ;; Parameters:    Size  Location     Type
  8551 ;;  dir             2  108[BANK0 ] unsigned int 
  8552 ;;  mw_dato         8  110[BANK0 ] long long 
  8553 ;; Auto vars:     Size  Location     Type
  8554 ;;  buffer         11   56[BANK1 ] unsigned char [11]
  8555 ;;  dec1            8  101[BANK1 ] long long 
  8556 ;;  dec2            8   93[BANK1 ] long long 
  8557 ;;  dec3            8   85[BANK1 ] long long 
  8558 ;;  dec4            8   77[BANK1 ] long long 
  8559 ;;  dec5            8   67[BANK1 ] long long 
  8560 ;;  MD_2            1   76[BANK1 ] unsigned char 
  8561 ;;  MD_1            1   75[BANK1 ] unsigned char 
  8562 ;; Return value:  Size  Location     Type
  8563 ;;                  1    wreg      void 
  8564 ;; Registers used:
  8565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8566 ;; Tracked objects:
  8567 ;;		On entry : 3F/0
  8568 ;;		On exit  : 0/0
  8569 ;;		Unchanged: 0/0
  8570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  8571 ;;      Params:         0      10       0       0       0       0       0       0       0
  8572 ;;      Locals:         0       0      53       0       0       0       0       0       0
  8573 ;;      Temps:          0       0      56       0       0       0       0       0       0
  8574 ;;      Totals:         0      10     109       0       0       0       0       0       0
  8575 ;;Total ram usage:      119 bytes
  8576 ;; Hardware stack levels used:    1
  8577 ;; Hardware stack levels required when called:   15
  8578 ;; This function calls:
  8579 ;;		___aodiv
  8580 ;;		___omul
  8581 ;;		_i2c_array
  8582 ;;		_i2c_start
  8583 ;;		_i2c_stop
  8584 ;;		_i2c_write
  8585 ;;		_sprintf
  8586 ;; This function is called by:
  8587 ;;		_Rfid_Lcd
  8588 ;; This function uses a non-reentrant model
  8589 ;;
  8590                           
  8591                           	psect	text24
  8592  000154                     __ptext24:
  8593                           	callstack 0
  8594  000154                     _M_Write:
  8595                           	callstack 12
  8596                           
  8597                           ; BSR set to: 0
  8598                           
  8599                           ; BSR set to: 1
  8600                           ;incstack = 0
  8601  000154  0E00               	movlw	0
  8602  000156  0101               	movlb	1	; () banked
  8603  000158  6F4C               	movwf	M_Write@MD_2& (0+255),b
  8604                           
  8605                           ; BSR set to: 1
  8606                           ;EEPROM_EX.c: 93:     dec1 = mw_dato / 100000000;
  8607                           
  8608                           ; BSR set to: 1
  8609                           
  8610                           ; BSR set to: 1
  8611                           
  8612                           ; BSR set to: 1
  8613                           
  8614                           ; BSR set to: 1
  8615                           
  8616                           ; BSR set to: 1
  8617  00015A  C0CE  F018         	movff	M_Write@mw_dato,___aodiv@dividend
  8618  00015E  C0CF  F019         	movff	M_Write@mw_dato+1,___aodiv@dividend+1
  8619  000162  C0D0  F01A         	movff	M_Write@mw_dato+2,___aodiv@dividend+2
  8620  000166  C0D1  F01B         	movff	M_Write@mw_dato+3,___aodiv@dividend+3
  8621  00016A  C0D2  F01C         	movff	M_Write@mw_dato+4,___aodiv@dividend+4
  8622  00016E  C0D3  F01D         	movff	M_Write@mw_dato+5,___aodiv@dividend+5
  8623  000172  C0D4  F01E         	movff	M_Write@mw_dato+6,___aodiv@dividend+6
  8624  000176  C0D5  F01F         	movff	M_Write@mw_dato+7,___aodiv@dividend+7
  8625  00017A  0E00               	movlw	0
  8626  00017C  6E20               	movwf	___aodiv@divisor^0,c
  8627  00017E  0EE1               	movlw	225
  8628  000180  6E21               	movwf	(___aodiv@divisor+1)^0,c
  8629  000182  0EF5               	movlw	245
  8630  000184  6E22               	movwf	(___aodiv@divisor+2)^0,c
  8631  000186  0E05               	movlw	5
  8632  000188  6E23               	movwf	(___aodiv@divisor+3)^0,c
  8633  00018A  0E00               	movlw	0
  8634  00018C  6E24               	movwf	(___aodiv@divisor+4)^0,c
  8635  00018E  0E00               	movlw	0
  8636  000190  6E25               	movwf	(___aodiv@divisor+5)^0,c
  8637  000192  0E00               	movlw	0
  8638  000194  6E26               	movwf	(___aodiv@divisor+6)^0,c
  8639  000196  0E00               	movlw	0
  8640  000198  6E27               	movwf	(___aodiv@divisor+7)^0,c
  8641  00019A  ECE1  F01A         	call	___aodiv	;wreg free
  8642  00019E  C018  F165         	movff	?___aodiv,M_Write@dec1
  8643  0001A2  C019  F166         	movff	?___aodiv+1,M_Write@dec1+1
  8644  0001A6  C01A  F167         	movff	?___aodiv+2,M_Write@dec1+2
  8645  0001AA  C01B  F168         	movff	?___aodiv+3,M_Write@dec1+3
  8646  0001AE  C01C  F169         	movff	?___aodiv+4,M_Write@dec1+4
  8647  0001B2  C01D  F16A         	movff	?___aodiv+5,M_Write@dec1+5
  8648  0001B6  C01E  F16B         	movff	?___aodiv+6,M_Write@dec1+6
  8649  0001BA  C01F  F16C         	movff	?___aodiv+7,M_Write@dec1+7
  8650                           
  8651                           ; BSR set to: 0
  8652                           ;EEPROM_EX.c: 94:     dec2 = (mw_dato / 1000000) - (dec1 * 100);
  8653  0001BE  C165  F01A         	movff	M_Write@dec1,___omul@multiplier
  8654  0001C2  C166  F01B         	movff	M_Write@dec1+1,___omul@multiplier+1
  8655  0001C6  C167  F01C         	movff	M_Write@dec1+2,___omul@multiplier+2
  8656  0001CA  C168  F01D         	movff	M_Write@dec1+3,___omul@multiplier+3
  8657  0001CE  C169  F01E         	movff	M_Write@dec1+4,___omul@multiplier+4
  8658  0001D2  C16A  F01F         	movff	M_Write@dec1+5,___omul@multiplier+5
  8659  0001D6  C16B  F020         	movff	M_Write@dec1+6,___omul@multiplier+6
  8660  0001DA  C16C  F021         	movff	M_Write@dec1+7,___omul@multiplier+7
  8661  0001DE  0E9C               	movlw	156
  8662  0001E0  6E22               	movwf	___omul@multiplicand^0,c
  8663  0001E2  0EFF               	movlw	255
  8664  0001E4  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8665  0001E6  0EFF               	movlw	255
  8666  0001E8  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8667  0001EA  0EFF               	movlw	255
  8668  0001EC  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8669  0001EE  0EFF               	movlw	255
  8670  0001F0  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8671  0001F2  0EFF               	movlw	255
  8672  0001F4  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8673  0001F6  0EFF               	movlw	255
  8674  0001F8  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8675  0001FA  0EFF               	movlw	255
  8676  0001FC  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8677  0001FE  ECF2  F022         	call	___omul	;wreg free
  8678  000202  C01A  F100         	movff	?___omul,??_M_Write
  8679  000206  C01B  F101         	movff	?___omul+1,??_M_Write+1
  8680  00020A  C01C  F102         	movff	?___omul+2,??_M_Write+2
  8681  00020E  C01D  F103         	movff	?___omul+3,??_M_Write+3
  8682  000212  C01E  F104         	movff	?___omul+4,??_M_Write+4
  8683  000216  C01F  F105         	movff	?___omul+5,??_M_Write+5
  8684  00021A  C020  F106         	movff	?___omul+6,??_M_Write+6
  8685  00021E  C021  F107         	movff	?___omul+7,??_M_Write+7
  8686  000222  C0CE  F018         	movff	M_Write@mw_dato,___aodiv@dividend
  8687  000226  C0CF  F019         	movff	M_Write@mw_dato+1,___aodiv@dividend+1
  8688  00022A  C0D0  F01A         	movff	M_Write@mw_dato+2,___aodiv@dividend+2
  8689  00022E  C0D1  F01B         	movff	M_Write@mw_dato+3,___aodiv@dividend+3
  8690  000232  C0D2  F01C         	movff	M_Write@mw_dato+4,___aodiv@dividend+4
  8691  000236  C0D3  F01D         	movff	M_Write@mw_dato+5,___aodiv@dividend+5
  8692  00023A  C0D4  F01E         	movff	M_Write@mw_dato+6,___aodiv@dividend+6
  8693  00023E  C0D5  F01F         	movff	M_Write@mw_dato+7,___aodiv@dividend+7
  8694  000242  0E40               	movlw	64
  8695  000244  6E20               	movwf	___aodiv@divisor^0,c
  8696  000246  0E42               	movlw	66
  8697  000248  6E21               	movwf	(___aodiv@divisor+1)^0,c
  8698  00024A  0E0F               	movlw	15
  8699  00024C  6E22               	movwf	(___aodiv@divisor+2)^0,c
  8700  00024E  0E00               	movlw	0
  8701  000250  6E23               	movwf	(___aodiv@divisor+3)^0,c
  8702  000252  0E00               	movlw	0
  8703  000254  6E24               	movwf	(___aodiv@divisor+4)^0,c
  8704  000256  0E00               	movlw	0
  8705  000258  6E25               	movwf	(___aodiv@divisor+5)^0,c
  8706  00025A  0E00               	movlw	0
  8707  00025C  6E26               	movwf	(___aodiv@divisor+6)^0,c
  8708  00025E  0E00               	movlw	0
  8709  000260  6E27               	movwf	(___aodiv@divisor+7)^0,c
  8710  000262  ECE1  F01A         	call	___aodiv	;wreg free
  8711  000266  C018  F108         	movff	?___aodiv,??_M_Write+8
  8712  00026A  C019  F109         	movff	?___aodiv+1,??_M_Write+9
  8713  00026E  C01A  F10A         	movff	?___aodiv+2,??_M_Write+10
  8714  000272  C01B  F10B         	movff	?___aodiv+3,??_M_Write+11
  8715  000276  C01C  F10C         	movff	?___aodiv+4,??_M_Write+12
  8716  00027A  C01D  F10D         	movff	?___aodiv+5,??_M_Write+13
  8717  00027E  C01E  F10E         	movff	?___aodiv+6,??_M_Write+14
  8718  000282  C01F  F10F         	movff	?___aodiv+7,??_M_Write+15
  8719  000286  0101               	movlb	1	; () banked
  8720  000288  5100               	movf	??_M_Write& (0+255),w,b
  8721  00028A  2508               	addwf	(??_M_Write+8)& (0+255),w,b
  8722  00028C  6F5D               	movwf	M_Write@dec2& (0+255),b
  8723  00028E  5101               	movf	(??_M_Write+1)& (0+255),w,b
  8724  000290  2109               	addwfc	(??_M_Write+9)& (0+255),w,b
  8725  000292  6F5E               	movwf	(M_Write@dec2+1)& (0+255),b
  8726  000294  5102               	movf	(??_M_Write+2)& (0+255),w,b
  8727  000296  210A               	addwfc	(??_M_Write+10)& (0+255),w,b
  8728  000298  6F5F               	movwf	(M_Write@dec2+2)& (0+255),b
  8729  00029A  5103               	movf	(??_M_Write+3)& (0+255),w,b
  8730  00029C  210B               	addwfc	(??_M_Write+11)& (0+255),w,b
  8731  00029E  6F60               	movwf	(M_Write@dec2+3)& (0+255),b
  8732  0002A0  5104               	movf	(??_M_Write+4)& (0+255),w,b
  8733  0002A2  210C               	addwfc	(??_M_Write+12)& (0+255),w,b
  8734  0002A4  6F61               	movwf	(M_Write@dec2+4)& (0+255),b
  8735  0002A6  5105               	movf	(??_M_Write+5)& (0+255),w,b
  8736  0002A8  210D               	addwfc	(??_M_Write+13)& (0+255),w,b
  8737  0002AA  6F62               	movwf	(M_Write@dec2+5)& (0+255),b
  8738  0002AC  5106               	movf	(??_M_Write+6)& (0+255),w,b
  8739  0002AE  210E               	addwfc	(??_M_Write+14)& (0+255),w,b
  8740  0002B0  6F63               	movwf	(M_Write@dec2+6)& (0+255),b
  8741  0002B2  5107               	movf	(??_M_Write+7)& (0+255),w,b
  8742  0002B4  210F               	addwfc	(??_M_Write+15)& (0+255),w,b
  8743  0002B6  6F64               	movwf	(M_Write@dec2+7)& (0+255),b
  8744                           
  8745                           ; BSR set to: 1
  8746                           ;EEPROM_EX.c: 95:     dec3 = (mw_dato / 10000) - (dec1 * 10000 + dec2 * 100);
  8747  0002B8  C15D  F01A         	movff	M_Write@dec2,___omul@multiplier
  8748  0002BC  C15E  F01B         	movff	M_Write@dec2+1,___omul@multiplier+1
  8749  0002C0  C15F  F01C         	movff	M_Write@dec2+2,___omul@multiplier+2
  8750  0002C4  C160  F01D         	movff	M_Write@dec2+3,___omul@multiplier+3
  8751  0002C8  C161  F01E         	movff	M_Write@dec2+4,___omul@multiplier+4
  8752  0002CC  C162  F01F         	movff	M_Write@dec2+5,___omul@multiplier+5
  8753  0002D0  C163  F020         	movff	M_Write@dec2+6,___omul@multiplier+6
  8754  0002D4  C164  F021         	movff	M_Write@dec2+7,___omul@multiplier+7
  8755  0002D8  0E9C               	movlw	156
  8756  0002DA  6E22               	movwf	___omul@multiplicand^0,c
  8757  0002DC  0EFF               	movlw	255
  8758  0002DE  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8759  0002E0  0EFF               	movlw	255
  8760  0002E2  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8761  0002E4  0EFF               	movlw	255
  8762  0002E6  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8763  0002E8  0EFF               	movlw	255
  8764  0002EA  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8765  0002EC  0EFF               	movlw	255
  8766  0002EE  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8767  0002F0  0EFF               	movlw	255
  8768  0002F2  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8769  0002F4  0EFF               	movlw	255
  8770  0002F6  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8771  0002F8  ECF2  F022         	call	___omul	;wreg free
  8772  0002FC  C01A  F100         	movff	?___omul,??_M_Write
  8773  000300  C01B  F101         	movff	?___omul+1,??_M_Write+1
  8774  000304  C01C  F102         	movff	?___omul+2,??_M_Write+2
  8775  000308  C01D  F103         	movff	?___omul+3,??_M_Write+3
  8776  00030C  C01E  F104         	movff	?___omul+4,??_M_Write+4
  8777  000310  C01F  F105         	movff	?___omul+5,??_M_Write+5
  8778  000314  C020  F106         	movff	?___omul+6,??_M_Write+6
  8779  000318  C021  F107         	movff	?___omul+7,??_M_Write+7
  8780  00031C  C165  F01A         	movff	M_Write@dec1,___omul@multiplier
  8781  000320  C166  F01B         	movff	M_Write@dec1+1,___omul@multiplier+1
  8782  000324  C167  F01C         	movff	M_Write@dec1+2,___omul@multiplier+2
  8783  000328  C168  F01D         	movff	M_Write@dec1+3,___omul@multiplier+3
  8784  00032C  C169  F01E         	movff	M_Write@dec1+4,___omul@multiplier+4
  8785  000330  C16A  F01F         	movff	M_Write@dec1+5,___omul@multiplier+5
  8786  000334  C16B  F020         	movff	M_Write@dec1+6,___omul@multiplier+6
  8787  000338  C16C  F021         	movff	M_Write@dec1+7,___omul@multiplier+7
  8788  00033C  0EF0               	movlw	240
  8789  00033E  6E22               	movwf	___omul@multiplicand^0,c
  8790  000340  0ED8               	movlw	216
  8791  000342  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8792  000344  0EFF               	movlw	255
  8793  000346  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8794  000348  0EFF               	movlw	255
  8795  00034A  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8796  00034C  0EFF               	movlw	255
  8797  00034E  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8798  000350  0EFF               	movlw	255
  8799  000352  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8800  000354  0EFF               	movlw	255
  8801  000356  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8802  000358  0EFF               	movlw	255
  8803  00035A  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8804  00035C  ECF2  F022         	call	___omul	;wreg free
  8805  000360  C01A  F108         	movff	?___omul,??_M_Write+8
  8806  000364  C01B  F109         	movff	?___omul+1,??_M_Write+9
  8807  000368  C01C  F10A         	movff	?___omul+2,??_M_Write+10
  8808  00036C  C01D  F10B         	movff	?___omul+3,??_M_Write+11
  8809  000370  C01E  F10C         	movff	?___omul+4,??_M_Write+12
  8810  000374  C01F  F10D         	movff	?___omul+5,??_M_Write+13
  8811  000378  C020  F10E         	movff	?___omul+6,??_M_Write+14
  8812  00037C  C021  F10F         	movff	?___omul+7,??_M_Write+15
  8813  000380  C0CE  F018         	movff	M_Write@mw_dato,___aodiv@dividend
  8814  000384  C0CF  F019         	movff	M_Write@mw_dato+1,___aodiv@dividend+1
  8815  000388  C0D0  F01A         	movff	M_Write@mw_dato+2,___aodiv@dividend+2
  8816  00038C  C0D1  F01B         	movff	M_Write@mw_dato+3,___aodiv@dividend+3
  8817  000390  C0D2  F01C         	movff	M_Write@mw_dato+4,___aodiv@dividend+4
  8818  000394  C0D3  F01D         	movff	M_Write@mw_dato+5,___aodiv@dividend+5
  8819  000398  C0D4  F01E         	movff	M_Write@mw_dato+6,___aodiv@dividend+6
  8820  00039C  C0D5  F01F         	movff	M_Write@mw_dato+7,___aodiv@dividend+7
  8821  0003A0  0E10               	movlw	16
  8822  0003A2  6E20               	movwf	___aodiv@divisor^0,c
  8823  0003A4  0E27               	movlw	39
  8824  0003A6  6E21               	movwf	(___aodiv@divisor+1)^0,c
  8825  0003A8  0E00               	movlw	0
  8826  0003AA  6E22               	movwf	(___aodiv@divisor+2)^0,c
  8827  0003AC  0E00               	movlw	0
  8828  0003AE  6E23               	movwf	(___aodiv@divisor+3)^0,c
  8829  0003B0  0E00               	movlw	0
  8830  0003B2  6E24               	movwf	(___aodiv@divisor+4)^0,c
  8831  0003B4  0E00               	movlw	0
  8832  0003B6  6E25               	movwf	(___aodiv@divisor+5)^0,c
  8833  0003B8  0E00               	movlw	0
  8834  0003BA  6E26               	movwf	(___aodiv@divisor+6)^0,c
  8835  0003BC  0E00               	movlw	0
  8836  0003BE  6E27               	movwf	(___aodiv@divisor+7)^0,c
  8837  0003C0  ECE1  F01A         	call	___aodiv	;wreg free
  8838  0003C4  C018  F110         	movff	?___aodiv,??_M_Write+16
  8839  0003C8  C019  F111         	movff	?___aodiv+1,??_M_Write+17
  8840  0003CC  C01A  F112         	movff	?___aodiv+2,??_M_Write+18
  8841  0003D0  C01B  F113         	movff	?___aodiv+3,??_M_Write+19
  8842  0003D4  C01C  F114         	movff	?___aodiv+4,??_M_Write+20
  8843  0003D8  C01D  F115         	movff	?___aodiv+5,??_M_Write+21
  8844  0003DC  C01E  F116         	movff	?___aodiv+6,??_M_Write+22
  8845  0003E0  C01F  F117         	movff	?___aodiv+7,??_M_Write+23
  8846  0003E4  0101               	movlb	1	; () banked
  8847  0003E6  5108               	movf	(??_M_Write+8)& (0+255),w,b
  8848  0003E8  2510               	addwf	(??_M_Write+16)& (0+255),w,b
  8849  0003EA  6F18               	movwf	(??_M_Write+24)& (0+255),b
  8850  0003EC  5109               	movf	(??_M_Write+9)& (0+255),w,b
  8851  0003EE  2111               	addwfc	(??_M_Write+17)& (0+255),w,b
  8852  0003F0  6F19               	movwf	(??_M_Write+25)& (0+255),b
  8853  0003F2  510A               	movf	(??_M_Write+10)& (0+255),w,b
  8854  0003F4  2112               	addwfc	(??_M_Write+18)& (0+255),w,b
  8855  0003F6  6F1A               	movwf	(??_M_Write+26)& (0+255),b
  8856  0003F8  510B               	movf	(??_M_Write+11)& (0+255),w,b
  8857  0003FA  2113               	addwfc	(??_M_Write+19)& (0+255),w,b
  8858  0003FC  6F1B               	movwf	(??_M_Write+27)& (0+255),b
  8859  0003FE  510C               	movf	(??_M_Write+12)& (0+255),w,b
  8860  000400  2114               	addwfc	(??_M_Write+20)& (0+255),w,b
  8861  000402  6F1C               	movwf	(??_M_Write+28)& (0+255),b
  8862  000404  510D               	movf	(??_M_Write+13)& (0+255),w,b
  8863  000406  2115               	addwfc	(??_M_Write+21)& (0+255),w,b
  8864  000408  6F1D               	movwf	(??_M_Write+29)& (0+255),b
  8865  00040A  510E               	movf	(??_M_Write+14)& (0+255),w,b
  8866  00040C  2116               	addwfc	(??_M_Write+22)& (0+255),w,b
  8867  00040E  6F1E               	movwf	(??_M_Write+30)& (0+255),b
  8868  000410  510F               	movf	(??_M_Write+15)& (0+255),w,b
  8869  000412  2117               	addwfc	(??_M_Write+23)& (0+255),w,b
  8870  000414  6F1F               	movwf	(??_M_Write+31)& (0+255),b
  8871  000416  5100               	movf	??_M_Write& (0+255),w,b
  8872  000418  2518               	addwf	(??_M_Write+24)& (0+255),w,b
  8873  00041A  6F55               	movwf	M_Write@dec3& (0+255),b
  8874  00041C  5101               	movf	(??_M_Write+1)& (0+255),w,b
  8875  00041E  2119               	addwfc	(??_M_Write+25)& (0+255),w,b
  8876  000420  6F56               	movwf	(M_Write@dec3+1)& (0+255),b
  8877  000422  5102               	movf	(??_M_Write+2)& (0+255),w,b
  8878  000424  211A               	addwfc	(??_M_Write+26)& (0+255),w,b
  8879  000426  6F57               	movwf	(M_Write@dec3+2)& (0+255),b
  8880  000428  5103               	movf	(??_M_Write+3)& (0+255),w,b
  8881  00042A  211B               	addwfc	(??_M_Write+27)& (0+255),w,b
  8882  00042C  6F58               	movwf	(M_Write@dec3+3)& (0+255),b
  8883  00042E  5104               	movf	(??_M_Write+4)& (0+255),w,b
  8884  000430  211C               	addwfc	(??_M_Write+28)& (0+255),w,b
  8885  000432  6F59               	movwf	(M_Write@dec3+4)& (0+255),b
  8886  000434  5105               	movf	(??_M_Write+5)& (0+255),w,b
  8887  000436  211D               	addwfc	(??_M_Write+29)& (0+255),w,b
  8888  000438  6F5A               	movwf	(M_Write@dec3+5)& (0+255),b
  8889  00043A  5106               	movf	(??_M_Write+6)& (0+255),w,b
  8890  00043C  211E               	addwfc	(??_M_Write+30)& (0+255),w,b
  8891  00043E  6F5B               	movwf	(M_Write@dec3+6)& (0+255),b
  8892  000440  5107               	movf	(??_M_Write+7)& (0+255),w,b
  8893  000442  211F               	addwfc	(??_M_Write+31)& (0+255),w,b
  8894  000444  6F5C               	movwf	(M_Write@dec3+7)& (0+255),b
  8895                           
  8896                           ; BSR set to: 1
  8897                           ;EEPROM_EX.c: 96:     dec4 = (mw_dato / 100) - (dec1 * 1000000 + dec2 * 10000 + dec3 * 1
      +                          00);
  8898  000446  C155  F01A         	movff	M_Write@dec3,___omul@multiplier
  8899  00044A  C156  F01B         	movff	M_Write@dec3+1,___omul@multiplier+1
  8900  00044E  C157  F01C         	movff	M_Write@dec3+2,___omul@multiplier+2
  8901  000452  C158  F01D         	movff	M_Write@dec3+3,___omul@multiplier+3
  8902  000456  C159  F01E         	movff	M_Write@dec3+4,___omul@multiplier+4
  8903  00045A  C15A  F01F         	movff	M_Write@dec3+5,___omul@multiplier+5
  8904  00045E  C15B  F020         	movff	M_Write@dec3+6,___omul@multiplier+6
  8905  000462  C15C  F021         	movff	M_Write@dec3+7,___omul@multiplier+7
  8906  000466  0E9C               	movlw	156
  8907  000468  6E22               	movwf	___omul@multiplicand^0,c
  8908  00046A  0EFF               	movlw	255
  8909  00046C  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8910  00046E  0EFF               	movlw	255
  8911  000470  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8912  000472  0EFF               	movlw	255
  8913  000474  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8914  000476  0EFF               	movlw	255
  8915  000478  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8916  00047A  0EFF               	movlw	255
  8917  00047C  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8918  00047E  0EFF               	movlw	255
  8919  000480  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8920  000482  0EFF               	movlw	255
  8921  000484  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8922  000486  ECF2  F022         	call	___omul	;wreg free
  8923  00048A  C01A  F100         	movff	?___omul,??_M_Write
  8924  00048E  C01B  F101         	movff	?___omul+1,??_M_Write+1
  8925  000492  C01C  F102         	movff	?___omul+2,??_M_Write+2
  8926  000496  C01D  F103         	movff	?___omul+3,??_M_Write+3
  8927  00049A  C01E  F104         	movff	?___omul+4,??_M_Write+4
  8928  00049E  C01F  F105         	movff	?___omul+5,??_M_Write+5
  8929  0004A2  C020  F106         	movff	?___omul+6,??_M_Write+6
  8930  0004A6  C021  F107         	movff	?___omul+7,??_M_Write+7
  8931  0004AA  C15D  F01A         	movff	M_Write@dec2,___omul@multiplier
  8932  0004AE  C15E  F01B         	movff	M_Write@dec2+1,___omul@multiplier+1
  8933  0004B2  C15F  F01C         	movff	M_Write@dec2+2,___omul@multiplier+2
  8934  0004B6  C160  F01D         	movff	M_Write@dec2+3,___omul@multiplier+3
  8935  0004BA  C161  F01E         	movff	M_Write@dec2+4,___omul@multiplier+4
  8936  0004BE  C162  F01F         	movff	M_Write@dec2+5,___omul@multiplier+5
  8937  0004C2  C163  F020         	movff	M_Write@dec2+6,___omul@multiplier+6
  8938  0004C6  C164  F021         	movff	M_Write@dec2+7,___omul@multiplier+7
  8939  0004CA  0EF0               	movlw	240
  8940  0004CC  6E22               	movwf	___omul@multiplicand^0,c
  8941  0004CE  0ED8               	movlw	216
  8942  0004D0  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8943  0004D2  0EFF               	movlw	255
  8944  0004D4  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8945  0004D6  0EFF               	movlw	255
  8946  0004D8  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8947  0004DA  0EFF               	movlw	255
  8948  0004DC  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8949  0004DE  0EFF               	movlw	255
  8950  0004E0  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8951  0004E2  0EFF               	movlw	255
  8952  0004E4  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8953  0004E6  0EFF               	movlw	255
  8954  0004E8  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8955  0004EA  ECF2  F022         	call	___omul	;wreg free
  8956  0004EE  C01A  F108         	movff	?___omul,??_M_Write+8
  8957  0004F2  C01B  F109         	movff	?___omul+1,??_M_Write+9
  8958  0004F6  C01C  F10A         	movff	?___omul+2,??_M_Write+10
  8959  0004FA  C01D  F10B         	movff	?___omul+3,??_M_Write+11
  8960  0004FE  C01E  F10C         	movff	?___omul+4,??_M_Write+12
  8961  000502  C01F  F10D         	movff	?___omul+5,??_M_Write+13
  8962  000506  C020  F10E         	movff	?___omul+6,??_M_Write+14
  8963  00050A  C021  F10F         	movff	?___omul+7,??_M_Write+15
  8964  00050E  C165  F01A         	movff	M_Write@dec1,___omul@multiplier
  8965  000512  C166  F01B         	movff	M_Write@dec1+1,___omul@multiplier+1
  8966  000516  C167  F01C         	movff	M_Write@dec1+2,___omul@multiplier+2
  8967  00051A  C168  F01D         	movff	M_Write@dec1+3,___omul@multiplier+3
  8968  00051E  C169  F01E         	movff	M_Write@dec1+4,___omul@multiplier+4
  8969  000522  C16A  F01F         	movff	M_Write@dec1+5,___omul@multiplier+5
  8970  000526  C16B  F020         	movff	M_Write@dec1+6,___omul@multiplier+6
  8971  00052A  C16C  F021         	movff	M_Write@dec1+7,___omul@multiplier+7
  8972  00052E  0EC0               	movlw	192
  8973  000530  6E22               	movwf	___omul@multiplicand^0,c
  8974  000532  0EBD               	movlw	189
  8975  000534  6E23               	movwf	(___omul@multiplicand+1)^0,c
  8976  000536  0EF0               	movlw	240
  8977  000538  6E24               	movwf	(___omul@multiplicand+2)^0,c
  8978  00053A  0EFF               	movlw	255
  8979  00053C  6E25               	movwf	(___omul@multiplicand+3)^0,c
  8980  00053E  0EFF               	movlw	255
  8981  000540  6E26               	movwf	(___omul@multiplicand+4)^0,c
  8982  000542  0EFF               	movlw	255
  8983  000544  6E27               	movwf	(___omul@multiplicand+5)^0,c
  8984  000546  0EFF               	movlw	255
  8985  000548  6E28               	movwf	(___omul@multiplicand+6)^0,c
  8986  00054A  0EFF               	movlw	255
  8987  00054C  6E29               	movwf	(___omul@multiplicand+7)^0,c
  8988  00054E  ECF2  F022         	call	___omul	;wreg free
  8989  000552  C01A  F110         	movff	?___omul,??_M_Write+16
  8990  000556  C01B  F111         	movff	?___omul+1,??_M_Write+17
  8991  00055A  C01C  F112         	movff	?___omul+2,??_M_Write+18
  8992  00055E  C01D  F113         	movff	?___omul+3,??_M_Write+19
  8993  000562  C01E  F114         	movff	?___omul+4,??_M_Write+20
  8994  000566  C01F  F115         	movff	?___omul+5,??_M_Write+21
  8995  00056A  C020  F116         	movff	?___omul+6,??_M_Write+22
  8996  00056E  C021  F117         	movff	?___omul+7,??_M_Write+23
  8997  000572  C0CE  F018         	movff	M_Write@mw_dato,___aodiv@dividend
  8998  000576  C0CF  F019         	movff	M_Write@mw_dato+1,___aodiv@dividend+1
  8999  00057A  C0D0  F01A         	movff	M_Write@mw_dato+2,___aodiv@dividend+2
  9000  00057E  C0D1  F01B         	movff	M_Write@mw_dato+3,___aodiv@dividend+3
  9001  000582  C0D2  F01C         	movff	M_Write@mw_dato+4,___aodiv@dividend+4
  9002  000586  C0D3  F01D         	movff	M_Write@mw_dato+5,___aodiv@dividend+5
  9003  00058A  C0D4  F01E         	movff	M_Write@mw_dato+6,___aodiv@dividend+6
  9004  00058E  C0D5  F01F         	movff	M_Write@mw_dato+7,___aodiv@dividend+7
  9005  000592  0E64               	movlw	100
  9006  000594  6E20               	movwf	___aodiv@divisor^0,c
  9007  000596  0E00               	movlw	0
  9008  000598  6E21               	movwf	(___aodiv@divisor+1)^0,c
  9009  00059A  0E00               	movlw	0
  9010  00059C  6E22               	movwf	(___aodiv@divisor+2)^0,c
  9011  00059E  0E00               	movlw	0
  9012  0005A0  6E23               	movwf	(___aodiv@divisor+3)^0,c
  9013  0005A2  0E00               	movlw	0
  9014  0005A4  6E24               	movwf	(___aodiv@divisor+4)^0,c
  9015  0005A6  0E00               	movlw	0
  9016  0005A8  6E25               	movwf	(___aodiv@divisor+5)^0,c
  9017  0005AA  0E00               	movlw	0
  9018  0005AC  6E26               	movwf	(___aodiv@divisor+6)^0,c
  9019  0005AE  0E00               	movlw	0
  9020  0005B0  6E27               	movwf	(___aodiv@divisor+7)^0,c
  9021  0005B2  ECE1  F01A         	call	___aodiv	;wreg free
  9022  0005B6  C018  F118         	movff	?___aodiv,??_M_Write+24
  9023  0005BA  C019  F119         	movff	?___aodiv+1,??_M_Write+25
  9024  0005BE  C01A  F11A         	movff	?___aodiv+2,??_M_Write+26
  9025  0005C2  C01B  F11B         	movff	?___aodiv+3,??_M_Write+27
  9026  0005C6  C01C  F11C         	movff	?___aodiv+4,??_M_Write+28
  9027  0005CA  C01D  F11D         	movff	?___aodiv+5,??_M_Write+29
  9028  0005CE  C01E  F11E         	movff	?___aodiv+6,??_M_Write+30
  9029  0005D2  C01F  F11F         	movff	?___aodiv+7,??_M_Write+31
  9030  0005D6  0101               	movlb	1	; () banked
  9031  0005D8  5110               	movf	(??_M_Write+16)& (0+255),w,b
  9032  0005DA  2518               	addwf	(??_M_Write+24)& (0+255),w,b
  9033  0005DC  6F20               	movwf	(??_M_Write+32)& (0+255),b
  9034  0005DE  5111               	movf	(??_M_Write+17)& (0+255),w,b
  9035  0005E0  2119               	addwfc	(??_M_Write+25)& (0+255),w,b
  9036  0005E2  6F21               	movwf	(??_M_Write+33)& (0+255),b
  9037  0005E4  5112               	movf	(??_M_Write+18)& (0+255),w,b
  9038  0005E6  211A               	addwfc	(??_M_Write+26)& (0+255),w,b
  9039  0005E8  6F22               	movwf	(??_M_Write+34)& (0+255),b
  9040  0005EA  5113               	movf	(??_M_Write+19)& (0+255),w,b
  9041  0005EC  211B               	addwfc	(??_M_Write+27)& (0+255),w,b
  9042  0005EE  6F23               	movwf	(??_M_Write+35)& (0+255),b
  9043  0005F0  5114               	movf	(??_M_Write+20)& (0+255),w,b
  9044  0005F2  211C               	addwfc	(??_M_Write+28)& (0+255),w,b
  9045  0005F4  6F24               	movwf	(??_M_Write+36)& (0+255),b
  9046  0005F6  5115               	movf	(??_M_Write+21)& (0+255),w,b
  9047  0005F8  211D               	addwfc	(??_M_Write+29)& (0+255),w,b
  9048  0005FA  6F25               	movwf	(??_M_Write+37)& (0+255),b
  9049  0005FC  5116               	movf	(??_M_Write+22)& (0+255),w,b
  9050  0005FE  211E               	addwfc	(??_M_Write+30)& (0+255),w,b
  9051  000600  6F26               	movwf	(??_M_Write+38)& (0+255),b
  9052  000602  5117               	movf	(??_M_Write+23)& (0+255),w,b
  9053  000604  211F               	addwfc	(??_M_Write+31)& (0+255),w,b
  9054  000606  6F27               	movwf	(??_M_Write+39)& (0+255),b
  9055  000608  5108               	movf	(??_M_Write+8)& (0+255),w,b
  9056  00060A  2520               	addwf	(??_M_Write+32)& (0+255),w,b
  9057  00060C  6F28               	movwf	(??_M_Write+40)& (0+255),b
  9058  00060E  5109               	movf	(??_M_Write+9)& (0+255),w,b
  9059  000610  2121               	addwfc	(??_M_Write+33)& (0+255),w,b
  9060  000612  6F29               	movwf	(??_M_Write+41)& (0+255),b
  9061  000614  510A               	movf	(??_M_Write+10)& (0+255),w,b
  9062  000616  2122               	addwfc	(??_M_Write+34)& (0+255),w,b
  9063  000618  6F2A               	movwf	(??_M_Write+42)& (0+255),b
  9064  00061A  510B               	movf	(??_M_Write+11)& (0+255),w,b
  9065  00061C  2123               	addwfc	(??_M_Write+35)& (0+255),w,b
  9066  00061E  6F2B               	movwf	(??_M_Write+43)& (0+255),b
  9067  000620  510C               	movf	(??_M_Write+12)& (0+255),w,b
  9068  000622  2124               	addwfc	(??_M_Write+36)& (0+255),w,b
  9069  000624  6F2C               	movwf	(??_M_Write+44)& (0+255),b
  9070  000626  510D               	movf	(??_M_Write+13)& (0+255),w,b
  9071  000628  2125               	addwfc	(??_M_Write+37)& (0+255),w,b
  9072  00062A  6F2D               	movwf	(??_M_Write+45)& (0+255),b
  9073  00062C  510E               	movf	(??_M_Write+14)& (0+255),w,b
  9074  00062E  2126               	addwfc	(??_M_Write+38)& (0+255),w,b
  9075  000630  6F2E               	movwf	(??_M_Write+46)& (0+255),b
  9076  000632  510F               	movf	(??_M_Write+15)& (0+255),w,b
  9077  000634  2127               	addwfc	(??_M_Write+39)& (0+255),w,b
  9078  000636  6F2F               	movwf	(??_M_Write+47)& (0+255),b
  9079  000638  5100               	movf	??_M_Write& (0+255),w,b
  9080  00063A  2528               	addwf	(??_M_Write+40)& (0+255),w,b
  9081  00063C  6F4D               	movwf	M_Write@dec4& (0+255),b
  9082  00063E  5101               	movf	(??_M_Write+1)& (0+255),w,b
  9083  000640  2129               	addwfc	(??_M_Write+41)& (0+255),w,b
  9084  000642  6F4E               	movwf	(M_Write@dec4+1)& (0+255),b
  9085  000644  5102               	movf	(??_M_Write+2)& (0+255),w,b
  9086  000646  212A               	addwfc	(??_M_Write+42)& (0+255),w,b
  9087  000648  6F4F               	movwf	(M_Write@dec4+2)& (0+255),b
  9088  00064A  5103               	movf	(??_M_Write+3)& (0+255),w,b
  9089  00064C  212B               	addwfc	(??_M_Write+43)& (0+255),w,b
  9090  00064E  6F50               	movwf	(M_Write@dec4+3)& (0+255),b
  9091  000650  5104               	movf	(??_M_Write+4)& (0+255),w,b
  9092  000652  212C               	addwfc	(??_M_Write+44)& (0+255),w,b
  9093  000654  6F51               	movwf	(M_Write@dec4+4)& (0+255),b
  9094  000656  5105               	movf	(??_M_Write+5)& (0+255),w,b
  9095  000658  212D               	addwfc	(??_M_Write+45)& (0+255),w,b
  9096  00065A  6F52               	movwf	(M_Write@dec4+5)& (0+255),b
  9097  00065C  5106               	movf	(??_M_Write+6)& (0+255),w,b
  9098  00065E  212E               	addwfc	(??_M_Write+46)& (0+255),w,b
  9099  000660  6F53               	movwf	(M_Write@dec4+6)& (0+255),b
  9100  000662  5107               	movf	(??_M_Write+7)& (0+255),w,b
  9101  000664  212F               	addwfc	(??_M_Write+47)& (0+255),w,b
  9102  000666  6F54               	movwf	(M_Write@dec4+7)& (0+255),b
  9103                           
  9104                           ; BSR set to: 1
  9105                           ;EEPROM_EX.c: 97:     dec5 = mw_dato - (dec1 * 100000000 + dec2 * 1000000 + dec3 * 10000
      +                           + dec4 * 100);
  9106  000668  C14D  F01A         	movff	M_Write@dec4,___omul@multiplier
  9107  00066C  C14E  F01B         	movff	M_Write@dec4+1,___omul@multiplier+1
  9108  000670  C14F  F01C         	movff	M_Write@dec4+2,___omul@multiplier+2
  9109  000674  C150  F01D         	movff	M_Write@dec4+3,___omul@multiplier+3
  9110  000678  C151  F01E         	movff	M_Write@dec4+4,___omul@multiplier+4
  9111  00067C  C152  F01F         	movff	M_Write@dec4+5,___omul@multiplier+5
  9112  000680  C153  F020         	movff	M_Write@dec4+6,___omul@multiplier+6
  9113  000684  C154  F021         	movff	M_Write@dec4+7,___omul@multiplier+7
  9114  000688  0E9C               	movlw	156
  9115  00068A  6E22               	movwf	___omul@multiplicand^0,c
  9116  00068C  0EFF               	movlw	255
  9117  00068E  6E23               	movwf	(___omul@multiplicand+1)^0,c
  9118  000690  0EFF               	movlw	255
  9119  000692  6E24               	movwf	(___omul@multiplicand+2)^0,c
  9120  000694  0EFF               	movlw	255
  9121  000696  6E25               	movwf	(___omul@multiplicand+3)^0,c
  9122  000698  0EFF               	movlw	255
  9123  00069A  6E26               	movwf	(___omul@multiplicand+4)^0,c
  9124  00069C  0EFF               	movlw	255
  9125  00069E  6E27               	movwf	(___omul@multiplicand+5)^0,c
  9126  0006A0  0EFF               	movlw	255
  9127  0006A2  6E28               	movwf	(___omul@multiplicand+6)^0,c
  9128  0006A4  0EFF               	movlw	255
  9129  0006A6  6E29               	movwf	(___omul@multiplicand+7)^0,c
  9130  0006A8  ECF2  F022         	call	___omul	;wreg free
  9131  0006AC  C01A  F100         	movff	?___omul,??_M_Write
  9132  0006B0  C01B  F101         	movff	?___omul+1,??_M_Write+1
  9133  0006B4  C01C  F102         	movff	?___omul+2,??_M_Write+2
  9134  0006B8  C01D  F103         	movff	?___omul+3,??_M_Write+3
  9135  0006BC  C01E  F104         	movff	?___omul+4,??_M_Write+4
  9136  0006C0  C01F  F105         	movff	?___omul+5,??_M_Write+5
  9137  0006C4  C020  F106         	movff	?___omul+6,??_M_Write+6
  9138  0006C8  C021  F107         	movff	?___omul+7,??_M_Write+7
  9139  0006CC  C155  F01A         	movff	M_Write@dec3,___omul@multiplier
  9140  0006D0  C156  F01B         	movff	M_Write@dec3+1,___omul@multiplier+1
  9141  0006D4  C157  F01C         	movff	M_Write@dec3+2,___omul@multiplier+2
  9142  0006D8  C158  F01D         	movff	M_Write@dec3+3,___omul@multiplier+3
  9143  0006DC  C159  F01E         	movff	M_Write@dec3+4,___omul@multiplier+4
  9144  0006E0  C15A  F01F         	movff	M_Write@dec3+5,___omul@multiplier+5
  9145  0006E4  C15B  F020         	movff	M_Write@dec3+6,___omul@multiplier+6
  9146  0006E8  C15C  F021         	movff	M_Write@dec3+7,___omul@multiplier+7
  9147  0006EC  0EF0               	movlw	240
  9148  0006EE  6E22               	movwf	___omul@multiplicand^0,c
  9149  0006F0  0ED8               	movlw	216
  9150  0006F2  6E23               	movwf	(___omul@multiplicand+1)^0,c
  9151  0006F4  0EFF               	movlw	255
  9152  0006F6  6E24               	movwf	(___omul@multiplicand+2)^0,c
  9153  0006F8  0EFF               	movlw	255
  9154  0006FA  6E25               	movwf	(___omul@multiplicand+3)^0,c
  9155  0006FC  0EFF               	movlw	255
  9156  0006FE  6E26               	movwf	(___omul@multiplicand+4)^0,c
  9157  000700  0EFF               	movlw	255
  9158  000702  6E27               	movwf	(___omul@multiplicand+5)^0,c
  9159  000704  0EFF               	movlw	255
  9160  000706  6E28               	movwf	(___omul@multiplicand+6)^0,c
  9161  000708  0EFF               	movlw	255
  9162  00070A  6E29               	movwf	(___omul@multiplicand+7)^0,c
  9163  00070C  ECF2  F022         	call	___omul	;wreg free
  9164  000710  C01A  F108         	movff	?___omul,??_M_Write+8
  9165  000714  C01B  F109         	movff	?___omul+1,??_M_Write+9
  9166  000718  C01C  F10A         	movff	?___omul+2,??_M_Write+10
  9167  00071C  C01D  F10B         	movff	?___omul+3,??_M_Write+11
  9168  000720  C01E  F10C         	movff	?___omul+4,??_M_Write+12
  9169  000724  C01F  F10D         	movff	?___omul+5,??_M_Write+13
  9170  000728  C020  F10E         	movff	?___omul+6,??_M_Write+14
  9171  00072C  C021  F10F         	movff	?___omul+7,??_M_Write+15
  9172  000730  C15D  F01A         	movff	M_Write@dec2,___omul@multiplier
  9173  000734  C15E  F01B         	movff	M_Write@dec2+1,___omul@multiplier+1
  9174  000738  C15F  F01C         	movff	M_Write@dec2+2,___omul@multiplier+2
  9175  00073C  C160  F01D         	movff	M_Write@dec2+3,___omul@multiplier+3
  9176  000740  C161  F01E         	movff	M_Write@dec2+4,___omul@multiplier+4
  9177  000744  C162  F01F         	movff	M_Write@dec2+5,___omul@multiplier+5
  9178  000748  C163  F020         	movff	M_Write@dec2+6,___omul@multiplier+6
  9179  00074C  C164  F021         	movff	M_Write@dec2+7,___omul@multiplier+7
  9180  000750  0EC0               	movlw	192
  9181  000752  6E22               	movwf	___omul@multiplicand^0,c
  9182  000754  0EBD               	movlw	189
  9183  000756  6E23               	movwf	(___omul@multiplicand+1)^0,c
  9184  000758  0EF0               	movlw	240
  9185  00075A  6E24               	movwf	(___omul@multiplicand+2)^0,c
  9186  00075C  0EFF               	movlw	255
  9187  00075E  6E25               	movwf	(___omul@multiplicand+3)^0,c
  9188  000760  0EFF               	movlw	255
  9189  000762  6E26               	movwf	(___omul@multiplicand+4)^0,c
  9190  000764  0EFF               	movlw	255
  9191  000766  6E27               	movwf	(___omul@multiplicand+5)^0,c
  9192  000768  0EFF               	movlw	255
  9193  00076A  6E28               	movwf	(___omul@multiplicand+6)^0,c
  9194  00076C  0EFF               	movlw	255
  9195  00076E  6E29               	movwf	(___omul@multiplicand+7)^0,c
  9196  000770  ECF2  F022         	call	___omul	;wreg free
  9197  000774  C01A  F110         	movff	?___omul,??_M_Write+16
  9198  000778  C01B  F111         	movff	?___omul+1,??_M_Write+17
  9199  00077C  C01C  F112         	movff	?___omul+2,??_M_Write+18
  9200  000780  C01D  F113         	movff	?___omul+3,??_M_Write+19
  9201  000784  C01E  F114         	movff	?___omul+4,??_M_Write+20
  9202  000788  C01F  F115         	movff	?___omul+5,??_M_Write+21
  9203  00078C  C020  F116         	movff	?___omul+6,??_M_Write+22
  9204  000790  C021  F117         	movff	?___omul+7,??_M_Write+23
  9205  000794  C165  F01A         	movff	M_Write@dec1,___omul@multiplier
  9206  000798  C166  F01B         	movff	M_Write@dec1+1,___omul@multiplier+1
  9207  00079C  C167  F01C         	movff	M_Write@dec1+2,___omul@multiplier+2
  9208  0007A0  C168  F01D         	movff	M_Write@dec1+3,___omul@multiplier+3
  9209  0007A4  C169  F01E         	movff	M_Write@dec1+4,___omul@multiplier+4
  9210  0007A8  C16A  F01F         	movff	M_Write@dec1+5,___omul@multiplier+5
  9211  0007AC  C16B  F020         	movff	M_Write@dec1+6,___omul@multiplier+6
  9212  0007B0  C16C  F021         	movff	M_Write@dec1+7,___omul@multiplier+7
  9213  0007B4  0E00               	movlw	0
  9214  0007B6  6E22               	movwf	___omul@multiplicand^0,c
  9215  0007B8  0E1F               	movlw	31
  9216  0007BA  6E23               	movwf	(___omul@multiplicand+1)^0,c
  9217  0007BC  0E0A               	movlw	10
  9218  0007BE  6E24               	movwf	(___omul@multiplicand+2)^0,c
  9219  0007C0  0EFA               	movlw	250
  9220  0007C2  6E25               	movwf	(___omul@multiplicand+3)^0,c
  9221  0007C4  0EFF               	movlw	255
  9222  0007C6  6E26               	movwf	(___omul@multiplicand+4)^0,c
  9223  0007C8  0EFF               	movlw	255
  9224  0007CA  6E27               	movwf	(___omul@multiplicand+5)^0,c
  9225  0007CC  0EFF               	movlw	255
  9226  0007CE  6E28               	movwf	(___omul@multiplicand+6)^0,c
  9227  0007D0  0EFF               	movlw	255
  9228  0007D2  6E29               	movwf	(___omul@multiplicand+7)^0,c
  9229  0007D4  ECF2  F022         	call	___omul	;wreg free
  9230  0007D8  C01A  F118         	movff	?___omul,??_M_Write+24
  9231  0007DC  C01B  F119         	movff	?___omul+1,??_M_Write+25
  9232  0007E0  C01C  F11A         	movff	?___omul+2,??_M_Write+26
  9233  0007E4  C01D  F11B         	movff	?___omul+3,??_M_Write+27
  9234  0007E8  C01E  F11C         	movff	?___omul+4,??_M_Write+28
  9235  0007EC  C01F  F11D         	movff	?___omul+5,??_M_Write+29
  9236  0007F0  C020  F11E         	movff	?___omul+6,??_M_Write+30
  9237  0007F4  C021  F11F         	movff	?___omul+7,??_M_Write+31
  9238  0007F8  0101               	movlb	1	; () banked
  9239  0007FA  5110               	movf	(??_M_Write+16)& (0+255),w,b
  9240  0007FC  2518               	addwf	(??_M_Write+24)& (0+255),w,b
  9241  0007FE  6F20               	movwf	(??_M_Write+32)& (0+255),b
  9242  000800  5111               	movf	(??_M_Write+17)& (0+255),w,b
  9243  000802  2119               	addwfc	(??_M_Write+25)& (0+255),w,b
  9244  000804  6F21               	movwf	(??_M_Write+33)& (0+255),b
  9245  000806  5112               	movf	(??_M_Write+18)& (0+255),w,b
  9246  000808  211A               	addwfc	(??_M_Write+26)& (0+255),w,b
  9247  00080A  6F22               	movwf	(??_M_Write+34)& (0+255),b
  9248  00080C  5113               	movf	(??_M_Write+19)& (0+255),w,b
  9249  00080E  211B               	addwfc	(??_M_Write+27)& (0+255),w,b
  9250  000810  6F23               	movwf	(??_M_Write+35)& (0+255),b
  9251  000812  5114               	movf	(??_M_Write+20)& (0+255),w,b
  9252  000814  211C               	addwfc	(??_M_Write+28)& (0+255),w,b
  9253  000816  6F24               	movwf	(??_M_Write+36)& (0+255),b
  9254  000818  5115               	movf	(??_M_Write+21)& (0+255),w,b
  9255  00081A  211D               	addwfc	(??_M_Write+29)& (0+255),w,b
  9256  00081C  6F25               	movwf	(??_M_Write+37)& (0+255),b
  9257  00081E  5116               	movf	(??_M_Write+22)& (0+255),w,b
  9258  000820  211E               	addwfc	(??_M_Write+30)& (0+255),w,b
  9259  000822  6F26               	movwf	(??_M_Write+38)& (0+255),b
  9260  000824  5117               	movf	(??_M_Write+23)& (0+255),w,b
  9261  000826  211F               	addwfc	(??_M_Write+31)& (0+255),w,b
  9262  000828  6F27               	movwf	(??_M_Write+39)& (0+255),b
  9263  00082A  5108               	movf	(??_M_Write+8)& (0+255),w,b
  9264  00082C  2520               	addwf	(??_M_Write+32)& (0+255),w,b
  9265  00082E  6F28               	movwf	(??_M_Write+40)& (0+255),b
  9266  000830  5109               	movf	(??_M_Write+9)& (0+255),w,b
  9267  000832  2121               	addwfc	(??_M_Write+33)& (0+255),w,b
  9268  000834  6F29               	movwf	(??_M_Write+41)& (0+255),b
  9269  000836  510A               	movf	(??_M_Write+10)& (0+255),w,b
  9270  000838  2122               	addwfc	(??_M_Write+34)& (0+255),w,b
  9271  00083A  6F2A               	movwf	(??_M_Write+42)& (0+255),b
  9272  00083C  510B               	movf	(??_M_Write+11)& (0+255),w,b
  9273  00083E  2123               	addwfc	(??_M_Write+35)& (0+255),w,b
  9274  000840  6F2B               	movwf	(??_M_Write+43)& (0+255),b
  9275  000842  510C               	movf	(??_M_Write+12)& (0+255),w,b
  9276  000844  2124               	addwfc	(??_M_Write+36)& (0+255),w,b
  9277  000846  6F2C               	movwf	(??_M_Write+44)& (0+255),b
  9278  000848  510D               	movf	(??_M_Write+13)& (0+255),w,b
  9279  00084A  2125               	addwfc	(??_M_Write+37)& (0+255),w,b
  9280  00084C  6F2D               	movwf	(??_M_Write+45)& (0+255),b
  9281  00084E  510E               	movf	(??_M_Write+14)& (0+255),w,b
  9282  000850  2126               	addwfc	(??_M_Write+38)& (0+255),w,b
  9283  000852  6F2E               	movwf	(??_M_Write+46)& (0+255),b
  9284  000854  510F               	movf	(??_M_Write+15)& (0+255),w,b
  9285  000856  2127               	addwfc	(??_M_Write+39)& (0+255),w,b
  9286  000858  6F2F               	movwf	(??_M_Write+47)& (0+255),b
  9287  00085A  5100               	movf	??_M_Write& (0+255),w,b
  9288  00085C  2528               	addwf	(??_M_Write+40)& (0+255),w,b
  9289  00085E  6F30               	movwf	(??_M_Write+48)& (0+255),b
  9290  000860  5101               	movf	(??_M_Write+1)& (0+255),w,b
  9291  000862  2129               	addwfc	(??_M_Write+41)& (0+255),w,b
  9292  000864  6F31               	movwf	(??_M_Write+49)& (0+255),b
  9293  000866  5102               	movf	(??_M_Write+2)& (0+255),w,b
  9294  000868  212A               	addwfc	(??_M_Write+42)& (0+255),w,b
  9295  00086A  6F32               	movwf	(??_M_Write+50)& (0+255),b
  9296  00086C  5103               	movf	(??_M_Write+3)& (0+255),w,b
  9297  00086E  212B               	addwfc	(??_M_Write+43)& (0+255),w,b
  9298  000870  6F33               	movwf	(??_M_Write+51)& (0+255),b
  9299  000872  5104               	movf	(??_M_Write+4)& (0+255),w,b
  9300  000874  212C               	addwfc	(??_M_Write+44)& (0+255),w,b
  9301  000876  6F34               	movwf	(??_M_Write+52)& (0+255),b
  9302  000878  5105               	movf	(??_M_Write+5)& (0+255),w,b
  9303  00087A  212D               	addwfc	(??_M_Write+45)& (0+255),w,b
  9304  00087C  6F35               	movwf	(??_M_Write+53)& (0+255),b
  9305  00087E  5106               	movf	(??_M_Write+6)& (0+255),w,b
  9306  000880  212E               	addwfc	(??_M_Write+46)& (0+255),w,b
  9307  000882  6F36               	movwf	(??_M_Write+54)& (0+255),b
  9308  000884  5107               	movf	(??_M_Write+7)& (0+255),w,b
  9309  000886  212F               	addwfc	(??_M_Write+47)& (0+255),w,b
  9310  000888  6F37               	movwf	(??_M_Write+55)& (0+255),b
  9311  00088A  0100               	movlb	0	; () banked
  9312  00088C  51CE               	movf	M_Write@mw_dato& (0+255),w,b
  9313  00088E  0101               	movlb	1	; () banked
  9314  000890  2530               	addwf	(??_M_Write+48)& (0+255),w,b
  9315  000892  6F43               	movwf	M_Write@dec5& (0+255),b
  9316  000894  0100               	movlb	0	; () banked
  9317  000896  51CF               	movf	(M_Write@mw_dato+1)& (0+255),w,b
  9318  000898  0101               	movlb	1	; () banked
  9319  00089A  2131               	addwfc	(??_M_Write+49)& (0+255),w,b
  9320  00089C  6F44               	movwf	(M_Write@dec5+1)& (0+255),b
  9321  00089E  0100               	movlb	0	; () banked
  9322  0008A0  51D0               	movf	(M_Write@mw_dato+2)& (0+255),w,b
  9323  0008A2  0101               	movlb	1	; () banked
  9324  0008A4  2132               	addwfc	(??_M_Write+50)& (0+255),w,b
  9325  0008A6  6F45               	movwf	(M_Write@dec5+2)& (0+255),b
  9326  0008A8  0100               	movlb	0	; () banked
  9327  0008AA  51D1               	movf	(M_Write@mw_dato+3)& (0+255),w,b
  9328  0008AC  0101               	movlb	1	; () banked
  9329  0008AE  2133               	addwfc	(??_M_Write+51)& (0+255),w,b
  9330  0008B0  6F46               	movwf	(M_Write@dec5+3)& (0+255),b
  9331  0008B2  0100               	movlb	0	; () banked
  9332  0008B4  51D2               	movf	(M_Write@mw_dato+4)& (0+255),w,b
  9333  0008B6  0101               	movlb	1	; () banked
  9334  0008B8  2134               	addwfc	(??_M_Write+52)& (0+255),w,b
  9335  0008BA  6F47               	movwf	(M_Write@dec5+4)& (0+255),b
  9336  0008BC  0100               	movlb	0	; () banked
  9337  0008BE  51D3               	movf	(M_Write@mw_dato+5)& (0+255),w,b
  9338  0008C0  0101               	movlb	1	; () banked
  9339  0008C2  2135               	addwfc	(??_M_Write+53)& (0+255),w,b
  9340  0008C4  6F48               	movwf	(M_Write@dec5+5)& (0+255),b
  9341  0008C6  0100               	movlb	0	; () banked
  9342  0008C8  51D4               	movf	(M_Write@mw_dato+6)& (0+255),w,b
  9343  0008CA  0101               	movlb	1	; () banked
  9344  0008CC  2136               	addwfc	(??_M_Write+54)& (0+255),w,b
  9345  0008CE  6F49               	movwf	(M_Write@dec5+6)& (0+255),b
  9346  0008D0  0100               	movlb	0	; () banked
  9347  0008D2  51D5               	movf	(M_Write@mw_dato+7)& (0+255),w,b
  9348  0008D4  0101               	movlb	1	; () banked
  9349  0008D6  2137               	addwfc	(??_M_Write+55)& (0+255),w,b
  9350  0008D8  6F4A               	movwf	(M_Write@dec5+7)& (0+255),b
  9351                           
  9352                           ; BSR set to: 1
  9353                           ;EEPROM_EX.c: 103:     MD_1 = (dir & 0xff00) >> 8;
  9354  0008DA  C0CD  F14B         	movff	M_Write@dir+1,M_Write@MD_1
  9355                           
  9356                           ; BSR set to: 1
  9357                           ;EEPROM_EX.c: 104:     MD_2 = dir & 0x00ff;
  9358  0008DE  C0CC  F14C         	movff	M_Write@dir,M_Write@MD_2
  9359                           
  9360                           ; BSR set to: 1
  9361                           ;EEPROM_EX.c: 106:     i2c_start();
  9362  0008E2  ECC1  F029         	call	_i2c_start	;wreg free
  9363                           
  9364                           ;EEPROM_EX.c: 108:     i2c_write(0b10100000);
  9365  0008E6  0EA0               	movlw	160
  9366  0008E8  ECA6  F024         	call	_i2c_write
  9367                           
  9368                           ;EEPROM_EX.c: 110:     i2c_write(MD_1);
  9369  0008EC  0101               	movlb	1	; () banked
  9370  0008EE  514B               	movf	M_Write@MD_1& (0+255),w,b
  9371  0008F0  ECA6  F024         	call	_i2c_write
  9372                           
  9373                           ;EEPROM_EX.c: 111:     i2c_write(MD_2);
  9374  0008F4  0101               	movlb	1	; () banked
  9375  0008F6  514C               	movf	M_Write@MD_2& (0+255),w,b
  9376  0008F8  ECA6  F024         	call	_i2c_write
  9377                           
  9378                           ;EEPROM_EX.c: 117:     sprintf(buffer,"%d",dec1);
  9379  0008FC  0E38               	movlw	low M_Write@buffer
  9380  0008FE  0100               	movlb	0	; () banked
  9381  000900  6FB7               	movwf	sprintf@s& (0+255),b
  9382  000902  0E01               	movlw	high M_Write@buffer
  9383  000904  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  9384  000906  0EF9               	movlw	low STR_9
  9385  000908  6FB9               	movwf	sprintf@fmt& (0+255),b
  9386  00090A  0E7F               	movlw	high STR_9
  9387  00090C  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  9388  00090E  C165  F0BB         	movff	M_Write@dec1,?_sprintf+4
  9389  000912  C166  F0BC         	movff	M_Write@dec1+1,?_sprintf+5
  9390  000916  C167  F0BD         	movff	M_Write@dec1+2,?_sprintf+6
  9391  00091A  C168  F0BE         	movff	M_Write@dec1+3,?_sprintf+7
  9392  00091E  C169  F0BF         	movff	M_Write@dec1+4,?_sprintf+8
  9393  000922  C16A  F0C0         	movff	M_Write@dec1+5,?_sprintf+9
  9394  000926  C16B  F0C1         	movff	M_Write@dec1+6,?_sprintf+10
  9395  00092A  C16C  F0C2         	movff	M_Write@dec1+7,?_sprintf+11
  9396  00092E  EC78  F027         	call	_sprintf	;wreg free
  9397                           
  9398                           ; BSR set to: 0
  9399                           ;EEPROM_EX.c: 118:     i2c_array(buffer);
  9400  000932  0E38               	movlw	low M_Write@buffer
  9401  000934  6E1A               	movwf	i2c_array@cadena^0,c
  9402  000936  0E01               	movlw	high M_Write@buffer
  9403  000938  6E1B               	movwf	(i2c_array@cadena+1)^0,c
  9404  00093A  EC8C  F029         	call	_i2c_array	;wreg free
  9405                           
  9406                           ;EEPROM_EX.c: 120:     sprintf(buffer,"%d",dec2);
  9407  00093E  0E38               	movlw	low M_Write@buffer
  9408  000940  0100               	movlb	0	; () banked
  9409  000942  6FB7               	movwf	sprintf@s& (0+255),b
  9410  000944  0E01               	movlw	high M_Write@buffer
  9411  000946  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  9412  000948  0EF9               	movlw	low STR_9
  9413  00094A  6FB9               	movwf	sprintf@fmt& (0+255),b
  9414  00094C  0E7F               	movlw	high STR_9
  9415  00094E  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  9416  000950  C15D  F0BB         	movff	M_Write@dec2,?_sprintf+4
  9417  000954  C15E  F0BC         	movff	M_Write@dec2+1,?_sprintf+5
  9418  000958  C15F  F0BD         	movff	M_Write@dec2+2,?_sprintf+6
  9419  00095C  C160  F0BE         	movff	M_Write@dec2+3,?_sprintf+7
  9420  000960  C161  F0BF         	movff	M_Write@dec2+4,?_sprintf+8
  9421  000964  C162  F0C0         	movff	M_Write@dec2+5,?_sprintf+9
  9422  000968  C163  F0C1         	movff	M_Write@dec2+6,?_sprintf+10
  9423  00096C  C164  F0C2         	movff	M_Write@dec2+7,?_sprintf+11
  9424  000970  EC78  F027         	call	_sprintf	;wreg free
  9425                           
  9426                           ; BSR set to: 0
  9427                           ;EEPROM_EX.c: 121:     i2c_array(buffer);
  9428  000974  0E38               	movlw	low M_Write@buffer
  9429  000976  6E1A               	movwf	i2c_array@cadena^0,c
  9430  000978  0E01               	movlw	high M_Write@buffer
  9431  00097A  6E1B               	movwf	(i2c_array@cadena+1)^0,c
  9432  00097C  EC8C  F029         	call	_i2c_array	;wreg free
  9433                           
  9434                           ;EEPROM_EX.c: 123:     sprintf(buffer,"%d",dec3);
  9435  000980  0E38               	movlw	low M_Write@buffer
  9436  000982  0100               	movlb	0	; () banked
  9437  000984  6FB7               	movwf	sprintf@s& (0+255),b
  9438  000986  0E01               	movlw	high M_Write@buffer
  9439  000988  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  9440  00098A  0EF9               	movlw	low STR_9
  9441  00098C  6FB9               	movwf	sprintf@fmt& (0+255),b
  9442  00098E  0E7F               	movlw	high STR_9
  9443  000990  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  9444  000992  C155  F0BB         	movff	M_Write@dec3,?_sprintf+4
  9445  000996  C156  F0BC         	movff	M_Write@dec3+1,?_sprintf+5
  9446  00099A  C157  F0BD         	movff	M_Write@dec3+2,?_sprintf+6
  9447  00099E  C158  F0BE         	movff	M_Write@dec3+3,?_sprintf+7
  9448  0009A2  C159  F0BF         	movff	M_Write@dec3+4,?_sprintf+8
  9449  0009A6  C15A  F0C0         	movff	M_Write@dec3+5,?_sprintf+9
  9450  0009AA  C15B  F0C1         	movff	M_Write@dec3+6,?_sprintf+10
  9451  0009AE  C15C  F0C2         	movff	M_Write@dec3+7,?_sprintf+11
  9452  0009B2  EC78  F027         	call	_sprintf	;wreg free
  9453                           
  9454                           ; BSR set to: 0
  9455                           ;EEPROM_EX.c: 124:     i2c_array(buffer);
  9456  0009B6  0E38               	movlw	low M_Write@buffer
  9457  0009B8  6E1A               	movwf	i2c_array@cadena^0,c
  9458  0009BA  0E01               	movlw	high M_Write@buffer
  9459  0009BC  6E1B               	movwf	(i2c_array@cadena+1)^0,c
  9460  0009BE  EC8C  F029         	call	_i2c_array	;wreg free
  9461                           
  9462                           ;EEPROM_EX.c: 126:     sprintf(buffer,"%d",dec4);
  9463  0009C2  0E38               	movlw	low M_Write@buffer
  9464  0009C4  0100               	movlb	0	; () banked
  9465  0009C6  6FB7               	movwf	sprintf@s& (0+255),b
  9466  0009C8  0E01               	movlw	high M_Write@buffer
  9467  0009CA  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  9468  0009CC  0EF9               	movlw	low STR_9
  9469  0009CE  6FB9               	movwf	sprintf@fmt& (0+255),b
  9470  0009D0  0E7F               	movlw	high STR_9
  9471  0009D2  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  9472  0009D4  C14D  F0BB         	movff	M_Write@dec4,?_sprintf+4
  9473  0009D8  C14E  F0BC         	movff	M_Write@dec4+1,?_sprintf+5
  9474  0009DC  C14F  F0BD         	movff	M_Write@dec4+2,?_sprintf+6
  9475  0009E0  C150  F0BE         	movff	M_Write@dec4+3,?_sprintf+7
  9476  0009E4  C151  F0BF         	movff	M_Write@dec4+4,?_sprintf+8
  9477  0009E8  C152  F0C0         	movff	M_Write@dec4+5,?_sprintf+9
  9478  0009EC  C153  F0C1         	movff	M_Write@dec4+6,?_sprintf+10
  9479  0009F0  C154  F0C2         	movff	M_Write@dec4+7,?_sprintf+11
  9480  0009F4  EC78  F027         	call	_sprintf	;wreg free
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;EEPROM_EX.c: 127:     i2c_array(buffer);
  9484  0009F8  0E38               	movlw	low M_Write@buffer
  9485  0009FA  6E1A               	movwf	i2c_array@cadena^0,c
  9486  0009FC  0E01               	movlw	high M_Write@buffer
  9487  0009FE  6E1B               	movwf	(i2c_array@cadena+1)^0,c
  9488  000A00  EC8C  F029         	call	_i2c_array	;wreg free
  9489                           
  9490                           ;EEPROM_EX.c: 129:     sprintf(buffer,"%d",dec5);
  9491  000A04  0E38               	movlw	low M_Write@buffer
  9492  000A06  0100               	movlb	0	; () banked
  9493  000A08  6FB7               	movwf	sprintf@s& (0+255),b
  9494  000A0A  0E01               	movlw	high M_Write@buffer
  9495  000A0C  6FB8               	movwf	(sprintf@s+1)& (0+255),b
  9496  000A0E  0EF9               	movlw	low STR_9
  9497  000A10  6FB9               	movwf	sprintf@fmt& (0+255),b
  9498  000A12  0E7F               	movlw	high STR_9
  9499  000A14  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
  9500  000A16  C143  F0BB         	movff	M_Write@dec5,?_sprintf+4
  9501  000A1A  C144  F0BC         	movff	M_Write@dec5+1,?_sprintf+5
  9502  000A1E  C145  F0BD         	movff	M_Write@dec5+2,?_sprintf+6
  9503  000A22  C146  F0BE         	movff	M_Write@dec5+3,?_sprintf+7
  9504  000A26  C147  F0BF         	movff	M_Write@dec5+4,?_sprintf+8
  9505  000A2A  C148  F0C0         	movff	M_Write@dec5+5,?_sprintf+9
  9506  000A2E  C149  F0C1         	movff	M_Write@dec5+6,?_sprintf+10
  9507  000A32  C14A  F0C2         	movff	M_Write@dec5+7,?_sprintf+11
  9508  000A36  EC78  F027         	call	_sprintf	;wreg free
  9509                           
  9510                           ; BSR set to: 0
  9511                           ;EEPROM_EX.c: 130:     i2c_array(buffer);
  9512  000A3A  0E38               	movlw	low M_Write@buffer
  9513  000A3C  6E1A               	movwf	i2c_array@cadena^0,c
  9514  000A3E  0E01               	movlw	high M_Write@buffer
  9515  000A40  6E1B               	movwf	(i2c_array@cadena+1)^0,c
  9516  000A42  EC8C  F029         	call	_i2c_array	;wreg free
  9517                           
  9518                           ;EEPROM_EX.c: 133:     i2c_stop();
  9519  000A46  EC40  F029         	call	_i2c_stop	;wreg free
  9520  000A4A  0012               	return		;funcret
  9521  000A4C                     __end_of_M_Write:
  9522                           	callstack 0
  9523                           
  9524 ;; *************** function _i2c_array *****************
  9525 ;; Defined at:
  9526 ;;		line 108 in file "SOFT_I2C.c"
  9527 ;; Parameters:    Size  Location     Type
  9528 ;;  cadena          2   25[COMRAM] PTR const unsigned char 
  9529 ;;		 -> Write_User@buffer(5), M_Write@buffer(11), 
  9530 ;; Auto vars:     Size  Location     Type
  9531 ;;		None
  9532 ;; Return value:  Size  Location     Type
  9533 ;;                  1    wreg      void 
  9534 ;; Registers used:
  9535 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9536 ;; Tracked objects:
  9537 ;;		On entry : 3F/0
  9538 ;;		On exit  : 0/0
  9539 ;;		Unchanged: 0/0
  9540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9541 ;;      Params:         2       0       0       0       0       0       0       0       0
  9542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9544 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9545 ;;Total ram usage:        2 bytes
  9546 ;; Hardware stack levels used:    1
  9547 ;; Hardware stack levels required when called:    8
  9548 ;; This function calls:
  9549 ;;		_i2c_write
  9550 ;; This function is called by:
  9551 ;;		_M_Write
  9552 ;;		_Write_User
  9553 ;; This function uses a non-reentrant model
  9554 ;;
  9555                           
  9556                           	psect	text25
  9557  005318                     __ptext25:
  9558                           	callstack 0
  9559  005318                     _i2c_array:
  9560                           	callstack 18
  9561                           
  9562                           ; BSR set to: 0
  9563                           ;SOFT_I2C.c: 108: void i2c_array(const char *cadena);SOFT_I2C.c: 109: {;SOFT_I2C.c: 110:
      +                               while(*cadena)
  9564                           
  9565                           ;incstack = 0
  9566  005318  D009               	goto	l10660
  9567  00531A                     l10656:
  9568                           
  9569                           ;SOFT_I2C.c: 111:     {;SOFT_I2C.c: 112:         i2c_write(*cadena);
  9570  00531A  C01A  FFD9         	movff	i2c_array@cadena,fsr2l
  9571  00531E  C01B  FFDA         	movff	i2c_array@cadena+1,fsr2h
  9572  005322  50DF               	movf	indf2,w,c
  9573  005324  ECA6  F024         	call	_i2c_write
  9574                           
  9575                           ;SOFT_I2C.c: 113:         cadena++;
  9576  005328  4A1A               	infsnz	i2c_array@cadena^0,f,c
  9577  00532A  2A1B               	incf	(i2c_array@cadena+1)^0,f,c
  9578  00532C                     l10660:
  9579                           
  9580                           ;SOFT_I2C.c: 110:     while(*cadena)
  9581  00532C  C01A  FFD9         	movff	i2c_array@cadena,fsr2l
  9582  005330  C01B  FFDA         	movff	i2c_array@cadena+1,fsr2h
  9583  005334  50DF               	movf	indf2,w,c
  9584  005336  B4D8               	btfsc	status,2,c
  9585  005338  0012               	return	
  9586  00533A  D7EF               	goto	l10656
  9587  00533C                     __end_of_i2c_array:
  9588                           	callstack 0
  9589                           
  9590 ;; *************** function _E_Rfid_Proj *****************
  9591 ;; Defined at:
  9592 ;;		line 42 in file "Task2.c"
  9593 ;; Parameters:    Size  Location     Type
  9594 ;;		None
  9595 ;; Auto vars:     Size  Location     Type
  9596 ;;  buffer         20    0        unsigned char [20]
  9597 ;; Return value:  Size  Location     Type
  9598 ;;                  1    wreg      void 
  9599 ;; Registers used:
  9600 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9601 ;; Tracked objects:
  9602 ;;		On entry : 0/1
  9603 ;;		On exit  : 3E/0
  9604 ;;		Unchanged: 0/0
  9605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9606 ;;      Params:         0       0       0       0       0       0       0       0       0
  9607 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9608 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9609 ;;      Totals:         0       0       0       0       0       0       0       0       0
  9610 ;;Total ram usage:        0 bytes
  9611 ;; Hardware stack levels used:    1
  9612 ;; Hardware stack levels required when called:   13
  9613 ;; This function calls:
  9614 ;;		_Hash_algoritmo
  9615 ;;		_MFRC522_ReadCardSerial
  9616 ;;		_MFRC522_isCard
  9617 ;; This function is called by:
  9618 ;;		_Rfid_Lcd
  9619 ;;		_Task2
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text26
  9624  004B64                     __ptext26:
  9625                           	callstack 0
  9626  004B64                     _E_Rfid_Proj:
  9627                           	callstack 16
  9628                           
  9629                           ;Task2.c: 44:     char buffer[20];;Task2.c: 46:     if(I_Con_Rfid == 0) codigo_rfid=0;
  9630                           
  9631                           ;incstack = 0
  9632  004B64  0101               	movlb	1	; () banked
  9633  004B66  518D               	movf	_I_Con_Rfid& (0+255),w,b
  9634  004B68  A4D8               	btfss	status,2,c
  9635  004B6A  D006               	goto	l11322
  9636                           
  9637                           ; BSR set to: 1
  9638  004B6C  EE20  F031         	lfsr	2,_codigo_rfid
  9639  004B70  0E07               	movlw	7
  9640  004B72                     u9811:
  9641  004B72  6ADE               	clrf	postinc2,c
  9642  004B74  06E8               	decf	wreg,f,c
  9643  004B76  E2FD               	bc	u9811
  9644  004B78                     l11322:
  9645                           
  9646                           ; BSR set to: 1
  9647                           ;Task2.c: 49:     if(MFRC522_isCard(&TagType))
  9648  004B78  0ED6               	movlw	low _TagType
  9649  004B7A  6E2F               	movwf	MFRC522_isCard@TagType^0,c
  9650  004B7C  0E01               	movlw	high _TagType
  9651  004B7E  6E30               	movwf	(MFRC522_isCard@TagType+1)^0,c
  9652  004B80  ECE1  F029         	call	_MFRC522_isCard	;wreg free
  9653  004B84  0900               	iorlw	0
  9654  004B86  B4D8               	btfsc	status,2,c
  9655  004B88  0012               	return	
  9656                           
  9657                           ; BSR set to: 0
  9658                           ;Task2.c: 50:     {;Task2.c: 52:         if(MFRC522_ReadCardSerial(&UID))
  9659  004B8A  0EC8               	movlw	low _UID
  9660  004B8C  6F6D               	movwf	MFRC522_ReadCardSerial@str& (0+255),b
  9661  004B8E  0E01               	movlw	high _UID
  9662  004B90  6F6E               	movwf	(MFRC522_ReadCardSerial@str+1)& (0+255),b
  9663  004B92  ECC8  F028         	call	_MFRC522_ReadCardSerial	;wreg free
  9664  004B96  0900               	iorlw	0
  9665  004B98  B4D8               	btfsc	status,2,c
  9666  004B9A  0012               	return	
  9667                           
  9668                           ; BSR set to: 0
  9669                           ;Task2.c: 53:         {;Task2.c: 55:             codigo_rfid = Hash_algoritmo();
  9670  004B9C  EC6C  F024         	call	_Hash_algoritmo	;wreg free
  9671  004BA0  5024               	movf	?_Hash_algoritmo^0,w,c
  9672  004BA2  6E31               	movwf	_codigo_rfid^0,c
  9673  004BA4  5025               	movf	(?_Hash_algoritmo+1)^0,w,c
  9674  004BA6  6E32               	movwf	(_codigo_rfid+1)^0,c
  9675  004BA8  5026               	movf	(?_Hash_algoritmo+2)^0,w,c
  9676  004BAA  6E33               	movwf	(_codigo_rfid+2)^0,c
  9677  004BAC  5027               	movf	(?_Hash_algoritmo+3)^0,w,c
  9678  004BAE  6E34               	movwf	(_codigo_rfid+3)^0,c
  9679  004BB0  6A35               	clrf	(_codigo_rfid+4)^0,c
  9680  004BB2  6A36               	clrf	(_codigo_rfid+5)^0,c
  9681  004BB4  6A37               	clrf	(_codigo_rfid+6)^0,c
  9682  004BB6  6A38               	clrf	(_codigo_rfid+7)^0,c
  9683                           
  9684                           ;Task2.c: 56:             Tarj_Dect = 1;
  9685  004BB8  0E01               	movlw	1
  9686  004BBA  0101               	movlb	1	; () banked
  9687  004BBC  6F85               	movwf	_Tarj_Dect& (0+255),b
  9688  004BBE  0012               	return		;funcret
  9689  004BC0                     __end_of_E_Rfid_Proj:
  9690                           	callstack 0
  9691                           
  9692 ;; *************** function _MFRC522_isCard *****************
  9693 ;; Defined at:
  9694 ;;		line 353 in file "RC522.c"
  9695 ;; Parameters:    Size  Location     Type
  9696 ;;  TagType         2   46[COMRAM] PTR unsigned char 
  9697 ;;		 -> TagType(2), 
  9698 ;; Auto vars:     Size  Location     Type
  9699 ;;		None
  9700 ;; Return value:  Size  Location     Type
  9701 ;;                  1    wreg      unsigned char 
  9702 ;; Registers used:
  9703 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9704 ;; Tracked objects:
  9705 ;;		On entry : 3F/1
  9706 ;;		On exit  : 3F/0
  9707 ;;		Unchanged: 0/0
  9708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9709 ;;      Params:         2       0       0       0       0       0       0       0       0
  9710 ;;      Locals:         0       0       0       0       0       0       0       0       0
  9711 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9712 ;;      Totals:         2       0       0       0       0       0       0       0       0
  9713 ;;Total ram usage:        2 bytes
  9714 ;; Hardware stack levels used:    1
  9715 ;; Hardware stack levels required when called:   12
  9716 ;; This function calls:
  9717 ;;		_MFRC522_Request
  9718 ;; This function is called by:
  9719 ;;		_E_Rfid_Proj
  9720 ;; This function uses a non-reentrant model
  9721 ;;
  9722                           
  9723                           	psect	text27
  9724  0053C2                     __ptext27:
  9725                           	callstack 0
  9726  0053C2                     _MFRC522_isCard:
  9727                           	callstack 16
  9728                           
  9729                           ; BSR set to: 1
  9730                           ;RC522.c: 353: char MFRC522_isCard(char *TagType);RC522.c: 354: {;RC522.c: 355:     if (
      +                          MFRC522_Request(0x26,TagType) == 0)
  9731                           
  9732                           ;incstack = 0
  9733  0053C2  C02F  F02D         	movff	MFRC522_isCard@TagType,MFRC522_Request@TagType
  9734  0053C6  C030  F02E         	movff	MFRC522_isCard@TagType+1,MFRC522_Request@TagType+1
  9735  0053CA  0E26               	movlw	38
  9736  0053CC  EC8F  F026         	call	_MFRC522_Request
  9737  0053D0  0900               	iorlw	0
  9738  0053D2  A4D8               	btfss	status,2,c
  9739  0053D4  D002               	goto	l11036
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;RC522.c: 356:         return 1;
  9743  0053D6  0E01               	movlw	1
  9744  0053D8  0012               	return	
  9745  0053DA                     l11036:
  9746                           
  9747                           ; BSR set to: 0
  9748                           ;RC522.c: 358:         return 0;
  9749  0053DA  0E00               	movlw	0
  9750                           
  9751                           ; BSR set to: 0
  9752  0053DC  0012               	return		;funcret
  9753  0053DE                     __end_of_MFRC522_isCard:
  9754                           	callstack 0
  9755                           
  9756 ;; *************** function _MFRC522_Request *****************
  9757 ;; Defined at:
  9758 ;;		line 163 in file "RC522.c"
  9759 ;; Parameters:    Size  Location     Type
  9760 ;;  reqMode         1    wreg     unsigned char 
  9761 ;;  TagType         2   44[COMRAM] PTR unsigned char 
  9762 ;;		 -> TagType(2), 
  9763 ;; Auto vars:     Size  Location     Type
  9764 ;;  reqMode         1    8[BANK0 ] unsigned char 
  9765 ;;  backBits        2   10[BANK0 ] unsigned int 
  9766 ;;  _status         1    9[BANK0 ] unsigned char 
  9767 ;; Return value:  Size  Location     Type
  9768 ;;                  1    wreg      unsigned char 
  9769 ;; Registers used:
  9770 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9771 ;; Tracked objects:
  9772 ;;		On entry : 3F/1
  9773 ;;		On exit  : 3F/0
  9774 ;;		Unchanged: 0/0
  9775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9776 ;;      Params:         2       0       0       0       0       0       0       0       0
  9777 ;;      Locals:         0       4       0       0       0       0       0       0       0
  9778 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9779 ;;      Totals:         2       4       0       0       0       0       0       0       0
  9780 ;;Total ram usage:        6 bytes
  9781 ;; Hardware stack levels used:    1
  9782 ;; Hardware stack levels required when called:   11
  9783 ;; This function calls:
  9784 ;;		_MFRC522_ToCard
  9785 ;;		_MFRC522_Wr
  9786 ;; This function is called by:
  9787 ;;		_MFRC522_isCard
  9788 ;; This function uses a non-reentrant model
  9789 ;;
  9790                           
  9791                           	psect	text28
  9792  004D1E                     __ptext28:
  9793                           	callstack 0
  9794  004D1E                     _MFRC522_Request:
  9795                           	callstack 16
  9796                           
  9797                           ; BSR set to: 0
  9798                           ;incstack = 0
  9799                           ;MFRC522_Request@reqMode stored from wreg
  9800  004D1E  0100               	movlb	0	; () banked
  9801  004D20  6F68               	movwf	MFRC522_Request@reqMode& (0+255),b
  9802                           
  9803                           ;RC522.c: 163: char MFRC522_Request( char reqMode, char *TagType );RC522.c: 164: {;RC522
      +                          .c: 165:   char _status;;RC522.c: 166:   unsigned backBits;;RC522.c: 167:   MFRC522_Wr( 
      +                          0x0D, 0x07 );
  9804  004D22  0E07               	movlw	7
  9805  004D24  6E1E               	movwf	MFRC522_Wr@value^0,c
  9806  004D26  0E0D               	movlw	13
  9807  004D28  ECFC  F029         	call	_MFRC522_Wr
  9808                           
  9809                           ;RC522.c: 168:   TagType[0] = reqMode;
  9810  004D2C  C02D  FFD9         	movff	MFRC522_Request@TagType,fsr2l
  9811  004D30  C02E  FFDA         	movff	MFRC522_Request@TagType+1,fsr2h
  9812  004D34  C068  FFDF         	movff	MFRC522_Request@reqMode,indf2
  9813                           
  9814                           ;RC522.c: 169:   _status = MFRC522_ToCard( 0x0C, TagType, 1, TagType, &backBits );
  9815  004D38  C02D  F023         	movff	MFRC522_Request@TagType,MFRC522_ToCard@sendData
  9816  004D3C  C02E  F024         	movff	MFRC522_Request@TagType+1,MFRC522_ToCard@sendData+1
  9817  004D40  0E01               	movlw	1
  9818  004D42  6E25               	movwf	MFRC522_ToCard@sendLen^0,c
  9819  004D44  C02D  F026         	movff	MFRC522_Request@TagType,MFRC522_ToCard@backData
  9820  004D48  C02E  F027         	movff	MFRC522_Request@TagType+1,MFRC522_ToCard@backData+1
  9821  004D4C  0E6A               	movlw	low MFRC522_Request@backBits
  9822  004D4E  6E28               	movwf	MFRC522_ToCard@backLen^0,c
  9823  004D50  0E0C               	movlw	12
  9824  004D52  EC39  F013         	call	_MFRC522_ToCard
  9825  004D56  6F69               	movwf	MFRC522_Request@_status& (0+255),b
  9826                           
  9827                           ; BSR set to: 0
  9828                           ;RC522.c: 170:   if ( (_status != 0) || (backBits != 0x10) )
  9829  004D58  5169               	movf	MFRC522_Request@_status& (0+255),w,b
  9830  004D5A  A4D8               	btfss	status,2,c
  9831  004D5C  D005               	goto	u9420
  9832                           
  9833                           ; BSR set to: 0
  9834  004D5E  0E10               	movlw	16
  9835  004D60  196A               	xorwf	MFRC522_Request@backBits& (0+255),w,b
  9836  004D62  116B               	iorwf	(MFRC522_Request@backBits+1)& (0+255),w,b
  9837  004D64  B4D8               	btfsc	status,2,c
  9838  004D66  D002               	goto	l794
  9839  004D68                     u9420:
  9840                           
  9841                           ; BSR set to: 0
  9842                           ;RC522.c: 171:   {;RC522.c: 172:     _status = 2;
  9843  004D68  0E02               	movlw	2
  9844  004D6A  6F69               	movwf	MFRC522_Request@_status& (0+255),b
  9845  004D6C                     l794:
  9846                           
  9847                           ; BSR set to: 0
  9848                           ;RC522.c: 174:   return _status;
  9849  004D6C  5169               	movf	MFRC522_Request@_status& (0+255),w,b
  9850                           
  9851                           ; BSR set to: 0
  9852  004D6E  0012               	return		;funcret
  9853  004D70                     __end_of_MFRC522_Request:
  9854                           	callstack 0
  9855                           
  9856 ;; *************** function _MFRC522_ReadCardSerial *****************
  9857 ;; Defined at:
  9858 ;;		line 360 in file "RC522.c"
  9859 ;; Parameters:    Size  Location     Type
  9860 ;;  str             2   13[BANK0 ] PTR unsigned char 
  9861 ;;		 -> UID(10), 
  9862 ;; Auto vars:     Size  Location     Type
  9863 ;;  _status         1   47[COMRAM] unsigned char 
  9864 ;; Return value:  Size  Location     Type
  9865 ;;                  1    wreg      unsigned char 
  9866 ;; Registers used:
  9867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9868 ;; Tracked objects:
  9869 ;;		On entry : 3F/0
  9870 ;;		On exit  : 3F/0
  9871 ;;		Unchanged: 0/0
  9872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9873 ;;      Params:         0       2       0       0       0       0       0       0       0
  9874 ;;      Locals:         1       0       0       0       0       0       0       0       0
  9875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  9876 ;;      Totals:         1       2       0       0       0       0       0       0       0
  9877 ;;Total ram usage:        3 bytes
  9878 ;; Hardware stack levels used:    1
  9879 ;; Hardware stack levels required when called:   12
  9880 ;; This function calls:
  9881 ;;		_MFRC522_AntiColl
  9882 ;; This function is called by:
  9883 ;;		_E_Rfid_Proj
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           	psect	text29
  9888  005190                     __ptext29:
  9889                           	callstack 0
  9890  005190                     _MFRC522_ReadCardSerial:
  9891                           	callstack 16
  9892                           
  9893                           ; BSR set to: 0
  9894                           ;RC522.c: 360: char MFRC522_ReadCardSerial( char *str );RC522.c: 361: {;RC522.c: 362:   
      +                            char _status;;RC522.c: 364:     _status = MFRC522_AntiColl( str );
  9895                           
  9896                           ; BSR set to: 0
  9897                           ;incstack = 0
  9898  005190  C06D  F02D         	movff	MFRC522_ReadCardSerial@str,MFRC522_AntiColl@serNum
  9899  005194  C06E  F02E         	movff	MFRC522_ReadCardSerial@str+1,MFRC522_AntiColl@serNum+1
  9900  005198  EC1A  F022         	call	_MFRC522_AntiColl	;wreg free
  9901  00519C  6E30               	movwf	MFRC522_ReadCardSerial@_status^0,c
  9902                           
  9903                           ; BSR set to: 0
  9904                           ;RC522.c: 365:     str[5] = 0;
  9905  00519E  EE20 F005          	lfsr	2,5
  9906  0051A2  516D               	movf	MFRC522_ReadCardSerial@str& (0+255),w,b
  9907  0051A4  26D9               	addwf	fsr2l,f,c
  9908  0051A6  516E               	movf	(MFRC522_ReadCardSerial@str+1)& (0+255),w,b
  9909  0051A8  22DA               	addwfc	fsr2h,f,c
  9910  0051AA  0E00               	movlw	0
  9911  0051AC  6EDF               	movwf	indf2,c
  9912                           
  9913                           ; BSR set to: 0
  9914                           ;RC522.c: 366:     if (_status == 0)
  9915  0051AE  5030               	movf	MFRC522_ReadCardSerial@_status^0,w,c
  9916  0051B0  A4D8               	btfss	status,2,c
  9917  0051B2  D002               	goto	l11052
  9918                           
  9919                           ; BSR set to: 0
  9920                           ;RC522.c: 367:         return 1;
  9921  0051B4  0E01               	movlw	1
  9922  0051B6  0012               	return	
  9923  0051B8                     l11052:
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;RC522.c: 369:         return 0;
  9927  0051B8  0E00               	movlw	0
  9928                           
  9929                           ; BSR set to: 0
  9930  0051BA  0012               	return		;funcret
  9931  0051BC                     __end_of_MFRC522_ReadCardSerial:
  9932                           	callstack 0
  9933                           
  9934 ;; *************** function _MFRC522_AntiColl *****************
  9935 ;; Defined at:
  9936 ;;		line 323 in file "RC522.c"
  9937 ;; Parameters:    Size  Location     Type
  9938 ;;  serNum          2   44[COMRAM] PTR unsigned char 
  9939 ;;		 -> UID(10), 
  9940 ;; Auto vars:     Size  Location     Type
  9941 ;;  unLen           2    9[BANK0 ] unsigned int 
  9942 ;;  i               1   12[BANK0 ] unsigned char 
  9943 ;;  _status         1   11[BANK0 ] unsigned char 
  9944 ;;  serNumCheck     1    8[BANK0 ] unsigned char 
  9945 ;; Return value:  Size  Location     Type
  9946 ;;                  1    wreg      unsigned char 
  9947 ;; Registers used:
  9948 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9949 ;; Tracked objects:
  9950 ;;		On entry : 3F/0
  9951 ;;		On exit  : 3F/0
  9952 ;;		Unchanged: 0/0
  9953 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  9954 ;;      Params:         2       0       0       0       0       0       0       0       0
  9955 ;;      Locals:         0       5       0       0       0       0       0       0       0
  9956 ;;      Temps:          1       0       0       0       0       0       0       0       0
  9957 ;;      Totals:         3       5       0       0       0       0       0       0       0
  9958 ;;Total ram usage:        8 bytes
  9959 ;; Hardware stack levels used:    1
  9960 ;; Hardware stack levels required when called:   11
  9961 ;; This function calls:
  9962 ;;		_MFRC522_Clear_Bit
  9963 ;;		_MFRC522_ToCard
  9964 ;;		_MFRC522_Wr
  9965 ;; This function is called by:
  9966 ;;		_MFRC522_ReadCardSerial
  9967 ;; This function uses a non-reentrant model
  9968 ;;
  9969                           
  9970                           	psect	text30
  9971  004434                     __ptext30:
  9972                           	callstack 0
  9973  004434                     _MFRC522_AntiColl:
  9974                           	callstack 16
  9975                           
  9976                           ; BSR set to: 0
  9977                           ;RC522.c: 323: char MFRC522_AntiColl( char *serNum );RC522.c: 324: {;RC522.c: 325:   cha
      +                          r _status;;RC522.c: 326:   char i;;RC522.c: 327:   char serNumCheck = 0;
  9978                           
  9979                           ; BSR set to: 0
  9980                           ;incstack = 0
  9981  004434  0E00               	movlw	0
  9982  004436  6F68               	movwf	MFRC522_AntiColl@serNumCheck& (0+255),b
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;RC522.c: 328:   unsigned unLen;;RC522.c: 329:   MFRC522_Wr( 0x0D, 0x00 );
  9986  004438  0E00               	movlw	0
  9987  00443A  6E1E               	movwf	MFRC522_Wr@value^0,c
  9988  00443C  0E0D               	movlw	13
  9989  00443E  ECFC  F029         	call	_MFRC522_Wr
  9990                           
  9991                           ;RC522.c: 330:   serNum[0] = 0x93;
  9992  004442  C02D  FFD9         	movff	MFRC522_AntiColl@serNum,fsr2l
  9993  004446  C02E  FFDA         	movff	MFRC522_AntiColl@serNum+1,fsr2h
  9994  00444A  0E93               	movlw	147
  9995  00444C  6EDF               	movwf	indf2,c
  9996                           
  9997                           ;RC522.c: 331:   serNum[1] = 0x20;
  9998  00444E  EE20 F001          	lfsr	2,1
  9999  004452  502D               	movf	MFRC522_AntiColl@serNum^0,w,c
 10000  004454  26D9               	addwf	fsr2l,f,c
 10001  004456  502E               	movf	(MFRC522_AntiColl@serNum+1)^0,w,c
 10002  004458  22DA               	addwfc	fsr2h,f,c
 10003  00445A  0E20               	movlw	32
 10004  00445C  6EDF               	movwf	indf2,c
 10005                           
 10006                           ;RC522.c: 332:   MFRC522_Clear_Bit( 0x08, 0x08 );
 10007  00445E  0E08               	movlw	8
 10008  004460  6E20               	movwf	MFRC522_Clear_Bit@mask^0,c
 10009  004462  0E08               	movlw	8
 10010  004464  ECEF  F029         	call	_MFRC522_Clear_Bit
 10011                           
 10012                           ;RC522.c: 333:   _status = MFRC522_ToCard( 0x0C, serNum, 2, serNum, &unLen );
 10013  004468  C02D  F023         	movff	MFRC522_AntiColl@serNum,MFRC522_ToCard@sendData
 10014  00446C  C02E  F024         	movff	MFRC522_AntiColl@serNum+1,MFRC522_ToCard@sendData+1
 10015  004470  0E02               	movlw	2
 10016  004472  6E25               	movwf	MFRC522_ToCard@sendLen^0,c
 10017  004474  C02D  F026         	movff	MFRC522_AntiColl@serNum,MFRC522_ToCard@backData
 10018  004478  C02E  F027         	movff	MFRC522_AntiColl@serNum+1,MFRC522_ToCard@backData+1
 10019  00447C  0E69               	movlw	low MFRC522_AntiColl@unLen
 10020  00447E  6E28               	movwf	MFRC522_ToCard@backLen^0,c
 10021  004480  0E0C               	movlw	12
 10022  004482  EC39  F013         	call	_MFRC522_ToCard
 10023  004486  6F6B               	movwf	MFRC522_AntiColl@_status& (0+255),b
 10024                           
 10025                           ; BSR set to: 0
 10026                           ;RC522.c: 334:   if (_status == 0)
 10027  004488  516B               	movf	MFRC522_AntiColl@_status& (0+255),w,b
 10028  00448A  A4D8               	btfss	status,2,c
 10029  00448C  D01A               	goto	l848
 10030                           
 10031                           ; BSR set to: 0
 10032                           ;RC522.c: 335:   {;RC522.c: 336:     for ( i=0; i < 4; i++ )
 10033  00448E  0E00               	movlw	0
 10034  004490  6F6C               	movwf	MFRC522_AntiColl@i& (0+255),b
 10035  004492                     l10856:
 10036                           
 10037                           ; BSR set to: 0
 10038                           ;RC522.c: 337:     {;RC522.c: 338:       serNumCheck ^= serNum[i];
 10039  004492  516C               	movf	MFRC522_AntiColl@i& (0+255),w,b
 10040  004494  242D               	addwf	MFRC522_AntiColl@serNum^0,w,c
 10041  004496  6ED9               	movwf	fsr2l,c
 10042  004498  0E00               	movlw	0
 10043  00449A  202E               	addwfc	(MFRC522_AntiColl@serNum+1)^0,w,c
 10044  00449C  6EDA               	movwf	fsr2h,c
 10045  00449E  50DF               	movf	indf2,w,c
 10046  0044A0  1B68               	xorwf	MFRC522_AntiColl@serNumCheck& (0+255),f,b
 10047                           
 10048                           ; BSR set to: 0
 10049                           ;RC522.c: 339:     }
 10050  0044A2  2B6C               	incf	MFRC522_AntiColl@i& (0+255),f,b
 10051                           
 10052                           ; BSR set to: 0
 10053  0044A4  0E03               	movlw	3
 10054  0044A6  656C               	cpfsgt	MFRC522_AntiColl@i& (0+255),b
 10055  0044A8  D7F4               	goto	l10856
 10056                           
 10057                           ; BSR set to: 0
 10058                           ;RC522.c: 341:     if ( serNumCheck != serNum[4] )
 10059  0044AA  EE20 F004          	lfsr	2,4
 10060  0044AE  502D               	movf	MFRC522_AntiColl@serNum^0,w,c
 10061  0044B0  26D9               	addwf	fsr2l,f,c
 10062  0044B2  502E               	movf	(MFRC522_AntiColl@serNum+1)^0,w,c
 10063  0044B4  22DA               	addwfc	fsr2h,f,c
 10064  0044B6  5168               	movf	MFRC522_AntiColl@serNumCheck& (0+255),w,b
 10065  0044B8  18DE               	xorwf	postinc2,w,c
 10066  0044BA  B4D8               	btfsc	status,2,c
 10067  0044BC  D002               	goto	l848
 10068                           
 10069                           ; BSR set to: 0
 10070                           ;RC522.c: 342:     {;RC522.c: 343:       _status = 2;
 10071  0044BE  0E02               	movlw	2
 10072  0044C0  6F6B               	movwf	MFRC522_AntiColl@_status& (0+255),b
 10073  0044C2                     l848:
 10074                           
 10075                           ; BSR set to: 0
 10076                           ;RC522.c: 346:   return _status;
 10077  0044C2  516B               	movf	MFRC522_AntiColl@_status& (0+255),w,b
 10078                           
 10079                           ; BSR set to: 0
 10080  0044C4  0012               	return		;funcret
 10081  0044C6                     __end_of_MFRC522_AntiColl:
 10082                           	callstack 0
 10083                           
 10084 ;; *************** function _MFRC522_ToCard *****************
 10085 ;; Defined at:
 10086 ;;		line 62 in file "RC522.c"
 10087 ;; Parameters:    Size  Location     Type
 10088 ;;  command         1    wreg     unsigned char 
 10089 ;;  sendData        2   34[COMRAM] PTR unsigned char 
 10090 ;;		 -> TagType(2), UID(10), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
 10091 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
 10092 ;;  sendLen         1   36[COMRAM] unsigned char 
 10093 ;;  backData        2   37[COMRAM] PTR unsigned char 
 10094 ;;		 -> TagType(2), UID(10), MFRC522_Write@buff(18), MFRC522_Auth@buff(12), 
 10095 ;;		 -> MFRC522_Halt@buff(4), MFRC522_SelectTag@buffer(9), 
 10096 ;;  backLen         1   39[COMRAM] PTR unsigned int 
 10097 ;;		 -> MFRC522_AntiColl@unLen(2), MFRC522_Read@unLen(2), MFRC522_Write@recvBits(2), MFRC522_Auth@recvBits(2), 
 10098 ;;		 -> MFRC522_Halt@unLen(2), MFRC522_SelectTag@recvBits(2), MFRC522_Request@backBits(2), 
 10099 ;; Auto vars:     Size  Location     Type
 10100 ;;  command         1    4[BANK0 ] unsigned char 
 10101 ;;  i               2    5[BANK0 ] unsigned int 
 10102 ;;  n               1    7[BANK0 ] unsigned char 
 10103 ;;  irqEn           1    3[BANK0 ] unsigned char 
 10104 ;;  lastBits        1    2[BANK0 ] unsigned char 
 10105 ;;  _status         1    1[BANK0 ] unsigned char 
 10106 ;;  waitIRq         1    0[BANK0 ] unsigned char 
 10107 ;; Return value:  Size  Location     Type
 10108 ;;                  1    wreg      unsigned char 
 10109 ;; Registers used:
 10110 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10111 ;; Tracked objects:
 10112 ;;		On entry : 0/0
 10113 ;;		On exit  : 3F/0
 10114 ;;		Unchanged: 0/0
 10115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10116 ;;      Params:         6       0       0       0       0       0       0       0       0
 10117 ;;      Locals:         0       8       0       0       0       0       0       0       0
 10118 ;;      Temps:          4       0       0       0       0       0       0       0       0
 10119 ;;      Totals:        10       8       0       0       0       0       0       0       0
 10120 ;;Total ram usage:       18 bytes
 10121 ;; Hardware stack levels used:    1
 10122 ;; Hardware stack levels required when called:   10
 10123 ;; This function calls:
 10124 ;;		_MFRC522_Clear_Bit
 10125 ;;		_MFRC522_Rd
 10126 ;;		_MFRC522_Set_Bit
 10127 ;;		_MFRC522_Wr
 10128 ;; This function is called by:
 10129 ;;		_MFRC522_Request
 10130 ;;		_MFRC522_AntiColl
 10131 ;; This function uses a non-reentrant model
 10132 ;;
 10133                           
 10134                           	psect	text31
 10135  002672                     __ptext31:
 10136                           	callstack 0
 10137  002672                     _MFRC522_ToCard:
 10138                           	callstack 16
 10139                           
 10140                           ; BSR set to: 0
 10141                           ;incstack = 0
 10142                           ;MFRC522_ToCard@command stored from wreg
 10143  002672  0100               	movlb	0	; () banked
 10144  002674  6F64               	movwf	MFRC522_ToCard@command& (0+255),b
 10145                           
 10146                           ;RC522.c: 62: char MFRC522_ToCard( char command, char *sendData, char sendLen, char *bac
      +                          kData, unsigned *backLen );RC522.c: 63: {;RC522.c: 64:   char _status = 2;
 10147  002676  0E02               	movlw	2
 10148  002678  0100               	movlb	0	; () banked
 10149  00267A  6F61               	movwf	MFRC522_ToCard@_status& (0+255),b
 10150                           
 10151                           ;RC522.c: 65:   char irqEn = 0x00;
 10152  00267C  0E00               	movlw	0
 10153  00267E  6F63               	movwf	MFRC522_ToCard@irqEn& (0+255),b
 10154                           
 10155                           ;RC522.c: 66:   char waitIRq = 0x00;
 10156  002680  0E00               	movlw	0
 10157  002682  6F60               	movwf	MFRC522_ToCard@waitIRq& (0+255),b
 10158                           
 10159                           ;RC522.c: 67:   char lastBits;;RC522.c: 68:   char n;;RC522.c: 69:   unsigned i;;RC522.c
      +                          : 71:   switch (command)
 10160  002684  D009               	goto	l10572
 10161  002686                     l10566:
 10162                           
 10163                           ; BSR set to: 0
 10164                           ;RC522.c: 74:     {;RC522.c: 75:       irqEn = 0x12;
 10165  002686  0E12               	movlw	18
 10166  002688  6F63               	movwf	MFRC522_ToCard@irqEn& (0+255),b
 10167                           
 10168                           ;RC522.c: 76:       waitIRq = 0x10;
 10169  00268A  0E10               	movlw	16
 10170  00268C  D003               	goto	L14
 10171  00268E                     l10568:
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;RC522.c: 80:     {;RC522.c: 81:       irqEn = 0x77;
 10175  00268E  0E77               	movlw	119
 10176  002690  6F63               	movwf	MFRC522_ToCard@irqEn& (0+255),b
 10177                           
 10178                           ;RC522.c: 82:       waitIRq = 0x30;
 10179  002692  0E30               	movlw	48
 10180  002694                     L14:
 10181  002694  6F60               	movwf	MFRC522_ToCard@waitIRq& (0+255),b
 10182                           
 10183                           ;RC522.c: 83:       break;
 10184  002696  D00E               	goto	l10574
 10185  002698                     l10572:
 10186                           
 10187                           ; BSR set to: 0
 10188  002698  5164               	movf	MFRC522_ToCard@command& (0+255),w,b
 10189  00269A  6E29               	movwf	??_MFRC522_ToCard^0,c
 10190  00269C  6A2A               	clrf	(??_MFRC522_ToCard+1)^0,c
 10191                           
 10192                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10193                           ; Switch size 1, requested type "simple"
 10194                           ; Number of cases is 1, Range of values is 0 to 0
 10195                           ; switch strategies available:
 10196                           ; Name         Instructions Cycles
 10197                           ; simple_byte            4     3 (average)
 10198                           ;	Chosen strategy is simple_byte
 10199  00269E  502A               	movf	(??_MFRC522_ToCard+1)^0,w,c
 10200  0026A0  0A00               	xorlw	0	; case 0
 10201  0026A2  A4D8               	btfss	status,2,c
 10202  0026A4  D007               	goto	l10574
 10203                           
 10204                           ; BSR set to: 0
 10205                           ; Switch size 1, requested type "simple"
 10206                           ; Number of cases is 2, Range of values is 12 to 14
 10207                           ; switch strategies available:
 10208                           ; Name         Instructions Cycles
 10209                           ; simple_byte            7     4 (average)
 10210                           ;	Chosen strategy is simple_byte
 10211  0026A6  5029               	movf	??_MFRC522_ToCard^0,w,c
 10212  0026A8  0A0C               	xorlw	12	; case 12
 10213  0026AA  B4D8               	btfsc	status,2,c
 10214  0026AC  D7F0               	goto	l10568
 10215  0026AE  0A02               	xorlw	2	; case 14
 10216  0026B0  B4D8               	btfsc	status,2,c
 10217  0026B2  D7E9               	goto	l10566
 10218  0026B4                     l10574:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;RC522.c: 88:   MFRC522_Wr( 0x02, irqEn | 0x80 );
 10222  0026B4  5163               	movf	MFRC522_ToCard@irqEn& (0+255),w,b
 10223  0026B6  0980               	iorlw	128
 10224  0026B8  6E1E               	movwf	MFRC522_Wr@value^0,c
 10225  0026BA  0E02               	movlw	2
 10226  0026BC  ECFC  F029         	call	_MFRC522_Wr
 10227                           
 10228                           ;RC522.c: 89:   MFRC522_Clear_Bit( 0x04, 0x80 );
 10229  0026C0  0E80               	movlw	128
 10230  0026C2  6E20               	movwf	MFRC522_Clear_Bit@mask^0,c
 10231  0026C4  0E04               	movlw	4
 10232  0026C6  ECEF  F029         	call	_MFRC522_Clear_Bit
 10233                           
 10234                           ;RC522.c: 90:   MFRC522_Set_Bit( 0x0A, 0x80 );
 10235  0026CA  0E80               	movlw	128
 10236  0026CC  6E20               	movwf	MFRC522_Set_Bit@mask^0,c
 10237  0026CE  0E0A               	movlw	10
 10238  0026D0  EC08  F02A         	call	_MFRC522_Set_Bit
 10239                           
 10240                           ;RC522.c: 91:   MFRC522_Wr( 0x01, 0x00 );
 10241  0026D4  0E00               	movlw	0
 10242  0026D6  6E1E               	movwf	MFRC522_Wr@value^0,c
 10243  0026D8  0E01               	movlw	1
 10244  0026DA  ECFC  F029         	call	_MFRC522_Wr
 10245                           
 10246                           ;RC522.c: 94:   for ( i=0; i < sendLen; i++ )
 10247  0026DE  0E00               	movlw	0
 10248  0026E0  0100               	movlb	0	; () banked
 10249  0026E2  6F66               	movwf	(MFRC522_ToCard@i+1)& (0+255),b
 10250  0026E4  0E00               	movlw	0
 10251  0026E6  6F65               	movwf	MFRC522_ToCard@i& (0+255),b
 10252  0026E8  D00E               	goto	l10582
 10253  0026EA                     l10578:
 10254                           
 10255                           ; BSR set to: 0
 10256                           ;RC522.c: 95:   {;RC522.c: 96:     MFRC522_Wr( 0x09, sendData[i] );
 10257  0026EA  5165               	movf	MFRC522_ToCard@i& (0+255),w,b
 10258  0026EC  2423               	addwf	MFRC522_ToCard@sendData^0,w,c
 10259  0026EE  6ED9               	movwf	fsr2l,c
 10260  0026F0  5166               	movf	(MFRC522_ToCard@i+1)& (0+255),w,b
 10261  0026F2  2024               	addwfc	(MFRC522_ToCard@sendData+1)^0,w,c
 10262  0026F4  6EDA               	movwf	fsr2h,c
 10263  0026F6  50DF               	movf	indf2,w,c
 10264  0026F8  6E1E               	movwf	MFRC522_Wr@value^0,c
 10265  0026FA  0E09               	movlw	9
 10266  0026FC  ECFC  F029         	call	_MFRC522_Wr
 10267                           
 10268                           ;RC522.c: 97:   }
 10269  002700  0100               	movlb	0	; () banked
 10270  002702  4B65               	infsnz	MFRC522_ToCard@i& (0+255),f,b
 10271  002704  2B66               	incf	(MFRC522_ToCard@i+1)& (0+255),f,b
 10272  002706                     l10582:
 10273                           
 10274                           ; BSR set to: 0
 10275  002706  5025               	movf	MFRC522_ToCard@sendLen^0,w,c
 10276  002708  6E29               	movwf	??_MFRC522_ToCard^0,c
 10277  00270A  6A2A               	clrf	(??_MFRC522_ToCard+1)^0,c
 10278  00270C  5029               	movf	??_MFRC522_ToCard^0,w,c
 10279  00270E  5D65               	subwf	MFRC522_ToCard@i& (0+255),w,b
 10280  002710  502A               	movf	(??_MFRC522_ToCard+1)^0,w,c
 10281  002712  5966               	subwfb	(MFRC522_ToCard@i+1)& (0+255),w,b
 10282  002714  A0D8               	btfss	status,0,c
 10283  002716  D7E9               	goto	l10578
 10284                           
 10285                           ; BSR set to: 0
 10286                           ;RC522.c: 99:   MFRC522_Wr( 0x01, command );
 10287  002718  C064  F01E         	movff	MFRC522_ToCard@command,MFRC522_Wr@value
 10288  00271C  0E01               	movlw	1
 10289  00271E  ECFC  F029         	call	_MFRC522_Wr
 10290                           
 10291                           ;RC522.c: 100:   if (command == 0x0C )
 10292  002722  0E0C               	movlw	12
 10293  002724  0100               	movlb	0	; () banked
 10294  002726  1964               	xorwf	MFRC522_ToCard@command& (0+255),w,b
 10295  002728  A4D8               	btfss	status,2,c
 10296  00272A  D005               	goto	l10590
 10297                           
 10298                           ; BSR set to: 0
 10299                           ;RC522.c: 101:   {;RC522.c: 102:     MFRC522_Set_Bit( 0x0D, 0x80 );
 10300  00272C  0E80               	movlw	128
 10301  00272E  6E20               	movwf	MFRC522_Set_Bit@mask^0,c
 10302  002730  0E0D               	movlw	13
 10303  002732  EC08  F02A         	call	_MFRC522_Set_Bit
 10304  002736                     l10590:
 10305                           
 10306                           ;RC522.c: 106:   i = 0xFFFF;
 10307  002736  0100               	movlb	0	; () banked
 10308  002738  6965               	setf	MFRC522_ToCard@i& (0+255),b
 10309  00273A  6966               	setf	(MFRC522_ToCard@i+1)& (0+255),b
 10310  00273C                     l775:
 10311                           
 10312                           ; BSR set to: 0
 10313                           ;RC522.c: 108:   {;RC522.c: 111:     n = MFRC522_Rd( 0x04 );
 10314  00273C  0E04               	movlw	4
 10315  00273E  EC9E  F029         	call	_MFRC522_Rd
 10316  002742  0100               	movlb	0	; () banked
 10317  002744  6F67               	movwf	MFRC522_ToCard@n& (0+255),b
 10318                           
 10319                           ; BSR set to: 0
 10320                           ;RC522.c: 112:     i--;
 10321  002746  0765               	decf	MFRC522_ToCard@i& (0+255),f,b
 10322  002748  A0D8               	btfss	status,0,c
 10323  00274A  0766               	decf	(MFRC522_ToCard@i+1)& (0+255),f,b
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;RC522.c: 113:   }
 10327  00274C  5165               	movf	MFRC522_ToCard@i& (0+255),w,b
 10328  00274E  1166               	iorwf	(MFRC522_ToCard@i+1)& (0+255),w,b
 10329  002750  A4D8               	btfss	status,2,c
 10330                           
 10331                           ; BSR set to: 0
 10332  002752  B167               	btfsc	MFRC522_ToCard@n& (0+255),0,b
 10333  002754  D005               	goto	u9250
 10334                           
 10335                           ; BSR set to: 0
 10336  002756  5167               	movf	MFRC522_ToCard@n& (0+255),w,b
 10337  002758  1560               	andwf	MFRC522_ToCard@waitIRq& (0+255),w,b
 10338  00275A  0900               	iorlw	0
 10339  00275C  B4D8               	btfsc	status,2,c
 10340  00275E  D7EE               	goto	l775
 10341  002760                     u9250:
 10342                           
 10343                           ; BSR set to: 0
 10344                           ;RC522.c: 115:   MFRC522_Clear_Bit( 0x0D, 0x80 );
 10345  002760  0E80               	movlw	128
 10346  002762  6E20               	movwf	MFRC522_Clear_Bit@mask^0,c
 10347  002764  0E0D               	movlw	13
 10348  002766  ECEF  F029         	call	_MFRC522_Clear_Bit
 10349                           
 10350                           ;RC522.c: 116:   if (i != 0)
 10351  00276A  0100               	movlb	0	; () banked
 10352  00276C  5165               	movf	MFRC522_ToCard@i& (0+255),w,b
 10353  00276E  1166               	iorwf	(MFRC522_ToCard@i+1)& (0+255),w,b
 10354  002770  B4D8               	btfsc	status,2,c
 10355  002772  D07E               	goto	l779
 10356                           
 10357                           ; BSR set to: 0
 10358                           ;RC522.c: 117:   {;RC522.c: 118:     if( !( MFRC522_Rd( 0x06 ) & 0x1B ) )
 10359  002774  0E06               	movlw	6
 10360  002776  EC9E  F029         	call	_MFRC522_Rd
 10361  00277A  6E29               	movwf	??_MFRC522_ToCard^0,c
 10362  00277C  0E1B               	movlw	27
 10363  00277E  1629               	andwf	??_MFRC522_ToCard^0,f,c
 10364  002780  A4D8               	btfss	status,2,c
 10365  002782  D073               	goto	l10638
 10366                           
 10367                           ;RC522.c: 119:     {;RC522.c: 120:       _status = 0;
 10368  002784  0E00               	movlw	0
 10369  002786  0100               	movlb	0	; () banked
 10370  002788  6F61               	movwf	MFRC522_ToCard@_status& (0+255),b
 10371                           
 10372                           ; BSR set to: 0
 10373                           ;RC522.c: 121:       if ( n & irqEn & 0x01 )
 10374  00278A  5167               	movf	MFRC522_ToCard@n& (0+255),w,b
 10375  00278C  1563               	andwf	MFRC522_ToCard@irqEn& (0+255),w,b
 10376  00278E  6E29               	movwf	??_MFRC522_ToCard^0,c
 10377  002790  A029               	btfss	??_MFRC522_ToCard^0,0,c
 10378  002792  D002               	goto	l10612
 10379                           
 10380                           ; BSR set to: 0
 10381                           ;RC522.c: 122:       {;RC522.c: 123:         _status = 1;
 10382  002794  0E01               	movlw	1
 10383  002796  6F61               	movwf	MFRC522_ToCard@_status& (0+255),b
 10384  002798                     l10612:
 10385                           
 10386                           ; BSR set to: 0
 10387                           ;RC522.c: 125:       if ( command == 0x0C )
 10388  002798  0E0C               	movlw	12
 10389  00279A  1964               	xorwf	MFRC522_ToCard@command& (0+255),w,b
 10390  00279C  A4D8               	btfss	status,2,c
 10391  00279E  D068               	goto	l779
 10392                           
 10393                           ; BSR set to: 0
 10394                           ;RC522.c: 126:       {;RC522.c: 127:         n = MFRC522_Rd( 0x0A );
 10395  0027A0  0E0A               	movlw	10
 10396  0027A2  EC9E  F029         	call	_MFRC522_Rd
 10397  0027A6  0100               	movlb	0	; () banked
 10398  0027A8  6F67               	movwf	MFRC522_ToCard@n& (0+255),b
 10399                           
 10400                           ;RC522.c: 128:         lastBits = MFRC522_Rd( 0x0C ) & 0x07;
 10401  0027AA  0E0C               	movlw	12
 10402  0027AC  EC9E  F029         	call	_MFRC522_Rd
 10403  0027B0  0B07               	andlw	7
 10404  0027B2  0100               	movlb	0	; () banked
 10405  0027B4  6F62               	movwf	MFRC522_ToCard@lastBits& (0+255),b
 10406                           
 10407                           ; BSR set to: 0
 10408                           ;RC522.c: 129:         if (lastBits)
 10409  0027B6  5162               	movf	MFRC522_ToCard@lastBits& (0+255),w,b
 10410  0027B8  B4D8               	btfsc	status,2,c
 10411  0027BA  D020               	goto	l10620
 10412                           
 10413                           ; BSR set to: 0
 10414                           ;RC522.c: 130:         {;RC522.c: 131:           *backLen = (n-1) * 8 + lastBits;
 10415  0027BC  0EF8               	movlw	248
 10416  0027BE  6E29               	movwf	??_MFRC522_ToCard^0,c
 10417  0027C0  0EFF               	movlw	255
 10418  0027C2  6E2A               	movwf	(??_MFRC522_ToCard+1)^0,c
 10419  0027C4  5162               	movf	MFRC522_ToCard@lastBits& (0+255),w,b
 10420  0027C6  C067  F02B         	movff	MFRC522_ToCard@n,??_MFRC522_ToCard+2
 10421  0027CA  6A2C               	clrf	(??_MFRC522_ToCard+3)^0,c
 10422  0027CC  90D8               	bcf	status,0,c
 10423  0027CE  362B               	rlcf	(??_MFRC522_ToCard+2)^0,f,c
 10424  0027D0  362C               	rlcf	(??_MFRC522_ToCard+3)^0,f,c
 10425  0027D2  90D8               	bcf	status,0,c
 10426  0027D4  362B               	rlcf	(??_MFRC522_ToCard+2)^0,f,c
 10427  0027D6  362C               	rlcf	(??_MFRC522_ToCard+3)^0,f,c
 10428  0027D8  90D8               	bcf	status,0,c
 10429  0027DA  362B               	rlcf	(??_MFRC522_ToCard+2)^0,f,c
 10430  0027DC  362C               	rlcf	(??_MFRC522_ToCard+3)^0,f,c
 10431  0027DE  262B               	addwf	(??_MFRC522_ToCard+2)^0,f,c
 10432  0027E0  0E00               	movlw	0
 10433  0027E2  222C               	addwfc	(??_MFRC522_ToCard+3)^0,f,c
 10434  0027E4  5029               	movf	??_MFRC522_ToCard^0,w,c
 10435  0027E6  262B               	addwf	(??_MFRC522_ToCard+2)^0,f,c
 10436  0027E8  502A               	movf	(??_MFRC522_ToCard+1)^0,w,c
 10437  0027EA  222C               	addwfc	(??_MFRC522_ToCard+3)^0,f,c
 10438  0027EC  5028               	movf	MFRC522_ToCard@backLen^0,w,c
 10439  0027EE  6ED9               	movwf	fsr2l,c
 10440  0027F0  6ADA               	clrf	fsr2h,c
 10441  0027F2  C02B  FFDE         	movff	??_MFRC522_ToCard+2,postinc2
 10442  0027F6  C02C  FFDD         	movff	??_MFRC522_ToCard+3,postdec2
 10443                           
 10444                           ;RC522.c: 132:         }
 10445  0027FA  D009               	goto	l10622
 10446  0027FC                     l10620:
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;RC522.c: 134:         {;RC522.c: 135:           *backLen = n * 8;
 10450  0027FC  5167               	movf	MFRC522_ToCard@n& (0+255),w,b
 10451  0027FE  0D08               	mullw	8
 10452  002800  5028               	movf	MFRC522_ToCard@backLen^0,w,c
 10453  002802  6ED9               	movwf	fsr2l,c
 10454  002804  6ADA               	clrf	fsr2h,c
 10455  002806  CFF3 FFDE          	movff	prodl,postinc2
 10456  00280A  CFF4 FFDD          	movff	prodh,postdec2
 10457  00280E                     l10622:
 10458                           
 10459                           ; BSR set to: 0
 10460                           ;RC522.c: 137:         if (n == 0)
 10461  00280E  5167               	movf	MFRC522_ToCard@n& (0+255),w,b
 10462  002810  A4D8               	btfss	status,2,c
 10463  002812  D002               	goto	l10626
 10464                           
 10465                           ; BSR set to: 0
 10466                           ;RC522.c: 138:         {;RC522.c: 139:           n = 1;
 10467  002814  0E01               	movlw	1
 10468  002816  6F67               	movwf	MFRC522_ToCard@n& (0+255),b
 10469  002818                     l10626:
 10470                           
 10471                           ; BSR set to: 0
 10472                           ;RC522.c: 141:         if (n > 16)
 10473  002818  0E10               	movlw	16
 10474  00281A  6567               	cpfsgt	MFRC522_ToCard@n& (0+255),b
 10475  00281C  D002               	goto	l786
 10476                           
 10477                           ; BSR set to: 0
 10478                           ;RC522.c: 142:         {;RC522.c: 143:           n = 16;
 10479  00281E  0E10               	movlw	16
 10480  002820  6F67               	movwf	MFRC522_ToCard@n& (0+255),b
 10481  002822                     l786:
 10482                           
 10483                           ; BSR set to: 0
 10484                           ;RC522.c: 146:         for (i=0; i < n; i++)
 10485  002822  0E00               	movlw	0
 10486  002824  6F66               	movwf	(MFRC522_ToCard@i+1)& (0+255),b
 10487  002826  0E00               	movlw	0
 10488  002828  6F65               	movwf	MFRC522_ToCard@i& (0+255),b
 10489  00282A  D00D               	goto	l10634
 10490  00282C                     l10630:
 10491                           
 10492                           ; BSR set to: 0
 10493                           ;RC522.c: 147:         {;RC522.c: 148:           backData[i] = MFRC522_Rd( 0x09 );
 10494  00282C  5165               	movf	MFRC522_ToCard@i& (0+255),w,b
 10495  00282E  2426               	addwf	MFRC522_ToCard@backData^0,w,c
 10496  002830  6ED9               	movwf	fsr2l,c
 10497  002832  5166               	movf	(MFRC522_ToCard@i+1)& (0+255),w,b
 10498  002834  2027               	addwfc	(MFRC522_ToCard@backData+1)^0,w,c
 10499  002836  6EDA               	movwf	fsr2h,c
 10500  002838  0E09               	movlw	9
 10501  00283A  EC9E  F029         	call	_MFRC522_Rd
 10502  00283E  6EDF               	movwf	indf2,c
 10503                           
 10504                           ;RC522.c: 149:         }
 10505  002840  0100               	movlb	0	; () banked
 10506  002842  4B65               	infsnz	MFRC522_ToCard@i& (0+255),f,b
 10507  002844  2B66               	incf	(MFRC522_ToCard@i+1)& (0+255),f,b
 10508  002846                     l10634:
 10509                           
 10510                           ; BSR set to: 0
 10511  002846  5167               	movf	MFRC522_ToCard@n& (0+255),w,b
 10512  002848  6E29               	movwf	??_MFRC522_ToCard^0,c
 10513  00284A  6A2A               	clrf	(??_MFRC522_ToCard+1)^0,c
 10514  00284C  5029               	movf	??_MFRC522_ToCard^0,w,c
 10515  00284E  5D65               	subwf	MFRC522_ToCard@i& (0+255),w,b
 10516  002850  502A               	movf	(??_MFRC522_ToCard+1)^0,w,c
 10517  002852  5966               	subwfb	(MFRC522_ToCard@i+1)& (0+255),w,b
 10518  002854  A0D8               	btfss	status,0,c
 10519  002856  D7EA               	goto	l10630
 10520                           
 10521                           ; BSR set to: 0
 10522                           ;RC522.c: 151:     backData[i] = 0;
 10523  002858  5165               	movf	MFRC522_ToCard@i& (0+255),w,b
 10524  00285A  2426               	addwf	MFRC522_ToCard@backData^0,w,c
 10525  00285C  6ED9               	movwf	fsr2l,c
 10526  00285E  5166               	movf	(MFRC522_ToCard@i+1)& (0+255),w,b
 10527  002860  2027               	addwfc	(MFRC522_ToCard@backData+1)^0,w,c
 10528  002862  6EDA               	movwf	fsr2h,c
 10529  002864  0E00               	movlw	0
 10530  002866  6EDF               	movwf	indf2,c
 10531  002868  D003               	goto	l779
 10532  00286A                     l10638:
 10533                           
 10534                           ;RC522.c: 155:     {;RC522.c: 156:       _status = 2;
 10535  00286A  0E02               	movlw	2
 10536  00286C  0100               	movlb	0	; () banked
 10537  00286E  6F61               	movwf	MFRC522_ToCard@_status& (0+255),b
 10538  002870                     l779:
 10539                           
 10540                           ; BSR set to: 0
 10541                           ;RC522.c: 161:   return _status;
 10542  002870  5161               	movf	MFRC522_ToCard@_status& (0+255),w,b
 10543                           
 10544                           ; BSR set to: 0
 10545  002872  0012               	return		;funcret
 10546  002874                     __end_of_MFRC522_ToCard:
 10547                           	callstack 0
 10548                           
 10549 ;; *************** function _MFRC522_Clear_Bit *****************
 10550 ;; Defined at:
 10551 ;;		line 20 in file "RC522.c"
 10552 ;; Parameters:    Size  Location     Type
 10553 ;;  addr            1    wreg     unsigned char 
 10554 ;;  mask            1   31[COMRAM] unsigned char 
 10555 ;; Auto vars:     Size  Location     Type
 10556 ;;  addr            1   33[COMRAM] unsigned char 
 10557 ;; Return value:  Size  Location     Type
 10558 ;;                  1    wreg      void 
 10559 ;; Registers used:
 10560 ;;		wreg, status,2, status,0, cstack
 10561 ;; Tracked objects:
 10562 ;;		On entry : 0/0
 10563 ;;		On exit  : 0/0
 10564 ;;		Unchanged: 0/0
 10565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10566 ;;      Params:         1       0       0       0       0       0       0       0       0
 10567 ;;      Locals:         1       0       0       0       0       0       0       0       0
 10568 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10569 ;;      Totals:         3       0       0       0       0       0       0       0       0
 10570 ;;Total ram usage:        3 bytes
 10571 ;; Hardware stack levels used:    1
 10572 ;; Hardware stack levels required when called:    9
 10573 ;; This function calls:
 10574 ;;		_MFRC522_Rd
 10575 ;;		_MFRC522_Wr
 10576 ;; This function is called by:
 10577 ;;		_MFRC522_ToCard
 10578 ;;		_MFRC522_AntiColl
 10579 ;; This function uses a non-reentrant model
 10580 ;;
 10581                           
 10582                           	psect	text32
 10583  0053DE                     __ptext32:
 10584                           	callstack 0
 10585  0053DE                     _MFRC522_Clear_Bit:
 10586                           	callstack 16
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;incstack = 0
 10590                           ;MFRC522_Clear_Bit@addr stored from wreg
 10591  0053DE  6E22               	movwf	MFRC522_Clear_Bit@addr^0,c
 10592                           
 10593                           ;RC522.c: 20: static void MFRC522_Clear_Bit( char addr, char mask );RC522.c: 21: {;RC522
      +                          .c: 22:     MFRC522_Wr( addr, MFRC522_Rd( addr ) & (~mask) );
 10594  0053E0  5020               	movf	MFRC522_Clear_Bit@mask^0,w,c
 10595  0053E2  0AFF               	xorlw	255
 10596  0053E4  6E21               	movwf	??_MFRC522_Clear_Bit^0,c
 10597  0053E6  5022               	movf	MFRC522_Clear_Bit@addr^0,w,c
 10598  0053E8  EC9E  F029         	call	_MFRC522_Rd
 10599  0053EC  1421               	andwf	??_MFRC522_Clear_Bit^0,w,c
 10600  0053EE  6E1E               	movwf	MFRC522_Wr@value^0,c
 10601  0053F0  5022               	movf	MFRC522_Clear_Bit@addr^0,w,c
 10602  0053F2  ECFC  F029         	call	_MFRC522_Wr
 10603  0053F6  0012               	return		;funcret
 10604  0053F8                     __end_of_MFRC522_Clear_Bit:
 10605                           	callstack 0
 10606                           
 10607 ;; *************** function _Hash_algoritmo *****************
 10608 ;; Defined at:
 10609 ;;		line 26 in file "Task2.c"
 10610 ;; Parameters:    Size  Location     Type
 10611 ;;		None
 10612 ;; Auto vars:     Size  Location     Type
 10613 ;;  cont            1   44[COMRAM] unsigned char 
 10614 ;;  hash_acum       4   40[COMRAM] unsigned long 
 10615 ;; Return value:  Size  Location     Type
 10616 ;;                  4   35[COMRAM] unsigned long 
 10617 ;; Registers used:
 10618 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10619 ;; Tracked objects:
 10620 ;;		On entry : 3F/0
 10621 ;;		On exit  : 0/0
 10622 ;;		Unchanged: 0/0
 10623 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10624 ;;      Params:         4       0       0       0       0       0       0       0       0
 10625 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10626 ;;      Temps:          1       0       0       0       0       0       0       0       0
 10627 ;;      Totals:        10       0       0       0       0       0       0       0       0
 10628 ;;Total ram usage:       10 bytes
 10629 ;; Hardware stack levels used:    1
 10630 ;; Hardware stack levels required when called:    8
 10631 ;; This function calls:
 10632 ;;		___lmul
 10633 ;; This function is called by:
 10634 ;;		_E_Rfid_Proj
 10635 ;; This function uses a non-reentrant model
 10636 ;;
 10637                           
 10638                           	psect	text33
 10639  0048D8                     __ptext33:
 10640                           	callstack 0
 10641  0048D8                     _Hash_algoritmo:
 10642                           	callstack 20
 10643                           
 10644                           ; BSR set to: 0
 10645                           ;Task2.c: 28:     unsigned long hash_acum = 2166136261;
 10646                           
 10647                           ;incstack = 0
 10648  0048D8  0EC5               	movlw	197
 10649  0048DA  6E29               	movwf	Hash_algoritmo@hash_acum^0,c
 10650  0048DC  0E9D               	movlw	157
 10651  0048DE  6E2A               	movwf	(Hash_algoritmo@hash_acum+1)^0,c
 10652  0048E0  0E1C               	movlw	28
 10653  0048E2  6E2B               	movwf	(Hash_algoritmo@hash_acum+2)^0,c
 10654  0048E4  0E81               	movlw	129
 10655  0048E6  6E2C               	movwf	(Hash_algoritmo@hash_acum+3)^0,c
 10656                           
 10657                           ;Task2.c: 31:     for (char cont=0;cont<=4;cont++)
 10658  0048E8  0E00               	movlw	0
 10659  0048EA  6E2D               	movwf	Hash_algoritmo@cont^0,c
 10660  0048EC                     l11062:
 10661                           
 10662                           ;Task2.c: 32:     {;Task2.c: 34:         hash_acum = (hash_acum * 16777619) ^ UID[cont];
 10663  0048EC  C029  F018         	movff	Hash_algoritmo@hash_acum,___lmul@multiplier
 10664  0048F0  C02A  F019         	movff	Hash_algoritmo@hash_acum+1,___lmul@multiplier+1
 10665  0048F4  C02B  F01A         	movff	Hash_algoritmo@hash_acum+2,___lmul@multiplier+2
 10666  0048F8  C02C  F01B         	movff	Hash_algoritmo@hash_acum+3,___lmul@multiplier+3
 10667  0048FC  0E93               	movlw	147
 10668  0048FE  6E1C               	movwf	___lmul@multiplicand^0,c
 10669  004900  0E01               	movlw	1
 10670  004902  6E1D               	movwf	(___lmul@multiplicand+1)^0,c
 10671  004904  0E00               	movlw	0
 10672  004906  6E1E               	movwf	(___lmul@multiplicand+2)^0,c
 10673  004908  0E01               	movlw	1
 10674  00490A  6E1F               	movwf	(___lmul@multiplicand+3)^0,c
 10675  00490C  EC3A  F026         	call	___lmul	;wreg free
 10676  004910  0EC8               	movlw	low _UID
 10677  004912  242D               	addwf	Hash_algoritmo@cont^0,w,c
 10678  004914  6ED9               	movwf	fsr2l,c
 10679  004916  6ADA               	clrf	fsr2h,c
 10680  004918  0E01               	movlw	high _UID
 10681  00491A  22DA               	addwfc	fsr2h,f,c
 10682  00491C  50DF               	movf	indf2,w,c
 10683  00491E  6E28               	movwf	??_Hash_algoritmo^0,c
 10684  004920  5028               	movf	??_Hash_algoritmo^0,w,c
 10685  004922  1818               	xorwf	?___lmul^0,w,c
 10686  004924  6E29               	movwf	Hash_algoritmo@hash_acum^0,c
 10687  004926  5019               	movf	(?___lmul+1)^0,w,c
 10688  004928  6E2A               	movwf	(Hash_algoritmo@hash_acum+1)^0,c
 10689  00492A  501A               	movf	(?___lmul+2)^0,w,c
 10690  00492C  6E2B               	movwf	(Hash_algoritmo@hash_acum+2)^0,c
 10691  00492E  501B               	movf	(?___lmul+3)^0,w,c
 10692  004930  6E2C               	movwf	(Hash_algoritmo@hash_acum+3)^0,c
 10693                           
 10694                           ;Task2.c: 35:     }
 10695  004932  2A2D               	incf	Hash_algoritmo@cont^0,f,c
 10696  004934  0E04               	movlw	4
 10697  004936  642D               	cpfsgt	Hash_algoritmo@cont^0,c
 10698  004938  D7D9               	goto	l11062
 10699                           
 10700                           ;Task2.c: 37:     return (hash_acum);
 10701  00493A  C029  F024         	movff	Hash_algoritmo@hash_acum,?_Hash_algoritmo
 10702  00493E  C02A  F025         	movff	Hash_algoritmo@hash_acum+1,?_Hash_algoritmo+1
 10703  004942  C02B  F026         	movff	Hash_algoritmo@hash_acum+2,?_Hash_algoritmo+2
 10704  004946  C02C  F027         	movff	Hash_algoritmo@hash_acum+3,?_Hash_algoritmo+3
 10705  00494A  0012               	return		;funcret
 10706  00494C                     __end_of_Hash_algoritmo:
 10707                           	callstack 0
 10708                           
 10709 ;; *************** function ___lmul *****************
 10710 ;; Defined at:
 10711 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\Umul32.c"
 10712 ;; Parameters:    Size  Location     Type
 10713 ;;  multiplier      4   23[COMRAM] unsigned long 
 10714 ;;  multiplicand    4   27[COMRAM] unsigned long 
 10715 ;; Auto vars:     Size  Location     Type
 10716 ;;  product         4   31[COMRAM] unsigned long 
 10717 ;; Return value:  Size  Location     Type
 10718 ;;                  4   23[COMRAM] unsigned long 
 10719 ;; Registers used:
 10720 ;;		wreg, status,2, status,0
 10721 ;; Tracked objects:
 10722 ;;		On entry : 0/0
 10723 ;;		On exit  : 0/0
 10724 ;;		Unchanged: 0/0
 10725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10726 ;;      Params:         8       0       0       0       0       0       0       0       0
 10727 ;;      Locals:         4       0       0       0       0       0       0       0       0
 10728 ;;      Temps:          0       0       0       0       0       0       0       0       0
 10729 ;;      Totals:        12       0       0       0       0       0       0       0       0
 10730 ;;Total ram usage:       12 bytes
 10731 ;; Hardware stack levels used:    1
 10732 ;; Hardware stack levels required when called:    7
 10733 ;; This function calls:
 10734 ;;		Nothing
 10735 ;; This function is called by:
 10736 ;;		_Hash_algoritmo
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           	psect	text34
 10741  004C74                     __ptext34:
 10742                           	callstack 0
 10743  004C74                     ___lmul:
 10744                           	callstack 20
 10745                           
 10746                           ;incstack = 0
 10747  004C74  0E00               	movlw	0
 10748  004C76  6E20               	movwf	___lmul@product^0,c
 10749  004C78  0E00               	movlw	0
 10750  004C7A  6E21               	movwf	(___lmul@product+1)^0,c
 10751  004C7C  0E00               	movlw	0
 10752  004C7E  6E22               	movwf	(___lmul@product+2)^0,c
 10753  004C80  0E00               	movlw	0
 10754  004C82  6E23               	movwf	(___lmul@product+3)^0,c
 10755  004C84                     l10870:
 10756  004C84  A018               	btfss	___lmul@multiplier^0,0,c
 10757  004C86  D008               	goto	l10874
 10758  004C88  501C               	movf	___lmul@multiplicand^0,w,c
 10759  004C8A  2620               	addwf	___lmul@product^0,f,c
 10760  004C8C  501D               	movf	(___lmul@multiplicand+1)^0,w,c
 10761  004C8E  2221               	addwfc	(___lmul@product+1)^0,f,c
 10762  004C90  501E               	movf	(___lmul@multiplicand+2)^0,w,c
 10763  004C92  2222               	addwfc	(___lmul@product+2)^0,f,c
 10764  004C94  501F               	movf	(___lmul@multiplicand+3)^0,w,c
 10765  004C96  2223               	addwfc	(___lmul@product+3)^0,f,c
 10766  004C98                     l10874:
 10767  004C98  90D8               	bcf	status,0,c
 10768  004C9A  361C               	rlcf	___lmul@multiplicand^0,f,c
 10769  004C9C  361D               	rlcf	(___lmul@multiplicand+1)^0,f,c
 10770  004C9E  361E               	rlcf	(___lmul@multiplicand+2)^0,f,c
 10771  004CA0  361F               	rlcf	(___lmul@multiplicand+3)^0,f,c
 10772  004CA2  90D8               	bcf	status,0,c
 10773  004CA4  321B               	rrcf	(___lmul@multiplier+3)^0,f,c
 10774  004CA6  321A               	rrcf	(___lmul@multiplier+2)^0,f,c
 10775  004CA8  3219               	rrcf	(___lmul@multiplier+1)^0,f,c
 10776  004CAA  3218               	rrcf	___lmul@multiplier^0,f,c
 10777  004CAC  5018               	movf	___lmul@multiplier^0,w,c
 10778  004CAE  1019               	iorwf	(___lmul@multiplier+1)^0,w,c
 10779  004CB0  101A               	iorwf	(___lmul@multiplier+2)^0,w,c
 10780  004CB2  101B               	iorwf	(___lmul@multiplier+3)^0,w,c
 10781  004CB4  A4D8               	btfss	status,2,c
 10782  004CB6  D7E6               	goto	l10870
 10783  004CB8  C020  F018         	movff	___lmul@product,?___lmul
 10784  004CBC  C021  F019         	movff	___lmul@product+1,?___lmul+1
 10785  004CC0  C022  F01A         	movff	___lmul@product+2,?___lmul+2
 10786  004CC4  C023  F01B         	movff	___lmul@product+3,?___lmul+3
 10787  004CC8  0012               	return		;funcret
 10788  004CCA                     __end_of___lmul:
 10789                           	callstack 0
 10790                           
 10791 ;; *************** function _Erase_Eeprom *****************
 10792 ;; Defined at:
 10793 ;;		line 403 in file "Task1.c"
 10794 ;; Parameters:    Size  Location     Type
 10795 ;;		None
 10796 ;; Auto vars:     Size  Location     Type
 10797 ;;		None
 10798 ;; Return value:  Size  Location     Type
 10799 ;;                  1    wreg      void 
 10800 ;; Registers used:
 10801 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10802 ;; Tracked objects:
 10803 ;;		On entry : 3E/0
 10804 ;;		On exit  : 0/0
 10805 ;;		Unchanged: 0/0
 10806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10807 ;;      Params:         0       0       0       0       0       0       0       0       0
 10808 ;;      Locals:         0       0       0       0       0       0       0       0       0
 10809 ;;      Temps:          2       0       0       0       0       0       0       0       0
 10810 ;;      Totals:         2       0       0       0       0       0       0       0       0
 10811 ;;Total ram usage:        2 bytes
 10812 ;; Hardware stack levels used:    1
 10813 ;; Hardware stack levels required when called:   11
 10814 ;; This function calls:
 10815 ;;		_EEPROM_init
 10816 ;;		_LCD_array
 10817 ;;		_LCD_command
 10818 ;; This function is called by:
 10819 ;;		_E_Teclado_Lcd
 10820 ;;		_ACN_PA_Com
 10821 ;; This function uses a non-reentrant model
 10822 ;;
 10823                           
 10824                           	psect	text35
 10825  004BC0                     __ptext35:
 10826                           	callstack 0
 10827  004BC0                     _Erase_Eeprom:
 10828                           	callstack 17
 10829                           
 10830                           ;Task1.c: 406:     LCD_command(0x01);
 10831                           
 10832                           ;incstack = 0
 10833  004BC0  0E01               	movlw	1
 10834  004BC2  EC78  F023         	call	_LCD_command
 10835                           
 10836                           ;Task1.c: 407:     LCD_array(1,1,"Restableciendo");
 10837  004BC6  0E00               	movlw	0
 10838  004BC8  6E1D               	movwf	(LCD_array@x+1)^0,c
 10839  004BCA  0E01               	movlw	1
 10840  004BCC  6E1C               	movwf	LCD_array@x^0,c
 10841  004BCE  0E00               	movlw	0
 10842  004BD0  6E1F               	movwf	(LCD_array@y+1)^0,c
 10843  004BD2  0E01               	movlw	1
 10844  004BD4  6E1E               	movwf	LCD_array@y^0,c
 10845  004BD6  0ECE               	movlw	low STR_80
 10846  004BD8  6E20               	movwf	LCD_array@date^0,c
 10847  004BDA  0E7E               	movlw	high STR_80
 10848  004BDC  6E21               	movwf	(LCD_array@date+1)^0,c
 10849  004BDE  ECB1  F01F         	call	_LCD_array	;wreg free
 10850                           
 10851                           ;Task1.c: 408:     LCD_array(2,1,"a ajustes de fabrica");
 10852  004BE2  0E00               	movlw	0
 10853  004BE4  6E1D               	movwf	(LCD_array@x+1)^0,c
 10854  004BE6  0E02               	movlw	2
 10855  004BE8  6E1C               	movwf	LCD_array@x^0,c
 10856  004BEA  0E00               	movlw	0
 10857  004BEC  6E1F               	movwf	(LCD_array@y+1)^0,c
 10858  004BEE  0E01               	movlw	1
 10859  004BF0  6E1E               	movwf	LCD_array@y^0,c
 10860  004BF2  0ED9               	movlw	low STR_81
 10861  004BF4  6E20               	movwf	LCD_array@date^0,c
 10862  004BF6  0E7D               	movlw	high STR_81
 10863  004BF8  6E21               	movwf	(LCD_array@date+1)^0,c
 10864  004BFA  ECB1  F01F         	call	_LCD_array	;wreg free
 10865                           
 10866                           ;Task1.c: 409:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 10867  004BFE  0E3D               	movlw	61
 10868  004C00  6E30               	movwf	(??_Erase_Eeprom+1)^0,c
 10869  004C02  0EE1               	movlw	225
 10870  004C04  6E2F               	movwf	??_Erase_Eeprom^0,c
 10871  004C06  0E40               	movlw	64
 10872  004C08                     u11127:
 10873  004C08  2EE8               	decfsz	wreg,f,c
 10874  004C0A  D7FE               	bra	u11127
 10875  004C0C  2E2F               	decfsz	??_Erase_Eeprom^0,f,c
 10876  004C0E  D7FC               	bra	u11127
 10877  004C10  2E30               	decfsz	(??_Erase_Eeprom+1)^0,f,c
 10878  004C12  D7FA               	bra	u11127
 10879                           
 10880                           ;Task1.c: 412:     EEPROM_init();
 10881  004C14  EC85  F00E         	call	_EEPROM_init	;wreg free
 10882  004C18  0012               	return		;funcret
 10883  004C1A                     __end_of_Erase_Eeprom:
 10884                           	callstack 0
 10885                           
 10886 ;; *************** function _EEPROM_init *****************
 10887 ;; Defined at:
 10888 ;;		line 8 in file "EEPROM_EX.c"
 10889 ;; Parameters:    Size  Location     Type
 10890 ;;		None
 10891 ;; Auto vars:     Size  Location     Type
 10892 ;;  j               2   43[COMRAM] unsigned int 
 10893 ;;  c_ok            1   45[COMRAM] _Bool 
 10894 ;;  MD_2            1   42[COMRAM] unsigned char 
 10895 ;;  MD_1            1    0        unsigned char 
 10896 ;; Return value:  Size  Location     Type
 10897 ;;                  1    wreg      void 
 10898 ;; Registers used:
 10899 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10900 ;; Tracked objects:
 10901 ;;		On entry : 0/0
 10902 ;;		On exit  : 0/0
 10903 ;;		Unchanged: 0/0
 10904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 10905 ;;      Params:         0       0       0       0       0       0       0       0       0
 10906 ;;      Locals:         5       0       0       0       0       0       0       0       0
 10907 ;;      Temps:          0       8       0       0       0       0       0       0       0
 10908 ;;      Totals:         5       8       0       0       0       0       0       0       0
 10909 ;;Total ram usage:       13 bytes
 10910 ;; Hardware stack levels used:    1
 10911 ;; Hardware stack levels required when called:   10
 10912 ;; This function calls:
 10913 ;;		_LCD_array
 10914 ;;		_LCD_command
 10915 ;;		_M_Read
 10916 ;;		_Read_User
 10917 ;;		_i2c_start
 10918 ;;		_i2c_stop
 10919 ;;		_i2c_write
 10920 ;; This function is called by:
 10921 ;;		_Erase_Eeprom
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           	psect	text36
 10926  001D0A                     __ptext36:
 10927                           	callstack 0
 10928  001D0A                     _EEPROM_init:
 10929                           	callstack 17
 10930                           
 10931                           ;incstack = 0
 10932  001D0A  0E00               	movlw	0
 10933  001D0C  6E2B               	movwf	EEPROM_init@MD_2^0,c
 10934                           
 10935                           ;EEPROM_EX.c: 11:     _Bool c_ok=0;
 10936  001D0E  0E00               	movlw	0
 10937  001D10  6E2E               	movwf	EEPROM_init@c_ok^0,c
 10938                           
 10939                           ;EEPROM_EX.c: 14:     LCD_command(0x01);
 10940  001D12  0E01               	movlw	1
 10941  001D14  EC78  F023         	call	_LCD_command
 10942                           
 10943                           ;EEPROM_EX.c: 15:     LCD_array(1,1,"  Espere mientras   ");
 10944  001D18  0E00               	movlw	0
 10945  001D1A  6E1D               	movwf	(LCD_array@x+1)^0,c
 10946  001D1C  0E01               	movlw	1
 10947  001D1E  6E1C               	movwf	LCD_array@x^0,c
 10948  001D20  0E00               	movlw	0
 10949  001D22  6E1F               	movwf	(LCD_array@y+1)^0,c
 10950  001D24  0E01               	movlw	1
 10951  001D26  6E1E               	movwf	LCD_array@y^0,c
 10952  001D28  0EEE               	movlw	low STR_1
 10953  001D2A  6E20               	movwf	LCD_array@date^0,c
 10954  001D2C  0E7D               	movlw	high STR_1
 10955  001D2E  6E21               	movwf	(LCD_array@date+1)^0,c
 10956  001D30  ECB1  F01F         	call	_LCD_array	;wreg free
 10957                           
 10958                           ;EEPROM_EX.c: 16:     LCD_array(2,1," borra la memoria...");
 10959  001D34  0E00               	movlw	0
 10960  001D36  6E1D               	movwf	(LCD_array@x+1)^0,c
 10961  001D38  0E02               	movlw	2
 10962  001D3A  6E1C               	movwf	LCD_array@x^0,c
 10963  001D3C  0E00               	movlw	0
 10964  001D3E  6E1F               	movwf	(LCD_array@y+1)^0,c
 10965  001D40  0E01               	movlw	1
 10966  001D42  6E1E               	movwf	LCD_array@y^0,c
 10967  001D44  0E03               	movlw	low STR_2
 10968  001D46  6E20               	movwf	LCD_array@date^0,c
 10969  001D48  0E7E               	movlw	high STR_2
 10970  001D4A  6E21               	movwf	(LCD_array@date+1)^0,c
 10971  001D4C  ECB1  F01F         	call	_LCD_array	;wreg free
 10972                           
 10973                           ;EEPROM_EX.c: 17:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 10974  001D50  0E3D               	movlw	61
 10975  001D52  0100               	movlb	0	; () banked
 10976  001D54  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 10977  001D56  0EE1               	movlw	225
 10978  001D58  6F84               	movwf	??_EEPROM_init& (0+255),b
 10979  001D5A  0E3F               	movlw	63
 10980  001D5C                     u11137:
 10981  001D5C  2EE8               	decfsz	wreg,f,c
 10982  001D5E  D7FE               	bra	u11137
 10983  001D60  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 10984  001D62  D7FC               	bra	u11137
 10985  001D64  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 10986  001D66  D7FA               	bra	u11137
 10987  001D68  D000               	nop2	
 10988                           
 10989                           ;EEPROM_EX.c: 19:     GIEH = 0;
 10990  001D6A  9EF2               	bcf	4082,7,c	;volatile
 10991                           
 10992                           ;EEPROM_EX.c: 20:     GIEL = 0;
 10993  001D6C  9CF2               	bcf	4082,6,c	;volatile
 10994                           
 10995                           ;EEPROM_EX.c: 24:     LCD_command(0x01);
 10996  001D6E  0E01               	movlw	1
 10997  001D70  EC78  F023         	call	_LCD_command
 10998                           
 10999                           ;EEPROM_EX.c: 26:     while(c_ok == 0)
 11000  001D74  D063               	goto	l11124
 11001  001D76                     l11094:
 11002                           
 11003                           ;EEPROM_EX.c: 27:     {;EEPROM_EX.c: 28:         i2c_start();
 11004  001D76  ECC1  F029         	call	_i2c_start	;wreg free
 11005                           
 11006                           ;EEPROM_EX.c: 29:         i2c_write(0b10100000);
 11007  001D7A  0EA0               	movlw	160
 11008  001D7C  ECA6  F024         	call	_i2c_write
 11009                           
 11010                           ;EEPROM_EX.c: 30:         i2c_write(0);
 11011  001D80  0E00               	movlw	0
 11012  001D82  ECA6  F024         	call	_i2c_write
 11013                           
 11014                           ;EEPROM_EX.c: 31:         i2c_write(0);
 11015  001D86  0E00               	movlw	0
 11016  001D88  ECA6  F024         	call	_i2c_write
 11017                           
 11018                           ;EEPROM_EX.c: 33:         i2c_write(48);
 11019  001D8C  0E30               	movlw	48
 11020  001D8E  ECA6  F024         	call	_i2c_write
 11021                           
 11022                           ;EEPROM_EX.c: 34:         i2c_write(48);
 11023  001D92  0E30               	movlw	48
 11024  001D94  ECA6  F024         	call	_i2c_write
 11025                           
 11026                           ;EEPROM_EX.c: 36:         i2c_stop();
 11027  001D98  EC40  F029         	call	_i2c_stop	;wreg free
 11028                           
 11029                           ;EEPROM_EX.c: 37:         _delay((unsigned long)((20)*(48000000/4000.0)));
 11030  001D9C  0E02               	movlw	2
 11031  001D9E  0100               	movlb	0	; () banked
 11032  001DA0  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11033  001DA2  0E38               	movlw	56
 11034  001DA4  6F84               	movwf	??_EEPROM_init& (0+255),b
 11035  001DA6  0EAD               	movlw	173
 11036  001DA8                     u11147:
 11037  001DA8  2EE8               	decfsz	wreg,f,c
 11038  001DAA  D7FE               	bra	u11147
 11039  001DAC  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11040  001DAE  D7FC               	bra	u11147
 11041  001DB0  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11042  001DB2  D7FA               	bra	u11147
 11043                           
 11044                           ;EEPROM_EX.c: 41:         LCD_array(1,1,"Verificacion:");
 11045  001DB4  0E00               	movlw	0
 11046  001DB6  6E1D               	movwf	(LCD_array@x+1)^0,c
 11047  001DB8  0E01               	movlw	1
 11048  001DBA  6E1C               	movwf	LCD_array@x^0,c
 11049  001DBC  0E00               	movlw	0
 11050  001DBE  6E1F               	movwf	(LCD_array@y+1)^0,c
 11051  001DC0  0E01               	movlw	1
 11052  001DC2  6E1E               	movwf	LCD_array@y^0,c
 11053  001DC4  0EDD               	movlw	low STR_3
 11054  001DC6  6E20               	movwf	LCD_array@date^0,c
 11055  001DC8  0E7E               	movlw	high STR_3
 11056  001DCA  6E21               	movwf	(LCD_array@date+1)^0,c
 11057  001DCC  ECB1  F01F         	call	_LCD_array	;wreg free
 11058                           
 11059                           ;EEPROM_EX.c: 42:         if(Read_User(0) == 0) LCD_array(2,1,"...OK"),c_ok=1;
 11060  001DD0  0E00               	movlw	0
 11061  001DD2  6E1B               	movwf	(Read_User@dir+1)^0,c
 11062  001DD4  0E00               	movlw	0
 11063  001DD6  6E1A               	movwf	Read_User@dir^0,c
 11064  001DD8  EC4E  F025         	call	_Read_User	;wreg free
 11065  001DDC  0900               	iorlw	0
 11066  001DDE  A4D8               	btfss	status,2,c
 11067  001DE0  D010               	goto	l11118
 11068                           
 11069                           ; BSR set to: 1
 11070  001DE2  0E00               	movlw	0
 11071  001DE4  6E1D               	movwf	(LCD_array@x+1)^0,c
 11072  001DE6  0E02               	movlw	2
 11073  001DE8  6E1C               	movwf	LCD_array@x^0,c
 11074  001DEA  0E00               	movlw	0
 11075  001DEC  6E1F               	movwf	(LCD_array@y+1)^0,c
 11076  001DEE  0E01               	movlw	1
 11077  001DF0  6E1E               	movwf	LCD_array@y^0,c
 11078  001DF2  0EBA               	movlw	low STR_4
 11079  001DF4  6E20               	movwf	LCD_array@date^0,c
 11080  001DF6  0E7F               	movlw	high STR_4
 11081  001DF8  6E21               	movwf	(LCD_array@date+1)^0,c
 11082  001DFA  ECB1  F01F         	call	_LCD_array	;wreg free
 11083  001DFE  0E01               	movlw	1
 11084  001E00  D00F               	goto	L15
 11085  001E02                     l11118:
 11086                           
 11087                           ; BSR set to: 1
 11088  001E02  0E00               	movlw	0
 11089  001E04  6E1D               	movwf	(LCD_array@x+1)^0,c
 11090  001E06  0E02               	movlw	2
 11091  001E08  6E1C               	movwf	LCD_array@x^0,c
 11092  001E0A  0E00               	movlw	0
 11093  001E0C  6E1F               	movwf	(LCD_array@y+1)^0,c
 11094  001E0E  0E01               	movlw	1
 11095  001E10  6E1E               	movwf	LCD_array@y^0,c
 11096  001E12  0EC0               	movlw	low STR_5
 11097  001E14  6E20               	movwf	LCD_array@date^0,c
 11098  001E16  0E7F               	movlw	high STR_5
 11099  001E18  6E21               	movwf	(LCD_array@date+1)^0,c
 11100  001E1A  ECB1  F01F         	call	_LCD_array	;wreg free
 11101  001E1E  0E00               	movlw	0
 11102  001E20                     L15:
 11103  001E20  6E2E               	movwf	EEPROM_init@c_ok^0,c
 11104                           
 11105                           ;EEPROM_EX.c: 44:         _delay((unsigned long)((100)*(48000000/4000.0)));
 11106  001E22  0E07               	movlw	7
 11107  001E24  0100               	movlb	0	; () banked
 11108  001E26  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11109  001E28  0E17               	movlw	23
 11110  001E2A  6F84               	movwf	??_EEPROM_init& (0+255),b
 11111  001E2C  0E6A               	movlw	106
 11112  001E2E                     u11157:
 11113  001E2E  2EE8               	decfsz	wreg,f,c
 11114  001E30  D7FE               	bra	u11157
 11115  001E32  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11116  001E34  D7FC               	bra	u11157
 11117  001E36  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11118  001E38  D7FA               	bra	u11157
 11119  001E3A  F000               	nop	
 11120  001E3C                     l11124:
 11121                           
 11122                           ;EEPROM_EX.c: 26:     while(c_ok == 0)
 11123  001E3C  502E               	movf	EEPROM_init@c_ok^0,w,c
 11124  001E3E  B4D8               	btfsc	status,2,c
 11125  001E40  D79A               	goto	l11094
 11126                           
 11127                           ;EEPROM_EX.c: 47:     c_ok=0;
 11128  001E42  0E00               	movlw	0
 11129  001E44  6E2E               	movwf	EEPROM_init@c_ok^0,c
 11130                           
 11131                           ;EEPROM_EX.c: 50:     while(c_ok == 0)
 11132  001E46  D07B               	goto	l11164
 11133  001E48                     l11128:
 11134                           
 11135                           ;EEPROM_EX.c: 51:     {;EEPROM_EX.c: 52:         i2c_start();
 11136  001E48  ECC1  F029         	call	_i2c_start	;wreg free
 11137                           
 11138                           ;EEPROM_EX.c: 53:         i2c_write(0b10100000);
 11139  001E4C  0EA0               	movlw	160
 11140  001E4E  ECA6  F024         	call	_i2c_write
 11141                           
 11142                           ;EEPROM_EX.c: 54:         i2c_write(0);
 11143  001E52  0E00               	movlw	0
 11144  001E54  ECA6  F024         	call	_i2c_write
 11145                           
 11146                           ;EEPROM_EX.c: 55:         i2c_write(2);
 11147  001E58  0E02               	movlw	2
 11148  001E5A  ECA6  F024         	call	_i2c_write
 11149                           
 11150                           ;EEPROM_EX.c: 57:         for(unsigned int j=0;j<10000;j++)
 11151  001E5E  0E00               	movlw	0
 11152  001E60  6E2D               	movwf	(EEPROM_init@j+1)^0,c
 11153  001E62  0E00               	movlw	0
 11154  001E64  6E2C               	movwf	EEPROM_init@j^0,c
 11155  001E66                     l11142:
 11156                           
 11157                           ;EEPROM_EX.c: 58:         {;EEPROM_EX.c: 59:             i2c_write(255);
 11158  001E66  0EFF               	movlw	255
 11159  001E68  ECA6  F024         	call	_i2c_write
 11160                           
 11161                           ;EEPROM_EX.c: 60:         }
 11162  001E6C  4A2C               	infsnz	EEPROM_init@j^0,f,c
 11163  001E6E  2A2D               	incf	(EEPROM_init@j+1)^0,f,c
 11164  001E70  0E10               	movlw	16
 11165  001E72  5C2C               	subwf	EEPROM_init@j^0,w,c
 11166  001E74  0E27               	movlw	39
 11167  001E76  582D               	subwfb	(EEPROM_init@j+1)^0,w,c
 11168  001E78  A0D8               	btfss	status,0,c
 11169  001E7A  D7F5               	goto	l11142
 11170                           
 11171                           ;EEPROM_EX.c: 62:         i2c_stop();
 11172  001E7C  EC40  F029         	call	_i2c_stop	;wreg free
 11173                           
 11174                           ;EEPROM_EX.c: 63:         _delay((unsigned long)((20)*(48000000/4000.0)));
 11175  001E80  0E02               	movlw	2
 11176  001E82  0100               	movlb	0	; () banked
 11177  001E84  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11178  001E86  0E38               	movlw	56
 11179  001E88  6F84               	movwf	??_EEPROM_init& (0+255),b
 11180  001E8A  0EAD               	movlw	173
 11181  001E8C                     u11167:
 11182  001E8C  2EE8               	decfsz	wreg,f,c
 11183  001E8E  D7FE               	bra	u11167
 11184  001E90  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11185  001E92  D7FC               	bra	u11167
 11186  001E94  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11187  001E96  D7FA               	bra	u11167
 11188                           
 11189                           ;EEPROM_EX.c: 67:         if(M_Read(10000,1) == 207) c_ok=1,LCD_array(3,1,"...OK");
 11190  001E98  0E27               	movlw	39
 11191  001E9A  0100               	movlb	0	; () banked
 11192  001E9C  6F69               	movwf	(M_Read@dir+1)& (0+255),b
 11193  001E9E  0E10               	movlw	16
 11194  001EA0  6F68               	movwf	M_Read@dir& (0+255),b
 11195  001EA2  0E01               	movlw	1
 11196  001EA4  6F6A               	movwf	M_Read@c_m_r& (0+255),b
 11197  001EA6  EC26  F015         	call	_M_Read	;wreg free
 11198  001EAA  C068  F084         	movff	?_M_Read,??_EEPROM_init
 11199  001EAE  C069  F085         	movff	?_M_Read+1,??_EEPROM_init+1
 11200  001EB2  C06A  F086         	movff	?_M_Read+2,??_EEPROM_init+2
 11201  001EB6  C06B  F087         	movff	?_M_Read+3,??_EEPROM_init+3
 11202  001EBA  C06C  F088         	movff	?_M_Read+4,??_EEPROM_init+4
 11203  001EBE  C06D  F089         	movff	?_M_Read+5,??_EEPROM_init+5
 11204  001EC2  C06E  F08A         	movff	?_M_Read+6,??_EEPROM_init+6
 11205  001EC6  C06F  F08B         	movff	?_M_Read+7,??_EEPROM_init+7
 11206  001ECA  0ECF               	movlw	207
 11207  001ECC  0100               	movlb	0	; () banked
 11208  001ECE  1984               	xorwf	??_EEPROM_init& (0+255),w,b
 11209  001ED0  1185               	iorwf	(??_EEPROM_init+1)& (0+255),w,b
 11210  001ED2  1186               	iorwf	(??_EEPROM_init+2)& (0+255),w,b
 11211  001ED4  1187               	iorwf	(??_EEPROM_init+3)& (0+255),w,b
 11212  001ED6  1188               	iorwf	(??_EEPROM_init+4)& (0+255),w,b
 11213  001ED8  1189               	iorwf	(??_EEPROM_init+5)& (0+255),w,b
 11214  001EDA  118A               	iorwf	(??_EEPROM_init+6)& (0+255),w,b
 11215  001EDC  118B               	iorwf	(??_EEPROM_init+7)& (0+255),w,b
 11216  001EDE  A4D8               	btfss	status,2,c
 11217  001EE0  D011               	goto	l11158
 11218                           
 11219                           ; BSR set to: 0
 11220  001EE2  0E01               	movlw	1
 11221  001EE4  6E2E               	movwf	EEPROM_init@c_ok^0,c
 11222                           
 11223                           ; BSR set to: 0
 11224  001EE6  0E00               	movlw	0
 11225  001EE8  6E1D               	movwf	(LCD_array@x+1)^0,c
 11226  001EEA  0E03               	movlw	3
 11227  001EEC  6E1C               	movwf	LCD_array@x^0,c
 11228  001EEE  0E00               	movlw	0
 11229  001EF0  6E1F               	movwf	(LCD_array@y+1)^0,c
 11230  001EF2  0E01               	movlw	1
 11231  001EF4  6E1E               	movwf	LCD_array@y^0,c
 11232  001EF6  0EBA               	movlw	low STR_4
 11233  001EF8  6E20               	movwf	LCD_array@date^0,c
 11234  001EFA  0E7F               	movlw	high STR_4
 11235  001EFC  6E21               	movwf	(LCD_array@date+1)^0,c
 11236  001EFE  ECB1  F01F         	call	_LCD_array	;wreg free
 11237  001F02  D010               	goto	l11162
 11238  001F04                     l11158:
 11239                           
 11240                           ; BSR set to: 0
 11241  001F04  0E00               	movlw	0
 11242  001F06  6E2E               	movwf	EEPROM_init@c_ok^0,c
 11243                           
 11244                           ; BSR set to: 0
 11245  001F08  0E00               	movlw	0
 11246  001F0A  6E1D               	movwf	(LCD_array@x+1)^0,c
 11247  001F0C  0E03               	movlw	3
 11248  001F0E  6E1C               	movwf	LCD_array@x^0,c
 11249  001F10  0E00               	movlw	0
 11250  001F12  6E1F               	movwf	(LCD_array@y+1)^0,c
 11251  001F14  0E01               	movlw	1
 11252  001F16  6E1E               	movwf	LCD_array@y^0,c
 11253  001F18  0EC0               	movlw	low STR_5
 11254  001F1A  6E20               	movwf	LCD_array@date^0,c
 11255  001F1C  0E7F               	movlw	high STR_5
 11256  001F1E  6E21               	movwf	(LCD_array@date+1)^0,c
 11257  001F20  ECB1  F01F         	call	_LCD_array	;wreg free
 11258  001F24                     l11162:
 11259                           
 11260                           ;EEPROM_EX.c: 69:         _delay((unsigned long)((100)*(48000000/4000.0)));
 11261  001F24  0E07               	movlw	7
 11262  001F26  0100               	movlb	0	; () banked
 11263  001F28  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11264  001F2A  0E17               	movlw	23
 11265  001F2C  6F84               	movwf	??_EEPROM_init& (0+255),b
 11266  001F2E  0E6A               	movlw	106
 11267  001F30                     u11177:
 11268  001F30  2EE8               	decfsz	wreg,f,c
 11269  001F32  D7FE               	bra	u11177
 11270  001F34  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11271  001F36  D7FC               	bra	u11177
 11272  001F38  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11273  001F3A  D7FA               	bra	u11177
 11274  001F3C  F000               	nop	
 11275  001F3E                     l11164:
 11276                           
 11277                           ;EEPROM_EX.c: 50:     while(c_ok == 0)
 11278  001F3E  502E               	movf	EEPROM_init@c_ok^0,w,c
 11279  001F40  B4D8               	btfsc	status,2,c
 11280  001F42  D782               	goto	l11128
 11281                           
 11282                           ;EEPROM_EX.c: 72:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 11283  001F44  0E3D               	movlw	61
 11284  001F46  0100               	movlb	0	; () banked
 11285  001F48  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11286  001F4A  0EE1               	movlw	225
 11287  001F4C  6F84               	movwf	??_EEPROM_init& (0+255),b
 11288  001F4E  0E3F               	movlw	63
 11289  001F50                     u11187:
 11290  001F50  2EE8               	decfsz	wreg,f,c
 11291  001F52  D7FE               	bra	u11187
 11292  001F54  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11293  001F56  D7FC               	bra	u11187
 11294  001F58  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11295  001F5A  D7FA               	bra	u11187
 11296  001F5C  D000               	nop2	
 11297                           
 11298                           ;EEPROM_EX.c: 73:     LCD_command(0x01);
 11299  001F5E  0E01               	movlw	1
 11300  001F60  EC78  F023         	call	_LCD_command
 11301                           
 11302                           ;EEPROM_EX.c: 74:     LCD_array(2,1,"     Terminado    ");
 11303  001F64  0E00               	movlw	0
 11304  001F66  6E1D               	movwf	(LCD_array@x+1)^0,c
 11305  001F68  0E02               	movlw	2
 11306  001F6A  6E1C               	movwf	LCD_array@x^0,c
 11307  001F6C  0E00               	movlw	0
 11308  001F6E  6E1F               	movwf	(LCD_array@y+1)^0,c
 11309  001F70  0E01               	movlw	1
 11310  001F72  6E1E               	movwf	LCD_array@y^0,c
 11311  001F74  0E8B               	movlw	low STR_8
 11312  001F76  6E20               	movwf	LCD_array@date^0,c
 11313  001F78  0E7E               	movlw	high STR_8
 11314  001F7A  6E21               	movwf	(LCD_array@date+1)^0,c
 11315  001F7C  ECB1  F01F         	call	_LCD_array	;wreg free
 11316                           
 11317                           ;EEPROM_EX.c: 75:     _delay((unsigned long)((1500)*(48000000/4000.0)));
 11318  001F80  0E5C               	movlw	92
 11319  001F82  0100               	movlb	0	; () banked
 11320  001F84  6F85               	movwf	(??_EEPROM_init+1)& (0+255),b
 11321  001F86  0E51               	movlw	81
 11322  001F88  6F84               	movwf	??_EEPROM_init& (0+255),b
 11323  001F8A  0E60               	movlw	96
 11324  001F8C                     u11197:
 11325  001F8C  2EE8               	decfsz	wreg,f,c
 11326  001F8E  D7FE               	bra	u11197
 11327  001F90  2F84               	decfsz	??_EEPROM_init& (0+255),f,b
 11328  001F92  D7FC               	bra	u11197
 11329  001F94  2F85               	decfsz	(??_EEPROM_init+1)& (0+255),f,b
 11330  001F96  D7FA               	bra	u11197
 11331  001F98  F000               	nop	
 11332                           
 11333                           ;EEPROM_EX.c: 76:     LCD_command(0x01);
 11334  001F9A  0E01               	movlw	1
 11335  001F9C  EC78  F023         	call	_LCD_command
 11336                           
 11337                           ;EEPROM_EX.c: 78:     GIEH = 1;
 11338  001FA0  8EF2               	bsf	4082,7,c	;volatile
 11339                           
 11340                           ;EEPROM_EX.c: 79:     GIEL = 1;
 11341  001FA2  8CF2               	bsf	4082,6,c	;volatile
 11342  001FA4  0012               	return		;funcret
 11343  001FA6                     __end_of_EEPROM_init:
 11344                           	callstack 0
 11345                           
 11346 ;; *************** function _Read_User *****************
 11347 ;; Defined at:
 11348 ;;		line 388 in file "EEPROM_EX.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;  dir             2   25[COMRAM] unsigned int 
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  MR_Dato         1   29[COMRAM] unsigned char 
 11353 ;;  MD_2            1   28[COMRAM] unsigned char 
 11354 ;;  MD_1            1   27[COMRAM] unsigned char 
 11355 ;; Return value:  Size  Location     Type
 11356 ;;                  1    wreg      unsigned char 
 11357 ;; Registers used:
 11358 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 11359 ;; Tracked objects:
 11360 ;;		On entry : 0/0
 11361 ;;		On exit  : 3F/1
 11362 ;;		Unchanged: 0/0
 11363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11364 ;;      Params:         2       0       0       0       0       0       0       0       0
 11365 ;;      Locals:         3       0       0       0       0       0       0       0       0
 11366 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11367 ;;      Totals:         5       0       0       0       0       0       0       0       0
 11368 ;;Total ram usage:        5 bytes
 11369 ;; Hardware stack levels used:    1
 11370 ;; Hardware stack levels required when called:    9
 11371 ;; This function calls:
 11372 ;;		_i2c_ack
 11373 ;;		_i2c_nack
 11374 ;;		_i2c_read
 11375 ;;		_i2c_restart
 11376 ;;		_i2c_start
 11377 ;;		_i2c_stop
 11378 ;;		_i2c_write
 11379 ;; This function is called by:
 11380 ;;		_EEPROM_init
 11381 ;;		_New_User_Pos
 11382 ;;		_Num_User
 11383 ;;		_Read_Hash_ex
 11384 ;;		_Sum_Cant_Usuarios
 11385 ;;		_E_pant2_Lcd
 11386 ;;		_Rfid_Lcd
 11387 ;; This function uses a non-reentrant model
 11388 ;;
 11389                           
 11390                           	psect	text37
 11391  004A9C                     __ptext37:
 11392                           	callstack 0
 11393  004A9C                     _Read_User:
 11394                           	callstack 17
 11395                           
 11396                           ;incstack = 0
 11397  004A9C  0E00               	movlw	0
 11398  004A9E  6E1D               	movwf	Read_User@MD_2^0,c
 11399                           
 11400                           ;EEPROM_EX.c: 391:     unsigned char MR_Dato=0;
 11401  004AA0  0E00               	movlw	0
 11402  004AA2  6E1E               	movwf	Read_User@MR_Dato^0,c
 11403                           
 11404                           ;EEPROM_EX.c: 394:     GIEL = 0;
 11405  004AA4  9CF2               	bcf	4082,6,c	;volatile
 11406                           
 11407                           ;EEPROM_EX.c: 396:     Read_Eeprom = 1;
 11408  004AA6  0E01               	movlw	1
 11409  004AA8  0101               	movlb	1	; () banked
 11410  004AAA  6F7C               	movwf	_Read_Eeprom& (0+255),b
 11411                           
 11412                           ; BSR set to: 1
 11413                           ;EEPROM_EX.c: 401:     MD_1 = (dir & 0xff00) >> 8;
 11414  004AAC  C01B  F01C         	movff	Read_User@dir+1,Read_User@MD_1
 11415                           
 11416                           ; BSR set to: 1
 11417                           ;EEPROM_EX.c: 402:     MD_2 = dir & 0x00ff;
 11418  004AB0  C01A  F01D         	movff	Read_User@dir,Read_User@MD_2
 11419                           
 11420                           ; BSR set to: 1
 11421                           ;EEPROM_EX.c: 405:     i2c_start();
 11422  004AB4  ECC1  F029         	call	_i2c_start	;wreg free
 11423                           
 11424                           ;EEPROM_EX.c: 406:     i2c_write(0b10100000);
 11425  004AB8  0EA0               	movlw	160
 11426  004ABA  ECA6  F024         	call	_i2c_write
 11427                           
 11428                           ;EEPROM_EX.c: 408:     i2c_write(MD_1);
 11429  004ABE  501C               	movf	Read_User@MD_1^0,w,c
 11430  004AC0  ECA6  F024         	call	_i2c_write
 11431                           
 11432                           ;EEPROM_EX.c: 409:     i2c_write(MD_2);
 11433  004AC4  501D               	movf	Read_User@MD_2^0,w,c
 11434  004AC6  ECA6  F024         	call	_i2c_write
 11435                           
 11436                           ;EEPROM_EX.c: 411:     i2c_restart();
 11437  004ACA  EC3C  F02A         	call	_i2c_restart	;wreg free
 11438                           
 11439                           ;EEPROM_EX.c: 412:     i2c_write(0b10100001);
 11440  004ACE  0EA1               	movlw	161
 11441  004AD0  ECA6  F024         	call	_i2c_write
 11442                           
 11443                           ;EEPROM_EX.c: 416:     MR_Dato = (i2c_read() - 48) * 10;
 11444  004AD4  EC9B  F027         	call	_i2c_read	;wreg free
 11445  004AD8  0FD0               	addlw	208
 11446  004ADA  0D0A               	mullw	10
 11447  004ADC  CFF3 F01E          	movff	prodl,Read_User@MR_Dato
 11448                           
 11449                           ;EEPROM_EX.c: 417:     i2c_ack();
 11450  004AE0  ECB1  F028         	call	_i2c_ack	;wreg free
 11451                           
 11452                           ;EEPROM_EX.c: 418:     MR_Dato = MR_Dato + (i2c_read() - 48);
 11453  004AE4  EC9B  F027         	call	_i2c_read	;wreg free
 11454  004AE8  241E               	addwf	Read_User@MR_Dato^0,w,c
 11455  004AEA  0FD0               	addlw	208
 11456  004AEC  6E1E               	movwf	Read_User@MR_Dato^0,c
 11457                           
 11458                           ;EEPROM_EX.c: 419:     i2c_nack();
 11459  004AEE  EC1A  F029         	call	_i2c_nack	;wreg free
 11460                           
 11461                           ;EEPROM_EX.c: 423:     i2c_stop();
 11462  004AF2  EC40  F029         	call	_i2c_stop	;wreg free
 11463                           
 11464                           ;EEPROM_EX.c: 425:     Read_Eeprom = 0;
 11465  004AF6  0E00               	movlw	0
 11466  004AF8  0101               	movlb	1	; () banked
 11467  004AFA  6F7C               	movwf	_Read_Eeprom& (0+255),b
 11468                           
 11469                           ; BSR set to: 1
 11470                           ;EEPROM_EX.c: 428:     GIEL = 1;
 11471  004AFC  8CF2               	bsf	4082,6,c	;volatile
 11472                           
 11473                           ; BSR set to: 1
 11474                           ;EEPROM_EX.c: 430:     return MR_Dato;
 11475  004AFE  501E               	movf	Read_User@MR_Dato^0,w,c
 11476                           
 11477                           ; BSR set to: 1
 11478  004B00  0012               	return		;funcret
 11479  004B02                     __end_of_Read_User:
 11480                           	callstack 0
 11481                           
 11482 ;; *************** function _M_Read *****************
 11483 ;; Defined at:
 11484 ;;		line 140 in file "EEPROM_EX.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;  dir             2    8[BANK0 ] unsigned int 
 11487 ;;  c_m_r           1   10[BANK0 ] unsigned char 
 11488 ;; Auto vars:     Size  Location     Type
 11489 ;;  i               1   35[BANK0 ] unsigned char 
 11490 ;;  buffer         10    0        unsigned char [10]
 11491 ;;  MR_Dato         8   27[BANK0 ] long long 
 11492 ;;  MD_2            1   26[BANK0 ] unsigned char 
 11493 ;;  MD_1            1   25[BANK0 ] unsigned char 
 11494 ;; Return value:  Size  Location     Type
 11495 ;;                  8    8[BANK0 ] long long 
 11496 ;; Registers used:
 11497 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11498 ;; Tracked objects:
 11499 ;;		On entry : 3F/0
 11500 ;;		On exit  : 3F/1
 11501 ;;		Unchanged: 0/0
 11502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11503 ;;      Params:         0       8       0       0       0       0       0       0       0
 11504 ;;      Locals:         0      11       0       0       0       0       0       0       0
 11505 ;;      Temps:          0       9       0       0       0       0       0       0       0
 11506 ;;      Totals:         0      28       0       0       0       0       0       0       0
 11507 ;;Total ram usage:       28 bytes
 11508 ;; Hardware stack levels used:    1
 11509 ;; Hardware stack levels required when called:    9
 11510 ;; This function calls:
 11511 ;;		___omul
 11512 ;;		_i2c_ack
 11513 ;;		_i2c_nack
 11514 ;;		_i2c_read
 11515 ;;		_i2c_restart
 11516 ;;		_i2c_start
 11517 ;;		_i2c_stop
 11518 ;;		_i2c_write
 11519 ;; This function is called by:
 11520 ;;		_EEPROM_init
 11521 ;;		_User_Scan
 11522 ;;		_Num_User
 11523 ;;		_Read_Hash_ex
 11524 ;;		_Rfid_Lcd
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           	psect	text38
 11529  002A4C                     __ptext38:
 11530                           	callstack 0
 11531  002A4C                     _M_Read:
 11532                           	callstack 17
 11533                           
 11534                           ; BSR set to: 0
 11535                           
 11536                           ; BSR set to: 1
 11537                           ;incstack = 0
 11538  002A4C  0E00               	movlw	0
 11539  002A4E  6F7A               	movwf	M_Read@MD_2& (0+255),b
 11540                           
 11541                           ; BSR set to: 0
 11542                           ;EEPROM_EX.c: 143:     long long MR_Dato=0;
 11543  002A50  EE20  F07B         	lfsr	2,M_Read@MR_Dato
 11544  002A54  0E07               	movlw	7
 11545  002A56                     u9541:
 11546  002A56  6ADE               	clrf	postinc2,c
 11547  002A58  06E8               	decf	wreg,f,c
 11548  002A5A  E2FD               	bc	u9541
 11549                           
 11550                           ; BSR set to: 0
 11551                           ;EEPROM_EX.c: 144:     char buffer[10];;EEPROM_EX.c: 147:     GIEL = 0;
 11552  002A5C  9CF2               	bcf	4082,6,c	;volatile
 11553                           
 11554                           ; BSR set to: 0
 11555                           ;EEPROM_EX.c: 149:     Read_Eeprom = 1;
 11556  002A5E  0E01               	movlw	1
 11557  002A60  0101               	movlb	1	; () banked
 11558  002A62  6F7C               	movwf	_Read_Eeprom& (0+255),b
 11559                           
 11560                           ; BSR set to: 1
 11561                           ;EEPROM_EX.c: 154:     MD_1 = (dir & 0xff00) >> 8;
 11562  002A64  C069  F079         	movff	M_Read@dir+1,M_Read@MD_1
 11563                           
 11564                           ; BSR set to: 1
 11565                           ;EEPROM_EX.c: 155:     MD_2 = dir & 0x00ff;
 11566  002A68  C068  F07A         	movff	M_Read@dir,M_Read@MD_2
 11567                           
 11568                           ; BSR set to: 1
 11569                           ;EEPROM_EX.c: 158:     i2c_start();
 11570  002A6C  ECC1  F029         	call	_i2c_start	;wreg free
 11571                           
 11572                           ;EEPROM_EX.c: 159:     i2c_write(0b10100000);
 11573  002A70  0EA0               	movlw	160
 11574  002A72  ECA6  F024         	call	_i2c_write
 11575                           
 11576                           ;EEPROM_EX.c: 161:     i2c_write(MD_1);
 11577  002A76  0100               	movlb	0	; () banked
 11578  002A78  5179               	movf	M_Read@MD_1& (0+255),w,b
 11579  002A7A  ECA6  F024         	call	_i2c_write
 11580                           
 11581                           ;EEPROM_EX.c: 162:     i2c_write(MD_2);
 11582  002A7E  0100               	movlb	0	; () banked
 11583  002A80  517A               	movf	M_Read@MD_2& (0+255),w,b
 11584  002A82  ECA6  F024         	call	_i2c_write
 11585                           
 11586                           ;EEPROM_EX.c: 164:     i2c_restart();
 11587  002A86  EC3C  F02A         	call	_i2c_restart	;wreg free
 11588                           
 11589                           ;EEPROM_EX.c: 165:     i2c_write(0b10100001);
 11590  002A8A  0EA1               	movlw	161
 11591  002A8C  ECA6  F024         	call	_i2c_write
 11592                           
 11593                           ;EEPROM_EX.c: 171:     for(char i=0;i<c_m_r;i++)
 11594  002A90  0E00               	movlw	0
 11595  002A92  0100               	movlb	0	; () banked
 11596  002A94  6F83               	movwf	M_Read@i& (0+255),b
 11597  002A96  D0A1               	goto	l10992
 11598  002A98                     l10978:
 11599                           
 11600                           ; BSR set to: 0
 11601                           ;EEPROM_EX.c: 172:     {;EEPROM_EX.c: 173:         if(i == (c_m_r - 1)) MR_Dato = MR_Dat
      +                          o + (i2c_read() - 48);
 11602  002A98  5183               	movf	M_Read@i& (0+255),w,b
 11603  002A9A  6F70               	movwf	??_M_Read& (0+255),b
 11604  002A9C  6B71               	clrf	(??_M_Read+1)& (0+255),b
 11605  002A9E  0EFF               	movlw	255
 11606  002AA0  6F72               	movwf	(??_M_Read+2)& (0+255),b
 11607  002AA2  0EFF               	movlw	255
 11608  002AA4  6F73               	movwf	(??_M_Read+3)& (0+255),b
 11609  002AA6  516A               	movf	M_Read@c_m_r& (0+255),w,b
 11610  002AA8  6F74               	movwf	(??_M_Read+4)& (0+255),b
 11611  002AAA  6B75               	clrf	(??_M_Read+5)& (0+255),b
 11612  002AAC  5172               	movf	(??_M_Read+2)& (0+255),w,b
 11613  002AAE  2774               	addwf	(??_M_Read+4)& (0+255),f,b
 11614  002AB0  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11615  002AB2  2375               	addwfc	(??_M_Read+5)& (0+255),f,b
 11616  002AB4  5170               	movf	??_M_Read& (0+255),w,b
 11617  002AB6  1974               	xorwf	(??_M_Read+4)& (0+255),w,b
 11618  002AB8  E134               	bnz	l10982
 11619  002ABA  5171               	movf	(??_M_Read+1)& (0+255),w,b
 11620  002ABC  1975               	xorwf	(??_M_Read+5)& (0+255),w,b
 11621  002ABE  A4D8               	btfss	status,2,c
 11622  002AC0  D030               	goto	l10982
 11623                           
 11624                           ; BSR set to: 0
 11625  002AC2  EC9B  F027         	call	_i2c_read	;wreg free
 11626  002AC6  0100               	movlb	0	; () banked
 11627  002AC8  6F70               	movwf	??_M_Read& (0+255),b
 11628  002ACA  0ED0               	movlw	208
 11629  002ACC  2570               	addwf	??_M_Read& (0+255),w,b
 11630  002ACE  6F71               	movwf	(??_M_Read+1)& (0+255),b
 11631  002AD0  6B72               	clrf	(??_M_Read+2)& (0+255),b
 11632  002AD2  0EFF               	movlw	255
 11633  002AD4  2372               	addwfc	(??_M_Read+2)& (0+255),f,b
 11634  002AD6  6B73               	clrf	(??_M_Read+3)& (0+255),b
 11635  002AD8  BF72               	btfsc	(??_M_Read+2)& (0+255),7,b
 11636  002ADA  0773               	decf	(??_M_Read+3)& (0+255),f,b
 11637  002ADC  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11638  002ADE  6F74               	movwf	(??_M_Read+4)& (0+255),b
 11639  002AE0  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11640  002AE2  6F75               	movwf	(??_M_Read+5)& (0+255),b
 11641  002AE4  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11642  002AE6  6F76               	movwf	(??_M_Read+6)& (0+255),b
 11643  002AE8  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11644  002AEA  6F77               	movwf	(??_M_Read+7)& (0+255),b
 11645  002AEC  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11646  002AEE  6F78               	movwf	(??_M_Read+8)& (0+255),b
 11647  002AF0  517B               	movf	M_Read@MR_Dato& (0+255),w,b
 11648  002AF2  2571               	addwf	(??_M_Read+1)& (0+255),w,b
 11649  002AF4  6F7B               	movwf	M_Read@MR_Dato& (0+255),b
 11650  002AF6  517C               	movf	(M_Read@MR_Dato+1)& (0+255),w,b
 11651  002AF8  2172               	addwfc	(??_M_Read+2)& (0+255),w,b
 11652  002AFA  6F7C               	movwf	(M_Read@MR_Dato+1)& (0+255),b
 11653  002AFC  517D               	movf	(M_Read@MR_Dato+2)& (0+255),w,b
 11654  002AFE  2173               	addwfc	(??_M_Read+3)& (0+255),w,b
 11655  002B00  6F7D               	movwf	(M_Read@MR_Dato+2)& (0+255),b
 11656  002B02  517E               	movf	(M_Read@MR_Dato+3)& (0+255),w,b
 11657  002B04  2174               	addwfc	(??_M_Read+4)& (0+255),w,b
 11658  002B06  6F7E               	movwf	(M_Read@MR_Dato+3)& (0+255),b
 11659  002B08  517F               	movf	(M_Read@MR_Dato+4)& (0+255),w,b
 11660  002B0A  2175               	addwfc	(??_M_Read+5)& (0+255),w,b
 11661  002B0C  6F7F               	movwf	(M_Read@MR_Dato+4)& (0+255),b
 11662  002B0E  5180               	movf	(M_Read@MR_Dato+5)& (0+255),w,b
 11663  002B10  2176               	addwfc	(??_M_Read+6)& (0+255),w,b
 11664  002B12  6F80               	movwf	(M_Read@MR_Dato+5)& (0+255),b
 11665  002B14  5181               	movf	(M_Read@MR_Dato+6)& (0+255),w,b
 11666  002B16  2177               	addwfc	(??_M_Read+7)& (0+255),w,b
 11667  002B18  6F81               	movwf	(M_Read@MR_Dato+6)& (0+255),b
 11668  002B1A  5182               	movf	(M_Read@MR_Dato+7)& (0+255),w,b
 11669  002B1C  2178               	addwfc	(??_M_Read+8)& (0+255),w,b
 11670  002B1E  6F82               	movwf	(M_Read@MR_Dato+7)& (0+255),b
 11671  002B20  D057               	goto	l10988
 11672  002B22                     l10982:
 11673                           
 11674                           ; BSR set to: 0
 11675  002B22  516A               	movf	M_Read@c_m_r& (0+255),w,b
 11676  002B24  1983               	xorwf	M_Read@i& (0+255),w,b
 11677  002B26  B4D8               	btfsc	status,2,c
 11678  002B28  D053               	goto	l10988
 11679                           
 11680                           ; BSR set to: 0
 11681  002B2A  EC9B  F027         	call	_i2c_read	;wreg free
 11682  002B2E  0100               	movlb	0	; () banked
 11683  002B30  6F70               	movwf	??_M_Read& (0+255),b
 11684  002B32  0ED0               	movlw	208
 11685  002B34  2570               	addwf	??_M_Read& (0+255),w,b
 11686  002B36  6F71               	movwf	(??_M_Read+1)& (0+255),b
 11687  002B38  6B72               	clrf	(??_M_Read+2)& (0+255),b
 11688  002B3A  0EFF               	movlw	255
 11689  002B3C  2372               	addwfc	(??_M_Read+2)& (0+255),f,b
 11690  002B3E  6B73               	clrf	(??_M_Read+3)& (0+255),b
 11691  002B40  BF72               	btfsc	(??_M_Read+2)& (0+255),7,b
 11692  002B42  0773               	decf	(??_M_Read+3)& (0+255),f,b
 11693  002B44  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11694  002B46  6F74               	movwf	(??_M_Read+4)& (0+255),b
 11695  002B48  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11696  002B4A  6F75               	movwf	(??_M_Read+5)& (0+255),b
 11697  002B4C  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11698  002B4E  6F76               	movwf	(??_M_Read+6)& (0+255),b
 11699  002B50  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11700  002B52  6F77               	movwf	(??_M_Read+7)& (0+255),b
 11701  002B54  5173               	movf	(??_M_Read+3)& (0+255),w,b
 11702  002B56  6F78               	movwf	(??_M_Read+8)& (0+255),b
 11703  002B58  517B               	movf	M_Read@MR_Dato& (0+255),w,b
 11704  002B5A  2571               	addwf	(??_M_Read+1)& (0+255),w,b
 11705  002B5C  6E1A               	movwf	___omul@multiplier^0,c
 11706  002B5E  517C               	movf	(M_Read@MR_Dato+1)& (0+255),w,b
 11707  002B60  2172               	addwfc	(??_M_Read+2)& (0+255),w,b
 11708  002B62  6E1B               	movwf	(___omul@multiplier+1)^0,c
 11709  002B64  517D               	movf	(M_Read@MR_Dato+2)& (0+255),w,b
 11710  002B66  2173               	addwfc	(??_M_Read+3)& (0+255),w,b
 11711  002B68  6E1C               	movwf	(___omul@multiplier+2)^0,c
 11712  002B6A  517E               	movf	(M_Read@MR_Dato+3)& (0+255),w,b
 11713  002B6C  2174               	addwfc	(??_M_Read+4)& (0+255),w,b
 11714  002B6E  6E1D               	movwf	(___omul@multiplier+3)^0,c
 11715  002B70  517F               	movf	(M_Read@MR_Dato+4)& (0+255),w,b
 11716  002B72  2175               	addwfc	(??_M_Read+5)& (0+255),w,b
 11717  002B74  6E1E               	movwf	(___omul@multiplier+4)^0,c
 11718  002B76  5180               	movf	(M_Read@MR_Dato+5)& (0+255),w,b
 11719  002B78  2176               	addwfc	(??_M_Read+6)& (0+255),w,b
 11720  002B7A  6E1F               	movwf	(___omul@multiplier+5)^0,c
 11721  002B7C  5181               	movf	(M_Read@MR_Dato+6)& (0+255),w,b
 11722  002B7E  2177               	addwfc	(??_M_Read+7)& (0+255),w,b
 11723  002B80  6E20               	movwf	(___omul@multiplier+6)^0,c
 11724  002B82  5182               	movf	(M_Read@MR_Dato+7)& (0+255),w,b
 11725  002B84  2178               	addwfc	(??_M_Read+8)& (0+255),w,b
 11726  002B86  6E21               	movwf	(___omul@multiplier+7)^0,c
 11727  002B88  0E0A               	movlw	10
 11728  002B8A  6E22               	movwf	___omul@multiplicand^0,c
 11729  002B8C  0E00               	movlw	0
 11730  002B8E  6E23               	movwf	(___omul@multiplicand+1)^0,c
 11731  002B90  0E00               	movlw	0
 11732  002B92  6E24               	movwf	(___omul@multiplicand+2)^0,c
 11733  002B94  0E00               	movlw	0
 11734  002B96  6E25               	movwf	(___omul@multiplicand+3)^0,c
 11735  002B98  0E00               	movlw	0
 11736  002B9A  6E26               	movwf	(___omul@multiplicand+4)^0,c
 11737  002B9C  0E00               	movlw	0
 11738  002B9E  6E27               	movwf	(___omul@multiplicand+5)^0,c
 11739  002BA0  0E00               	movlw	0
 11740  002BA2  6E28               	movwf	(___omul@multiplicand+6)^0,c
 11741  002BA4  0E00               	movlw	0
 11742  002BA6  6E29               	movwf	(___omul@multiplicand+7)^0,c
 11743  002BA8  ECF2  F022         	call	___omul	;wreg free
 11744  002BAC  C01A  F07B         	movff	?___omul,M_Read@MR_Dato
 11745  002BB0  C01B  F07C         	movff	?___omul+1,M_Read@MR_Dato+1
 11746  002BB4  C01C  F07D         	movff	?___omul+2,M_Read@MR_Dato+2
 11747  002BB8  C01D  F07E         	movff	?___omul+3,M_Read@MR_Dato+3
 11748  002BBC  C01E  F07F         	movff	?___omul+4,M_Read@MR_Dato+4
 11749  002BC0  C01F  F080         	movff	?___omul+5,M_Read@MR_Dato+5
 11750  002BC4  C020  F081         	movff	?___omul+6,M_Read@MR_Dato+6
 11751  002BC8  C021  F082         	movff	?___omul+7,M_Read@MR_Dato+7
 11752  002BCC  ECB1  F028         	call	_i2c_ack	;wreg free
 11753  002BD0                     l10988:
 11754                           
 11755                           ;EEPROM_EX.c: 176:         _delay((unsigned long)((10)*(48000000/4000000.0)));
 11756  002BD0  0E28               	movlw	40
 11757  002BD2                     u11207:
 11758  002BD2  2EE8               	decfsz	wreg,f,c
 11759  002BD4  D7FE               	bra	u11207
 11760                           
 11761                           ;EEPROM_EX.c: 177:     }
 11762  002BD6  0100               	movlb	0	; () banked
 11763  002BD8  2B83               	incf	M_Read@i& (0+255),f,b
 11764  002BDA                     l10992:
 11765                           
 11766                           ; BSR set to: 0
 11767  002BDA  516A               	movf	M_Read@c_m_r& (0+255),w,b
 11768  002BDC  5D83               	subwf	M_Read@i& (0+255),w,b
 11769  002BDE  A0D8               	btfss	status,0,c
 11770  002BE0  D75B               	goto	l10978
 11771                           
 11772                           ; BSR set to: 0
 11773                           ;EEPROM_EX.c: 180:     i2c_nack();
 11774  002BE2  EC1A  F029         	call	_i2c_nack	;wreg free
 11775                           
 11776                           ;EEPROM_EX.c: 183:     i2c_stop();
 11777  002BE6  EC40  F029         	call	_i2c_stop	;wreg free
 11778                           
 11779                           ;EEPROM_EX.c: 185:     Read_Eeprom = 0;
 11780  002BEA  0E00               	movlw	0
 11781  002BEC  0101               	movlb	1	; () banked
 11782  002BEE  6F7C               	movwf	_Read_Eeprom& (0+255),b
 11783                           
 11784                           ; BSR set to: 1
 11785                           ;EEPROM_EX.c: 188:     GIEL = 1;
 11786  002BF0  8CF2               	bsf	4082,6,c	;volatile
 11787                           
 11788                           ; BSR set to: 1
 11789                           ;EEPROM_EX.c: 190:     return MR_Dato;
 11790  002BF2  C07B  F068         	movff	M_Read@MR_Dato,?_M_Read
 11791  002BF6  C07C  F069         	movff	M_Read@MR_Dato+1,?_M_Read+1
 11792  002BFA  C07D  F06A         	movff	M_Read@MR_Dato+2,?_M_Read+2
 11793  002BFE  C07E  F06B         	movff	M_Read@MR_Dato+3,?_M_Read+3
 11794  002C02  C07F  F06C         	movff	M_Read@MR_Dato+4,?_M_Read+4
 11795  002C06  C080  F06D         	movff	M_Read@MR_Dato+5,?_M_Read+5
 11796  002C0A  C081  F06E         	movff	M_Read@MR_Dato+6,?_M_Read+6
 11797  002C0E  C082  F06F         	movff	M_Read@MR_Dato+7,?_M_Read+7
 11798                           
 11799                           ; BSR set to: 1
 11800  002C12  0012               	return		;funcret
 11801  002C14                     __end_of_M_Read:
 11802                           	callstack 0
 11803                           
 11804 ;; *************** function _i2c_restart *****************
 11805 ;; Defined at:
 11806 ;;		line 191 in file "SOFT_I2C.c"
 11807 ;; Parameters:    Size  Location     Type
 11808 ;;		None
 11809 ;; Auto vars:     Size  Location     Type
 11810 ;;		None
 11811 ;; Return value:  Size  Location     Type
 11812 ;;                  1    wreg      void 
 11813 ;; Registers used:
 11814 ;;		wreg, cstack
 11815 ;; Tracked objects:
 11816 ;;		On entry : 0/1
 11817 ;;		On exit  : 0/0
 11818 ;;		Unchanged: 0/0
 11819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11820 ;;      Params:         0       0       0       0       0       0       0       0       0
 11821 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11822 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11823 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11824 ;;Total ram usage:        0 bytes
 11825 ;; Hardware stack levels used:    1
 11826 ;; Hardware stack levels required when called:    8
 11827 ;; This function calls:
 11828 ;;		_i2c_start
 11829 ;;		_i2c_stop
 11830 ;; This function is called by:
 11831 ;;		_M_Read
 11832 ;;		_Read_User
 11833 ;; This function uses a non-reentrant model
 11834 ;;
 11835                           
 11836                           	psect	text39
 11837  005478                     __ptext39:
 11838                           	callstack 0
 11839  005478                     _i2c_restart:
 11840                           	callstack 17
 11841                           
 11842                           ;SOFT_I2C.c: 193:     i2c_stop();
 11843                           
 11844                           ; BSR set to: 1
 11845                           ;incstack = 0
 11846  005478  EC40  F029         	call	_i2c_stop	;wreg free
 11847                           
 11848                           ;SOFT_I2C.c: 194:     i2c_start();
 11849  00547C  ECC1  F029         	call	_i2c_start	;wreg free
 11850  005480  0012               	return		;funcret
 11851  005482                     __end_of_i2c_restart:
 11852                           	callstack 0
 11853                           
 11854 ;; *************** function _i2c_read *****************
 11855 ;; Defined at:
 11856 ;;		line 121 in file "SOFT_I2C.c"
 11857 ;; Parameters:    Size  Location     Type
 11858 ;;		None
 11859 ;; Auto vars:     Size  Location     Type
 11860 ;;  i               1   24[COMRAM] unsigned char 
 11861 ;;  dato            1   23[COMRAM] unsigned char 
 11862 ;; Return value:  Size  Location     Type
 11863 ;;                  1    wreg      unsigned char 
 11864 ;; Registers used:
 11865 ;;		wreg, status,2, status,0
 11866 ;; Tracked objects:
 11867 ;;		On entry : 0/1
 11868 ;;		On exit  : 0/0
 11869 ;;		Unchanged: 0/0
 11870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11871 ;;      Params:         0       0       0       0       0       0       0       0       0
 11872 ;;      Locals:         2       0       0       0       0       0       0       0       0
 11873 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11874 ;;      Totals:         2       0       0       0       0       0       0       0       0
 11875 ;;Total ram usage:        2 bytes
 11876 ;; Hardware stack levels used:    1
 11877 ;; Hardware stack levels required when called:    7
 11878 ;; This function calls:
 11879 ;;		Nothing
 11880 ;; This function is called by:
 11881 ;;		_M_Read
 11882 ;;		_Read_User
 11883 ;; This function uses a non-reentrant model
 11884 ;;
 11885                           
 11886                           	psect	text40
 11887  004F36                     __ptext40:
 11888                           	callstack 0
 11889  004F36                     _i2c_read:
 11890                           	callstack 18
 11891                           
 11892                           ;SOFT_I2C.c: 123:     char dato=0;
 11893                           
 11894                           ;incstack = 0
 11895  004F36  0E00               	movlw	0
 11896  004F38  6E18               	movwf	i2c_read@dato^0,c
 11897                           
 11898                           ;SOFT_I2C.c: 126:     TRISCbits.TRISC0 = 1;
 11899  004F3A  8094               	bsf	148,0,c	;volatile
 11900                           
 11901                           ;SOFT_I2C.c: 129:     if(PORTCbits.RC1 == 1)
 11902  004F3C  A282               	btfss	130,1,c	;volatile
 11903  004F3E  D002               	goto	l10670
 11904                           
 11905                           ;SOFT_I2C.c: 130:     {;SOFT_I2C.c: 131:         PORTCbits.RC1 = 0;
 11906  004F40  9282               	bcf	130,1,c	;volatile
 11907                           
 11908                           ;SOFT_I2C.c: 132:         TRISCbits.TRISC1 = 0;
 11909  004F42  9294               	bcf	148,1,c	;volatile
 11910  004F44                     l10670:
 11911                           
 11912                           ;SOFT_I2C.c: 135:     for(char i=0;i<8;i++)
 11913  004F44  0E00               	movlw	0
 11914  004F46  6E19               	movwf	i2c_read@i^0,c
 11915  004F48                     l10676:
 11916                           
 11917                           ;SOFT_I2C.c: 136:     {;SOFT_I2C.c: 137:         _delay((unsigned long)((5)*(48000000/40
      +                          00000.0)));
 11918  004F48  0E14               	movlw	20
 11919  004F4A                     u11217:
 11920  004F4A  2EE8               	decfsz	wreg,f,c
 11921  004F4C  D7FE               	bra	u11217
 11922                           
 11923                           ;SOFT_I2C.c: 138:         dato <<= 1;
 11924  004F4E  90D8               	bcf	status,0,c
 11925  004F50  3618               	rlcf	i2c_read@dato^0,f,c
 11926                           
 11927                           ;SOFT_I2C.c: 139:         TRISCbits.TRISC1 = 1;
 11928  004F52  8294               	bsf	148,1,c	;volatile
 11929                           
 11930                           ;SOFT_I2C.c: 140:         _delay((unsigned long)((2)*(48000000/4000000.0)));
 11931  004F54  0E08               	movlw	8
 11932  004F56                     u11227:
 11933  004F56  2EE8               	decfsz	wreg,f,c
 11934  004F58  D7FE               	bra	u11227
 11935                           
 11936                           ;SOFT_I2C.c: 141:         if(PORTCbits.RC0 == 1) dato |= 1;
 11937  004F5A  B082               	btfsc	130,0,c	;volatile
 11938  004F5C  8018               	bsf	i2c_read@dato^0,0,c
 11939                           
 11940                           ;SOFT_I2C.c: 142:         _delay((unsigned long)((3)*(48000000/4000000.0)));
 11941  004F5E  0E0C               	movlw	12
 11942  004F60                     u11237:
 11943  004F60  2EE8               	decfsz	wreg,f,c
 11944  004F62  D7FE               	bra	u11237
 11945                           
 11946                           ;SOFT_I2C.c: 144:         if(PORTCbits.RC1 == 1)
 11947  004F64  A282               	btfss	130,1,c	;volatile
 11948  004F66  D002               	goto	l10694
 11949                           
 11950                           ;SOFT_I2C.c: 145:         {;SOFT_I2C.c: 146:             TRISCbits.TRISC1 = 0;
 11951  004F68  9294               	bcf	148,1,c	;volatile
 11952                           
 11953                           ;SOFT_I2C.c: 147:             PORTCbits.RC1 = 0;
 11954  004F6A  9282               	bcf	130,1,c	;volatile
 11955  004F6C                     l10694:
 11956                           
 11957                           ;SOFT_I2C.c: 149:     }
 11958  004F6C  2A19               	incf	i2c_read@i^0,f,c
 11959  004F6E  0E07               	movlw	7
 11960  004F70  6419               	cpfsgt	i2c_read@i^0,c
 11961  004F72  D7EA               	goto	l10676
 11962                           
 11963                           ;SOFT_I2C.c: 151:     return dato;
 11964  004F74  5018               	movf	i2c_read@dato^0,w,c
 11965  004F76  0012               	return		;funcret
 11966  004F78                     __end_of_i2c_read:
 11967                           	callstack 0
 11968                           
 11969 ;; *************** function _i2c_nack *****************
 11970 ;; Defined at:
 11971 ;;		line 154 in file "SOFT_I2C.c"
 11972 ;; Parameters:    Size  Location     Type
 11973 ;;		None
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;		None
 11976 ;; Return value:  Size  Location     Type
 11977 ;;                  1    wreg      void 
 11978 ;; Registers used:
 11979 ;;		wreg
 11980 ;; Tracked objects:
 11981 ;;		On entry : 0/1
 11982 ;;		On exit  : 0/0
 11983 ;;		Unchanged: 0/0
 11984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 11985 ;;      Params:         0       0       0       0       0       0       0       0       0
 11986 ;;      Locals:         0       0       0       0       0       0       0       0       0
 11987 ;;      Temps:          0       0       0       0       0       0       0       0       0
 11988 ;;      Totals:         0       0       0       0       0       0       0       0       0
 11989 ;;Total ram usage:        0 bytes
 11990 ;; Hardware stack levels used:    1
 11991 ;; Hardware stack levels required when called:    7
 11992 ;; This function calls:
 11993 ;;		Nothing
 11994 ;; This function is called by:
 11995 ;;		_M_Read
 11996 ;;		_Read_User
 11997 ;; This function uses a non-reentrant model
 11998 ;;
 11999                           
 12000                           	psect	text41
 12001  005234                     __ptext41:
 12002                           	callstack 0
 12003  005234                     _i2c_nack:
 12004                           	callstack 18
 12005                           
 12006                           ;SOFT_I2C.c: 156:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 12007                           
 12008                           ;incstack = 0
 12009  005234  0E14               	movlw	20
 12010  005236                     u11247:
 12011  005236  2EE8               	decfsz	wreg,f,c
 12012  005238  D7FE               	bra	u11247
 12013                           
 12014                           ;SOFT_I2C.c: 157:     TRISCbits.TRISC0 = 1;
 12015  00523A  8094               	bsf	148,0,c	;volatile
 12016                           
 12017                           ;SOFT_I2C.c: 158:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 12018  00523C  0E04               	movlw	4
 12019  00523E                     u11257:
 12020  00523E  2EE8               	decfsz	wreg,f,c
 12021  005240  D7FE               	bra	u11257
 12022                           
 12023                           ;SOFT_I2C.c: 159:     TRISCbits.TRISC1 = 1;
 12024  005242  8294               	bsf	148,1,c	;volatile
 12025                           
 12026                           ;SOFT_I2C.c: 160:     _delay((unsigned long)((4)*(48000000/4000000.0)));
 12027  005244  0E10               	movlw	16
 12028  005246                     u11267:
 12029  005246  2EE8               	decfsz	wreg,f,c
 12030  005248  D7FE               	bra	u11267
 12031                           
 12032                           ;SOFT_I2C.c: 161:     PORTCbits.RC1 = 0;
 12033  00524A  9282               	bcf	130,1,c	;volatile
 12034                           
 12035                           ;SOFT_I2C.c: 162:     TRISCbits.TRISC1 = 0;
 12036  00524C  9294               	bcf	148,1,c	;volatile
 12037                           
 12038                           ;SOFT_I2C.c: 163:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 12039  00524E  0E14               	movlw	20
 12040  005250                     u11277:
 12041  005250  2EE8               	decfsz	wreg,f,c
 12042  005252  D7FE               	bra	u11277
 12043                           
 12044                           ;SOFT_I2C.c: 164:     PORTCbits.RC0 = 0;
 12045  005254  9082               	bcf	130,0,c	;volatile
 12046                           
 12047                           ;SOFT_I2C.c: 165:     TRISCbits.TRISC0 = 0;
 12048  005256  9094               	bcf	148,0,c	;volatile
 12049  005258  0012               	return		;funcret
 12050  00525A                     __end_of_i2c_nack:
 12051                           	callstack 0
 12052                           
 12053 ;; *************** function _i2c_ack *****************
 12054 ;; Defined at:
 12055 ;;		line 170 in file "SOFT_I2C.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;		None
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;		None
 12060 ;; Return value:  Size  Location     Type
 12061 ;;                  1    wreg      void 
 12062 ;; Registers used:
 12063 ;;		wreg
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/1
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0
 12070 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12071 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12072 ;;      Totals:         0       0       0       0       0       0       0       0       0
 12073 ;;Total ram usage:        0 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    7
 12076 ;; This function calls:
 12077 ;;		Nothing
 12078 ;; This function is called by:
 12079 ;;		_M_Read
 12080 ;;		_Read_User
 12081 ;; This function uses a non-reentrant model
 12082 ;;
 12083                           
 12084                           	psect	text42
 12085  005162                     __ptext42:
 12086                           	callstack 0
 12087  005162                     _i2c_ack:
 12088                           	callstack 18
 12089                           
 12090                           ;SOFT_I2C.c: 172:     if(PORTCbits.RC1 == 1)
 12091                           
 12092                           ;incstack = 0
 12093  005162  A282               	btfss	130,1,c	;volatile
 12094  005164  D002               	goto	l10722
 12095                           
 12096                           ;SOFT_I2C.c: 173:     {;SOFT_I2C.c: 174:         PORTCbits.RC1 = 0;
 12097  005166  9282               	bcf	130,1,c	;volatile
 12098                           
 12099                           ;SOFT_I2C.c: 175:         TRISCbits.TRISC1 = 0;
 12100  005168  9294               	bcf	148,1,c	;volatile
 12101  00516A                     l10722:
 12102                           
 12103                           ;SOFT_I2C.c: 177:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 12104  00516A  0E14               	movlw	20
 12105  00516C                     u11287:
 12106  00516C  2EE8               	decfsz	wreg,f,c
 12107  00516E  D7FE               	bra	u11287
 12108                           
 12109                           ;SOFT_I2C.c: 178:     PORTCbits.RC0 = 0;
 12110  005170  9082               	bcf	130,0,c	;volatile
 12111                           
 12112                           ;SOFT_I2C.c: 179:     TRISCbits.TRISC0 = 0;
 12113  005172  9094               	bcf	148,0,c	;volatile
 12114                           
 12115                           ;SOFT_I2C.c: 180:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 12116  005174  0E04               	movlw	4
 12117  005176                     u11297:
 12118  005176  2EE8               	decfsz	wreg,f,c
 12119  005178  D7FE               	bra	u11297
 12120                           
 12121                           ;SOFT_I2C.c: 181:     TRISCbits.TRISC1 = 1;
 12122  00517A  8294               	bsf	148,1,c	;volatile
 12123                           
 12124                           ;SOFT_I2C.c: 182:     _delay((unsigned long)((3)*(48000000/4000000.0)));
 12125  00517C  0E0C               	movlw	12
 12126  00517E                     u11307:
 12127  00517E  2EE8               	decfsz	wreg,f,c
 12128  005180  D7FE               	bra	u11307
 12129                           
 12130                           ;SOFT_I2C.c: 183:     PORTCbits.RC1 = 0;
 12131  005182  9282               	bcf	130,1,c	;volatile
 12132                           
 12133                           ;SOFT_I2C.c: 184:     TRISCbits.TRISC1 = 0;
 12134  005184  9294               	bcf	148,1,c	;volatile
 12135                           
 12136                           ;SOFT_I2C.c: 185:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 12137  005186  0E04               	movlw	4
 12138  005188                     u11317:
 12139  005188  2EE8               	decfsz	wreg,f,c
 12140  00518A  D7FE               	bra	u11317
 12141                           
 12142                           ;SOFT_I2C.c: 186:     TRISCbits.TRISC0 = 1;
 12143  00518C  8094               	bsf	148,0,c	;volatile
 12144  00518E  0012               	return		;funcret
 12145  005190                     __end_of_i2c_ack:
 12146                           	callstack 0
 12147                           
 12148 ;; *************** function ___omul *****************
 12149 ;; Defined at:
 12150 ;;		line 91 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\Umul64.c"
 12151 ;; Parameters:    Size  Location     Type
 12152 ;;  multiplier      8   25[COMRAM] unsigned long long 
 12153 ;;  multiplicand    8   33[COMRAM] unsigned long long 
 12154 ;; Auto vars:     Size  Location     Type
 12155 ;;  product         8    0[BANK0 ] unsigned long long 
 12156 ;; Return value:  Size  Location     Type
 12157 ;;                  8   25[COMRAM] unsigned long long 
 12158 ;; Registers used:
 12159 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12160 ;; Tracked objects:
 12161 ;;		On entry : 0/0
 12162 ;;		On exit  : 0/0
 12163 ;;		Unchanged: 0/0
 12164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12165 ;;      Params:        16       0       0       0       0       0       0       0       0
 12166 ;;      Locals:         0       8       0       0       0       0       0       0       0
 12167 ;;      Temps:          0       0       0       0       0       0       0       0       0
 12168 ;;      Totals:        16       8       0       0       0       0       0       0       0
 12169 ;;Total ram usage:       24 bytes
 12170 ;; Hardware stack levels used:    1
 12171 ;; Hardware stack levels required when called:    7
 12172 ;; This function calls:
 12173 ;;		Nothing
 12174 ;; This function is called by:
 12175 ;;		_M_Write
 12176 ;;		_M_Read
 12177 ;; This function uses a non-reentrant model
 12178 ;;
 12179                           
 12180                           	psect	text43
 12181  0045E4                     __ptext43:
 12182                           	callstack 0
 12183  0045E4                     ___omul:
 12184                           	callstack 18
 12185                           
 12186                           ;incstack = 0
 12187  0045E4  EE20  F060         	lfsr	2,___omul@product
 12188  0045E8  0E07               	movlw	7
 12189  0045EA                     u9481:
 12190  0045EA  6ADE               	clrf	postinc2,c
 12191  0045EC  06E8               	decf	wreg,f,c
 12192  0045EE  E2FD               	bc	u9481
 12193  0045F0                     l10880:
 12194  0045F0  A01A               	btfss	___omul@multiplier^0,0,c
 12195  0045F2  D011               	goto	l10884
 12196  0045F4  5022               	movf	___omul@multiplicand^0,w,c
 12197  0045F6  0100               	movlb	0	; () banked
 12198  0045F8  2760               	addwf	___omul@product& (0+255),f,b
 12199  0045FA  5023               	movf	(___omul@multiplicand+1)^0,w,c
 12200  0045FC  2361               	addwfc	(___omul@product+1)& (0+255),f,b
 12201  0045FE  5024               	movf	(___omul@multiplicand+2)^0,w,c
 12202  004600  2362               	addwfc	(___omul@product+2)& (0+255),f,b
 12203  004602  5025               	movf	(___omul@multiplicand+3)^0,w,c
 12204  004604  2363               	addwfc	(___omul@product+3)& (0+255),f,b
 12205  004606  5026               	movf	(___omul@multiplicand+4)^0,w,c
 12206  004608  2364               	addwfc	(___omul@product+4)& (0+255),f,b
 12207  00460A  5027               	movf	(___omul@multiplicand+5)^0,w,c
 12208  00460C  2365               	addwfc	(___omul@product+5)& (0+255),f,b
 12209  00460E  5028               	movf	(___omul@multiplicand+6)^0,w,c
 12210  004610  2366               	addwfc	(___omul@product+6)& (0+255),f,b
 12211  004612  5029               	movf	(___omul@multiplicand+7)^0,w,c
 12212  004614  2367               	addwfc	(___omul@product+7)& (0+255),f,b
 12213  004616                     l10884:
 12214  004616  90D8               	bcf	status,0,c
 12215  004618  3622               	rlcf	___omul@multiplicand^0,f,c
 12216  00461A  3623               	rlcf	(___omul@multiplicand+1)^0,f,c
 12217  00461C  3624               	rlcf	(___omul@multiplicand+2)^0,f,c
 12218  00461E  3625               	rlcf	(___omul@multiplicand+3)^0,f,c
 12219  004620  3626               	rlcf	(___omul@multiplicand+4)^0,f,c
 12220  004622  3627               	rlcf	(___omul@multiplicand+5)^0,f,c
 12221  004624  3628               	rlcf	(___omul@multiplicand+6)^0,f,c
 12222  004626  3629               	rlcf	(___omul@multiplicand+7)^0,f,c
 12223  004628  90D8               	bcf	status,0,c
 12224  00462A  3221               	rrcf	(___omul@multiplier+7)^0,f,c
 12225  00462C  3220               	rrcf	(___omul@multiplier+6)^0,f,c
 12226  00462E  321F               	rrcf	(___omul@multiplier+5)^0,f,c
 12227  004630  321E               	rrcf	(___omul@multiplier+4)^0,f,c
 12228  004632  321D               	rrcf	(___omul@multiplier+3)^0,f,c
 12229  004634  321C               	rrcf	(___omul@multiplier+2)^0,f,c
 12230  004636  321B               	rrcf	(___omul@multiplier+1)^0,f,c
 12231  004638  321A               	rrcf	___omul@multiplier^0,f,c
 12232  00463A  501A               	movf	___omul@multiplier^0,w,c
 12233  00463C  101B               	iorwf	(___omul@multiplier+1)^0,w,c
 12234  00463E  101C               	iorwf	(___omul@multiplier+2)^0,w,c
 12235  004640  101D               	iorwf	(___omul@multiplier+3)^0,w,c
 12236  004642  101E               	iorwf	(___omul@multiplier+4)^0,w,c
 12237  004644  101F               	iorwf	(___omul@multiplier+5)^0,w,c
 12238  004646  1020               	iorwf	(___omul@multiplier+6)^0,w,c
 12239  004648  1021               	iorwf	(___omul@multiplier+7)^0,w,c
 12240  00464A  A4D8               	btfss	status,2,c
 12241  00464C  D7D1               	goto	l10880
 12242  00464E  C060  F01A         	movff	___omul@product,?___omul
 12243  004652  C061  F01B         	movff	___omul@product+1,?___omul+1
 12244  004656  C062  F01C         	movff	___omul@product+2,?___omul+2
 12245  00465A  C063  F01D         	movff	___omul@product+3,?___omul+3
 12246  00465E  C064  F01E         	movff	___omul@product+4,?___omul+4
 12247  004662  C065  F01F         	movff	___omul@product+5,?___omul+5
 12248  004666  C066  F020         	movff	___omul@product+6,?___omul+6
 12249  00466A  C067  F021         	movff	___omul@product+7,?___omul+7
 12250  00466E  0012               	return		;funcret
 12251  004670                     __end_of___omul:
 12252                           	callstack 0
 12253                           
 12254 ;; *************** function _Easter_Egg *****************
 12255 ;; Defined at:
 12256 ;;		line 419 in file "Task1.c"
 12257 ;; Parameters:    Size  Location     Type
 12258 ;;		None
 12259 ;; Auto vars:     Size  Location     Type
 12260 ;;		None
 12261 ;; Return value:  Size  Location     Type
 12262 ;;                  1    wreg      void 
 12263 ;; Registers used:
 12264 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 12265 ;; Tracked objects:
 12266 ;;		On entry : 3F/0
 12267 ;;		On exit  : 0/0
 12268 ;;		Unchanged: 0/0
 12269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12270 ;;      Params:         0       0       0       0       0       0       0       0       0
 12271 ;;      Locals:         0       0       0       0       0       0       0       0       0
 12272 ;;      Temps:          2       0       0       0       0       0       0       0       0
 12273 ;;      Totals:         2       0       0       0       0       0       0       0       0
 12274 ;;Total ram usage:        2 bytes
 12275 ;; Hardware stack levels used:    1
 12276 ;; Hardware stack levels required when called:   10
 12277 ;; This function calls:
 12278 ;;		_LCD_array
 12279 ;;		_LCD_command
 12280 ;; This function is called by:
 12281 ;;		_E_Teclado_Lcd
 12282 ;; This function uses a non-reentrant model
 12283 ;;
 12284                           
 12285                           	psect	text44
 12286  0032F4                     __ptext44:
 12287                           	callstack 0
 12288  0032F4                     _Easter_Egg:
 12289                           	callstack 18
 12290                           
 12291                           ; BSR set to: 0
 12292                           ;Task1.c: 421:     LCD_command(0x01);
 12293                           
 12294                           ;incstack = 0
 12295  0032F4  0E01               	movlw	1
 12296  0032F6  EC78  F023         	call	_LCD_command
 12297                           
 12298                           ;Task1.c: 422:     LCD_array(1,1,"*-*-*-*-*-*-*-*-*-*-");
 12299  0032FA  0E00               	movlw	0
 12300  0032FC  6E1D               	movwf	(LCD_array@x+1)^0,c
 12301  0032FE  0E01               	movlw	1
 12302  003300  6E1C               	movwf	LCD_array@x^0,c
 12303  003302  0E00               	movlw	0
 12304  003304  6E1F               	movwf	(LCD_array@y+1)^0,c
 12305  003306  0E01               	movlw	1
 12306  003308  6E1E               	movwf	LCD_array@y^0,c
 12307  00330A  0E9A               	movlw	low STR_82
 12308  00330C  6E20               	movwf	LCD_array@date^0,c
 12309  00330E  0E7D               	movlw	high STR_82
 12310  003310  6E21               	movwf	(LCD_array@date+1)^0,c
 12311  003312  ECB1  F01F         	call	_LCD_array	;wreg free
 12312                           
 12313                           ;Task1.c: 423:     LCD_array(2,1," EASTER EGG FUNTION ");
 12314  003316  0E00               	movlw	0
 12315  003318  6E1D               	movwf	(LCD_array@x+1)^0,c
 12316  00331A  0E02               	movlw	2
 12317  00331C  6E1C               	movwf	LCD_array@x^0,c
 12318  00331E  0E00               	movlw	0
 12319  003320  6E1F               	movwf	(LCD_array@y+1)^0,c
 12320  003322  0E01               	movlw	1
 12321  003324  6E1E               	movwf	LCD_array@y^0,c
 12322  003326  0E70               	movlw	low STR_83
 12323  003328  6E20               	movwf	LCD_array@date^0,c
 12324  00332A  0E7D               	movlw	high STR_83
 12325  00332C  6E21               	movwf	(LCD_array@date+1)^0,c
 12326  00332E  ECB1  F01F         	call	_LCD_array	;wreg free
 12327                           
 12328                           ;Task1.c: 424:     LCD_array(3,1,":) :) :) :) :) :) :)");
 12329  003332  0E00               	movlw	0
 12330  003334  6E1D               	movwf	(LCD_array@x+1)^0,c
 12331  003336  0E03               	movlw	3
 12332  003338  6E1C               	movwf	LCD_array@x^0,c
 12333  00333A  0E00               	movlw	0
 12334  00333C  6E1F               	movwf	(LCD_array@y+1)^0,c
 12335  00333E  0E01               	movlw	1
 12336  003340  6E1E               	movwf	LCD_array@y^0,c
 12337  003342  0E85               	movlw	low STR_84
 12338  003344  6E20               	movwf	LCD_array@date^0,c
 12339  003346  0E7D               	movlw	high STR_84
 12340  003348  6E21               	movwf	(LCD_array@date+1)^0,c
 12341  00334A  ECB1  F01F         	call	_LCD_array	;wreg free
 12342                           
 12343                           ;Task1.c: 425:     LCD_array(4,1,"????????????????????");
 12344  00334E  0E00               	movlw	0
 12345  003350  6E1D               	movwf	(LCD_array@x+1)^0,c
 12346  003352  0E04               	movlw	4
 12347  003354  6E1C               	movwf	LCD_array@x^0,c
 12348  003356  0E00               	movlw	0
 12349  003358  6E1F               	movwf	(LCD_array@y+1)^0,c
 12350  00335A  0E01               	movlw	1
 12351  00335C  6E1E               	movwf	LCD_array@y^0,c
 12352  00335E  0EAF               	movlw	low STR_85
 12353  003360  6E20               	movwf	LCD_array@date^0,c
 12354  003362  0E7D               	movlw	high STR_85
 12355  003364  6E21               	movwf	(LCD_array@date+1)^0,c
 12356  003366  ECB1  F01F         	call	_LCD_array	;wreg free
 12357                           
 12358                           ;Task1.c: 426:     _delay((unsigned long)((2000)*(48000000/4000.0)));
 12359  00336A  0E7A               	movlw	122
 12360  00336C  6E25               	movwf	(??_Easter_Egg+1)^0,c
 12361  00336E  0EC1               	movlw	193
 12362  003370  6E24               	movwf	??_Easter_Egg^0,c
 12363  003372  0E82               	movlw	130
 12364  003374                     u11327:
 12365  003374  2EE8               	decfsz	wreg,f,c
 12366  003376  D7FE               	bra	u11327
 12367  003378  2E24               	decfsz	??_Easter_Egg^0,f,c
 12368  00337A  D7FC               	bra	u11327
 12369  00337C  2E25               	decfsz	(??_Easter_Egg+1)^0,f,c
 12370  00337E  D7FA               	bra	u11327
 12371                           
 12372                           ;Task1.c: 428:     LCD_command(0x01);
 12373  003380  0E01               	movlw	1
 12374  003382  EC78  F023         	call	_LCD_command
 12375                           
 12376                           ;Task1.c: 429:     LCD_array(2,1,"        3...        ");
 12377  003386  0E00               	movlw	0
 12378  003388  6E1D               	movwf	(LCD_array@x+1)^0,c
 12379  00338A  0E02               	movlw	2
 12380  00338C  6E1C               	movwf	LCD_array@x^0,c
 12381  00338E  0E00               	movlw	0
 12382  003390  6E1F               	movwf	(LCD_array@y+1)^0,c
 12383  003392  0E01               	movlw	1
 12384  003394  6E1E               	movwf	LCD_array@y^0,c
 12385  003396  0E07               	movlw	low STR_86
 12386  003398  6E20               	movwf	LCD_array@date^0,c
 12387  00339A  0E7D               	movlw	high STR_86
 12388  00339C  6E21               	movwf	(LCD_array@date+1)^0,c
 12389  00339E  ECB1  F01F         	call	_LCD_array	;wreg free
 12390                           
 12391                           ;Task1.c: 430:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 12392  0033A2  0E3D               	movlw	61
 12393  0033A4  6E25               	movwf	(??_Easter_Egg+1)^0,c
 12394  0033A6  0EE1               	movlw	225
 12395  0033A8  6E24               	movwf	??_Easter_Egg^0,c
 12396  0033AA  0E40               	movlw	64
 12397  0033AC                     u11337:
 12398  0033AC  2EE8               	decfsz	wreg,f,c
 12399  0033AE  D7FE               	bra	u11337
 12400  0033B0  2E24               	decfsz	??_Easter_Egg^0,f,c
 12401  0033B2  D7FC               	bra	u11337
 12402  0033B4  2E25               	decfsz	(??_Easter_Egg+1)^0,f,c
 12403  0033B6  D7FA               	bra	u11337
 12404                           
 12405                           ;Task1.c: 431:     LCD_command(0x01);
 12406  0033B8  0E01               	movlw	1
 12407  0033BA  EC78  F023         	call	_LCD_command
 12408                           
 12409                           ;Task1.c: 432:     LCD_array(2,1,"        2...        ");
 12410  0033BE  0E00               	movlw	0
 12411  0033C0  6E1D               	movwf	(LCD_array@x+1)^0,c
 12412  0033C2  0E02               	movlw	2
 12413  0033C4  6E1C               	movwf	LCD_array@x^0,c
 12414  0033C6  0E00               	movlw	0
 12415  0033C8  6E1F               	movwf	(LCD_array@y+1)^0,c
 12416  0033CA  0E01               	movlw	1
 12417  0033CC  6E1E               	movwf	LCD_array@y^0,c
 12418  0033CE  0EF2               	movlw	low STR_87
 12419  0033D0  6E20               	movwf	LCD_array@date^0,c
 12420  0033D2  0E7C               	movlw	high STR_87
 12421  0033D4  6E21               	movwf	(LCD_array@date+1)^0,c
 12422  0033D6  ECB1  F01F         	call	_LCD_array	;wreg free
 12423                           
 12424                           ;Task1.c: 433:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 12425  0033DA  0E3D               	movlw	61
 12426  0033DC  6E25               	movwf	(??_Easter_Egg+1)^0,c
 12427  0033DE  0EE1               	movlw	225
 12428  0033E0  6E24               	movwf	??_Easter_Egg^0,c
 12429  0033E2  0E40               	movlw	64
 12430  0033E4                     u11347:
 12431  0033E4  2EE8               	decfsz	wreg,f,c
 12432  0033E6  D7FE               	bra	u11347
 12433  0033E8  2E24               	decfsz	??_Easter_Egg^0,f,c
 12434  0033EA  D7FC               	bra	u11347
 12435  0033EC  2E25               	decfsz	(??_Easter_Egg+1)^0,f,c
 12436  0033EE  D7FA               	bra	u11347
 12437                           
 12438                           ;Task1.c: 434:     LCD_command(0x01);
 12439  0033F0  0E01               	movlw	1
 12440  0033F2  EC78  F023         	call	_LCD_command
 12441                           
 12442                           ;Task1.c: 435:     LCD_array(2,1,"        1...        ");
 12443  0033F6  0E00               	movlw	0
 12444  0033F8  6E1D               	movwf	(LCD_array@x+1)^0,c
 12445  0033FA  0E02               	movlw	2
 12446  0033FC  6E1C               	movwf	LCD_array@x^0,c
 12447  0033FE  0E00               	movlw	0
 12448  003400  6E1F               	movwf	(LCD_array@y+1)^0,c
 12449  003402  0E01               	movlw	1
 12450  003404  6E1E               	movwf	LCD_array@y^0,c
 12451  003406  0EDD               	movlw	low STR_88
 12452  003408  6E20               	movwf	LCD_array@date^0,c
 12453  00340A  0E7C               	movlw	high STR_88
 12454  00340C  6E21               	movwf	(LCD_array@date+1)^0,c
 12455  00340E  ECB1  F01F         	call	_LCD_array	;wreg free
 12456                           
 12457                           ;Task1.c: 436:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 12458  003412  0E3D               	movlw	61
 12459  003414  6E25               	movwf	(??_Easter_Egg+1)^0,c
 12460  003416  0EE1               	movlw	225
 12461  003418  6E24               	movwf	??_Easter_Egg^0,c
 12462  00341A  0E40               	movlw	64
 12463  00341C                     u11357:
 12464  00341C  2EE8               	decfsz	wreg,f,c
 12465  00341E  D7FE               	bra	u11357
 12466  003420  2E24               	decfsz	??_Easter_Egg^0,f,c
 12467  003422  D7FC               	bra	u11357
 12468  003424  2E25               	decfsz	(??_Easter_Egg+1)^0,f,c
 12469  003426  D7FA               	bra	u11357
 12470                           
 12471                           ;Task1.c: 437:     LCD_command(0x01);
 12472  003428  0E01               	movlw	1
 12473  00342A  EC78  F023         	call	_LCD_command
 12474                           
 12475                           ;Task1.c: 438:     LCD_array(2,1,"  AUTODESTRUCCION   ");
 12476  00342E  0E00               	movlw	0
 12477  003430  6E1D               	movwf	(LCD_array@x+1)^0,c
 12478  003432  0E02               	movlw	2
 12479  003434  6E1C               	movwf	LCD_array@x^0,c
 12480  003436  0E00               	movlw	0
 12481  003438  6E1F               	movwf	(LCD_array@y+1)^0,c
 12482  00343A  0E01               	movlw	1
 12483  00343C  6E1E               	movwf	LCD_array@y^0,c
 12484  00343E  0E31               	movlw	low STR_89
 12485  003440  6E20               	movwf	LCD_array@date^0,c
 12486  003442  0E7D               	movlw	high STR_89
 12487  003444  6E21               	movwf	(LCD_array@date+1)^0,c
 12488  003446  ECB1  F01F         	call	_LCD_array	;wreg free
 12489                           
 12490                           ;Task1.c: 439:     _delay((unsigned long)((1000)*(48000000/4000.0)));
 12491  00344A  0E3D               	movlw	61
 12492  00344C  6E25               	movwf	(??_Easter_Egg+1)^0,c
 12493  00344E  0EE1               	movlw	225
 12494  003450  6E24               	movwf	??_Easter_Egg^0,c
 12495  003452  0E40               	movlw	64
 12496  003454                     u11367:
 12497  003454  2EE8               	decfsz	wreg,f,c
 12498  003456  D7FE               	bra	u11367
 12499  003458  2E24               	decfsz	??_Easter_Egg^0,f,c
 12500  00345A  D7FC               	bra	u11367
 12501  00345C  2E25               	decfsz	(??_Easter_Egg+1)^0,f,c
 12502  00345E  D7FA               	bra	u11367
 12503  003460  00FF               	reset		;# 
 12504  003462  0012               	return		;funcret
 12505  003464                     __end_of_Easter_Egg:
 12506                           	callstack 0
 12507                           
 12508 ;; *************** function _E_Rtc_Lcd *****************
 12509 ;; Defined at:
 12510 ;;		line 185 in file "Task1.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;		None
 12513 ;; Auto vars:     Size  Location     Type
 12514 ;;  buffer         10  110[BANK0 ] unsigned char [10]
 12515 ;; Return value:  Size  Location     Type
 12516 ;;                  1    wreg      void 
 12517 ;; Registers used:
 12518 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12519 ;; Tracked objects:
 12520 ;;		On entry : 3F/0
 12521 ;;		On exit  : 3F/1
 12522 ;;		Unchanged: 0/0
 12523 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 12524 ;;      Params:         0       0       0       0       0       0       0       0       0
 12525 ;;      Locals:         0      10       0       0       0       0       0       0       0
 12526 ;;      Temps:          0       2       0       0       0       0       0       0       0
 12527 ;;      Totals:         0      12       0       0       0       0       0       0       0
 12528 ;;Total ram usage:       12 bytes
 12529 ;; Hardware stack levels used:    1
 12530 ;; Hardware stack levels required when called:   15
 12531 ;; This function calls:
 12532 ;;		_LCD_array
 12533 ;;		_RTC_send_fecha
 12534 ;;		_RTC_send_hora
 12535 ;;		_sprintf
 12536 ;; This function is called by:
 12537 ;;		_Task1
 12538 ;; This function uses a non-reentrant model
 12539 ;;
 12540                           
 12541                           	psect	text45
 12542  001452                     __ptext45:
 12543                           	callstack 0
 12544  001452                     _E_Rtc_Lcd:
 12545                           	callstack 14
 12546                           
 12547                           ; BSR set to: 0
 12548                           ;Task1.c: 187:     char buffer[10];;Task1.c: 190:     if(!Timer_DelayMuestra)
 12549                           
 12550                           ;incstack = 0
 12551  001452  0101               	movlb	1	; () banked
 12552  001454  51E0               	movf	_Timer_DelayMuestra& (0+255),w,b
 12553  001456  11E1               	iorwf	(_Timer_DelayMuestra+1)& (0+255),w,b
 12554  001458  A4D8               	btfss	status,2,c
 12555  00145A  0012               	return	
 12556                           
 12557                           ; BSR set to: 1
 12558                           ;Task1.c: 191:     {;Task1.c: 193:         if(mostrar == 0)
 12559  00145C  518E               	movf	_mostrar& (0+255),w,b
 12560  00145E  A4D8               	btfss	status,2,c
 12561  001460  D176               	goto	l11946
 12562                           
 12563                           ; BSR set to: 1
 12564                           ;Task1.c: 194:         {;Task1.c: 195:             LCD_array(1,1,"CONFIGURACION RTC");
 12565  001462  0E00               	movlw	0
 12566  001464  6E1D               	movwf	(LCD_array@x+1)^0,c
 12567  001466  0E01               	movlw	1
 12568  001468  6E1C               	movwf	LCD_array@x^0,c
 12569  00146A  0E00               	movlw	0
 12570  00146C  6E1F               	movwf	(LCD_array@y+1)^0,c
 12571  00146E  0E01               	movlw	1
 12572  001470  6E1E               	movwf	LCD_array@y^0,c
 12573  001472  0E9E               	movlw	low STR_42
 12574  001474  6E20               	movwf	LCD_array@date^0,c
 12575  001476  0E7E               	movlw	high STR_42
 12576  001478  6E21               	movwf	(LCD_array@date+1)^0,c
 12577  00147A  ECB1  F01F         	call	_LCD_array	;wreg free
 12578                           
 12579                           ;Task1.c: 196:             LCD_array(2,1,"HORA:"),LCD_array(2,10,"DIA:");
 12580  00147E  0E00               	movlw	0
 12581  001480  6E1D               	movwf	(LCD_array@x+1)^0,c
 12582  001482  0E02               	movlw	2
 12583  001484  6E1C               	movwf	LCD_array@x^0,c
 12584  001486  0E00               	movlw	0
 12585  001488  6E1F               	movwf	(LCD_array@y+1)^0,c
 12586  00148A  0E01               	movlw	1
 12587  00148C  6E1E               	movwf	LCD_array@y^0,c
 12588  00148E  0E9C               	movlw	low STR_43
 12589  001490  6E20               	movwf	LCD_array@date^0,c
 12590  001492  0E7F               	movlw	high STR_43
 12591  001494  6E21               	movwf	(LCD_array@date+1)^0,c
 12592  001496  ECB1  F01F         	call	_LCD_array	;wreg free
 12593  00149A  0E00               	movlw	0
 12594  00149C  6E1D               	movwf	(LCD_array@x+1)^0,c
 12595  00149E  0E02               	movlw	2
 12596  0014A0  6E1C               	movwf	LCD_array@x^0,c
 12597  0014A2  0E00               	movlw	0
 12598  0014A4  6E1F               	movwf	(LCD_array@y+1)^0,c
 12599  0014A6  0E0A               	movlw	10
 12600  0014A8  6E1E               	movwf	LCD_array@y^0,c
 12601  0014AA  0EC6               	movlw	low STR_44
 12602  0014AC  6E20               	movwf	LCD_array@date^0,c
 12603  0014AE  0E7F               	movlw	high STR_44
 12604  0014B0  6E21               	movwf	(LCD_array@date+1)^0,c
 12605  0014B2  ECB1  F01F         	call	_LCD_array	;wreg free
 12606                           
 12607                           ;Task1.c: 197:             LCD_array(3,1,"MIN:") ,LCD_array(3,10,"MES:");
 12608  0014B6  0E00               	movlw	0
 12609  0014B8  6E1D               	movwf	(LCD_array@x+1)^0,c
 12610  0014BA  0E03               	movlw	3
 12611  0014BC  6E1C               	movwf	LCD_array@x^0,c
 12612  0014BE  0E00               	movlw	0
 12613  0014C0  6E1F               	movwf	(LCD_array@y+1)^0,c
 12614  0014C2  0E01               	movlw	1
 12615  0014C4  6E1E               	movwf	LCD_array@y^0,c
 12616  0014C6  0ED5               	movlw	low STR_45
 12617  0014C8  6E20               	movwf	LCD_array@date^0,c
 12618  0014CA  0E7F               	movlw	high STR_45
 12619  0014CC  6E21               	movwf	(LCD_array@date+1)^0,c
 12620  0014CE  ECB1  F01F         	call	_LCD_array	;wreg free
 12621  0014D2  0E00               	movlw	0
 12622  0014D4  6E1D               	movwf	(LCD_array@x+1)^0,c
 12623  0014D6  0E03               	movlw	3
 12624  0014D8  6E1C               	movwf	LCD_array@x^0,c
 12625  0014DA  0E00               	movlw	0
 12626  0014DC  6E1F               	movwf	(LCD_array@y+1)^0,c
 12627  0014DE  0E0A               	movlw	10
 12628  0014E0  6E1E               	movwf	LCD_array@y^0,c
 12629  0014E2  0EDA               	movlw	low STR_46
 12630  0014E4  6E20               	movwf	LCD_array@date^0,c
 12631  0014E6  0E7F               	movlw	high STR_46
 12632  0014E8  6E21               	movwf	(LCD_array@date+1)^0,c
 12633  0014EA  ECB1  F01F         	call	_LCD_array	;wreg free
 12634                           
 12635                           ;Task1.c: 198:             LCD_array(4,1,"SEG:") ,LCD_array(4,10,"YEAR:");
 12636  0014EE  0E00               	movlw	0
 12637  0014F0  6E1D               	movwf	(LCD_array@x+1)^0,c
 12638  0014F2  0E04               	movlw	4
 12639  0014F4  6E1C               	movwf	LCD_array@x^0,c
 12640  0014F6  0E00               	movlw	0
 12641  0014F8  6E1F               	movwf	(LCD_array@y+1)^0,c
 12642  0014FA  0E01               	movlw	1
 12643  0014FC  6E1E               	movwf	LCD_array@y^0,c
 12644  0014FE  0ECB               	movlw	low STR_47
 12645  001500  6E20               	movwf	LCD_array@date^0,c
 12646  001502  0E7F               	movlw	high STR_47
 12647  001504  6E21               	movwf	(LCD_array@date+1)^0,c
 12648  001506  ECB1  F01F         	call	_LCD_array	;wreg free
 12649  00150A  0E00               	movlw	0
 12650  00150C  6E1D               	movwf	(LCD_array@x+1)^0,c
 12651  00150E  0E04               	movlw	4
 12652  001510  6E1C               	movwf	LCD_array@x^0,c
 12653  001512  0E00               	movlw	0
 12654  001514  6E1F               	movwf	(LCD_array@y+1)^0,c
 12655  001516  0E0A               	movlw	10
 12656  001518  6E1E               	movwf	LCD_array@y^0,c
 12657  00151A  0EAE               	movlw	low STR_48
 12658  00151C  6E20               	movwf	LCD_array@date^0,c
 12659  00151E  0E7F               	movlw	high STR_48
 12660  001520  6E21               	movwf	(LCD_array@date+1)^0,c
 12661  001522  ECB1  F01F         	call	_LCD_array	;wreg free
 12662                           
 12663                           ;Task1.c: 199:             mostrar = 1;
 12664  001526  0E01               	movlw	1
 12665  001528  0101               	movlb	1	; () banked
 12666  00152A  6F8E               	movwf	_mostrar& (0+255),b
 12667  00152C  D110               	goto	l11946
 12668  00152E                     l11840:
 12669                           
 12670                           ; BSR set to: 0
 12671                           ;Task1.c: 206:             {;Task1.c: 207:                 if(valor > 24) hora=0,valor=0
      +                          ;
 12672  00152E  503A               	movf	(_valor+1)^0,w,c
 12673  001530  E104               	bnz	u10280
 12674  001532  0E19               	movlw	25
 12675  001534  5C39               	subwf	_valor^0,w,c
 12676  001536  A0D8               	btfss	status,0,c
 12677  001538  D006               	goto	l11844
 12678  00153A                     u10280:
 12679                           
 12680                           ; BSR set to: 0
 12681  00153A  0E00               	movlw	0
 12682  00153C  6E44               	movwf	_hora^0,c
 12683  00153E  0E00               	movlw	0
 12684  001540  6E3A               	movwf	(_valor+1)^0,c
 12685  001542  0E00               	movlw	0
 12686  001544  6E39               	movwf	_valor^0,c
 12687  001546                     l11844:
 12688                           
 12689                           ; BSR set to: 0
 12690                           ;Task1.c: 208:                 hora = valor;
 12691  001546  C039  F044         	movff	_valor,_hora
 12692                           
 12693                           ; BSR set to: 0
 12694                           ;Task1.c: 209:                 sprintf(buffer,"%02d",hora),LCD_array(2,6,buffer);
 12695  00154A  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12696  00154C  6FB7               	movwf	sprintf@s& (0+255),b
 12697  00154E  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12698  001550  0EE4               	movlw	low STR_14
 12699  001552  6FB9               	movwf	sprintf@fmt& (0+255),b
 12700  001554  0E7F               	movlw	high STR_14
 12701  001556  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12702  001558  C044  F0BB         	movff	_hora,?_sprintf+4
 12703  00155C  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12704  00155E  EC78  F027         	call	_sprintf	;wreg free
 12705                           
 12706                           ; BSR set to: 0
 12707  001562  0E00               	movlw	0
 12708  001564  6E1D               	movwf	(LCD_array@x+1)^0,c
 12709  001566  0E02               	movlw	2
 12710  001568  6E1C               	movwf	LCD_array@x^0,c
 12711  00156A  0E00               	movlw	0
 12712  00156C  6E1F               	movwf	(LCD_array@y+1)^0,c
 12713  00156E  0E06               	movlw	6
 12714  001570  6E1E               	movwf	LCD_array@y^0,c
 12715  001572  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12716  001574  6E20               	movwf	LCD_array@date^0,c
 12717  001576  6A21               	clrf	(LCD_array@date+1)^0,c
 12718  001578  ECB1  F01F         	call	_LCD_array	;wreg free
 12719                           
 12720                           ;Task1.c: 210:                 if(aceptar) pos_rtc++,valor=0,aceptar=0;
 12721  00157C  0100               	movlb	0	; () banked
 12722  00157E  51F0               	movf	_aceptar& (0+255),w,b
 12723  001580  B4D8               	btfsc	status,2,c
 12724  001582  D100               	goto	l11948
 12725  001584                     u10290:
 12726                           
 12727                           ; BSR set to: 0
 12728  001584  0101               	movlb	1	; () banked
 12729  001586  2BE9               	incf	_pos_rtc& (0+255),f,b
 12730                           
 12731                           ; BSR set to: 1
 12732  001588  0E00               	movlw	0
 12733  00158A  6E3A               	movwf	(_valor+1)^0,c
 12734  00158C  0E00               	movlw	0
 12735  00158E  6E39               	movwf	_valor^0,c
 12736  001590  D0DA               	goto	L16
 12737  001592                     l11858:
 12738                           
 12739                           ; BSR set to: 0
 12740                           ;Task1.c: 214:             {;Task1.c: 215:                 if(valor > 59) min=0,valor=0;
 12741  001592  503A               	movf	(_valor+1)^0,w,c
 12742  001594  E104               	bnz	u10300
 12743  001596  0E3C               	movlw	60
 12744  001598  5C39               	subwf	_valor^0,w,c
 12745  00159A  A0D8               	btfss	status,0,c
 12746  00159C  D006               	goto	l11862
 12747  00159E                     u10300:
 12748                           
 12749                           ; BSR set to: 0
 12750  00159E  0E00               	movlw	0
 12751  0015A0  6E43               	movwf	_min^0,c
 12752  0015A2  0E00               	movlw	0
 12753  0015A4  6E3A               	movwf	(_valor+1)^0,c
 12754  0015A6  0E00               	movlw	0
 12755  0015A8  6E39               	movwf	_valor^0,c
 12756  0015AA                     l11862:
 12757                           
 12758                           ; BSR set to: 0
 12759                           ;Task1.c: 216:                 min = valor;
 12760  0015AA  C039  F043         	movff	_valor,_min
 12761                           
 12762                           ; BSR set to: 0
 12763                           ;Task1.c: 217:                 sprintf(buffer,"%02d",min),LCD_array(3,5,buffer);
 12764  0015AE  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12765  0015B0  6FB7               	movwf	sprintf@s& (0+255),b
 12766  0015B2  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12767  0015B4  0EE4               	movlw	low STR_14
 12768  0015B6  6FB9               	movwf	sprintf@fmt& (0+255),b
 12769  0015B8  0E7F               	movlw	high STR_14
 12770  0015BA  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12771  0015BC  C043  F0BB         	movff	_min,?_sprintf+4
 12772  0015C0  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12773  0015C2  EC78  F027         	call	_sprintf	;wreg free
 12774                           
 12775                           ; BSR set to: 0
 12776  0015C6  0E00               	movlw	0
 12777  0015C8  6E1D               	movwf	(LCD_array@x+1)^0,c
 12778  0015CA  0E03               	movlw	3
 12779  0015CC  6E1C               	movwf	LCD_array@x^0,c
 12780  0015CE  0E00               	movlw	0
 12781  0015D0  6E1F               	movwf	(LCD_array@y+1)^0,c
 12782  0015D2  0E05               	movlw	5
 12783  0015D4  6E1E               	movwf	LCD_array@y^0,c
 12784  0015D6  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12785  0015D8  6E20               	movwf	LCD_array@date^0,c
 12786  0015DA  6A21               	clrf	(LCD_array@date+1)^0,c
 12787  0015DC  ECB1  F01F         	call	_LCD_array	;wreg free
 12788  0015E0                     l11868:
 12789                           
 12790                           ;Task1.c: 218:                 if(aceptar) pos_rtc++,valor=0,aceptar=0;
 12791  0015E0  0100               	movlb	0	; () banked
 12792  0015E2  51F0               	movf	_aceptar& (0+255),w,b
 12793  0015E4  A4D8               	btfss	status,2,c
 12794  0015E6  D7CE               	goto	u10290
 12795  0015E8  D0CD               	goto	l11948
 12796  0015EA                     l11876:
 12797                           
 12798                           ; BSR set to: 0
 12799                           ;Task1.c: 222:             {;Task1.c: 223:                 if(valor > 59) seg=0,valor=0;
 12800  0015EA  503A               	movf	(_valor+1)^0,w,c
 12801  0015EC  E104               	bnz	u10320
 12802  0015EE  0E3C               	movlw	60
 12803  0015F0  5C39               	subwf	_valor^0,w,c
 12804  0015F2  A0D8               	btfss	status,0,c
 12805  0015F4  D006               	goto	l11880
 12806  0015F6                     u10320:
 12807                           
 12808                           ; BSR set to: 0
 12809  0015F6  0E00               	movlw	0
 12810  0015F8  6E42               	movwf	_seg^0,c
 12811  0015FA  0E00               	movlw	0
 12812  0015FC  6E3A               	movwf	(_valor+1)^0,c
 12813  0015FE  0E00               	movlw	0
 12814  001600  6E39               	movwf	_valor^0,c
 12815  001602                     l11880:
 12816                           
 12817                           ; BSR set to: 0
 12818                           ;Task1.c: 224:                 seg = valor;
 12819  001602  C039  F042         	movff	_valor,_seg
 12820                           
 12821                           ; BSR set to: 0
 12822                           ;Task1.c: 225:                 sprintf(buffer,"%02d",seg),LCD_array(4,5,buffer);
 12823  001606  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12824  001608  6FB7               	movwf	sprintf@s& (0+255),b
 12825  00160A  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12826  00160C  0EE4               	movlw	low STR_14
 12827  00160E  6FB9               	movwf	sprintf@fmt& (0+255),b
 12828  001610  0E7F               	movlw	high STR_14
 12829  001612  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12830  001614  C042  F0BB         	movff	_seg,?_sprintf+4
 12831  001618  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12832  00161A  EC78  F027         	call	_sprintf	;wreg free
 12833                           
 12834                           ; BSR set to: 0
 12835  00161E  0E00               	movlw	0
 12836  001620  6E1D               	movwf	(LCD_array@x+1)^0,c
 12837  001622  0E04               	movlw	4
 12838  001624  6E1C               	movwf	LCD_array@x^0,c
 12839  001626  0E00               	movlw	0
 12840  001628  6E1F               	movwf	(LCD_array@y+1)^0,c
 12841  00162A  0E05               	movlw	5
 12842  00162C  6E1E               	movwf	LCD_array@y^0,c
 12843  00162E  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12844  001630  6E20               	movwf	LCD_array@date^0,c
 12845  001632  6A21               	clrf	(LCD_array@date+1)^0,c
 12846  001634  ECB1  F01F         	call	_LCD_array	;wreg free
 12847  001638  D7D3               	goto	l11868
 12848  00163A                     l11894:
 12849                           
 12850                           ; BSR set to: 0
 12851                           ;Task1.c: 230:             {;Task1.c: 231:                 if(valor > 31) dia=0,valor=0;
 12852  00163A  503A               	movf	(_valor+1)^0,w,c
 12853  00163C  E104               	bnz	u10340
 12854  00163E  0E20               	movlw	32
 12855  001640  5C39               	subwf	_valor^0,w,c
 12856  001642  A0D8               	btfss	status,0,c
 12857  001644  D006               	goto	l11898
 12858  001646                     u10340:
 12859                           
 12860                           ; BSR set to: 0
 12861  001646  0E00               	movlw	0
 12862  001648  6E41               	movwf	_dia^0,c
 12863  00164A  0E00               	movlw	0
 12864  00164C  6E3A               	movwf	(_valor+1)^0,c
 12865  00164E  0E00               	movlw	0
 12866  001650  6E39               	movwf	_valor^0,c
 12867  001652                     l11898:
 12868                           
 12869                           ; BSR set to: 0
 12870                           ;Task1.c: 232:                 dia = valor;
 12871  001652  C039  F041         	movff	_valor,_dia
 12872                           
 12873                           ; BSR set to: 0
 12874                           ;Task1.c: 233:                 sprintf(buffer,"%02d",dia),LCD_array(2,14,buffer);
 12875  001656  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12876  001658  6FB7               	movwf	sprintf@s& (0+255),b
 12877  00165A  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12878  00165C  0EE4               	movlw	low STR_14
 12879  00165E  6FB9               	movwf	sprintf@fmt& (0+255),b
 12880  001660  0E7F               	movlw	high STR_14
 12881  001662  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12882  001664  C041  F0BB         	movff	_dia,?_sprintf+4
 12883  001668  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12884  00166A  EC78  F027         	call	_sprintf	;wreg free
 12885                           
 12886                           ; BSR set to: 0
 12887  00166E  0E00               	movlw	0
 12888  001670  6E1D               	movwf	(LCD_array@x+1)^0,c
 12889  001672  0E02               	movlw	2
 12890  001674  6E1C               	movwf	LCD_array@x^0,c
 12891  001676  0E00               	movlw	0
 12892  001678  6E1F               	movwf	(LCD_array@y+1)^0,c
 12893  00167A  0E0E               	movlw	14
 12894  00167C  6E1E               	movwf	LCD_array@y^0,c
 12895  00167E  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12896  001680  6E20               	movwf	LCD_array@date^0,c
 12897  001682  6A21               	clrf	(LCD_array@date+1)^0,c
 12898  001684  ECB1  F01F         	call	_LCD_array	;wreg free
 12899  001688  D7AB               	goto	l11868
 12900  00168A                     l11912:
 12901                           
 12902                           ; BSR set to: 0
 12903                           ;Task1.c: 238:             {;Task1.c: 239:                 if(valor > 12) mes=0,valor=0;
 12904  00168A  503A               	movf	(_valor+1)^0,w,c
 12905  00168C  E104               	bnz	u10360
 12906  00168E  0E0D               	movlw	13
 12907  001690  5C39               	subwf	_valor^0,w,c
 12908  001692  A0D8               	btfss	status,0,c
 12909  001694  D006               	goto	l11916
 12910  001696                     u10360:
 12911                           
 12912                           ; BSR set to: 0
 12913  001696  0E00               	movlw	0
 12914  001698  6E40               	movwf	_mes^0,c
 12915  00169A  0E00               	movlw	0
 12916  00169C  6E3A               	movwf	(_valor+1)^0,c
 12917  00169E  0E00               	movlw	0
 12918  0016A0  6E39               	movwf	_valor^0,c
 12919  0016A2                     l11916:
 12920                           
 12921                           ; BSR set to: 0
 12922                           ;Task1.c: 240:                 mes = valor;
 12923  0016A2  C039  F040         	movff	_valor,_mes
 12924                           
 12925                           ; BSR set to: 0
 12926                           ;Task1.c: 241:                 sprintf(buffer,"%02d",mes),LCD_array(3,14,buffer);
 12927  0016A6  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12928  0016A8  6FB7               	movwf	sprintf@s& (0+255),b
 12929  0016AA  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12930  0016AC  0EE4               	movlw	low STR_14
 12931  0016AE  6FB9               	movwf	sprintf@fmt& (0+255),b
 12932  0016B0  0E7F               	movlw	high STR_14
 12933  0016B2  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12934  0016B4  C040  F0BB         	movff	_mes,?_sprintf+4
 12935  0016B8  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12936  0016BA  EC78  F027         	call	_sprintf	;wreg free
 12937                           
 12938                           ; BSR set to: 0
 12939  0016BE  0E00               	movlw	0
 12940  0016C0  6E1D               	movwf	(LCD_array@x+1)^0,c
 12941  0016C2  0E03               	movlw	3
 12942  0016C4  6E1C               	movwf	LCD_array@x^0,c
 12943  0016C6  0E00               	movlw	0
 12944  0016C8  6E1F               	movwf	(LCD_array@y+1)^0,c
 12945  0016CA  0E0E               	movlw	14
 12946  0016CC  6E1E               	movwf	LCD_array@y^0,c
 12947  0016CE  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12948  0016D0  6E20               	movwf	LCD_array@date^0,c
 12949  0016D2  6A21               	clrf	(LCD_array@date+1)^0,c
 12950  0016D4  ECB1  F01F         	call	_LCD_array	;wreg free
 12951  0016D8  D783               	goto	l11868
 12952  0016DA                     l11930:
 12953                           
 12954                           ; BSR set to: 0
 12955                           ;Task1.c: 246:             {;Task1.c: 247:                 if(valor > 99) year=0,valor=0
      +                          ;
 12956  0016DA  503A               	movf	(_valor+1)^0,w,c
 12957  0016DC  E104               	bnz	u10380
 12958  0016DE  0E64               	movlw	100
 12959  0016E0  5C39               	subwf	_valor^0,w,c
 12960  0016E2  A0D8               	btfss	status,0,c
 12961  0016E4  D006               	goto	l11934
 12962  0016E6                     u10380:
 12963                           
 12964                           ; BSR set to: 0
 12965  0016E6  0E00               	movlw	0
 12966  0016E8  6E3F               	movwf	_year^0,c
 12967  0016EA  0E00               	movlw	0
 12968  0016EC  6E3A               	movwf	(_valor+1)^0,c
 12969  0016EE  0E00               	movlw	0
 12970  0016F0  6E39               	movwf	_valor^0,c
 12971  0016F2                     l11934:
 12972                           
 12973                           ; BSR set to: 0
 12974                           ;Task1.c: 248:                 year = valor;
 12975  0016F2  C039  F03F         	movff	_valor,_year
 12976                           
 12977                           ; BSR set to: 0
 12978                           ;Task1.c: 249:                 sprintf(buffer,"%02d",year),LCD_array(4,15,buffer);
 12979  0016F6  0ECE               	movlw	low E_Rtc_Lcd@buffer
 12980  0016F8  6FB7               	movwf	sprintf@s& (0+255),b
 12981  0016FA  6BB8               	clrf	(sprintf@s+1)& (0+255),b
 12982  0016FC  0EE4               	movlw	low STR_14
 12983  0016FE  6FB9               	movwf	sprintf@fmt& (0+255),b
 12984  001700  0E7F               	movlw	high STR_14
 12985  001702  6FBA               	movwf	(sprintf@fmt+1)& (0+255),b
 12986  001704  C03F  F0BB         	movff	_year,?_sprintf+4
 12987  001708  6BBC               	clrf	(?_sprintf+5)& (0+255),b
 12988  00170A  EC78  F027         	call	_sprintf	;wreg free
 12989                           
 12990                           ; BSR set to: 0
 12991  00170E  0E00               	movlw	0
 12992  001710  6E1D               	movwf	(LCD_array@x+1)^0,c
 12993  001712  0E04               	movlw	4
 12994  001714  6E1C               	movwf	LCD_array@x^0,c
 12995  001716  0E00               	movlw	0
 12996  001718  6E1F               	movwf	(LCD_array@y+1)^0,c
 12997  00171A  0E0F               	movlw	15
 12998  00171C  6E1E               	movwf	LCD_array@y^0,c
 12999  00171E  0ECE               	movlw	low E_Rtc_Lcd@buffer
 13000  001720  6E20               	movwf	LCD_array@date^0,c
 13001  001722  6A21               	clrf	(LCD_array@date+1)^0,c
 13002  001724  ECB1  F01F         	call	_LCD_array	;wreg free
 13003                           
 13004                           ;Task1.c: 250:                 if(aceptar) pos_rtc=1,valor=0,mod_rtc=0,esc_rtc=1,aceptar
      +                          =0;
 13005  001728  0100               	movlb	0	; () banked
 13006  00172A  51F0               	movf	_aceptar& (0+255),w,b
 13007  00172C  B4D8               	btfsc	status,2,c
 13008  00172E  D02A               	goto	l11948
 13009                           
 13010                           ; BSR set to: 0
 13011  001730  0E01               	movlw	1
 13012  001732  0101               	movlb	1	; () banked
 13013  001734  6FE9               	movwf	_pos_rtc& (0+255),b
 13014  001736  0E00               	movlw	0
 13015  001738  6E3A               	movwf	(_valor+1)^0,c
 13016  00173A  0E00               	movlw	0
 13017  00173C  6E39               	movwf	_valor^0,c
 13018  00173E  0E00               	movlw	0
 13019  001740  6E45               	movwf	_mod_rtc^0,c
 13020  001742  0E01               	movlw	1
 13021  001744  6F90               	movwf	_esc_rtc& (0+255),b
 13022  001746                     L16:
 13023  001746  0E00               	movlw	0
 13024  001748  0100               	movlb	0	; () banked
 13025  00174A  6FF0               	movwf	_aceptar& (0+255),b
 13026  00174C  D01B               	goto	l11948
 13027  00174E                     l11946:
 13028                           
 13029                           ; BSR set to: 1
 13030  00174E  51E9               	movf	_pos_rtc& (0+255),w,b
 13031  001750  0100               	movlb	0	; () banked
 13032  001752  6FCC               	movwf	??_E_Rtc_Lcd& (0+255),b
 13033  001754  6BCD               	clrf	(??_E_Rtc_Lcd+1)& (0+255),b
 13034                           
 13035                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13036                           ; Switch size 1, requested type "simple"
 13037                           ; Number of cases is 1, Range of values is 0 to 0
 13038                           ; switch strategies available:
 13039                           ; Name         Instructions Cycles
 13040                           ; simple_byte            4     3 (average)
 13041                           ;	Chosen strategy is simple_byte
 13042  001756  51CD               	movf	(??_E_Rtc_Lcd+1)& (0+255),w,b
 13043  001758  0A00               	xorlw	0	; case 0
 13044  00175A  A4D8               	btfss	status,2,c
 13045  00175C  D013               	goto	l11948
 13046                           
 13047                           ; BSR set to: 0
 13048                           ; Switch size 1, requested type "simple"
 13049                           ; Number of cases is 6, Range of values is 1 to 6
 13050                           ; switch strategies available:
 13051                           ; Name         Instructions Cycles
 13052                           ; simple_byte           19    10 (average)
 13053                           ;	Chosen strategy is simple_byte
 13054  00175E  51CC               	movf	??_E_Rtc_Lcd& (0+255),w,b
 13055  001760  0A01               	xorlw	1	; case 1
 13056  001762  B4D8               	btfsc	status,2,c
 13057  001764  D6E4               	goto	l11840
 13058  001766  0A03               	xorlw	3	; case 2
 13059  001768  B4D8               	btfsc	status,2,c
 13060  00176A  D713               	goto	l11858
 13061  00176C  0A01               	xorlw	1	; case 3
 13062  00176E  B4D8               	btfsc	status,2,c
 13063  001770  D73C               	goto	l11876
 13064  001772  0A07               	xorlw	7	; case 4
 13065  001774  B4D8               	btfsc	status,2,c
 13066  001776  D761               	goto	l11894
 13067  001778  0A01               	xorlw	1	; case 5
 13068  00177A  B4D8               	btfsc	status,2,c
 13069  00177C  D786               	goto	l11912
 13070  00177E  0A03               	xorlw	3	; case 6
 13071  001780  B4D8               	btfsc	status,2,c
 13072  001782  D7AB               	goto	l11930
 13073  001784                     l11948:
 13074                           
 13075                           ; BSR set to: 0
 13076                           ;Task1.c: 256:         if(esc_rtc == 1) RTC_send_hora(),RTC_send_fecha(),esc_rtc=0;
 13077  001784  0101               	movlb	1	; () banked
 13078  001786  0590               	decf	_esc_rtc& (0+255),w,b
 13079  001788  A4D8               	btfss	status,2,c
 13080  00178A  D007               	goto	l11954
 13081                           
 13082                           ; BSR set to: 1
 13083  00178C  ECB8  F023         	call	_RTC_send_hora	;wreg free
 13084  001790  ECF5  F023         	call	_RTC_send_fecha	;wreg free
 13085  001794  0E00               	movlw	0
 13086  001796  0101               	movlb	1	; () banked
 13087  001798  6F90               	movwf	_esc_rtc& (0+255),b
 13088  00179A                     l11954:
 13089                           
 13090                           ; BSR set to: 1
 13091                           ;Task1.c: 257:         Timer_DelayMuestra = 50;
 13092  00179A  0E00               	movlw	0
 13093  00179C  6FE1               	movwf	(_Timer_DelayMuestra+1)& (0+255),b
 13094  00179E  0E32               	movlw	50
 13095  0017A0  6FE0               	movwf	_Timer_DelayMuestra& (0+255),b
 13096                           
 13097                           ; BSR set to: 1
 13098  0017A2  0012               	return		;funcret
 13099  0017A4                     __end_of_E_Rtc_Lcd:
 13100                           	callstack 0
 13101                           
 13102 ;; *************** function _sprintf *****************
 13103 ;; Defined at:
 13104 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\nf_sprintf.c"
 13105 ;; Parameters:    Size  Location     Type
 13106 ;;  s               2   87[BANK0 ] PTR unsigned char 
 13107 ;;		 -> ACN_CO_Com@buffer(10), ACN_PA_Com@buffer(10), ACN_CR_Com@buffer(10), Rfid_Lcd@buffer_1766(20), 
 13108 ;;		 -> Rfid_Lcd@buffer(20), E_Rtc_Lcd@buffer(10), E_Teclado_Lcd@buffer(10), E_pant2_Lcd@buffer(5), 
 13109 ;;		 -> E_pant2_Lcd@buffer2(10), E_pant1_Lcd@buffer(20), Write_User@buffer(5), M_Write@buffer(11), 
 13110 ;;  fmt             2   89[BANK0 ] PTR const unsigned char 
 13111 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 13112 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 13113 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 13114 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 13115 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 13116 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 13117 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 13118 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 13119 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 13120 ;;		 -> STR_10(3), STR_9(3), 
 13121 ;; Auto vars:     Size  Location     Type
 13122 ;;  f               6  102[BANK0 ] struct _IO_FILE
 13123 ;;  ret             2    0        int 
 13124 ;;  ap              1  101[BANK0 ] PTR void [1]
 13125 ;;		 -> ?_sprintf(2), 
 13126 ;; Return value:  Size  Location     Type
 13127 ;;                  2   87[BANK0 ] int 
 13128 ;; Registers used:
 13129 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13130 ;; Tracked objects:
 13131 ;;		On entry : 3E/0
 13132 ;;		On exit  : 3F/0
 13133 ;;		Unchanged: 0/0
 13134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13135 ;;      Params:         0      12       0       0       0       0       0       0       0
 13136 ;;      Locals:         0       9       0       0       0       0       0       0       0
 13137 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13138 ;;      Totals:         0      21       0       0       0       0       0       0       0
 13139 ;;Total ram usage:       21 bytes
 13140 ;; Hardware stack levels used:    1
 13141 ;; Hardware stack levels required when called:   14
 13142 ;; This function calls:
 13143 ;;		_vfprintf
 13144 ;; This function is called by:
 13145 ;;		_M_Write
 13146 ;;		_Write_User
 13147 ;;		_E_pant1_Lcd
 13148 ;;		_E_pant2_Lcd
 13149 ;;		_E_Teclado_Lcd
 13150 ;;		_E_Rtc_Lcd
 13151 ;;		_Rfid_Lcd
 13152 ;;		_ACN_CR_Com
 13153 ;;		_ACN_PA_Com
 13154 ;;		_ACN_CO_Com
 13155 ;; This function uses a non-reentrant model
 13156 ;;
 13157                           
 13158                           	psect	text46
 13159  004EF0                     __ptext46:
 13160                           	callstack 0
 13161  004EF0                     _sprintf:
 13162                           	callstack 14
 13163                           
 13164                           ; BSR set to: 1
 13165                           ;incstack = 0
 13166  004EF0  0EBB               	movlw	low (?_sprintf+4)
 13167  004EF2  0100               	movlb	0	; () banked
 13168  004EF4  6FC5               	movwf	sprintf@ap& (0+255),b
 13169  004EF6  C0B7  F0C6         	movff	sprintf@s,sprintf@f
 13170  004EFA  C0B8  F0C7         	movff	sprintf@s+1,sprintf@f+1
 13171                           
 13172                           ; BSR set to: 0
 13173  004EFE  0E00               	movlw	0
 13174  004F00  6FC9               	movwf	(sprintf@f+3)& (0+255),b
 13175  004F02  0E00               	movlw	0
 13176  004F04  6FC8               	movwf	(sprintf@f+2)& (0+255),b
 13177                           
 13178                           ; BSR set to: 0
 13179  004F06  0E00               	movlw	0
 13180  004F08  6FCB               	movwf	(sprintf@f+5)& (0+255),b
 13181  004F0A  0E00               	movlw	0
 13182  004F0C  6FCA               	movwf	(sprintf@f+4)& (0+255),b
 13183                           
 13184                           ; BSR set to: 0
 13185  004F0E  0EC6               	movlw	low sprintf@f
 13186  004F10  6FB1               	movwf	vfprintf@fp& (0+255),b
 13187  004F12  C0B9  F0B2         	movff	sprintf@fmt,vfprintf@fmt
 13188  004F16  C0BA  F0B3         	movff	sprintf@fmt+1,vfprintf@fmt+1
 13189  004F1A  0EC5               	movlw	low sprintf@ap
 13190  004F1C  6FB4               	movwf	vfprintf@ap& (0+255),b
 13191  004F1E  ECB8  F026         	call	_vfprintf	;wreg free
 13192                           
 13193                           ; BSR set to: 1
 13194  004F22  0100               	movlb	0	; () banked
 13195  004F24  51C8               	movf	(sprintf@f+2)& (0+255),w,b
 13196  004F26  25B7               	addwf	sprintf@s& (0+255),w,b
 13197  004F28  6ED9               	movwf	fsr2l,c
 13198  004F2A  51C9               	movf	(sprintf@f+3)& (0+255),w,b
 13199  004F2C  21B8               	addwfc	(sprintf@s+1)& (0+255),w,b
 13200  004F2E  6EDA               	movwf	fsr2h,c
 13201  004F30  0E00               	movlw	0
 13202  004F32  6EDF               	movwf	indf2,c
 13203                           
 13204                           ; BSR set to: 0
 13205  004F34  0012               	return		;funcret
 13206  004F36                     __end_of_sprintf:
 13207                           	callstack 0
 13208                           
 13209 ;; *************** function _vfprintf *****************
 13210 ;; Defined at:
 13211 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c"
 13212 ;; Parameters:    Size  Location     Type
 13213 ;;  fp              1   81[BANK0 ] PTR struct _IO_FILE
 13214 ;;		 -> sprintf@f(6), 
 13215 ;;  fmt             2   82[BANK0 ] PTR const unsigned char 
 13216 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 13217 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 13218 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 13219 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 13220 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 13221 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 13222 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 13223 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 13224 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 13225 ;;		 -> STR_10(3), STR_9(3), 
 13226 ;;  ap              1   84[BANK0 ] PTR PTR void 
 13227 ;;		 -> sprintf@ap(1), 
 13228 ;; Auto vars:     Size  Location     Type
 13229 ;;  cfmt            2   85[BANK0 ] PTR unsigned char 
 13230 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 13231 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 13232 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 13233 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 13234 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 13235 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 13236 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 13237 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 13238 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 13239 ;;		 -> STR_10(3), STR_9(3), 
 13240 ;; Return value:  Size  Location     Type
 13241 ;;                  2   81[BANK0 ] int 
 13242 ;; Registers used:
 13243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13244 ;; Tracked objects:
 13245 ;;		On entry : 3F/0
 13246 ;;		On exit  : 3F/1
 13247 ;;		Unchanged: 0/0
 13248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13249 ;;      Params:         0       4       0       0       0       0       0       0       0
 13250 ;;      Locals:         0       2       0       0       0       0       0       0       0
 13251 ;;      Temps:          0       0       0       0       0       0       0       0       0
 13252 ;;      Totals:         0       6       0       0       0       0       0       0       0
 13253 ;;Total ram usage:        6 bytes
 13254 ;; Hardware stack levels used:    1
 13255 ;; Hardware stack levels required when called:   13
 13256 ;; This function calls:
 13257 ;;		_vfpfcnvrt
 13258 ;; This function is called by:
 13259 ;;		_sprintf
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           	psect	text47
 13264  004D70                     __ptext47:
 13265                           	callstack 0
 13266  004D70                     _vfprintf:
 13267                           	callstack 14
 13268                           
 13269                           ; BSR set to: 0
 13270                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1368: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\pic\source
      +                          s\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\comm
      +                          on\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\
      +                          common\doprnt.c: 1373:     cfmt = (char *)fmt;
 13271                           
 13272                           ; BSR set to: 0
 13273                           ;incstack = 0
 13274  004D70  C0B2  F0B5         	movff	vfprintf@fmt,vfprintf@cfmt
 13275  004D74  C0B3  F0B6         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
 13276                           
 13277                           ; BSR set to: 0
 13278                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1374:     nout = 
      +                          0;
 13279  004D78  0E00               	movlw	0
 13280  004D7A  0101               	movlb	1	; () banked
 13281  004D7C  6F6E               	movwf	(_nout+1)& (0+255),b
 13282  004D7E  0E00               	movlw	0
 13283  004D80  6F6D               	movwf	_nout& (0+255),b
 13284                           
 13285                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
 13286  004D82  D011               	goto	l10652
 13287  004D84                     l10650:
 13288                           
 13289                           ; BSR set to: 1
 13290                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1376:         nou
      +                          t += vfpfcnvrt(fp, &cfmt, ap);
 13291  004D84  C0B1  F08D         	movff	vfprintf@fp,vfpfcnvrt@fp
 13292  004D88  0EB5               	movlw	low vfprintf@cfmt
 13293  004D8A  0100               	movlb	0	; () banked
 13294  004D8C  6F8E               	movwf	vfpfcnvrt@fmt& (0+255),b
 13295  004D8E  C0B4  F08F         	movff	vfprintf@ap,vfpfcnvrt@ap
 13296  004D92  ECFA  F007         	call	_vfpfcnvrt	;wreg free
 13297  004D96  0100               	movlb	0	; () banked
 13298  004D98  518D               	movf	?_vfpfcnvrt& (0+255),w,b
 13299  004D9A  0101               	movlb	1	; () banked
 13300  004D9C  276D               	addwf	_nout& (0+255),f,b
 13301  004D9E  0100               	movlb	0	; () banked
 13302  004DA0  518E               	movf	(?_vfpfcnvrt+1)& (0+255),w,b
 13303  004DA2  0101               	movlb	1	; () banked
 13304  004DA4  236E               	addwfc	(_nout+1)& (0+255),f,b
 13305  004DA6                     l10652:
 13306                           
 13307                           ; BSR set to: 1
 13308                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1375:     while (
      +                          *cfmt) {
 13309  004DA6  C0B5  FFF6         	movff	vfprintf@cfmt,tblptrl
 13310  004DAA  C0B6  FFF7         	movff	vfprintf@cfmt+1,tblptrh
 13311  004DAE                     	if	0	;tblptru may be non-zero
 13312  004DAE                     	endif
 13313  004DAE                     	if	0	;tblptru may be non-zero
 13314  004DAE                     	endif
 13315  004DAE  0008               	tblrd		*
 13316  004DB0  50F5               	movf	tablat,w,c
 13317  004DB2  0900               	iorlw	0
 13318  004DB4  A4D8               	btfss	status,2,c
 13319  004DB6  D7E6               	goto	l10650
 13320                           
 13321                           ; BSR set to: 1
 13322                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1378:     return 
      +                          nout;
 13323  004DB8  C16D  F0B1         	movff	_nout,?_vfprintf
 13324  004DBC  C16E  F0B2         	movff	_nout+1,?_vfprintf+1
 13325                           
 13326                           ; BSR set to: 1
 13327  004DC0  0012               	return		;funcret
 13328  004DC2                     __end_of_vfprintf:
 13329                           	callstack 0
 13330                           
 13331 ;; *************** function _vfpfcnvrt *****************
 13332 ;; Defined at:
 13333 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c"
 13334 ;; Parameters:    Size  Location     Type
 13335 ;;  fp              1   45[BANK0 ] PTR struct _IO_FILE
 13336 ;;		 -> sprintf@f(6), 
 13337 ;;  fmt             1   46[BANK0 ] PTR PTR unsigned char 
 13338 ;;		 -> vfprintf@cfmt(2), 
 13339 ;;  ap              1   47[BANK0 ] PTR PTR void 
 13340 ;;		 -> sprintf@ap(1), 
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  llu             8   73[BANK0 ] unsigned long long 
 13343 ;;  ll              8   65[BANK0 ] long long 
 13344 ;;  f               4    0        long long 
 13345 ;;  vp              3    0        PTR void 
 13346 ;;  ct              3    0        unsigned char [3]
 13347 ;;  cp              3    0        PTR unsigned char 
 13348 ;;  done            2   61[BANK0 ] int 
 13349 ;;  i               2    0        int 
 13350 ;;  c               1    0        unsigned char 
 13351 ;; Return value:  Size  Location     Type
 13352 ;;                  2   45[BANK0 ] int 
 13353 ;; Registers used:
 13354 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13355 ;; Tracked objects:
 13356 ;;		On entry : 3F/0
 13357 ;;		On exit  : 0/0
 13358 ;;		Unchanged: 0/0
 13359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 13360 ;;      Params:         0       3       0       0       0       0       0       0       0
 13361 ;;      Locals:         0      20       0       0       0       0       0       0       0
 13362 ;;      Temps:          0      13       0       0       0       0       0       0       0
 13363 ;;      Totals:         0      36       0       0       0       0       0       0       0
 13364 ;;Total ram usage:       36 bytes
 13365 ;; Hardware stack levels used:    1
 13366 ;; Hardware stack levels required when called:   12
 13367 ;; This function calls:
 13368 ;;		_atoi
 13369 ;;		_dtoa
 13370 ;;		_fputc
 13371 ;;		_isdigit
 13372 ;;		_strncmp
 13373 ;;		_utoa
 13374 ;; This function is called by:
 13375 ;;		_vfprintf
 13376 ;; This function uses a non-reentrant model
 13377 ;;
 13378                           
 13379                           	psect	text48
 13380  000FF4                     __ptext48:
 13381                           	callstack 0
 13382  000FF4                     _vfpfcnvrt:
 13383                           	callstack 14
 13384                           
 13385                           ; BSR set to: 0
 13386                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 670: static int v
      +                          fpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\pic\sou
      +                          rces\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\co
      +                          mmon\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Microchip\xc8\pic\sou
      +                          rces\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files (x86)\Microchip\xc8\pic
      +                          \sources\c99\common\doprnt.c: 674:     long long ll;;C:\Program Files (x86)\Microchip\xc
      +                          8\pic\sources\c99\common\doprnt.c: 675:     unsigned long long llu;
 13387                           
 13388                           ; BSR set to: 1
 13389                           ;incstack = 0
 13390  000FF4  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13391  000FF6  6ED9               	movwf	fsr2l,c
 13392  000FF8  6ADA               	clrf	fsr2h,c
 13393  000FFA  CFDE FFF6          	movff	postinc2,tblptrl
 13394  000FFE  CFDD FFF7          	movff	postdec2,tblptrh
 13395  001002                     	if	0	;tblptru may be non-zero
 13396  001002                     	endif
 13397  001002                     	if	0	;tblptru may be non-zero
 13398  001002                     	endif
 13399  001002  0008               	tblrd		*
 13400  001004  50F5               	movf	tablat,w,c
 13401  001006  0A25               	xorlw	37
 13402  001008  A4D8               	btfss	status,2,c
 13403  00100A  D20C               	goto	l10480
 13404                           
 13405                           ; BSR set to: 0
 13406                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 681:         ++*f
      +                          mt;
 13407  00100C  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13408  00100E  6ED9               	movwf	fsr2l,c
 13409  001010  6ADA               	clrf	fsr2h,c
 13410  001012  2ADE               	incf	postinc2,f,c
 13411  001014  0E00               	movlw	0
 13412  001016  22DD               	addwfc	postdec2,f,c
 13413                           
 13414                           ; BSR set to: 0
 13415                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 683:         flag
      +                          s = width = 0;
 13416  001018  0E00               	movlw	0
 13417  00101A  0101               	movlb	1	; () banked
 13418  00101C  6F70               	movwf	(_width+1)& (0+255),b
 13419  00101E  0E00               	movlw	0
 13420  001020  6F6F               	movwf	_width& (0+255),b
 13421  001022  C16F  F173         	movff	_width,_flags
 13422  001026  C170  F174         	movff	_width+1,_flags+1
 13423                           
 13424                           ; BSR set to: 1
 13425                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 684:         prec
      +                           = -1;
 13426  00102A  6971               	setf	_prec& (0+255),b
 13427  00102C  6972               	setf	(_prec+1)& (0+255),b
 13428                           
 13429                           ; BSR set to: 1
 13430                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 688:         done
      +                           = 0;
 13431  00102E  0E00               	movlw	0
 13432  001030  0100               	movlb	0	; () banked
 13433  001032  6F9E               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 13434  001034  0E00               	movlw	0
 13435  001036  D019               	goto	L17
 13436  001038                     l10370:
 13437                           
 13438                           ; BSR set to: 0
 13439                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 692:             
      +                                  flags |= (1 << 0);
 13440  001038  0101               	movlb	1	; () banked
 13441  00103A  8173               	bsf	_flags& (0+255),0,b
 13442  00103C                     l10372:
 13443                           
 13444                           ; BSR set to: 1
 13445                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 693:             
      +                                  ++*fmt;
 13446  00103C  0100               	movlb	0	; () banked
 13447  00103E  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13448  001040  6ED9               	movwf	fsr2l,c
 13449  001042  6ADA               	clrf	fsr2h,c
 13450  001044  2ADE               	incf	postinc2,f,c
 13451  001046  0E00               	movlw	0
 13452  001048  22DD               	addwfc	postdec2,f,c
 13453                           
 13454                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 694:             
      +                                  break;
 13455  00104A  D031               	goto	l10396
 13456  00104C                     l10374:
 13457                           
 13458                           ; BSR set to: 0
 13459                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 696:             
      +                                  flags |= (1 << 1);
 13460  00104C  0101               	movlb	1	; () banked
 13461  00104E  8373               	bsf	_flags& (0+255),1,b
 13462  001050  D7F5               	goto	l10372
 13463  001052                     l10378:
 13464                           
 13465                           ; BSR set to: 0
 13466                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 700:             
      +                                  flags |= (1 << 2);
 13467  001052  0101               	movlb	1	; () banked
 13468  001054  8573               	bsf	_flags& (0+255),2,b
 13469  001056  D7F2               	goto	l10372
 13470  001058                     l10382:
 13471                           
 13472                           ; BSR set to: 0
 13473                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 704:             
      +                                  flags |= (1 << 3);
 13474  001058  0101               	movlb	1	; () banked
 13475  00105A  8773               	bsf	_flags& (0+255),3,b
 13476  00105C  D7EF               	goto	l10372
 13477  00105E                     l10386:
 13478                           
 13479                           ; BSR set to: 0
 13480                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 708:             
      +                                  flags |= (1 << 4);
 13481  00105E  0101               	movlb	1	; () banked
 13482  001060  8973               	bsf	_flags& (0+255),4,b
 13483  001062  D7EC               	goto	l10372
 13484  001064                     l10390:
 13485                           
 13486                           ; BSR set to: 0
 13487                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 712:             
      +                                  done = 1;
 13488  001064  0E00               	movlw	0
 13489  001066  6F9E               	movwf	(vfpfcnvrt@done+1)& (0+255),b
 13490  001068  0E01               	movlw	1
 13491  00106A                     L17:
 13492  00106A  6F9D               	movwf	vfpfcnvrt@done& (0+255),b
 13493                           
 13494                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 713:             
      +                                  break;
 13495  00106C  D020               	goto	l10396
 13496  00106E                     l10394:
 13497                           
 13498                           ; BSR set to: 0
 13499  00106E  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13500  001070  6ED9               	movwf	fsr2l,c
 13501  001072  6ADA               	clrf	fsr2h,c
 13502  001074  CFDE FFF6          	movff	postinc2,tblptrl
 13503  001078  CFDD FFF7          	movff	postdec2,tblptrh
 13504  00107C                     	if	0	;tblptru may be non-zero
 13505  00107C                     	endif
 13506  00107C                     	if	0	;tblptru may be non-zero
 13507  00107C                     	endif
 13508  00107C  0008               	tblrd		*
 13509  00107E  50F5               	movf	tablat,w,c
 13510  001080  6F90               	movwf	??_vfpfcnvrt& (0+255),b
 13511  001082  6B91               	clrf	(??_vfpfcnvrt+1)& (0+255),b
 13512                           
 13513                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13514                           ; Switch size 1, requested type "simple"
 13515                           ; Number of cases is 1, Range of values is 0 to 0
 13516                           ; switch strategies available:
 13517                           ; Name         Instructions Cycles
 13518                           ; simple_byte            4     3 (average)
 13519                           ;	Chosen strategy is simple_byte
 13520  001084  5191               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
 13521  001086  0A00               	xorlw	0	; case 0
 13522  001088  A4D8               	btfss	status,2,c
 13523  00108A  D7EC               	goto	l10390
 13524                           
 13525                           ; BSR set to: 0
 13526                           ; Switch size 1, requested type "simple"
 13527                           ; Number of cases is 5, Range of values is 32 to 48
 13528                           ; switch strategies available:
 13529                           ; Name         Instructions Cycles
 13530                           ; simple_byte           16     9 (average)
 13531                           ;	Chosen strategy is simple_byte
 13532  00108C  5190               	movf	??_vfpfcnvrt& (0+255),w,b
 13533  00108E  0A20               	xorlw	32	; case 32
 13534  001090  B4D8               	btfsc	status,2,c
 13535  001092  D7E2               	goto	l10382
 13536  001094  0A03               	xorlw	3	; case 35
 13537  001096  B4D8               	btfsc	status,2,c
 13538  001098  D7E2               	goto	l10386
 13539  00109A  0A08               	xorlw	8	; case 43
 13540  00109C  B4D8               	btfsc	status,2,c
 13541  00109E  D7D9               	goto	l10378
 13542  0010A0  0A06               	xorlw	6	; case 45
 13543  0010A2  B4D8               	btfsc	status,2,c
 13544  0010A4  D7C9               	goto	l10370
 13545  0010A6  0A1D               	xorlw	29	; case 48
 13546  0010A8  B4D8               	btfsc	status,2,c
 13547  0010AA  D7D0               	goto	l10374
 13548  0010AC  D7DB               	goto	l10390
 13549  0010AE                     l10396:
 13550                           
 13551                           ; BSR set to: 0
 13552                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 689:         whil
      +                          e (!done) {
 13553  0010AE  519D               	movf	vfpfcnvrt@done& (0+255),w,b
 13554  0010B0  119E               	iorwf	(vfpfcnvrt@done+1)& (0+255),w,b
 13555  0010B2  B4D8               	btfsc	status,2,c
 13556  0010B4  D7DC               	goto	l10394
 13557                           
 13558                           ; BSR set to: 0
 13559                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 716:         if (
      +                          flags & (1 << 0)) {
 13560  0010B6  0101               	movlb	1	; () banked
 13561  0010B8  B173               	btfsc	_flags& (0+255),0,b
 13562                           
 13563                           ; BSR set to: 1
 13564                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 717:             
      +                          flags &= ~(1 << 1);
 13565  0010BA  9373               	bcf	_flags& (0+255),1,b
 13566                           
 13567                           ; BSR set to: 1
 13568                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 723:         if (
      +                          (*fmt)[0] == '*') {
 13569  0010BC  0100               	movlb	0	; () banked
 13570  0010BE  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13571  0010C0  6ED9               	movwf	fsr2l,c
 13572  0010C2  6ADA               	clrf	fsr2h,c
 13573  0010C4  CFDE FFF6          	movff	postinc2,tblptrl
 13574  0010C8  CFDD FFF7          	movff	postdec2,tblptrh
 13575  0010CC                     	if	0	;tblptru may be non-zero
 13576  0010CC                     	endif
 13577  0010CC                     	if	0	;tblptru may be non-zero
 13578  0010CC                     	endif
 13579  0010CC  0008               	tblrd		*
 13580  0010CE  50F5               	movf	tablat,w,c
 13581  0010D0  0A2A               	xorlw	42
 13582  0010D2  A4D8               	btfss	status,2,c
 13583  0010D4  D01B               	goto	l10410
 13584                           
 13585                           ; BSR set to: 0
 13586                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 724:             
      +                          ++*fmt;
 13587  0010D6  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13588  0010D8  6ED9               	movwf	fsr2l,c
 13589  0010DA  6ADA               	clrf	fsr2h,c
 13590  0010DC  2ADE               	incf	postinc2,f,c
 13591  0010DE  0E00               	movlw	0
 13592  0010E0  22DD               	addwfc	postdec2,f,c
 13593                           
 13594                           ; BSR set to: 0
 13595                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 725:             
      +                          width = (*(int *)__va_arg(*(int **)ap, (int)0));
 13596  0010E2  518F               	movf	vfpfcnvrt@ap& (0+255),w,b
 13597  0010E4  6ED9               	movwf	fsr2l,c
 13598  0010E6  6ADA               	clrf	fsr2h,c
 13599  0010E8  0E02               	movlw	2
 13600  0010EA  26DF               	addwf	indf2,f,c
 13601  0010EC  5CDF               	subwf	indf2,w,c
 13602  0010EE  6ED9               	movwf	fsr2l,c
 13603  0010F0  6ADA               	clrf	fsr2h,c
 13604  0010F2  CFDE F16F          	movff	postinc2,_width
 13605  0010F6  CFDE F170          	movff	postinc2,_width+1
 13606                           
 13607                           ; BSR set to: 0
 13608                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 726:             
      +                          if (width < 0) {
 13609  0010FA  0101               	movlb	1	; () banked
 13610  0010FC  AF70               	btfss	(_width+1)& (0+255),7,b
 13611  0010FE  D03D               	goto	u9090
 13612                           
 13613                           ; BSR set to: 1
 13614                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 727:             
      +                              flags |= (1 << 0);
 13615  001100  8173               	bsf	_flags& (0+255),0,b
 13616                           
 13617                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 728:             
      +                              width = -width;
 13618  001102  6D6F               	negf	_width& (0+255),b
 13619  001104  1F70               	comf	(_width+1)& (0+255),f,b
 13620  001106  B0D8               	btfsc	status,0,c
 13621  001108  2B70               	incf	(_width+1)& (0+255),f,b
 13622  00110A  D037               	goto	u9090
 13623  00110C                     l10410:
 13624                           
 13625                           ; BSR set to: 0
 13626                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 731:             
      +                          width = atoi(*fmt);
 13627  00110C  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13628  00110E  6ED9               	movwf	fsr2l,c
 13629  001110  6ADA               	clrf	fsr2h,c
 13630  001112  CFDE F01F          	movff	postinc2,atoi@s
 13631  001116  CFDD F020          	movff	postdec2,atoi@s+1
 13632  00111A  EC86  F01B         	call	_atoi	;wreg free
 13633  00111E  C01F  F16F         	movff	?_atoi,_width
 13634  001122  C020  F170         	movff	?_atoi+1,_width+1
 13635                           
 13636                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 732:             
      +                          while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 13637  001126  D006               	goto	l10414
 13638  001128                     l10412:
 13639                           
 13640                           ; BSR set to: 0
 13641                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 733:             
      +                              ++*fmt;
 13642  001128  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13643  00112A  6ED9               	movwf	fsr2l,c
 13644  00112C  6ADA               	clrf	fsr2h,c
 13645  00112E  2ADE               	incf	postinc2,f,c
 13646  001130  0E00               	movlw	0
 13647  001132  22DD               	addwfc	postdec2,f,c
 13648  001134                     l10414:
 13649  001134  0ED0               	movlw	208
 13650  001136  0100               	movlb	0	; () banked
 13651  001138  6F90               	movwf	??_vfpfcnvrt& (0+255),b
 13652  00113A  0EFF               	movlw	255
 13653  00113C  6F91               	movwf	(??_vfpfcnvrt+1)& (0+255),b
 13654  00113E  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13655  001140  6ED9               	movwf	fsr2l,c
 13656  001142  6ADA               	clrf	fsr2h,c
 13657  001144  CFDE FFF6          	movff	postinc2,tblptrl
 13658  001148  CFDD FFF7          	movff	postdec2,tblptrh
 13659  00114C                     	if	0	;tblptru may be non-zero
 13660  00114C                     	endif
 13661  00114C                     	if	0	;tblptru may be non-zero
 13662  00114C                     	endif
 13663  00114C  0008               	tblrd		*
 13664  00114E  50F5               	movf	tablat,w,c
 13665  001150  6F92               	movwf	(??_vfpfcnvrt+2)& (0+255),b
 13666  001152  6B93               	clrf	(??_vfpfcnvrt+3)& (0+255),b
 13667  001154  5190               	movf	??_vfpfcnvrt& (0+255),w,b
 13668  001156  2792               	addwf	(??_vfpfcnvrt+2)& (0+255),f,b
 13669  001158  5191               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
 13670  00115A  2393               	addwfc	(??_vfpfcnvrt+3)& (0+255),f,b
 13671  00115C  5193               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
 13672  00115E  E106               	bnz	u9070
 13673  001160  0E0A               	movlw	10
 13674  001162  5D92               	subwf	(??_vfpfcnvrt+2)& (0+255),w,b
 13675  001164  B0D8               	btfsc	status,0,c
 13676  001166  D002               	goto	u9070
 13677  001168  0E01               	movlw	1
 13678  00116A  D001               	goto	u9080
 13679  00116C                     u9070:
 13680  00116C  0E00               	movlw	0
 13681  00116E                     u9080:
 13682  00116E  6F9F               	movwf	_vfpfcnvrt$2957& (0+255),b
 13683  001170  6BA0               	clrf	(_vfpfcnvrt$2957+1)& (0+255),b
 13684                           
 13685                           ; BSR set to: 0
 13686  001172  519F               	movf	_vfpfcnvrt$2957& (0+255),w,b
 13687  001174  11A0               	iorwf	(_vfpfcnvrt$2957+1)& (0+255),w,b
 13688  001176  A4D8               	btfss	status,2,c
 13689  001178  D7D7               	goto	l10412
 13690  00117A                     u9090:
 13691                           
 13692                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 825:         if (
      +                          (*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13693  00117A  0100               	movlb	0	; () banked
 13694  00117C  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13695  00117E  6ED9               	movwf	fsr2l,c
 13696  001180  6ADA               	clrf	fsr2h,c
 13697  001182  CFDE FFF6          	movff	postinc2,tblptrl
 13698  001186  CFDD FFF7          	movff	postdec2,tblptrh
 13699  00118A                     	if	0	;tblptru may be non-zero
 13700  00118A                     	endif
 13701  00118A                     	if	0	;tblptru may be non-zero
 13702  00118A                     	endif
 13703  00118A  0008               	tblrd		*
 13704  00118C  50F5               	movf	tablat,w,c
 13705  00118E  0A64               	xorlw	100
 13706  001190  B4D8               	btfsc	status,2,c
 13707  001192  D00C               	goto	u9110
 13708                           
 13709                           ; BSR set to: 0
 13710  001194  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13711  001196  6ED9               	movwf	fsr2l,c
 13712  001198  6ADA               	clrf	fsr2h,c
 13713  00119A  CFDE FFF6          	movff	postinc2,tblptrl
 13714  00119E  CFDD FFF7          	movff	postdec2,tblptrh
 13715  0011A2                     	if	0	;tblptru may be non-zero
 13716  0011A2                     	endif
 13717  0011A2                     	if	0	;tblptru may be non-zero
 13718  0011A2                     	endif
 13719  0011A2  0008               	tblrd		*
 13720  0011A4  50F5               	movf	tablat,w,c
 13721  0011A6  0A69               	xorlw	105
 13722  0011A8  A4D8               	btfss	status,2,c
 13723  0011AA  D034               	goto	l10432
 13724  0011AC                     u9110:
 13725                           
 13726                           ; BSR set to: 0
 13727                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 827:             
      +                          ++*fmt;
 13728  0011AC  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13729  0011AE  6ED9               	movwf	fsr2l,c
 13730  0011B0  6ADA               	clrf	fsr2h,c
 13731  0011B2  2ADE               	incf	postinc2,f,c
 13732  0011B4  0E00               	movlw	0
 13733  0011B6  22DD               	addwfc	postdec2,f,c
 13734                           
 13735                           ; BSR set to: 0
 13736                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 828:             
      +                          ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13737  0011B8  518F               	movf	vfpfcnvrt@ap& (0+255),w,b
 13738  0011BA  6ED9               	movwf	fsr2l,c
 13739  0011BC  6ADA               	clrf	fsr2h,c
 13740  0011BE  50DF               	movf	indf2,w,c
 13741  0011C0  2ADF               	incf	indf2,f,c
 13742  0011C2  2ADF               	incf	indf2,f,c
 13743  0011C4  6ED9               	movwf	fsr2l,c
 13744  0011C6  6ADA               	clrf	fsr2h,c
 13745  0011C8  CFDE F0A1          	movff	postinc2,vfpfcnvrt@ll
 13746  0011CC  CFDD F0A2          	movff	postdec2,vfpfcnvrt@ll+1
 13747  0011D0  0E00               	movlw	0
 13748  0011D2  BFA2               	btfsc	(vfpfcnvrt@ll+1)& (0+255),7,b
 13749  0011D4  0EFF               	movlw	-1
 13750  0011D6  6FA3               	movwf	(vfpfcnvrt@ll+2)& (0+255),b
 13751  0011D8  6FA4               	movwf	(vfpfcnvrt@ll+3)& (0+255),b
 13752  0011DA  6FA5               	movwf	(vfpfcnvrt@ll+4)& (0+255),b
 13753  0011DC  6FA6               	movwf	(vfpfcnvrt@ll+5)& (0+255),b
 13754  0011DE  6FA7               	movwf	(vfpfcnvrt@ll+6)& (0+255),b
 13755  0011E0  6FA8               	movwf	(vfpfcnvrt@ll+7)& (0+255),b
 13756  0011E2                     l10428:
 13757                           
 13758                           ; BSR set to: 0
 13759                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 830:             
      +                          return dtoa(fp, ll);
 13760  0011E2  C08D  F06A         	movff	vfpfcnvrt@fp,dtoa@fp
 13761  0011E6  C0A1  F06B         	movff	vfpfcnvrt@ll,dtoa@d
 13762  0011EA  C0A2  F06C         	movff	vfpfcnvrt@ll+1,dtoa@d+1
 13763  0011EE  C0A3  F06D         	movff	vfpfcnvrt@ll+2,dtoa@d+2
 13764  0011F2  C0A4  F06E         	movff	vfpfcnvrt@ll+3,dtoa@d+3
 13765  0011F6  C0A5  F06F         	movff	vfpfcnvrt@ll+4,dtoa@d+4
 13766  0011FA  C0A6  F070         	movff	vfpfcnvrt@ll+5,dtoa@d+5
 13767  0011FE  C0A7  F071         	movff	vfpfcnvrt@ll+6,dtoa@d+6
 13768  001202  C0A8  F072         	movff	vfpfcnvrt@ll+7,dtoa@d+7
 13769  001206  ECD3  F00F         	call	_dtoa	;wreg free
 13770  00120A  C06A  F08D         	movff	?_dtoa,?_vfpfcnvrt
 13771  00120E  C06B  F08E         	movff	?_dtoa+1,?_vfpfcnvrt+1
 13772  001212  0012               	return	
 13773  001214                     l10432:
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 835:         if (
      +                          !strncmp(*fmt, "ld", ((sizeof("ld")/sizeof("ld"[0]))-1)) || !strncmp(*fmt, "li", ((sizeo
      +                          f("li")/sizeof("li"[0]))-1))) {
 13777  001214  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13778  001216  6ED9               	movwf	fsr2l,c
 13779  001218  6ADA               	clrf	fsr2h,c
 13780  00121A  CFDE F018          	movff	postinc2,strncmp@_l
 13781  00121E  CFDD F019          	movff	postdec2,strncmp@_l+1
 13782  001222  0EED               	movlw	low STR_138
 13783  001224  6E1A               	movwf	strncmp@_r^0,c
 13784  001226  0E7F               	movlw	high STR_138
 13785  001228  6E1B               	movwf	(strncmp@_r+1)^0,c
 13786  00122A  0E00               	movlw	0
 13787  00122C  6E1D               	movwf	(strncmp@n+1)^0,c
 13788  00122E  0E02               	movlw	2
 13789  001230  6E1C               	movwf	strncmp@n^0,c
 13790  001232  EC77  F021         	call	_strncmp	;wreg free
 13791  001236  5018               	movf	?_strncmp^0,w,c
 13792  001238  1019               	iorwf	(?_strncmp+1)^0,w,c
 13793  00123A  B4D8               	btfsc	status,2,c
 13794  00123C  D015               	goto	u9130
 13795                           
 13796                           ; BSR set to: 0
 13797  00123E  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13798  001240  6ED9               	movwf	fsr2l,c
 13799  001242  6ADA               	clrf	fsr2h,c
 13800  001244  CFDE F018          	movff	postinc2,strncmp@_l
 13801  001248  CFDD F019          	movff	postdec2,strncmp@_l+1
 13802  00124C  0EF0               	movlw	low STR_142
 13803  00124E  6E1A               	movwf	strncmp@_r^0,c
 13804  001250  0E7F               	movlw	high STR_142
 13805  001252  6E1B               	movwf	(strncmp@_r+1)^0,c
 13806  001254  0E00               	movlw	0
 13807  001256  6E1D               	movwf	(strncmp@n+1)^0,c
 13808  001258  0E02               	movlw	2
 13809  00125A  6E1C               	movwf	strncmp@n^0,c
 13810  00125C  EC77  F021         	call	_strncmp	;wreg free
 13811  001260  5018               	movf	?_strncmp^0,w,c
 13812  001262  1019               	iorwf	(?_strncmp+1)^0,w,c
 13813  001264  A4D8               	btfss	status,2,c
 13814  001266  D03B               	goto	l10444
 13815  001268                     u9130:
 13816                           
 13817                           ; BSR set to: 0
 13818                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 836: ;C:\Program 
      +                          Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 838:             *fmt += ((si
      +                          zeof("ld")/sizeof("ld"[0]))-1);
 13819  001268  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13820  00126A  6ED9               	movwf	fsr2l,c
 13821  00126C  6ADA               	clrf	fsr2h,c
 13822  00126E  0E02               	movlw	2
 13823  001270  26DE               	addwf	postinc2,f,c
 13824  001272  0E00               	movlw	0
 13825  001274  22DD               	addwfc	postdec2,f,c
 13826                           
 13827                           ; BSR set to: 0
 13828                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 839:             
      +                          ll = (long long)(*(long *)__va_arg(*(long **)ap, (long)0));
 13829  001276  518F               	movf	vfpfcnvrt@ap& (0+255),w,b
 13830  001278  6ED9               	movwf	fsr2l,c
 13831  00127A  6ADA               	clrf	fsr2h,c
 13832  00127C  CFDF F090          	movff	indf2,??_vfpfcnvrt
 13833  001280  0E04               	movlw	4
 13834  001282  26DF               	addwf	indf2,f,c
 13835  001284  5190               	movf	??_vfpfcnvrt& (0+255),w,b
 13836  001286  6ED9               	movwf	fsr2l,c
 13837  001288  6ADA               	clrf	fsr2h,c
 13838  00128A  CFDE F091          	movff	postinc2,??_vfpfcnvrt+1
 13839  00128E  CFDE F092          	movff	postinc2,??_vfpfcnvrt+2
 13840  001292  CFDE F093          	movff	postinc2,??_vfpfcnvrt+3
 13841  001296  CFDE F094          	movff	postinc2,??_vfpfcnvrt+4
 13842  00129A  C091  F095         	movff	??_vfpfcnvrt+1,??_vfpfcnvrt+5
 13843  00129E  C092  F096         	movff	??_vfpfcnvrt+2,??_vfpfcnvrt+6
 13844  0012A2  C093  F097         	movff	??_vfpfcnvrt+3,??_vfpfcnvrt+7
 13845  0012A6  C094  F098         	movff	??_vfpfcnvrt+4,??_vfpfcnvrt+8
 13846  0012AA  6B99               	clrf	(??_vfpfcnvrt+9)& (0+255),b
 13847  0012AC  BF98               	btfsc	(??_vfpfcnvrt+8)& (0+255),7,b
 13848  0012AE  6999               	setf	(??_vfpfcnvrt+9)& (0+255),b
 13849  0012B0  C099  F09A         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+10
 13850  0012B4  C099  F09B         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+11
 13851  0012B8  C099  F09C         	movff	??_vfpfcnvrt+9,??_vfpfcnvrt+12
 13852  0012BC  C095  F0A1         	movff	??_vfpfcnvrt+5,vfpfcnvrt@ll
 13853  0012C0  C096  F0A2         	movff	??_vfpfcnvrt+6,vfpfcnvrt@ll+1
 13854  0012C4  C097  F0A3         	movff	??_vfpfcnvrt+7,vfpfcnvrt@ll+2
 13855  0012C8  C098  F0A4         	movff	??_vfpfcnvrt+8,vfpfcnvrt@ll+3
 13856  0012CC  C099  F0A5         	movff	??_vfpfcnvrt+9,vfpfcnvrt@ll+4
 13857  0012D0  C09A  F0A6         	movff	??_vfpfcnvrt+10,vfpfcnvrt@ll+5
 13858  0012D4  C09B  F0A7         	movff	??_vfpfcnvrt+11,vfpfcnvrt@ll+6
 13859  0012D8  C09C  F0A8         	movff	??_vfpfcnvrt+12,vfpfcnvrt@ll+7
 13860  0012DC  D782               	goto	l10428
 13861  0012DE                     l10444:
 13862                           
 13863                           ; BSR set to: 0
 13864                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1182:         if 
      +                          (*fmt[0] == 'u') {
 13865  0012DE  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13866  0012E0  6ED9               	movwf	fsr2l,c
 13867  0012E2  6ADA               	clrf	fsr2h,c
 13868  0012E4  CFDE FFF6          	movff	postinc2,tblptrl
 13869  0012E8  CFDD FFF7          	movff	postdec2,tblptrh
 13870  0012EC                     	if	0	;tblptru may be non-zero
 13871  0012EC                     	endif
 13872  0012EC                     	if	0	;tblptru may be non-zero
 13873  0012EC                     	endif
 13874  0012EC  0008               	tblrd		*
 13875  0012EE  50F5               	movf	tablat,w,c
 13876  0012F0  0A75               	xorlw	117
 13877  0012F2  A4D8               	btfss	status,2,c
 13878  0012F4  D035               	goto	l10454
 13879                           
 13880                           ; BSR set to: 0
 13881                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1184:            
      +                           ++*fmt;
 13882  0012F6  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13883  0012F8  6ED9               	movwf	fsr2l,c
 13884  0012FA  6ADA               	clrf	fsr2h,c
 13885  0012FC  2ADE               	incf	postinc2,f,c
 13886  0012FE  0E00               	movlw	0
 13887  001300  22DD               	addwfc	postdec2,f,c
 13888                           
 13889                           ; BSR set to: 0
 13890                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1185:            
      +                           llu = (unsigned long long)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned in
      +                          t)0));
 13891  001302  518F               	movf	vfpfcnvrt@ap& (0+255),w,b
 13892  001304  6ED9               	movwf	fsr2l,c
 13893  001306  6ADA               	clrf	fsr2h,c
 13894  001308  50DF               	movf	indf2,w,c
 13895  00130A  2ADF               	incf	indf2,f,c
 13896  00130C  2ADF               	incf	indf2,f,c
 13897  00130E  6ED9               	movwf	fsr2l,c
 13898  001310  6ADA               	clrf	fsr2h,c
 13899  001312  CFDE F090          	movff	postinc2,??_vfpfcnvrt
 13900  001316  CFDD F091          	movff	postdec2,??_vfpfcnvrt+1
 13901  00131A  C090  F0A9         	movff	??_vfpfcnvrt,vfpfcnvrt@llu
 13902  00131E  C091  F0AA         	movff	??_vfpfcnvrt+1,vfpfcnvrt@llu+1
 13903  001322  6BAB               	clrf	(vfpfcnvrt@llu+2)& (0+255),b
 13904  001324  6BAC               	clrf	(vfpfcnvrt@llu+3)& (0+255),b
 13905  001326  6BAD               	clrf	(vfpfcnvrt@llu+4)& (0+255),b
 13906  001328  6BAE               	clrf	(vfpfcnvrt@llu+5)& (0+255),b
 13907  00132A  6BAF               	clrf	(vfpfcnvrt@llu+6)& (0+255),b
 13908  00132C  6BB0               	clrf	(vfpfcnvrt@llu+7)& (0+255),b
 13909                           
 13910                           ; BSR set to: 0
 13911                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1187:            
      +                           return utoa(fp, llu);
 13912  00132E  C08D  F060         	movff	vfpfcnvrt@fp,utoa@fp
 13913  001332  C0A9  F061         	movff	vfpfcnvrt@llu,utoa@d
 13914  001336  C0AA  F062         	movff	vfpfcnvrt@llu+1,utoa@d+1
 13915  00133A  C0AB  F063         	movff	vfpfcnvrt@llu+2,utoa@d+2
 13916  00133E  C0AC  F064         	movff	vfpfcnvrt@llu+3,utoa@d+3
 13917  001342  C0AD  F065         	movff	vfpfcnvrt@llu+4,utoa@d+4
 13918  001346  C0AE  F066         	movff	vfpfcnvrt@llu+5,utoa@d+5
 13919  00134A  C0AF  F067         	movff	vfpfcnvrt@llu+6,utoa@d+6
 13920  00134E  C0B0  F068         	movff	vfpfcnvrt@llu+7,utoa@d+7
 13921  001352  ECCA  F017         	call	_utoa	;wreg free
 13922  001356  C060  F08D         	movff	?_utoa,?_vfpfcnvrt
 13923  00135A  C061  F08E         	movff	?_utoa+1,?_vfpfcnvrt+1
 13924  00135E  0012               	return	
 13925  001360                     l10454:
 13926                           
 13927                           ; BSR set to: 0
 13928                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1192:         if 
      +                          (!strncmp(*fmt, "lu", ((sizeof("lu")/sizeof("lu"[0]))-1))) {
 13929  001360  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13930  001362  6ED9               	movwf	fsr2l,c
 13931  001364  6ADA               	clrf	fsr2h,c
 13932  001366  CFDE F018          	movff	postinc2,strncmp@_l
 13933  00136A  CFDD F019          	movff	postdec2,strncmp@_l+1
 13934  00136E  0EEA               	movlw	low (STR_75+1)
 13935  001370  6E1A               	movwf	strncmp@_r^0,c
 13936  001372  0E7F               	movlw	high (STR_75+1)
 13937  001374  6E1B               	movwf	(strncmp@_r+1)^0,c
 13938  001376  0E00               	movlw	0
 13939  001378  6E1D               	movwf	(strncmp@n+1)^0,c
 13940  00137A  0E02               	movlw	2
 13941  00137C  6E1C               	movwf	strncmp@n^0,c
 13942  00137E  EC77  F021         	call	_strncmp	;wreg free
 13943  001382  5018               	movf	?_strncmp^0,w,c
 13944  001384  1019               	iorwf	(?_strncmp+1)^0,w,c
 13945  001386  A4D8               	btfss	status,2,c
 13946  001388  D022               	goto	l10464
 13947                           
 13948                           ; BSR set to: 0
 13949                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1194:            
      +                           *fmt += ((sizeof("lu")/sizeof("lu"[0]))-1);
 13950  00138A  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13951  00138C  6ED9               	movwf	fsr2l,c
 13952  00138E  6ADA               	clrf	fsr2h,c
 13953  001390  0E02               	movlw	2
 13954  001392  26DE               	addwf	postinc2,f,c
 13955  001394  0E00               	movlw	0
 13956  001396  22DD               	addwfc	postdec2,f,c
 13957                           
 13958                           ; BSR set to: 0
 13959                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1195:            
      +                           llu = (unsigned long long)(*(unsigned long *)__va_arg(*(unsigned long **)ap, (unsigned 
      +                          long)0));
 13960  001398  518F               	movf	vfpfcnvrt@ap& (0+255),w,b
 13961  00139A  6ED9               	movwf	fsr2l,c
 13962  00139C  6ADA               	clrf	fsr2h,c
 13963  00139E  CFDF F090          	movff	indf2,??_vfpfcnvrt
 13964  0013A2  0E04               	movlw	4
 13965  0013A4  26DF               	addwf	indf2,f,c
 13966  0013A6  5190               	movf	??_vfpfcnvrt& (0+255),w,b
 13967  0013A8  6ED9               	movwf	fsr2l,c
 13968  0013AA  6ADA               	clrf	fsr2h,c
 13969  0013AC  CFDE F091          	movff	postinc2,??_vfpfcnvrt+1
 13970  0013B0  CFDE F092          	movff	postinc2,??_vfpfcnvrt+2
 13971  0013B4  CFDE F093          	movff	postinc2,??_vfpfcnvrt+3
 13972  0013B8  CFDE F094          	movff	postinc2,??_vfpfcnvrt+4
 13973  0013BC  5191               	movf	(??_vfpfcnvrt+1)& (0+255),w,b
 13974  0013BE  6FA9               	movwf	vfpfcnvrt@llu& (0+255),b
 13975  0013C0  5192               	movf	(??_vfpfcnvrt+2)& (0+255),w,b
 13976  0013C2  6FAA               	movwf	(vfpfcnvrt@llu+1)& (0+255),b
 13977  0013C4  5193               	movf	(??_vfpfcnvrt+3)& (0+255),w,b
 13978  0013C6  6FAB               	movwf	(vfpfcnvrt@llu+2)& (0+255),b
 13979  0013C8  5194               	movf	(??_vfpfcnvrt+4)& (0+255),w,b
 13980  0013CA  6FAC               	movwf	(vfpfcnvrt@llu+3)& (0+255),b
 13981  0013CC  D7AC               	goto	L18
 13982  0013CE                     l10464:
 13983                           
 13984                           ; BSR set to: 0
 13985                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1350:         if 
      +                          ((*fmt)[0] == '%') {
 13986  0013CE  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 13987  0013D0  6ED9               	movwf	fsr2l,c
 13988  0013D2  6ADA               	clrf	fsr2h,c
 13989  0013D4  CFDE FFF6          	movff	postinc2,tblptrl
 13990  0013D8  CFDD FFF7          	movff	postdec2,tblptrh
 13991  0013DC                     	if	0	;tblptru may be non-zero
 13992  0013DC                     	endif
 13993  0013DC                     	if	0	;tblptru may be non-zero
 13994  0013DC                     	endif
 13995  0013DC  0008               	tblrd		*
 13996  0013DE  50F5               	movf	tablat,w,c
 13997  0013E0  0A25               	xorlw	37
 13998  0013E2  A4D8               	btfss	status,2,c
 13999  0013E4  D014               	goto	l10474
 14000                           
 14001                           ; BSR set to: 0
 14002                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1351:            
      +                           ++*fmt;
 14003  0013E6  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 14004  0013E8  6ED9               	movwf	fsr2l,c
 14005  0013EA  6ADA               	clrf	fsr2h,c
 14006  0013EC  2ADE               	incf	postinc2,f,c
 14007  0013EE  0E00               	movlw	0
 14008  0013F0  22DD               	addwfc	postdec2,f,c
 14009                           
 14010                           ; BSR set to: 0
 14011                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1352:            
      +                           fputc((int)'%', fp);
 14012  0013F2  0E00               	movlw	0
 14013  0013F4  6E19               	movwf	(fputc@c+1)^0,c
 14014  0013F6  0E25               	movlw	37
 14015  0013F8  6E18               	movwf	fputc@c^0,c
 14016  0013FA  C08D  F01A         	movff	vfpfcnvrt@fp,fputc@fp
 14017  0013FE  EC63  F022         	call	_fputc	;wreg free
 14018  001402                     l10470:
 14019                           
 14020                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1353:            
      +                           return 1;
 14021  001402  0E00               	movlw	0
 14022  001404  0100               	movlb	0	; () banked
 14023  001406  6F8E               	movwf	(?_vfpfcnvrt+1)& (0+255),b
 14024  001408  0E01               	movlw	1
 14025  00140A  6F8D               	movwf	?_vfpfcnvrt& (0+255),b
 14026  00140C  0012               	return	
 14027  00140E                     l10474:
 14028                           
 14029                           ; BSR set to: 0
 14030                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1357:         ++*
      +                          fmt;
 14031  00140E  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 14032  001410  6ED9               	movwf	fsr2l,c
 14033  001412  6ADA               	clrf	fsr2h,c
 14034  001414  2ADE               	incf	postinc2,f,c
 14035  001416  0E00               	movlw	0
 14036  001418  22DD               	addwfc	postdec2,f,c
 14037                           
 14038                           ; BSR set to: 0
 14039                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1358:         ret
      +                          urn 0;
 14040  00141A  0E00               	movlw	0
 14041  00141C  6F8E               	movwf	(?_vfpfcnvrt+1)& (0+255),b
 14042  00141E  0E00               	movlw	0
 14043  001420  6F8D               	movwf	?_vfpfcnvrt& (0+255),b
 14044  001422  0012               	return	
 14045  001424                     l10480:
 14046                           
 14047                           ; BSR set to: 0
 14048                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1362:     fputc((
      +                          int)(*fmt)[0], fp);
 14049  001424  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 14050  001426  6ED9               	movwf	fsr2l,c
 14051  001428  6ADA               	clrf	fsr2h,c
 14052  00142A  CFDE FFF6          	movff	postinc2,tblptrl
 14053  00142E  CFDD FFF7          	movff	postdec2,tblptrh
 14054  001432                     	if	0	;tblptru may be non-zero
 14055  001432                     	endif
 14056  001432                     	if	0	;tblptru may be non-zero
 14057  001432                     	endif
 14058  001432  0008               	tblrd		*
 14059  001434  50F5               	movf	tablat,w,c
 14060  001436  6E18               	movwf	fputc@c^0,c
 14061  001438  6A19               	clrf	(fputc@c+1)^0,c
 14062  00143A  C08D  F01A         	movff	vfpfcnvrt@fp,fputc@fp
 14063  00143E  EC63  F022         	call	_fputc	;wreg free
 14064                           
 14065                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 1363:     ++*fmt;
 14066  001442  0100               	movlb	0	; () banked
 14067  001444  518E               	movf	vfpfcnvrt@fmt& (0+255),w,b
 14068  001446  6ED9               	movwf	fsr2l,c
 14069  001448  6ADA               	clrf	fsr2h,c
 14070  00144A  2ADE               	incf	postinc2,f,c
 14071  00144C  0E00               	movlw	0
 14072  00144E  22DD               	addwfc	postdec2,f,c
 14073  001450  D7D8               	goto	l10470
 14074  001452                     __end_of_vfpfcnvrt:
 14075                           	callstack 0
 14076                           
 14077 ;; *************** function _utoa *****************
 14078 ;; Defined at:
 14079 ;;		line 593 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c"
 14080 ;; Parameters:    Size  Location     Type
 14081 ;;  fp              1    0[BANK0 ] PTR struct _IO_FILE
 14082 ;;		 -> sprintf@f(6), 
 14083 ;;  d               8    1[BANK0 ] unsigned long long 
 14084 ;; Auto vars:     Size  Location     Type
 14085 ;;  n               8   21[BANK0 ] unsigned long long 
 14086 ;;  i               2   29[BANK0 ] int 
 14087 ;;  w               2   19[BANK0 ] int 
 14088 ;;  p               2   17[BANK0 ] int 
 14089 ;; Return value:  Size  Location     Type
 14090 ;;                  2    0[BANK0 ] int 
 14091 ;; Registers used:
 14092 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14093 ;; Tracked objects:
 14094 ;;		On entry : 3F/0
 14095 ;;		On exit  : 0/0
 14096 ;;		Unchanged: 0/0
 14097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14098 ;;      Params:         0       9       0       0       0       0       0       0       0
 14099 ;;      Locals:         0      14       0       0       0       0       0       0       0
 14100 ;;      Temps:          0       8       0       0       0       0       0       0       0
 14101 ;;      Totals:         0      31       0       0       0       0       0       0       0
 14102 ;;Total ram usage:       31 bytes
 14103 ;; Hardware stack levels used:    1
 14104 ;; Hardware stack levels required when called:   11
 14105 ;; This function calls:
 14106 ;;		___lodiv
 14107 ;;		___lomod
 14108 ;;		_pad
 14109 ;; This function is called by:
 14110 ;;		_vfpfcnvrt
 14111 ;; This function uses a non-reentrant model
 14112 ;;
 14113                           
 14114                           	psect	text49
 14115  002F94                     __ptext49:
 14116                           	callstack 0
 14117  002F94                     _utoa:
 14118                           	callstack 14
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 593: static int u
      +                          toa(FILE *fp, unsigned long long d);C:\Program Files (x86)\Microchip\xc8\pic\sources\c99
      +                          \common\doprnt.c: 594: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\dop
      +                          rnt.c: 595:     int i, p, w;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common
      +                          \doprnt.c: 596:     unsigned long long n;;C:\Program Files (x86)\Microchip\xc8\pic\sourc
      +                          es\c99\common\doprnt.c: 599:     if (!(prec < 0)) {
 14122                           
 14123                           ;incstack = 0
 14124  002F94  0101               	movlb	1	; () banked
 14125  002F96  AF72               	btfss	(_prec+1)& (0+255),7,b
 14126                           
 14127                           ; BSR set to: 1
 14128                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 600:         flag
      +                          s &= ~(1 << 1);
 14129  002F98  9373               	bcf	_flags& (0+255),1,b
 14130                           
 14131                           ; BSR set to: 1
 14132                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 602:     p = (0 <
      +                           prec) ? prec : 1;
 14133  002F9A  BF72               	btfsc	(_prec+1)& (0+255),7,b
 14134  002F9C  D005               	goto	u8840
 14135  002F9E  5172               	movf	(_prec+1)& (0+255),w,b
 14136  002FA0  E109               	bnz	l2531
 14137  002FA2  0571               	decf	_prec& (0+255),w,b
 14138  002FA4  B0D8               	btfsc	status,0,c
 14139  002FA6  D006               	goto	l2531
 14140  002FA8                     u8840:
 14141                           
 14142                           ; BSR set to: 1
 14143  002FA8  0E00               	movlw	0
 14144  002FAA  0100               	movlb	0	; () banked
 14145  002FAC  6F72               	movwf	(utoa@p+1)& (0+255),b
 14146  002FAE  0E01               	movlw	1
 14147  002FB0  6F71               	movwf	utoa@p& (0+255),b
 14148  002FB2  D004               	goto	l2533
 14149  002FB4                     l2531:
 14150                           
 14151                           ; BSR set to: 1
 14152  002FB4  C171  F071         	movff	_prec,utoa@p
 14153  002FB8  C172  F072         	movff	_prec+1,utoa@p+1
 14154  002FBC                     l2533:
 14155                           
 14156                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 603:     w = widt
      +                          h;
 14157  002FBC  C16F  F073         	movff	_width,utoa@w
 14158  002FC0  C170  F074         	movff	_width+1,utoa@w+1
 14159                           
 14160                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 606:     n = d;
 14161  002FC4  C061  F075         	movff	utoa@d,utoa@n
 14162  002FC8  C062  F076         	movff	utoa@d+1,utoa@n+1
 14163  002FCC  C063  F077         	movff	utoa@d+2,utoa@n+2
 14164  002FD0  C064  F078         	movff	utoa@d+3,utoa@n+3
 14165  002FD4  C065  F079         	movff	utoa@d+4,utoa@n+4
 14166  002FD8  C066  F07A         	movff	utoa@d+5,utoa@n+5
 14167  002FDC  C067  F07B         	movff	utoa@d+6,utoa@n+6
 14168  002FE0  C068  F07C         	movff	utoa@d+7,utoa@n+7
 14169                           
 14170                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 607:     i = size
      +                          of(dbuf) - 1;
 14171  002FE4  0E00               	movlw	0
 14172  002FE6  0100               	movlb	0	; () banked
 14173  002FE8  6F7E               	movwf	(utoa@i+1)& (0+255),b
 14174  002FEA  0E1F               	movlw	31
 14175  002FEC  6F7D               	movwf	utoa@i& (0+255),b
 14176                           
 14177                           ; BSR set to: 0
 14178                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 608:     dbuf[i] 
      +                          = '\0';
 14179  002FEE  0E00               	movlw	0
 14180  002FF0  0101               	movlb	1	; () banked
 14181  002FF2  6FB3               	movwf	(_dbuf+31)& (0+255),b
 14182                           
 14183                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 609:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14184  002FF4  D077               	goto	l10278
 14185  002FF6                     l10268:
 14186                           
 14187                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 610:         --i;
 14188  002FF6  0100               	movlb	0	; () banked
 14189  002FF8  077D               	decf	utoa@i& (0+255),f,b
 14190  002FFA  A0D8               	btfss	status,0,c
 14191  002FFC  077E               	decf	(utoa@i+1)& (0+255),f,b
 14192                           
 14193                           ; BSR set to: 0
 14194                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 611:         dbuf
      +                          [i] = '0' + (n % 10);
 14195  002FFE  0E94               	movlw	low _dbuf
 14196  003000  257D               	addwf	utoa@i& (0+255),w,b
 14197  003002  6ED9               	movwf	fsr2l,c
 14198  003004  0E01               	movlw	high _dbuf
 14199  003006  217E               	addwfc	(utoa@i+1)& (0+255),w,b
 14200  003008  6EDA               	movwf	fsr2h,c
 14201  00300A  C075  F018         	movff	utoa@n,___lomod@dividend
 14202  00300E  C076  F019         	movff	utoa@n+1,___lomod@dividend+1
 14203  003012  C077  F01A         	movff	utoa@n+2,___lomod@dividend+2
 14204  003016  C078  F01B         	movff	utoa@n+3,___lomod@dividend+3
 14205  00301A  C079  F01C         	movff	utoa@n+4,___lomod@dividend+4
 14206  00301E  C07A  F01D         	movff	utoa@n+5,___lomod@dividend+5
 14207  003022  C07B  F01E         	movff	utoa@n+6,___lomod@dividend+6
 14208  003026  C07C  F01F         	movff	utoa@n+7,___lomod@dividend+7
 14209  00302A  0E0A               	movlw	10
 14210  00302C  6E20               	movwf	___lomod@divisor^0,c
 14211  00302E  0E00               	movlw	0
 14212  003030  6E21               	movwf	(___lomod@divisor+1)^0,c
 14213  003032  0E00               	movlw	0
 14214  003034  6E22               	movwf	(___lomod@divisor+2)^0,c
 14215  003036  0E00               	movlw	0
 14216  003038  6E23               	movwf	(___lomod@divisor+3)^0,c
 14217  00303A  0E00               	movlw	0
 14218  00303C  6E24               	movwf	(___lomod@divisor+4)^0,c
 14219  00303E  0E00               	movlw	0
 14220  003040  6E25               	movwf	(___lomod@divisor+5)^0,c
 14221  003042  0E00               	movlw	0
 14222  003044  6E26               	movwf	(___lomod@divisor+6)^0,c
 14223  003046  0E00               	movlw	0
 14224  003048  6E27               	movwf	(___lomod@divisor+7)^0,c
 14225  00304A  ECCB  F020         	call	___lomod	;wreg free
 14226  00304E  C018  F069         	movff	?___lomod,??_utoa
 14227  003052  C019  F06A         	movff	?___lomod+1,??_utoa+1
 14228  003056  C01A  F06B         	movff	?___lomod+2,??_utoa+2
 14229  00305A  C01B  F06C         	movff	?___lomod+3,??_utoa+3
 14230  00305E  C01C  F06D         	movff	?___lomod+4,??_utoa+4
 14231  003062  C01D  F06E         	movff	?___lomod+5,??_utoa+5
 14232  003066  C01E  F06F         	movff	?___lomod+6,??_utoa+6
 14233  00306A  C01F  F070         	movff	?___lomod+7,??_utoa+7
 14234  00306E  5169               	movf	??_utoa& (0+255),w,b
 14235  003070  0F30               	addlw	48
 14236  003072  6EDF               	movwf	indf2,c
 14237                           
 14238                           ; BSR set to: 0
 14239                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 612:         --p;
 14240  003074  0771               	decf	utoa@p& (0+255),f,b
 14241  003076  A0D8               	btfss	status,0,c
 14242  003078  0772               	decf	(utoa@p+1)& (0+255),f,b
 14243                           
 14244                           ; BSR set to: 0
 14245                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 613:         --w;
 14246  00307A  0773               	decf	utoa@w& (0+255),f,b
 14247  00307C  A0D8               	btfss	status,0,c
 14248  00307E  0774               	decf	(utoa@w+1)& (0+255),f,b
 14249                           
 14250                           ; BSR set to: 0
 14251                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 614:         n = 
      +                          n / 10;
 14252  003080  C075  F018         	movff	utoa@n,___lodiv@dividend
 14253  003084  C076  F019         	movff	utoa@n+1,___lodiv@dividend+1
 14254  003088  C077  F01A         	movff	utoa@n+2,___lodiv@dividend+2
 14255  00308C  C078  F01B         	movff	utoa@n+3,___lodiv@dividend+3
 14256  003090  C079  F01C         	movff	utoa@n+4,___lodiv@dividend+4
 14257  003094  C07A  F01D         	movff	utoa@n+5,___lodiv@dividend+5
 14258  003098  C07B  F01E         	movff	utoa@n+6,___lodiv@dividend+6
 14259  00309C  C07C  F01F         	movff	utoa@n+7,___lodiv@dividend+7
 14260  0030A0  0E0A               	movlw	10
 14261  0030A2  6E20               	movwf	___lodiv@divisor^0,c
 14262  0030A4  0E00               	movlw	0
 14263  0030A6  6E21               	movwf	(___lodiv@divisor+1)^0,c
 14264  0030A8  0E00               	movlw	0
 14265  0030AA  6E22               	movwf	(___lodiv@divisor+2)^0,c
 14266  0030AC  0E00               	movlw	0
 14267  0030AE  6E23               	movwf	(___lodiv@divisor+3)^0,c
 14268  0030B0  0E00               	movlw	0
 14269  0030B2  6E24               	movwf	(___lodiv@divisor+4)^0,c
 14270  0030B4  0E00               	movlw	0
 14271  0030B6  6E25               	movwf	(___lodiv@divisor+5)^0,c
 14272  0030B8  0E00               	movlw	0
 14273  0030BA  6E26               	movwf	(___lodiv@divisor+6)^0,c
 14274  0030BC  0E00               	movlw	0
 14275  0030BE  6E27               	movwf	(___lodiv@divisor+7)^0,c
 14276  0030C0  EC80  F01E         	call	___lodiv	;wreg free
 14277  0030C4  C018  F075         	movff	?___lodiv,utoa@n
 14278  0030C8  C019  F076         	movff	?___lodiv+1,utoa@n+1
 14279  0030CC  C01A  F077         	movff	?___lodiv+2,utoa@n+2
 14280  0030D0  C01B  F078         	movff	?___lodiv+3,utoa@n+3
 14281  0030D4  C01C  F079         	movff	?___lodiv+4,utoa@n+4
 14282  0030D8  C01D  F07A         	movff	?___lodiv+5,utoa@n+5
 14283  0030DC  C01E  F07B         	movff	?___lodiv+6,utoa@n+6
 14284  0030E0  C01F  F07C         	movff	?___lodiv+7,utoa@n+7
 14285  0030E4                     l10278:
 14286                           
 14287                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 609:     while (i
      +                           && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14288  0030E4  0100               	movlb	0	; () banked
 14289  0030E6  517D               	movf	utoa@i& (0+255),w,b
 14290  0030E8  117E               	iorwf	(utoa@i+1)& (0+255),w,b
 14291  0030EA  B4D8               	btfsc	status,2,c
 14292  0030EC  D01B               	goto	u8890
 14293                           
 14294                           ; BSR set to: 0
 14295  0030EE  5175               	movf	utoa@n& (0+255),w,b
 14296  0030F0  1176               	iorwf	(utoa@n+1)& (0+255),w,b
 14297  0030F2  1177               	iorwf	(utoa@n+2)& (0+255),w,b
 14298  0030F4  1178               	iorwf	(utoa@n+3)& (0+255),w,b
 14299  0030F6  1179               	iorwf	(utoa@n+4)& (0+255),w,b
 14300  0030F8  117A               	iorwf	(utoa@n+5)& (0+255),w,b
 14301  0030FA  117B               	iorwf	(utoa@n+6)& (0+255),w,b
 14302  0030FC  117C               	iorwf	(utoa@n+7)& (0+255),w,b
 14303  0030FE  A4D8               	btfss	status,2,c
 14304  003100  D77A               	goto	l10268
 14305                           
 14306                           ; BSR set to: 0
 14307  003102  BF72               	btfsc	(utoa@p+1)& (0+255),7,b
 14308  003104  D005               	goto	u8870
 14309  003106  5172               	movf	(utoa@p+1)& (0+255),w,b
 14310  003108  E102               	bnz	u8871
 14311  00310A  0571               	decf	utoa@p& (0+255),w,b
 14312  00310C  B0D8               	btfsc	status,0,c
 14313  00310E                     u8871:
 14314  00310E  D773               	goto	l10268
 14315  003110                     u8870:
 14316                           
 14317                           ; BSR set to: 0
 14318  003110  BF74               	btfsc	(utoa@w+1)& (0+255),7,b
 14319  003112  D008               	goto	u8890
 14320  003114  5174               	movf	(utoa@w+1)& (0+255),w,b
 14321  003116  E103               	bnz	u8880
 14322  003118  0573               	decf	utoa@w& (0+255),w,b
 14323  00311A  A0D8               	btfss	status,0,c
 14324  00311C  D003               	goto	u8890
 14325  00311E                     u8880:
 14326                           
 14327                           ; BSR set to: 0
 14328  00311E  0101               	movlb	1	; () banked
 14329  003120  B373               	btfsc	_flags& (0+255),1,b
 14330  003122  D769               	goto	l10268
 14331  003124                     u8890:
 14332                           
 14333                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 618:     return p
      +                          ad(fp, &dbuf[i], w);
 14334  003124  C060  F026         	movff	utoa@fp,pad@fp
 14335  003128  0E94               	movlw	low _dbuf
 14336  00312A  0100               	movlb	0	; () banked
 14337  00312C  257D               	addwf	utoa@i& (0+255),w,b
 14338  00312E  6E27               	movwf	pad@buf^0,c
 14339  003130  0E01               	movlw	high _dbuf
 14340  003132  217E               	addwfc	(utoa@i+1)& (0+255),w,b
 14341  003134  6E28               	movwf	(pad@buf+1)^0,c
 14342  003136  C073  F029         	movff	utoa@w,pad@p
 14343  00313A  C074  F02A         	movff	utoa@w+1,pad@p+1
 14344  00313E  ECAB  F022         	call	_pad	;wreg free
 14345  003142  C026  F060         	movff	?_pad,?_utoa
 14346  003146  C027  F061         	movff	?_pad+1,?_utoa+1
 14347  00314A  0012               	return		;funcret
 14348  00314C                     __end_of_utoa:
 14349                           	callstack 0
 14350                           
 14351 ;; *************** function ___lomod *****************
 14352 ;; Defined at:
 14353 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\lomod.c"
 14354 ;; Parameters:    Size  Location     Type
 14355 ;;  dividend        8   23[COMRAM] unsigned long long 
 14356 ;;  divisor         8   31[COMRAM] unsigned long long 
 14357 ;; Auto vars:     Size  Location     Type
 14358 ;;  counter         1   39[COMRAM] unsigned char 
 14359 ;; Return value:  Size  Location     Type
 14360 ;;                  8   23[COMRAM] unsigned long long 
 14361 ;; Registers used:
 14362 ;;		wreg, status,2, status,0
 14363 ;; Tracked objects:
 14364 ;;		On entry : 3F/0
 14365 ;;		On exit  : 3F/0
 14366 ;;		Unchanged: 3F/0
 14367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14368 ;;      Params:        16       0       0       0       0       0       0       0       0
 14369 ;;      Locals:         1       0       0       0       0       0       0       0       0
 14370 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14371 ;;      Totals:        17       0       0       0       0       0       0       0       0
 14372 ;;Total ram usage:       17 bytes
 14373 ;; Hardware stack levels used:    1
 14374 ;; Hardware stack levels required when called:    7
 14375 ;; This function calls:
 14376 ;;		Nothing
 14377 ;; This function is called by:
 14378 ;;		_utoa
 14379 ;; This function uses a non-reentrant model
 14380 ;;
 14381                           
 14382                           	psect	text50
 14383  004196                     __ptext50:
 14384                           	callstack 0
 14385  004196                     ___lomod:
 14386                           	callstack 17
 14387                           
 14388                           ; BSR set to: 0
 14389                           
 14390                           ;incstack = 0
 14391  004196  5020               	movf	___lomod@divisor^0,w,c
 14392  004198  1021               	iorwf	(___lomod@divisor+1)^0,w,c
 14393  00419A  1022               	iorwf	(___lomod@divisor+2)^0,w,c
 14394  00419C  1023               	iorwf	(___lomod@divisor+3)^0,w,c
 14395  00419E  1024               	iorwf	(___lomod@divisor+4)^0,w,c
 14396  0041A0  1025               	iorwf	(___lomod@divisor+5)^0,w,c
 14397  0041A2  1026               	iorwf	(___lomod@divisor+6)^0,w,c
 14398  0041A4  1027               	iorwf	(___lomod@divisor+7)^0,w,c
 14399  0041A6  B4D8               	btfsc	status,2,c
 14400  0041A8  D03C               	goto	l2232
 14401                           
 14402                           ; BSR set to: 0
 14403  0041AA  0E01               	movlw	1
 14404  0041AC  6E28               	movwf	___lomod@counter^0,c
 14405  0041AE  D00A               	goto	l10126
 14406  0041B0                     l10124:
 14407                           
 14408                           ; BSR set to: 0
 14409  0041B0  90D8               	bcf	status,0,c
 14410  0041B2  3620               	rlcf	___lomod@divisor^0,f,c
 14411  0041B4  3621               	rlcf	(___lomod@divisor+1)^0,f,c
 14412  0041B6  3622               	rlcf	(___lomod@divisor+2)^0,f,c
 14413  0041B8  3623               	rlcf	(___lomod@divisor+3)^0,f,c
 14414  0041BA  3624               	rlcf	(___lomod@divisor+4)^0,f,c
 14415  0041BC  3625               	rlcf	(___lomod@divisor+5)^0,f,c
 14416  0041BE  3626               	rlcf	(___lomod@divisor+6)^0,f,c
 14417  0041C0  3627               	rlcf	(___lomod@divisor+7)^0,f,c
 14418  0041C2  2A28               	incf	___lomod@counter^0,f,c
 14419  0041C4                     l10126:
 14420                           
 14421                           ; BSR set to: 0
 14422  0041C4  AE27               	btfss	(___lomod@divisor+7)^0,7,c
 14423  0041C6  D7F4               	goto	l10124
 14424  0041C8                     u8570:
 14425                           
 14426                           ; BSR set to: 0
 14427  0041C8  5020               	movf	___lomod@divisor^0,w,c
 14428  0041CA  5C18               	subwf	___lomod@dividend^0,w,c
 14429  0041CC  5021               	movf	(___lomod@divisor+1)^0,w,c
 14430  0041CE  5819               	subwfb	(___lomod@dividend+1)^0,w,c
 14431  0041D0  5022               	movf	(___lomod@divisor+2)^0,w,c
 14432  0041D2  581A               	subwfb	(___lomod@dividend+2)^0,w,c
 14433  0041D4  5023               	movf	(___lomod@divisor+3)^0,w,c
 14434  0041D6  581B               	subwfb	(___lomod@dividend+3)^0,w,c
 14435  0041D8  5024               	movf	(___lomod@divisor+4)^0,w,c
 14436  0041DA  581C               	subwfb	(___lomod@dividend+4)^0,w,c
 14437  0041DC  5025               	movf	(___lomod@divisor+5)^0,w,c
 14438  0041DE  581D               	subwfb	(___lomod@dividend+5)^0,w,c
 14439  0041E0  5026               	movf	(___lomod@divisor+6)^0,w,c
 14440  0041E2  581E               	subwfb	(___lomod@dividend+6)^0,w,c
 14441  0041E4  5027               	movf	(___lomod@divisor+7)^0,w,c
 14442  0041E6  581F               	subwfb	(___lomod@dividend+7)^0,w,c
 14443  0041E8  A0D8               	btfss	status,0,c
 14444  0041EA  D010               	goto	l10132
 14445                           
 14446                           ; BSR set to: 0
 14447  0041EC  5020               	movf	___lomod@divisor^0,w,c
 14448  0041EE  5E18               	subwf	___lomod@dividend^0,f,c
 14449  0041F0  5021               	movf	(___lomod@divisor+1)^0,w,c
 14450  0041F2  5A19               	subwfb	(___lomod@dividend+1)^0,f,c
 14451  0041F4  5022               	movf	(___lomod@divisor+2)^0,w,c
 14452  0041F6  5A1A               	subwfb	(___lomod@dividend+2)^0,f,c
 14453  0041F8  5023               	movf	(___lomod@divisor+3)^0,w,c
 14454  0041FA  5A1B               	subwfb	(___lomod@dividend+3)^0,f,c
 14455  0041FC  5024               	movf	(___lomod@divisor+4)^0,w,c
 14456  0041FE  5A1C               	subwfb	(___lomod@dividend+4)^0,f,c
 14457  004200  5025               	movf	(___lomod@divisor+5)^0,w,c
 14458  004202  5A1D               	subwfb	(___lomod@dividend+5)^0,f,c
 14459  004204  5026               	movf	(___lomod@divisor+6)^0,w,c
 14460  004206  5A1E               	subwfb	(___lomod@dividend+6)^0,f,c
 14461  004208  5027               	movf	(___lomod@divisor+7)^0,w,c
 14462  00420A  5A1F               	subwfb	(___lomod@dividend+7)^0,f,c
 14463  00420C                     l10132:
 14464                           
 14465                           ; BSR set to: 0
 14466  00420C  90D8               	bcf	status,0,c
 14467  00420E  3227               	rrcf	(___lomod@divisor+7)^0,f,c
 14468  004210  3226               	rrcf	(___lomod@divisor+6)^0,f,c
 14469  004212  3225               	rrcf	(___lomod@divisor+5)^0,f,c
 14470  004214  3224               	rrcf	(___lomod@divisor+4)^0,f,c
 14471  004216  3223               	rrcf	(___lomod@divisor+3)^0,f,c
 14472  004218  3222               	rrcf	(___lomod@divisor+2)^0,f,c
 14473  00421A  3221               	rrcf	(___lomod@divisor+1)^0,f,c
 14474  00421C  3220               	rrcf	___lomod@divisor^0,f,c
 14475                           
 14476                           ; BSR set to: 0
 14477  00421E  2E28               	decfsz	___lomod@counter^0,f,c
 14478  004220  D7D3               	goto	u8570
 14479  004222                     l2232:
 14480                           
 14481                           ; BSR set to: 0
 14482  004222  C018  F018         	movff	___lomod@dividend,?___lomod
 14483  004226  C019  F019         	movff	___lomod@dividend+1,?___lomod+1
 14484  00422A  C01A  F01A         	movff	___lomod@dividend+2,?___lomod+2
 14485  00422E  C01B  F01B         	movff	___lomod@dividend+3,?___lomod+3
 14486  004232  C01C  F01C         	movff	___lomod@dividend+4,?___lomod+4
 14487  004236  C01D  F01D         	movff	___lomod@dividend+5,?___lomod+5
 14488  00423A  C01E  F01E         	movff	___lomod@dividend+6,?___lomod+6
 14489  00423E  C01F  F01F         	movff	___lomod@dividend+7,?___lomod+7
 14490                           
 14491                           ; BSR set to: 0
 14492  004242  0012               	return		;funcret
 14493  004244                     __end_of___lomod:
 14494                           	callstack 0
 14495                           
 14496 ;; *************** function ___lodiv *****************
 14497 ;; Defined at:
 14498 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\lodiv.c"
 14499 ;; Parameters:    Size  Location     Type
 14500 ;;  dividend        8   23[COMRAM] unsigned long long 
 14501 ;;  divisor         8   31[COMRAM] unsigned long long 
 14502 ;; Auto vars:     Size  Location     Type
 14503 ;;  quotient        8   39[COMRAM] unsigned long long 
 14504 ;;  counter         1   47[COMRAM] unsigned char 
 14505 ;; Return value:  Size  Location     Type
 14506 ;;                  8   23[COMRAM] unsigned long long 
 14507 ;; Registers used:
 14508 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14509 ;; Tracked objects:
 14510 ;;		On entry : 3F/0
 14511 ;;		On exit  : 3F/0
 14512 ;;		Unchanged: 3F/0
 14513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14514 ;;      Params:        16       0       0       0       0       0       0       0       0
 14515 ;;      Locals:         9       0       0       0       0       0       0       0       0
 14516 ;;      Temps:          0       0       0       0       0       0       0       0       0
 14517 ;;      Totals:        25       0       0       0       0       0       0       0       0
 14518 ;;Total ram usage:       25 bytes
 14519 ;; Hardware stack levels used:    1
 14520 ;; Hardware stack levels required when called:    7
 14521 ;; This function calls:
 14522 ;;		Nothing
 14523 ;; This function is called by:
 14524 ;;		_utoa
 14525 ;; This function uses a non-reentrant model
 14526 ;;
 14527                           
 14528                           	psect	text51
 14529  003D00                     __ptext51:
 14530                           	callstack 0
 14531  003D00                     ___lodiv:
 14532                           	callstack 17
 14533                           
 14534                           ; BSR set to: 0
 14535                           
 14536                           ; BSR set to: 0
 14537                           ;incstack = 0
 14538  003D00  EE20  F028         	lfsr	2,___lodiv@quotient
 14539  003D04  0E07               	movlw	7
 14540  003D06                     u8521:
 14541  003D06  6ADE               	clrf	postinc2,c
 14542  003D08  06E8               	decf	wreg,f,c
 14543  003D0A  E2FD               	bc	u8521
 14544                           
 14545                           ; BSR set to: 0
 14546  003D0C  5020               	movf	___lodiv@divisor^0,w,c
 14547  003D0E  1021               	iorwf	(___lodiv@divisor+1)^0,w,c
 14548  003D10  1022               	iorwf	(___lodiv@divisor+2)^0,w,c
 14549  003D12  1023               	iorwf	(___lodiv@divisor+3)^0,w,c
 14550  003D14  1024               	iorwf	(___lodiv@divisor+4)^0,w,c
 14551  003D16  1025               	iorwf	(___lodiv@divisor+5)^0,w,c
 14552  003D18  1026               	iorwf	(___lodiv@divisor+6)^0,w,c
 14553  003D1A  1027               	iorwf	(___lodiv@divisor+7)^0,w,c
 14554  003D1C  B4D8               	btfsc	status,2,c
 14555  003D1E  D046               	goto	l2222
 14556                           
 14557                           ; BSR set to: 0
 14558  003D20  0E01               	movlw	1
 14559  003D22  6E30               	movwf	___lodiv@counter^0,c
 14560  003D24  D00A               	goto	l10106
 14561  003D26                     l10104:
 14562                           
 14563                           ; BSR set to: 0
 14564  003D26  90D8               	bcf	status,0,c
 14565  003D28  3620               	rlcf	___lodiv@divisor^0,f,c
 14566  003D2A  3621               	rlcf	(___lodiv@divisor+1)^0,f,c
 14567  003D2C  3622               	rlcf	(___lodiv@divisor+2)^0,f,c
 14568  003D2E  3623               	rlcf	(___lodiv@divisor+3)^0,f,c
 14569  003D30  3624               	rlcf	(___lodiv@divisor+4)^0,f,c
 14570  003D32  3625               	rlcf	(___lodiv@divisor+5)^0,f,c
 14571  003D34  3626               	rlcf	(___lodiv@divisor+6)^0,f,c
 14572  003D36  3627               	rlcf	(___lodiv@divisor+7)^0,f,c
 14573  003D38  2A30               	incf	___lodiv@counter^0,f,c
 14574  003D3A                     l10106:
 14575                           
 14576                           ; BSR set to: 0
 14577  003D3A  AE27               	btfss	(___lodiv@divisor+7)^0,7,c
 14578  003D3C  D7F4               	goto	l10104
 14579  003D3E                     u8540:
 14580                           
 14581                           ; BSR set to: 0
 14582  003D3E  90D8               	bcf	status,0,c
 14583  003D40  3628               	rlcf	___lodiv@quotient^0,f,c
 14584  003D42  3629               	rlcf	(___lodiv@quotient+1)^0,f,c
 14585  003D44  362A               	rlcf	(___lodiv@quotient+2)^0,f,c
 14586  003D46  362B               	rlcf	(___lodiv@quotient+3)^0,f,c
 14587  003D48  362C               	rlcf	(___lodiv@quotient+4)^0,f,c
 14588  003D4A  362D               	rlcf	(___lodiv@quotient+5)^0,f,c
 14589  003D4C  362E               	rlcf	(___lodiv@quotient+6)^0,f,c
 14590  003D4E  362F               	rlcf	(___lodiv@quotient+7)^0,f,c
 14591                           
 14592                           ; BSR set to: 0
 14593  003D50  5020               	movf	___lodiv@divisor^0,w,c
 14594  003D52  5C18               	subwf	___lodiv@dividend^0,w,c
 14595  003D54  5021               	movf	(___lodiv@divisor+1)^0,w,c
 14596  003D56  5819               	subwfb	(___lodiv@dividend+1)^0,w,c
 14597  003D58  5022               	movf	(___lodiv@divisor+2)^0,w,c
 14598  003D5A  581A               	subwfb	(___lodiv@dividend+2)^0,w,c
 14599  003D5C  5023               	movf	(___lodiv@divisor+3)^0,w,c
 14600  003D5E  581B               	subwfb	(___lodiv@dividend+3)^0,w,c
 14601  003D60  5024               	movf	(___lodiv@divisor+4)^0,w,c
 14602  003D62  581C               	subwfb	(___lodiv@dividend+4)^0,w,c
 14603  003D64  5025               	movf	(___lodiv@divisor+5)^0,w,c
 14604  003D66  581D               	subwfb	(___lodiv@dividend+5)^0,w,c
 14605  003D68  5026               	movf	(___lodiv@divisor+6)^0,w,c
 14606  003D6A  581E               	subwfb	(___lodiv@dividend+6)^0,w,c
 14607  003D6C  5027               	movf	(___lodiv@divisor+7)^0,w,c
 14608  003D6E  581F               	subwfb	(___lodiv@dividend+7)^0,w,c
 14609  003D70  A0D8               	btfss	status,0,c
 14610  003D72  D011               	goto	l10116
 14611                           
 14612                           ; BSR set to: 0
 14613  003D74  5020               	movf	___lodiv@divisor^0,w,c
 14614  003D76  5E18               	subwf	___lodiv@dividend^0,f,c
 14615  003D78  5021               	movf	(___lodiv@divisor+1)^0,w,c
 14616  003D7A  5A19               	subwfb	(___lodiv@dividend+1)^0,f,c
 14617  003D7C  5022               	movf	(___lodiv@divisor+2)^0,w,c
 14618  003D7E  5A1A               	subwfb	(___lodiv@dividend+2)^0,f,c
 14619  003D80  5023               	movf	(___lodiv@divisor+3)^0,w,c
 14620  003D82  5A1B               	subwfb	(___lodiv@dividend+3)^0,f,c
 14621  003D84  5024               	movf	(___lodiv@divisor+4)^0,w,c
 14622  003D86  5A1C               	subwfb	(___lodiv@dividend+4)^0,f,c
 14623  003D88  5025               	movf	(___lodiv@divisor+5)^0,w,c
 14624  003D8A  5A1D               	subwfb	(___lodiv@dividend+5)^0,f,c
 14625  003D8C  5026               	movf	(___lodiv@divisor+6)^0,w,c
 14626  003D8E  5A1E               	subwfb	(___lodiv@dividend+6)^0,f,c
 14627  003D90  5027               	movf	(___lodiv@divisor+7)^0,w,c
 14628  003D92  5A1F               	subwfb	(___lodiv@dividend+7)^0,f,c
 14629                           
 14630                           ; BSR set to: 0
 14631  003D94  8028               	bsf	___lodiv@quotient^0,0,c
 14632  003D96                     l10116:
 14633                           
 14634                           ; BSR set to: 0
 14635  003D96  90D8               	bcf	status,0,c
 14636  003D98  3227               	rrcf	(___lodiv@divisor+7)^0,f,c
 14637  003D9A  3226               	rrcf	(___lodiv@divisor+6)^0,f,c
 14638  003D9C  3225               	rrcf	(___lodiv@divisor+5)^0,f,c
 14639  003D9E  3224               	rrcf	(___lodiv@divisor+4)^0,f,c
 14640  003DA0  3223               	rrcf	(___lodiv@divisor+3)^0,f,c
 14641  003DA2  3222               	rrcf	(___lodiv@divisor+2)^0,f,c
 14642  003DA4  3221               	rrcf	(___lodiv@divisor+1)^0,f,c
 14643  003DA6  3220               	rrcf	___lodiv@divisor^0,f,c
 14644                           
 14645                           ; BSR set to: 0
 14646  003DA8  2E30               	decfsz	___lodiv@counter^0,f,c
 14647  003DAA  D7C9               	goto	u8540
 14648  003DAC                     l2222:
 14649                           
 14650                           ; BSR set to: 0
 14651  003DAC  C028  F018         	movff	___lodiv@quotient,?___lodiv
 14652  003DB0  C029  F019         	movff	___lodiv@quotient+1,?___lodiv+1
 14653  003DB4  C02A  F01A         	movff	___lodiv@quotient+2,?___lodiv+2
 14654  003DB8  C02B  F01B         	movff	___lodiv@quotient+3,?___lodiv+3
 14655  003DBC  C02C  F01C         	movff	___lodiv@quotient+4,?___lodiv+4
 14656  003DC0  C02D  F01D         	movff	___lodiv@quotient+5,?___lodiv+5
 14657  003DC4  C02E  F01E         	movff	___lodiv@quotient+6,?___lodiv+6
 14658  003DC8  C02F  F01F         	movff	___lodiv@quotient+7,?___lodiv+7
 14659                           
 14660                           ; BSR set to: 0
 14661  003DCC  0012               	return		;funcret
 14662  003DCE                     __end_of___lodiv:
 14663                           	callstack 0
 14664                           
 14665 ;; *************** function _strncmp *****************
 14666 ;; Defined at:
 14667 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\strncmp.c"
 14668 ;; Parameters:    Size  Location     Type
 14669 ;;  _l              2   23[COMRAM] PTR const unsigned char 
 14670 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 14671 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 14672 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 14673 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 14674 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 14675 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 14676 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 14677 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 14678 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 14679 ;;		 -> STR_10(3), STR_9(3), 
 14680 ;;  _r              2   25[COMRAM] PTR const unsigned char 
 14681 ;;		 -> STR_149(3), STR_144(3), STR_140(3), 
 14682 ;;  n               2   27[COMRAM] unsigned int 
 14683 ;; Auto vars:     Size  Location     Type
 14684 ;;  r               2   32[COMRAM] PTR const unsigned char 
 14685 ;;		 -> STR_149(3), STR_144(3), STR_140(3), 
 14686 ;;  l               2   30[COMRAM] PTR const unsigned char 
 14687 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 14688 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 14689 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 14690 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 14691 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 14692 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 14693 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 14694 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 14695 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 14696 ;;		 -> STR_10(3), STR_9(3), 
 14697 ;; Return value:  Size  Location     Type
 14698 ;;                  2   23[COMRAM] int 
 14699 ;; Registers used:
 14700 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 14701 ;; Tracked objects:
 14702 ;;		On entry : 3F/0
 14703 ;;		On exit  : 3F/0
 14704 ;;		Unchanged: 3F/0
 14705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14706 ;;      Params:         6       0       0       0       0       0       0       0       0
 14707 ;;      Locals:         4       0       0       0       0       0       0       0       0
 14708 ;;      Temps:          1       0       0       0       0       0       0       0       0
 14709 ;;      Totals:        11       0       0       0       0       0       0       0       0
 14710 ;;Total ram usage:       11 bytes
 14711 ;; Hardware stack levels used:    1
 14712 ;; Hardware stack levels required when called:    7
 14713 ;; This function calls:
 14714 ;;		Nothing
 14715 ;; This function is called by:
 14716 ;;		_vfpfcnvrt
 14717 ;; This function uses a non-reentrant model
 14718 ;;
 14719                           
 14720                           	psect	text52
 14721  0042EE                     __ptext52:
 14722                           	callstack 0
 14723  0042EE                     _strncmp:
 14724                           	callstack 18
 14725                           
 14726                           ; BSR set to: 0
 14727                           
 14728                           ; BSR set to: 0
 14729                           ;incstack = 0
 14730  0042EE  C018  F01F         	movff	strncmp@_l,strncmp@l
 14731  0042F2  C019  F020         	movff	strncmp@_l+1,strncmp@l+1
 14732  0042F6  C01A  F021         	movff	strncmp@_r,strncmp@r
 14733  0042FA  C01B  F022         	movff	strncmp@_r+1,strncmp@r+1
 14734  0042FE  061C               	decf	strncmp@n^0,f,c
 14735  004300  A0D8               	btfss	status,0,c
 14736  004302  061D               	decf	(strncmp@n+1)^0,f,c
 14737  004304  281C               	incf	strncmp@n^0,w,c
 14738  004306  E10F               	bnz	l10344
 14739  004308  281D               	incf	(strncmp@n+1)^0,w,c
 14740  00430A  A4D8               	btfss	status,2,c
 14741  00430C  D00C               	goto	l10344
 14742                           
 14743                           ; BSR set to: 0
 14744  00430E  0E00               	movlw	0
 14745  004310  6E19               	movwf	(?_strncmp+1)^0,c
 14746  004312  0E00               	movlw	0
 14747  004314  6E18               	movwf	?_strncmp^0,c
 14748  004316  0012               	return	
 14749  004318                     l10342:
 14750                           
 14751                           ; BSR set to: 0
 14752  004318  4A1F               	infsnz	strncmp@l^0,f,c
 14753  00431A  2A20               	incf	(strncmp@l+1)^0,f,c
 14754  00431C  4A21               	infsnz	strncmp@r^0,f,c
 14755  00431E  2A22               	incf	(strncmp@r+1)^0,f,c
 14756  004320  061C               	decf	strncmp@n^0,f,c
 14757  004322  A0D8               	btfss	status,0,c
 14758  004324  061D               	decf	(strncmp@n+1)^0,f,c
 14759  004326                     l10344:
 14760                           
 14761                           ; BSR set to: 0
 14762  004326  C01F  FFF6         	movff	strncmp@l,tblptrl
 14763  00432A  C020  FFF7         	movff	strncmp@l+1,tblptrh
 14764  00432E                     	if	0	;tblptru may be non-zero
 14765  00432E                     	endif
 14766  00432E                     	if	0	;tblptru may be non-zero
 14767  00432E                     	endif
 14768  00432E  0008               	tblrd		*
 14769  004330  50F5               	movf	tablat,w,c
 14770  004332  0900               	iorlw	0
 14771  004334  B4D8               	btfsc	status,2,c
 14772  004336  D01D               	goto	u9010
 14773                           
 14774                           ; BSR set to: 0
 14775  004338  C021  FFF6         	movff	strncmp@r,tblptrl
 14776  00433C  C022  FFF7         	movff	strncmp@r+1,tblptrh
 14777  004340                     	if	0	;tblptru may be non-zero
 14778  004340                     	endif
 14779  004340                     	if	0	;tblptru may be non-zero
 14780  004340                     	endif
 14781  004340  0008               	tblrd		*
 14782  004342  50F5               	movf	tablat,w,c
 14783  004344  0900               	iorlw	0
 14784  004346  B4D8               	btfsc	status,2,c
 14785  004348  D014               	goto	u9010
 14786                           
 14787                           ; BSR set to: 0
 14788  00434A  501C               	movf	strncmp@n^0,w,c
 14789  00434C  101D               	iorwf	(strncmp@n+1)^0,w,c
 14790  00434E  B4D8               	btfsc	status,2,c
 14791  004350  D010               	goto	u9010
 14792                           
 14793                           ; BSR set to: 0
 14794  004352  C01F  FFF6         	movff	strncmp@l,tblptrl
 14795  004356  C020  FFF7         	movff	strncmp@l+1,tblptrh
 14796  00435A                     	if	0	;tblptru may be non-zero
 14797  00435A                     	endif
 14798  00435A                     	if	0	;tblptru may be non-zero
 14799  00435A                     	endif
 14800  00435A  0008               	tblrd		*
 14801  00435C  CFF5 F01E          	movff	tablat,??_strncmp
 14802  004360  C021  FFF6         	movff	strncmp@r,tblptrl
 14803  004364  C022  FFF7         	movff	strncmp@r+1,tblptrh
 14804  004368                     	if	0	;tblptru may be non-zero
 14805  004368                     	endif
 14806  004368                     	if	0	;tblptru may be non-zero
 14807  004368                     	endif
 14808  004368  0008               	tblrd		*
 14809  00436A  50F5               	movf	tablat,w,c
 14810  00436C  181E               	xorwf	??_strncmp^0,w,c
 14811  00436E  B4D8               	btfsc	status,2,c
 14812  004370  D7D3               	goto	l10342
 14813  004372                     u9010:
 14814                           
 14815                           ; BSR set to: 0
 14816  004372  C01F  FFF6         	movff	strncmp@l,tblptrl
 14817  004376  C020  FFF7         	movff	strncmp@l+1,tblptrh
 14818  00437A                     	if	0	;tblptru may be non-zero
 14819  00437A                     	endif
 14820  00437A                     	if	0	;tblptru may be non-zero
 14821  00437A                     	endif
 14822  00437A  0008               	tblrd		*
 14823  00437C  CFF5 F01E          	movff	tablat,??_strncmp
 14824  004380  C021  FFF6         	movff	strncmp@r,tblptrl
 14825  004384  C022  FFF7         	movff	strncmp@r+1,tblptrh
 14826  004388                     	if	0	;tblptru may be non-zero
 14827  004388                     	endif
 14828  004388                     	if	0	;tblptru may be non-zero
 14829  004388                     	endif
 14830  004388  0008               	tblrd		*
 14831  00438A  50F5               	movf	tablat,w,c
 14832  00438C  5C1E               	subwf	??_strncmp^0,w,c
 14833  00438E  6E18               	movwf	?_strncmp^0,c
 14834  004390  6A19               	clrf	(?_strncmp+1)^0,c
 14835  004392  A0D8               	btfss	status,0,c
 14836  004394  0619               	decf	(?_strncmp+1)^0,f,c
 14837                           
 14838                           ; BSR set to: 0
 14839  004396  0012               	return		;funcret
 14840  004398                     __end_of_strncmp:
 14841                           	callstack 0
 14842                           
 14843 ;; *************** function _dtoa *****************
 14844 ;; Defined at:
 14845 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c"
 14846 ;; Parameters:    Size  Location     Type
 14847 ;;  fp              1   10[BANK0 ] PTR struct _IO_FILE
 14848 ;;		 -> sprintf@f(6), 
 14849 ;;  d               8   11[BANK0 ] long long 
 14850 ;; Auto vars:     Size  Location     Type
 14851 ;;  n               8   35[BANK0 ] long long 
 14852 ;;  i               2   43[BANK0 ] int 
 14853 ;;  s               2   33[BANK0 ] int 
 14854 ;;  w               2   31[BANK0 ] int 
 14855 ;;  p               2   29[BANK0 ] int 
 14856 ;; Return value:  Size  Location     Type
 14857 ;;                  2   10[BANK0 ] int 
 14858 ;; Registers used:
 14859 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14860 ;; Tracked objects:
 14861 ;;		On entry : 3F/0
 14862 ;;		On exit  : 0/0
 14863 ;;		Unchanged: 0/0
 14864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 14865 ;;      Params:         0       9       0       0       0       0       0       0       0
 14866 ;;      Locals:         0      18       0       0       0       0       0       0       0
 14867 ;;      Temps:          0       8       0       0       0       0       0       0       0
 14868 ;;      Totals:         0      35       0       0       0       0       0       0       0
 14869 ;;Total ram usage:       35 bytes
 14870 ;; Hardware stack levels used:    1
 14871 ;; Hardware stack levels required when called:   11
 14872 ;; This function calls:
 14873 ;;		___aodiv
 14874 ;;		___aomod
 14875 ;;		_abs
 14876 ;;		_pad
 14877 ;; This function is called by:
 14878 ;;		_vfpfcnvrt
 14879 ;; This function uses a non-reentrant model
 14880 ;;
 14881                           
 14882                           	psect	text53
 14883  001FA6                     __ptext53:
 14884                           	callstack 0
 14885  001FA6                     _dtoa:
 14886                           	callstack 14
 14887                           
 14888                           ; BSR set to: 0
 14889                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 274: static int d
      +                          toa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\d
      +                          oprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 27
      +                          6:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprn
      +                          t.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\d
      +                          oprnt.c: 280:     n = d;
 14890                           
 14891                           ; BSR set to: 0
 14892                           ;incstack = 0
 14893  001FA6  C06B  F083         	movff	dtoa@d,dtoa@n
 14894  001FAA  C06C  F084         	movff	dtoa@d+1,dtoa@n+1
 14895  001FAE  C06D  F085         	movff	dtoa@d+2,dtoa@n+2
 14896  001FB2  C06E  F086         	movff	dtoa@d+3,dtoa@n+3
 14897  001FB6  C06F  F087         	movff	dtoa@d+4,dtoa@n+4
 14898  001FBA  C070  F088         	movff	dtoa@d+5,dtoa@n+5
 14899  001FBE  C071  F089         	movff	dtoa@d+6,dtoa@n+6
 14900  001FC2  C072  F08A         	movff	dtoa@d+7,dtoa@n+7
 14901                           
 14902                           ; BSR set to: 0
 14903                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 281:     s = n < 
      +                          0 ? 1 : 0;
 14904  001FC6  AF8A               	btfss	(dtoa@n+7)& (0+255),7,b
 14905  001FC8  D002               	goto	u8680
 14906  001FCA  0E01               	movlw	1
 14907  001FCC  D001               	goto	u8690
 14908  001FCE                     u8680:
 14909  001FCE  0E00               	movlw	0
 14910  001FD0                     u8690:
 14911  001FD0  6F81               	movwf	dtoa@s& (0+255),b
 14912  001FD2  6B82               	clrf	(dtoa@s+1)& (0+255),b
 14913                           
 14914                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 282:     if (s) {
 14915  001FD4  5181               	movf	dtoa@s& (0+255),w,b
 14916  001FD6  1182               	iorwf	(dtoa@s+1)& (0+255),w,b
 14917  001FD8  B4D8               	btfsc	status,2,c
 14918  001FDA  D010               	goto	l10200
 14919                           
 14920                           ; BSR set to: 0
 14921                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 283:         n = 
      +                          -n;
 14922  001FDC  1F8A               	comf	(dtoa@n+7)& (0+255),f,b
 14923  001FDE  1F89               	comf	(dtoa@n+6)& (0+255),f,b
 14924  001FE0  1F88               	comf	(dtoa@n+5)& (0+255),f,b
 14925  001FE2  1F87               	comf	(dtoa@n+4)& (0+255),f,b
 14926  001FE4  1F86               	comf	(dtoa@n+3)& (0+255),f,b
 14927  001FE6  1F85               	comf	(dtoa@n+2)& (0+255),f,b
 14928  001FE8  1F84               	comf	(dtoa@n+1)& (0+255),f,b
 14929  001FEA  6D83               	negf	dtoa@n& (0+255),b
 14930  001FEC  0E00               	movlw	0
 14931  001FEE  2384               	addwfc	(dtoa@n+1)& (0+255),f,b
 14932  001FF0  2385               	addwfc	(dtoa@n+2)& (0+255),f,b
 14933  001FF2  2386               	addwfc	(dtoa@n+3)& (0+255),f,b
 14934  001FF4  2387               	addwfc	(dtoa@n+4)& (0+255),f,b
 14935  001FF6  2388               	addwfc	(dtoa@n+5)& (0+255),f,b
 14936  001FF8  2389               	addwfc	(dtoa@n+6)& (0+255),f,b
 14937  001FFA  238A               	addwfc	(dtoa@n+7)& (0+255),f,b
 14938  001FFC                     l10200:
 14939                           
 14940                           ; BSR set to: 0
 14941                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 287:     if (!(pr
      +                          ec < 0)) {
 14942  001FFC  0101               	movlb	1	; () banked
 14943  001FFE  AF72               	btfss	(_prec+1)& (0+255),7,b
 14944                           
 14945                           ; BSR set to: 1
 14946                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 288:         flag
      +                          s &= ~(1 << 1);
 14947  002000  9373               	bcf	_flags& (0+255),1,b
 14948                           
 14949                           ; BSR set to: 1
 14950                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 290:     p = (0 <
      +                           prec) ? prec : 1;
 14951  002002  BF72               	btfsc	(_prec+1)& (0+255),7,b
 14952  002004  D005               	goto	u8720
 14953  002006  5172               	movf	(_prec+1)& (0+255),w,b
 14954  002008  E109               	bnz	l2506
 14955  00200A  0571               	decf	_prec& (0+255),w,b
 14956  00200C  B0D8               	btfsc	status,0,c
 14957  00200E  D006               	goto	l2506
 14958  002010                     u8720:
 14959                           
 14960                           ; BSR set to: 1
 14961  002010  0E00               	movlw	0
 14962  002012  0100               	movlb	0	; () banked
 14963  002014  6F7E               	movwf	(dtoa@p+1)& (0+255),b
 14964  002016  0E01               	movlw	1
 14965  002018  6F7D               	movwf	dtoa@p& (0+255),b
 14966  00201A  D004               	goto	l2508
 14967  00201C                     l2506:
 14968                           
 14969                           ; BSR set to: 1
 14970  00201C  C171  F07D         	movff	_prec,dtoa@p
 14971  002020  C172  F07E         	movff	_prec+1,dtoa@p+1
 14972  002024                     l2508:
 14973                           
 14974                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 291:     w = widt
      +                          h;
 14975  002024  C16F  F07F         	movff	_width,dtoa@w
 14976  002028  C170  F080         	movff	_width+1,dtoa@w+1
 14977                           
 14978                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 292:     if (s ||
      +                           (flags & (1 << 2))) {
 14979  00202C  0100               	movlb	0	; () banked
 14980  00202E  5181               	movf	dtoa@s& (0+255),w,b
 14981  002030  1182               	iorwf	(dtoa@s+1)& (0+255),w,b
 14982  002032  A4D8               	btfss	status,2,c
 14983  002034  D003               	goto	u8740
 14984                           
 14985                           ; BSR set to: 0
 14986  002036  0101               	movlb	1	; () banked
 14987  002038  A573               	btfss	_flags& (0+255),2,b
 14988  00203A  D004               	goto	l10214
 14989  00203C                     u8740:
 14990                           
 14991                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 293:         --w;
 14992  00203C  0100               	movlb	0	; () banked
 14993  00203E  077F               	decf	dtoa@w& (0+255),f,b
 14994  002040  A0D8               	btfss	status,0,c
 14995  002042  0780               	decf	(dtoa@w+1)& (0+255),f,b
 14996  002044                     l10214:
 14997                           
 14998                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 297:     i = size
      +                          of(dbuf) - 1;
 14999  002044  0E00               	movlw	0
 15000  002046  0100               	movlb	0	; () banked
 15001  002048  6F8C               	movwf	(dtoa@i+1)& (0+255),b
 15002  00204A  0E1F               	movlw	31
 15003  00204C  6F8B               	movwf	dtoa@i& (0+255),b
 15004                           
 15005                           ; BSR set to: 0
 15006                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 298:     dbuf[i] 
      +                          = '\0';
 15007  00204E  0E00               	movlw	0
 15008  002050  0101               	movlb	1	; () banked
 15009  002052  6FB3               	movwf	(_dbuf+31)& (0+255),b
 15010                           
 15011                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15012  002054  D07D               	goto	l10228
 15013  002056                     l10218:
 15014                           
 15015                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 300:         --i;
 15016  002056  0100               	movlb	0	; () banked
 15017  002058  078B               	decf	dtoa@i& (0+255),f,b
 15018  00205A  A0D8               	btfss	status,0,c
 15019  00205C  078C               	decf	(dtoa@i+1)& (0+255),f,b
 15020                           
 15021                           ; BSR set to: 0
 15022                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 301:         dbuf
      +                          [i] = '0' + abs(n % 10);
 15023  00205E  0E94               	movlw	low _dbuf
 15024  002060  258B               	addwf	dtoa@i& (0+255),w,b
 15025  002062  6ED9               	movwf	fsr2l,c
 15026  002064  0E01               	movlw	high _dbuf
 15027  002066  218C               	addwfc	(dtoa@i+1)& (0+255),w,b
 15028  002068  6EDA               	movwf	fsr2h,c
 15029  00206A  C083  F018         	movff	dtoa@n,___aomod@dividend
 15030  00206E  C084  F019         	movff	dtoa@n+1,___aomod@dividend+1
 15031  002072  C085  F01A         	movff	dtoa@n+2,___aomod@dividend+2
 15032  002076  C086  F01B         	movff	dtoa@n+3,___aomod@dividend+3
 15033  00207A  C087  F01C         	movff	dtoa@n+4,___aomod@dividend+4
 15034  00207E  C088  F01D         	movff	dtoa@n+5,___aomod@dividend+5
 15035  002082  C089  F01E         	movff	dtoa@n+6,___aomod@dividend+6
 15036  002086  C08A  F01F         	movff	dtoa@n+7,___aomod@dividend+7
 15037  00208A  0E0A               	movlw	10
 15038  00208C  6E20               	movwf	___aomod@divisor^0,c
 15039  00208E  0E00               	movlw	0
 15040  002090  6E21               	movwf	(___aomod@divisor+1)^0,c
 15041  002092  0E00               	movlw	0
 15042  002094  6E22               	movwf	(___aomod@divisor+2)^0,c
 15043  002096  0E00               	movlw	0
 15044  002098  6E23               	movwf	(___aomod@divisor+3)^0,c
 15045  00209A  0E00               	movlw	0
 15046  00209C  6E24               	movwf	(___aomod@divisor+4)^0,c
 15047  00209E  0E00               	movlw	0
 15048  0020A0  6E25               	movwf	(___aomod@divisor+5)^0,c
 15049  0020A2  0E00               	movlw	0
 15050  0020A4  6E26               	movwf	(___aomod@divisor+6)^0,c
 15051  0020A6  0E00               	movlw	0
 15052  0020A8  6E27               	movwf	(___aomod@divisor+7)^0,c
 15053  0020AA  EC26  F01C         	call	___aomod	;wreg free
 15054  0020AE  C018  F073         	movff	?___aomod,??_dtoa
 15055  0020B2  C019  F074         	movff	?___aomod+1,??_dtoa+1
 15056  0020B6  C01A  F075         	movff	?___aomod+2,??_dtoa+2
 15057  0020BA  C01B  F076         	movff	?___aomod+3,??_dtoa+3
 15058  0020BE  C01C  F077         	movff	?___aomod+4,??_dtoa+4
 15059  0020C2  C01D  F078         	movff	?___aomod+5,??_dtoa+5
 15060  0020C6  C01E  F079         	movff	?___aomod+6,??_dtoa+6
 15061  0020CA  C01F  F07A         	movff	?___aomod+7,??_dtoa+7
 15062  0020CE  C073  F02A         	movff	??_dtoa,abs@a
 15063  0020D2  C075  F02B         	movff	??_dtoa+2,abs@a+1
 15064  0020D6  EC4F  F028         	call	_abs	;wreg free
 15065  0020DA  502A               	movf	?_abs^0,w,c
 15066  0020DC  0F30               	addlw	48
 15067  0020DE  6EDF               	movwf	indf2,c
 15068                           
 15069                           ; BSR set to: 0
 15070                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 302:         --p;
 15071  0020E0  077D               	decf	dtoa@p& (0+255),f,b
 15072  0020E2  A0D8               	btfss	status,0,c
 15073  0020E4  077E               	decf	(dtoa@p+1)& (0+255),f,b
 15074                           
 15075                           ; BSR set to: 0
 15076                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 303:         --w;
 15077  0020E6  077F               	decf	dtoa@w& (0+255),f,b
 15078  0020E8  A0D8               	btfss	status,0,c
 15079  0020EA  0780               	decf	(dtoa@w+1)& (0+255),f,b
 15080                           
 15081                           ; BSR set to: 0
 15082                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 304:         n = 
      +                          n / 10;
 15083  0020EC  C083  F018         	movff	dtoa@n,___aodiv@dividend
 15084  0020F0  C084  F019         	movff	dtoa@n+1,___aodiv@dividend+1
 15085  0020F4  C085  F01A         	movff	dtoa@n+2,___aodiv@dividend+2
 15086  0020F8  C086  F01B         	movff	dtoa@n+3,___aodiv@dividend+3
 15087  0020FC  C087  F01C         	movff	dtoa@n+4,___aodiv@dividend+4
 15088  002100  C088  F01D         	movff	dtoa@n+5,___aodiv@dividend+5
 15089  002104  C089  F01E         	movff	dtoa@n+6,___aodiv@dividend+6
 15090  002108  C08A  F01F         	movff	dtoa@n+7,___aodiv@dividend+7
 15091  00210C  0E0A               	movlw	10
 15092  00210E  6E20               	movwf	___aodiv@divisor^0,c
 15093  002110  0E00               	movlw	0
 15094  002112  6E21               	movwf	(___aodiv@divisor+1)^0,c
 15095  002114  0E00               	movlw	0
 15096  002116  6E22               	movwf	(___aodiv@divisor+2)^0,c
 15097  002118  0E00               	movlw	0
 15098  00211A  6E23               	movwf	(___aodiv@divisor+3)^0,c
 15099  00211C  0E00               	movlw	0
 15100  00211E  6E24               	movwf	(___aodiv@divisor+4)^0,c
 15101  002120  0E00               	movlw	0
 15102  002122  6E25               	movwf	(___aodiv@divisor+5)^0,c
 15103  002124  0E00               	movlw	0
 15104  002126  6E26               	movwf	(___aodiv@divisor+6)^0,c
 15105  002128  0E00               	movlw	0
 15106  00212A  6E27               	movwf	(___aodiv@divisor+7)^0,c
 15107  00212C  ECE1  F01A         	call	___aodiv	;wreg free
 15108  002130  C018  F083         	movff	?___aodiv,dtoa@n
 15109  002134  C019  F084         	movff	?___aodiv+1,dtoa@n+1
 15110  002138  C01A  F085         	movff	?___aodiv+2,dtoa@n+2
 15111  00213C  C01B  F086         	movff	?___aodiv+3,dtoa@n+3
 15112  002140  C01C  F087         	movff	?___aodiv+4,dtoa@n+4
 15113  002144  C01D  F088         	movff	?___aodiv+5,dtoa@n+5
 15114  002148  C01E  F089         	movff	?___aodiv+6,dtoa@n+6
 15115  00214C  C01F  F08A         	movff	?___aodiv+7,dtoa@n+7
 15116  002150                     l10228:
 15117                           
 15118                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 299:     while (!
      +                          (i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 15119  002150  0100               	movlb	0	; () banked
 15120  002152  BF8C               	btfsc	(dtoa@i+1)& (0+255),7,b
 15121  002154  D020               	goto	u8790
 15122  002156  518C               	movf	(dtoa@i+1)& (0+255),w,b
 15123  002158  E103               	bnz	u8750
 15124  00215A  058B               	decf	dtoa@i& (0+255),w,b
 15125  00215C  A0D8               	btfss	status,0,c
 15126  00215E  D01B               	goto	u8790
 15127  002160                     u8750:
 15128                           
 15129                           ; BSR set to: 0
 15130  002160  5183               	movf	dtoa@n& (0+255),w,b
 15131  002162  1184               	iorwf	(dtoa@n+1)& (0+255),w,b
 15132  002164  1185               	iorwf	(dtoa@n+2)& (0+255),w,b
 15133  002166  1186               	iorwf	(dtoa@n+3)& (0+255),w,b
 15134  002168  1187               	iorwf	(dtoa@n+4)& (0+255),w,b
 15135  00216A  1188               	iorwf	(dtoa@n+5)& (0+255),w,b
 15136  00216C  1189               	iorwf	(dtoa@n+6)& (0+255),w,b
 15137  00216E  118A               	iorwf	(dtoa@n+7)& (0+255),w,b
 15138  002170  A4D8               	btfss	status,2,c
 15139  002172  D771               	goto	l10218
 15140                           
 15141                           ; BSR set to: 0
 15142  002174  BF7E               	btfsc	(dtoa@p+1)& (0+255),7,b
 15143  002176  D005               	goto	u8770
 15144  002178  517E               	movf	(dtoa@p+1)& (0+255),w,b
 15145  00217A  E102               	bnz	u8771
 15146  00217C  057D               	decf	dtoa@p& (0+255),w,b
 15147  00217E  B0D8               	btfsc	status,0,c
 15148  002180                     u8771:
 15149  002180  D76A               	goto	l10218
 15150  002182                     u8770:
 15151                           
 15152                           ; BSR set to: 0
 15153  002182  BF80               	btfsc	(dtoa@w+1)& (0+255),7,b
 15154  002184  D008               	goto	u8790
 15155  002186  5180               	movf	(dtoa@w+1)& (0+255),w,b
 15156  002188  E103               	bnz	u8780
 15157  00218A  057F               	decf	dtoa@w& (0+255),w,b
 15158  00218C  A0D8               	btfss	status,0,c
 15159  00218E  D003               	goto	u8790
 15160  002190                     u8780:
 15161                           
 15162                           ; BSR set to: 0
 15163  002190  0101               	movlb	1	; () banked
 15164  002192  B373               	btfsc	_flags& (0+255),1,b
 15165  002194  D760               	goto	l10218
 15166  002196                     u8790:
 15167                           
 15168                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 308:     if (s ||
      +                           (flags & (1 << 2))) {
 15169  002196  0100               	movlb	0	; () banked
 15170  002198  5181               	movf	dtoa@s& (0+255),w,b
 15171  00219A  1182               	iorwf	(dtoa@s+1)& (0+255),w,b
 15172  00219C  A4D8               	btfss	status,2,c
 15173  00219E  D003               	goto	u8810
 15174                           
 15175                           ; BSR set to: 0
 15176  0021A0  0101               	movlb	1	; () banked
 15177  0021A2  A573               	btfss	_flags& (0+255),2,b
 15178  0021A4  D018               	goto	l10252
 15179  0021A6                     u8810:
 15180                           
 15181                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 309:         --i;
 15182  0021A6  0100               	movlb	0	; () banked
 15183  0021A8  078B               	decf	dtoa@i& (0+255),f,b
 15184  0021AA  A0D8               	btfss	status,0,c
 15185  0021AC  078C               	decf	(dtoa@i+1)& (0+255),f,b
 15186                           
 15187                           ; BSR set to: 0
 15188                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 310:         dbuf
      +                          [i] = s ? '-' : '+';
 15189  0021AE  5181               	movf	dtoa@s& (0+255),w,b
 15190  0021B0  1182               	iorwf	(dtoa@s+1)& (0+255),w,b
 15191  0021B2  A4D8               	btfss	status,2,c
 15192  0021B4  D004               	goto	l10248
 15193                           
 15194                           ; BSR set to: 0
 15195  0021B6  0E00               	movlw	0
 15196  0021B8  6F7C               	movwf	(_dtoa$2935+1)& (0+255),b
 15197  0021BA  0E2B               	movlw	43
 15198  0021BC  D003               	goto	L19
 15199  0021BE                     l10248:
 15200                           
 15201                           ; BSR set to: 0
 15202  0021BE  0E00               	movlw	0
 15203  0021C0  6F7C               	movwf	(_dtoa$2935+1)& (0+255),b
 15204  0021C2  0E2D               	movlw	45
 15205  0021C4                     L19:
 15206  0021C4  6F7B               	movwf	_dtoa$2935& (0+255),b
 15207                           
 15208                           ; BSR set to: 0
 15209  0021C6  0E94               	movlw	low _dbuf
 15210  0021C8  258B               	addwf	dtoa@i& (0+255),w,b
 15211  0021CA  6ED9               	movwf	fsr2l,c
 15212  0021CC  0E01               	movlw	high _dbuf
 15213  0021CE  218C               	addwfc	(dtoa@i+1)& (0+255),w,b
 15214  0021D0  6EDA               	movwf	fsr2h,c
 15215  0021D2  C07B  FFDF         	movff	_dtoa$2935,indf2
 15216  0021D6                     l10252:
 15217                           
 15218                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 314:     return p
      +                          ad(fp, &dbuf[i], w);
 15219  0021D6  C06A  F026         	movff	dtoa@fp,pad@fp
 15220  0021DA  0E94               	movlw	low _dbuf
 15221  0021DC  0100               	movlb	0	; () banked
 15222  0021DE  258B               	addwf	dtoa@i& (0+255),w,b
 15223  0021E0  6E27               	movwf	pad@buf^0,c
 15224  0021E2  0E01               	movlw	high _dbuf
 15225  0021E4  218C               	addwfc	(dtoa@i+1)& (0+255),w,b
 15226  0021E6  6E28               	movwf	(pad@buf+1)^0,c
 15227  0021E8  C07F  F029         	movff	dtoa@w,pad@p
 15228  0021EC  C080  F02A         	movff	dtoa@w+1,pad@p+1
 15229  0021F0  ECAB  F022         	call	_pad	;wreg free
 15230  0021F4  C026  F06A         	movff	?_pad,?_dtoa
 15231  0021F8  C027  F06B         	movff	?_pad+1,?_dtoa+1
 15232  0021FC  0012               	return		;funcret
 15233  0021FE                     __end_of_dtoa:
 15234                           	callstack 0
 15235                           
 15236 ;; *************** function _pad *****************
 15237 ;; Defined at:
 15238 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c"
 15239 ;; Parameters:    Size  Location     Type
 15240 ;;  fp              1   37[COMRAM] PTR struct _IO_FILE
 15241 ;;		 -> sprintf@f(6), 
 15242 ;;  buf             2   38[COMRAM] PTR unsigned char 
 15243 ;;		 -> dbuf(32), 
 15244 ;;  p               2   40[COMRAM] int 
 15245 ;; Auto vars:     Size  Location     Type
 15246 ;;  w               2   45[COMRAM] int 
 15247 ;;  i               2   43[COMRAM] int 
 15248 ;; Return value:  Size  Location     Type
 15249 ;;                  2   37[COMRAM] int 
 15250 ;; Registers used:
 15251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15252 ;; Tracked objects:
 15253 ;;		On entry : 3F/0
 15254 ;;		On exit  : 0/0
 15255 ;;		Unchanged: 0/0
 15256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15257 ;;      Params:         5       0       0       0       0       0       0       0       0
 15258 ;;      Locals:         4       0       0       0       0       0       0       0       0
 15259 ;;      Temps:          1       0       0       0       0       0       0       0       0
 15260 ;;      Totals:        10       0       0       0       0       0       0       0       0
 15261 ;;Total ram usage:       10 bytes
 15262 ;; Hardware stack levels used:    1
 15263 ;; Hardware stack levels required when called:   10
 15264 ;; This function calls:
 15265 ;;		_fputc
 15266 ;;		_fputs
 15267 ;;		_strlen
 15268 ;; This function is called by:
 15269 ;;		_dtoa
 15270 ;;		_utoa
 15271 ;; This function uses a non-reentrant model
 15272 ;;
 15273                           
 15274                           	psect	text54
 15275  004556                     __ptext54:
 15276                           	callstack 0
 15277  004556                     _pad:
 15278                           	callstack 14
 15279                           
 15280                           ; BSR set to: 0
 15281                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 72: static int pa
      +                          d(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\commo
      +                          n\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 
      +                          74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 
      +                          77:     if (flags & (1 << 0)) {
 15282                           
 15283                           ;incstack = 0
 15284  004556  0101               	movlb	1	; () banked
 15285  004558  A173               	btfss	_flags& (0+255),0,b
 15286  00455A  D008               	goto	l10140
 15287                           
 15288                           ; BSR set to: 1
 15289                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 78:         fputs
      +                          ((const char *)buf, fp);
 15290  00455C  C027  F020         	movff	pad@buf,fputs@s
 15291  004560  C028  F021         	movff	pad@buf+1,fputs@s+1
 15292  004564  C026  F022         	movff	pad@fp,fputs@fp
 15293  004568  EC35  F028         	call	_fputs	;wreg free
 15294  00456C                     l10140:
 15295                           
 15296                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 82:     w = (p < 
      +                          0) ? 0 : p;
 15297  00456C  BE2A               	btfsc	(pad@p+1)^0,7,c
 15298  00456E  D005               	goto	l10144
 15299  004570  C029  F02E         	movff	pad@p,pad@w
 15300  004574  C02A  F02F         	movff	pad@p+1,pad@w+1
 15301  004578  D004               	goto	l2495
 15302  00457A                     l10144:
 15303  00457A  0E00               	movlw	0
 15304  00457C  6E2F               	movwf	(pad@w+1)^0,c
 15305  00457E  0E00               	movlw	0
 15306  004580  6E2E               	movwf	pad@w^0,c
 15307  004582                     l2495:
 15308                           
 15309                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 83:     i = 0;
 15310  004582  0E00               	movlw	0
 15311  004584  6E2D               	movwf	(pad@i+1)^0,c
 15312  004586  0E00               	movlw	0
 15313  004588  6E2C               	movwf	pad@i^0,c
 15314                           
 15315                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 15316  00458A  D00A               	goto	l10150
 15317  00458C                     l10146:
 15318                           
 15319                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 85:         fputc
      +                          (' ', fp);
 15320  00458C  0E00               	movlw	0
 15321  00458E  6E19               	movwf	(fputc@c+1)^0,c
 15322  004590  0E20               	movlw	32
 15323  004592  6E18               	movwf	fputc@c^0,c
 15324  004594  C026  F01A         	movff	pad@fp,fputc@fp
 15325  004598  EC63  F022         	call	_fputc	;wreg free
 15326                           
 15327                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 86:         ++i;
 15328  00459C  4A2C               	infsnz	pad@i^0,f,c
 15329  00459E  2A2D               	incf	(pad@i+1)^0,f,c
 15330  0045A0                     l10150:
 15331                           
 15332                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 84:     while (i 
      +                          < w) {
 15333  0045A0  502E               	movf	pad@w^0,w,c
 15334  0045A2  5C2C               	subwf	pad@i^0,w,c
 15335  0045A4  502D               	movf	(pad@i+1)^0,w,c
 15336  0045A6  0A80               	xorlw	128
 15337  0045A8  6E2B               	movwf	??_pad^0,c
 15338  0045AA  502F               	movf	(pad@w+1)^0,w,c
 15339  0045AC  0A80               	xorlw	128
 15340  0045AE  582B               	subwfb	??_pad^0,w,c
 15341  0045B0  A0D8               	btfss	status,0,c
 15342  0045B2  D7EC               	goto	l10146
 15343                           
 15344                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 90:     if (!(fla
      +                          gs & (1 << 0))) {
 15345  0045B4  0101               	movlb	1	; () banked
 15346  0045B6  B173               	btfsc	_flags& (0+255),0,b
 15347  0045B8  D008               	goto	l10154
 15348                           
 15349                           ; BSR set to: 1
 15350                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 91:         fputs
      +                          ((const char *)buf, fp);
 15351  0045BA  C027  F020         	movff	pad@buf,fputs@s
 15352  0045BE  C028  F021         	movff	pad@buf+1,fputs@s+1
 15353  0045C2  C026  F022         	movff	pad@fp,fputs@fp
 15354  0045C6  EC35  F028         	call	_fputs	;wreg free
 15355  0045CA                     l10154:
 15356                           
 15357                           ;C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\doprnt.c: 94:     return st
      +                          rlen(buf) + w;
 15358  0045CA  C027  F018         	movff	pad@buf,strlen@s
 15359  0045CE  C028  F019         	movff	pad@buf+1,strlen@s+1
 15360  0045D2  ECDE  F028         	call	_strlen	;wreg free
 15361  0045D6  502E               	movf	pad@w^0,w,c
 15362  0045D8  2418               	addwf	?_strlen^0,w,c
 15363  0045DA  6E26               	movwf	?_pad^0,c
 15364  0045DC  502F               	movf	(pad@w+1)^0,w,c
 15365  0045DE  2019               	addwfc	(?_strlen+1)^0,w,c
 15366  0045E0  6E27               	movwf	(?_pad+1)^0,c
 15367  0045E2  0012               	return		;funcret
 15368  0045E4                     __end_of_pad:
 15369                           	callstack 0
 15370                           
 15371 ;; *************** function _strlen *****************
 15372 ;; Defined at:
 15373 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\strlen.c"
 15374 ;; Parameters:    Size  Location     Type
 15375 ;;  s               2   23[COMRAM] PTR const unsigned char 
 15376 ;;		 -> dbuf(32), ACN_CR_Com@texto2(53), ACN_CR_Com@texto1(8), 
 15377 ;; Auto vars:     Size  Location     Type
 15378 ;;  a               2   25[COMRAM] PTR const unsigned char 
 15379 ;;		 -> dbuf(32), ACN_CR_Com@texto2(53), ACN_CR_Com@texto1(8), 
 15380 ;; Return value:  Size  Location     Type
 15381 ;;                  2   23[COMRAM] unsigned int 
 15382 ;; Registers used:
 15383 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15384 ;; Tracked objects:
 15385 ;;		On entry : 0/1
 15386 ;;		On exit  : 0/0
 15387 ;;		Unchanged: 0/0
 15388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15389 ;;      Params:         2       0       0       0       0       0       0       0       0
 15390 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15391 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15392 ;;      Totals:         4       0       0       0       0       0       0       0       0
 15393 ;;Total ram usage:        4 bytes
 15394 ;; Hardware stack levels used:    1
 15395 ;; Hardware stack levels required when called:    7
 15396 ;; This function calls:
 15397 ;;		Nothing
 15398 ;; This function is called by:
 15399 ;;		_ACN_CR_Com
 15400 ;;		_pad
 15401 ;; This function uses a non-reentrant model
 15402 ;;
 15403                           
 15404                           	psect	text55
 15405  0051BC                     __ptext55:
 15406                           	callstack 0
 15407  0051BC                     _strlen:
 15408                           	callstack 16
 15409                           
 15410                           ;incstack = 0
 15411  0051BC  C018  F01A         	movff	strlen@s,strlen@a
 15412  0051C0  C019  F01B         	movff	strlen@s+1,strlen@a+1
 15413  0051C4  D002               	goto	l9948
 15414  0051C6                     l9946:
 15415  0051C6  4A18               	infsnz	strlen@s^0,f,c
 15416  0051C8  2A19               	incf	(strlen@s+1)^0,f,c
 15417  0051CA                     l9948:
 15418  0051CA  C018  FFD9         	movff	strlen@s,fsr2l
 15419  0051CE  C019  FFDA         	movff	strlen@s+1,fsr2h
 15420  0051D2  50DF               	movf	indf2,w,c
 15421  0051D4  A4D8               	btfss	status,2,c
 15422  0051D6  D7F7               	goto	l9946
 15423  0051D8  501A               	movf	strlen@a^0,w,c
 15424  0051DA  5C18               	subwf	strlen@s^0,w,c
 15425  0051DC  6E18               	movwf	?_strlen^0,c
 15426  0051DE  501B               	movf	(strlen@a+1)^0,w,c
 15427  0051E0  5819               	subwfb	(strlen@s+1)^0,w,c
 15428  0051E2  6E19               	movwf	(?_strlen+1)^0,c
 15429  0051E4  0012               	return		;funcret
 15430  0051E6                     __end_of_strlen:
 15431                           	callstack 0
 15432                           
 15433 ;; *************** function _fputs *****************
 15434 ;; Defined at:
 15435 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\nf_fputs.c"
 15436 ;; Parameters:    Size  Location     Type
 15437 ;;  s               2   31[COMRAM] PTR const unsigned char 
 15438 ;;		 -> dbuf(32), 
 15439 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
 15440 ;;		 -> sprintf@f(6), 
 15441 ;; Auto vars:     Size  Location     Type
 15442 ;;  i               2   35[COMRAM] int 
 15443 ;;  c               1   34[COMRAM] unsigned char 
 15444 ;; Return value:  Size  Location     Type
 15445 ;;                  2   31[COMRAM] int 
 15446 ;; Registers used:
 15447 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15448 ;; Tracked objects:
 15449 ;;		On entry : 3F/1
 15450 ;;		On exit  : 0/0
 15451 ;;		Unchanged: 0/0
 15452 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15453 ;;      Params:         3       0       0       0       0       0       0       0       0
 15454 ;;      Locals:         3       0       0       0       0       0       0       0       0
 15455 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15456 ;;      Totals:         6       0       0       0       0       0       0       0       0
 15457 ;;Total ram usage:        6 bytes
 15458 ;; Hardware stack levels used:    1
 15459 ;; Hardware stack levels required when called:    9
 15460 ;; This function calls:
 15461 ;;		_fputc
 15462 ;; This function is called by:
 15463 ;;		_pad
 15464 ;; This function uses a non-reentrant model
 15465 ;;
 15466                           
 15467                           	psect	text56
 15468  00506A                     __ptext56:
 15469                           	callstack 0
 15470  00506A                     _fputs:
 15471                           	callstack 14
 15472                           
 15473                           ; BSR set to: 1
 15474                           
 15475                           ;incstack = 0
 15476  00506A  0E00               	movlw	0
 15477  00506C  6E25               	movwf	(fputs@i+1)^0,c
 15478  00506E  0E00               	movlw	0
 15479  005070  6E24               	movwf	fputs@i^0,c
 15480  005072  D009               	goto	l9960
 15481  005074                     l9956:
 15482  005074  C023  F018         	movff	fputs@c,fputc@c
 15483  005078  6A19               	clrf	(fputc@c+1)^0,c
 15484  00507A  C022  F01A         	movff	fputs@fp,fputc@fp
 15485  00507E  EC63  F022         	call	_fputc	;wreg free
 15486  005082  4A24               	infsnz	fputs@i^0,f,c
 15487  005084  2A25               	incf	(fputs@i+1)^0,f,c
 15488  005086                     l9960:
 15489  005086  5024               	movf	fputs@i^0,w,c
 15490  005088  2420               	addwf	fputs@s^0,w,c
 15491  00508A  6ED9               	movwf	fsr2l,c
 15492  00508C  5025               	movf	(fputs@i+1)^0,w,c
 15493  00508E  2021               	addwfc	(fputs@s+1)^0,w,c
 15494  005090  6EDA               	movwf	fsr2h,c
 15495  005092  50DF               	movf	indf2,w,c
 15496  005094  6E23               	movwf	fputs@c^0,c
 15497  005096  5023               	movf	fputs@c^0,w,c
 15498  005098  B4D8               	btfsc	status,2,c
 15499  00509A  0012               	return	
 15500  00509C  D7EB               	goto	l9956
 15501  00509E                     __end_of_fputs:
 15502                           	callstack 0
 15503                           
 15504 ;; *************** function _fputc *****************
 15505 ;; Defined at:
 15506 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\nf_fputc.c"
 15507 ;; Parameters:    Size  Location     Type
 15508 ;;  c               2   23[COMRAM] int 
 15509 ;;  fp              1   25[COMRAM] PTR struct _IO_FILE
 15510 ;;		 -> sprintf@f(6), 
 15511 ;; Auto vars:     Size  Location     Type
 15512 ;;		None
 15513 ;; Return value:  Size  Location     Type
 15514 ;;                  2   23[COMRAM] int 
 15515 ;; Registers used:
 15516 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 15517 ;; Tracked objects:
 15518 ;;		On entry : 0/0
 15519 ;;		On exit  : 0/0
 15520 ;;		Unchanged: 0/0
 15521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15522 ;;      Params:         3       0       0       0       0       0       0       0       0
 15523 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15524 ;;      Temps:          5       0       0       0       0       0       0       0       0
 15525 ;;      Totals:         8       0       0       0       0       0       0       0       0
 15526 ;;Total ram usage:        8 bytes
 15527 ;; Hardware stack levels used:    1
 15528 ;; Hardware stack levels required when called:    8
 15529 ;; This function calls:
 15530 ;;		_putch
 15531 ;; This function is called by:
 15532 ;;		_pad
 15533 ;;		_vfpfcnvrt
 15534 ;;		_fputs
 15535 ;; This function uses a non-reentrant model
 15536 ;;
 15537                           
 15538                           	psect	text57
 15539  0044C6                     __ptext57:
 15540                           	callstack 0
 15541  0044C6                     _fputc:
 15542                           	callstack 14
 15543                           
 15544                           ;incstack = 0
 15545  0044C6  501A               	movf	fputc@fp^0,w,c
 15546  0044C8  B4D8               	btfsc	status,2,c
 15547  0044CA  D003               	goto	u8300
 15548  0044CC  501A               	movf	fputc@fp^0,w,c
 15549  0044CE  A4D8               	btfss	status,2,c
 15550  0044D0  D004               	goto	l9936
 15551  0044D2                     u8300:
 15552  0044D2  5018               	movf	fputc@c^0,w,c
 15553  0044D4  EC49  F02A         	call	_putch
 15554  0044D8  0012               	return	
 15555  0044DA                     l9936:
 15556  0044DA  501A               	movf	fputc@fp^0,w,c
 15557  0044DC  6ED9               	movwf	fsr2l,c
 15558  0044DE  6ADA               	clrf	fsr2h,c
 15559  0044E0  0E04               	movlw	4
 15560  0044E2  26D9               	addwf	fsr2l,f,c
 15561  0044E4  50DE               	movf	postinc2,w,c
 15562  0044E6  10DE               	iorwf	postinc2,w,c
 15563  0044E8  B4D8               	btfsc	status,2,c
 15564  0044EA  D014               	goto	u8320
 15565  0044EC  501A               	movf	fputc@fp^0,w,c
 15566  0044EE  6ED9               	movwf	fsr2l,c
 15567  0044F0  6ADA               	clrf	fsr2h,c
 15568  0044F2  0E04               	movlw	4
 15569  0044F4  26D9               	addwf	fsr2l,f,c
 15570  0044F6  501A               	movf	fputc@fp^0,w,c
 15571  0044F8  6EE1               	movwf	fsr1l,c
 15572  0044FA  6AE2               	clrf	fsr1h,c
 15573  0044FC  0E02               	movlw	2
 15574  0044FE  26E1               	addwf	fsr1l,f,c
 15575  004500  50DE               	movf	postinc2,w,c
 15576  004502  5CE6               	subwf	postinc1,w,c
 15577  004504  50E6               	movf	postinc1,w,c
 15578  004506  0A80               	xorlw	128
 15579  004508  6E1F               	movwf	(??_fputc+4)^0,c
 15580  00450A  50DE               	movf	postinc2,w,c
 15581  00450C  0A80               	xorlw	128
 15582  00450E  581F               	subwfb	(??_fputc+4)^0,w,c
 15583  004510  B0D8               	btfsc	status,0,c
 15584  004512  0012               	return	
 15585  004514                     u8320:
 15586  004514  501A               	movf	fputc@fp^0,w,c
 15587  004516  6ED9               	movwf	fsr2l,c
 15588  004518  6ADA               	clrf	fsr2h,c
 15589  00451A  0E02               	movlw	2
 15590  00451C  26D9               	addwf	fsr2l,f,c
 15591  00451E  CFDE F01B          	movff	postinc2,??_fputc
 15592  004522  CFDD F01C          	movff	postdec2,??_fputc+1
 15593  004526  501A               	movf	fputc@fp^0,w,c
 15594  004528  6ED9               	movwf	fsr2l,c
 15595  00452A  6ADA               	clrf	fsr2h,c
 15596  00452C  CFDE F01D          	movff	postinc2,??_fputc+2
 15597  004530  CFDD F01E          	movff	postdec2,??_fputc+3
 15598  004534  501B               	movf	??_fputc^0,w,c
 15599  004536  241D               	addwf	(??_fputc+2)^0,w,c
 15600  004538  6ED9               	movwf	fsr2l,c
 15601  00453A  501C               	movf	(??_fputc+1)^0,w,c
 15602  00453C  201E               	addwfc	(??_fputc+3)^0,w,c
 15603  00453E  6EDA               	movwf	fsr2h,c
 15604  004540  C018  FFDF         	movff	fputc@c,indf2
 15605  004544  501A               	movf	fputc@fp^0,w,c
 15606  004546  6ED9               	movwf	fsr2l,c
 15607  004548  6ADA               	clrf	fsr2h,c
 15608  00454A  0E02               	movlw	2
 15609  00454C  26D9               	addwf	fsr2l,f,c
 15610  00454E  2ADE               	incf	postinc2,f,c
 15611  004550  0E00               	movlw	0
 15612  004552  22DD               	addwfc	postdec2,f,c
 15613  004554  0012               	return		;funcret
 15614  004556                     __end_of_fputc:
 15615                           	callstack 0
 15616                           
 15617 ;; *************** function _putch *****************
 15618 ;; Defined at:
 15619 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\putch.c"
 15620 ;; Parameters:    Size  Location     Type
 15621 ;;  c               1    wreg     unsigned char 
 15622 ;; Auto vars:     Size  Location     Type
 15623 ;;  c               1    0[COMRAM] unsigned char 
 15624 ;; Return value:  Size  Location     Type
 15625 ;;                  1    wreg      void 
 15626 ;; Registers used:
 15627 ;;		wreg
 15628 ;; Tracked objects:
 15629 ;;		On entry : 0/0
 15630 ;;		On exit  : 0/0
 15631 ;;		Unchanged: 0/0
 15632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15633 ;;      Params:         0       0       0       0       0       0       0       0       0
 15634 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15635 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15636 ;;      Totals:         0       0       0       0       0       0       0       0       0
 15637 ;;Total ram usage:        0 bytes
 15638 ;; Hardware stack levels used:    1
 15639 ;; Hardware stack levels required when called:    7
 15640 ;; This function calls:
 15641 ;;		Nothing
 15642 ;; This function is called by:
 15643 ;;		_fputc
 15644 ;; This function uses a non-reentrant model
 15645 ;;
 15646                           
 15647                           	psect	text58
 15648  005492                     __ptext58:
 15649                           	callstack 0
 15650  005492                     _putch:
 15651                           	callstack 14
 15652                           
 15653                           ;incstack = 0
 15654  005492  0012               	return		;funcret
 15655  005494                     __end_of_putch:
 15656                           	callstack 0
 15657                           
 15658 ;; *************** function _abs *****************
 15659 ;; Defined at:
 15660 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\abs.c"
 15661 ;; Parameters:    Size  Location     Type
 15662 ;;  a               2   41[COMRAM] int 
 15663 ;; Auto vars:     Size  Location     Type
 15664 ;;		None
 15665 ;; Return value:  Size  Location     Type
 15666 ;;                  2   41[COMRAM] int 
 15667 ;; Registers used:
 15668 ;;		wreg, status,2, status,0
 15669 ;; Tracked objects:
 15670 ;;		On entry : 3F/0
 15671 ;;		On exit  : 3F/0
 15672 ;;		Unchanged: 3F/0
 15673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15674 ;;      Params:         2       0       0       0       0       0       0       0       0
 15675 ;;      Locals:         0       0       0       0       0       0       0       0       0
 15676 ;;      Temps:          2       0       0       0       0       0       0       0       0
 15677 ;;      Totals:         4       0       0       0       0       0       0       0       0
 15678 ;;Total ram usage:        4 bytes
 15679 ;; Hardware stack levels used:    1
 15680 ;; Hardware stack levels required when called:    7
 15681 ;; This function calls:
 15682 ;;		Nothing
 15683 ;; This function is called by:
 15684 ;;		_dtoa
 15685 ;; This function uses a non-reentrant model
 15686 ;;
 15687                           
 15688                           	psect	text59
 15689  00509E                     __ptext59:
 15690                           	callstack 0
 15691  00509E                     _abs:
 15692                           	callstack 17
 15693                           
 15694                           ; BSR set to: 0
 15695                           
 15696                           ;incstack = 0
 15697  00509E  BE2B               	btfsc	(abs@a+1)^0,7,c
 15698  0050A0  D005               	goto	u8630
 15699  0050A2  502B               	movf	(abs@a+1)^0,w,c
 15700  0050A4  E110               	bnz	l2586
 15701  0050A6  042A               	decf	abs@a^0,w,c
 15702  0050A8  B0D8               	btfsc	status,0,c
 15703  0050AA  D00D               	goto	l2586
 15704  0050AC                     u8630:
 15705                           
 15706                           ; BSR set to: 0
 15707  0050AC  C02A  F02C         	movff	abs@a,??_abs
 15708  0050B0  C02B  F02D         	movff	abs@a+1,??_abs+1
 15709  0050B4  1E2C               	comf	??_abs^0,f,c
 15710  0050B6  1E2D               	comf	(??_abs+1)^0,f,c
 15711  0050B8  4A2C               	infsnz	??_abs^0,f,c
 15712  0050BA  2A2D               	incf	(??_abs+1)^0,f,c
 15713  0050BC  C02C  F02A         	movff	??_abs,?_abs
 15714  0050C0  C02D  F02B         	movff	??_abs+1,?_abs+1
 15715  0050C4  0012               	return	
 15716  0050C6                     l2586:
 15717                           
 15718                           ; BSR set to: 0
 15719  0050C6  C02A  F02A         	movff	abs@a,?_abs
 15720  0050CA  C02B  F02B         	movff	abs@a+1,?_abs+1
 15721                           
 15722                           ; BSR set to: 0
 15723  0050CE  0012               	return		;funcret
 15724  0050D0                     __end_of_abs:
 15725                           	callstack 0
 15726                           
 15727 ;; *************** function ___aomod *****************
 15728 ;; Defined at:
 15729 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\aomod.c"
 15730 ;; Parameters:    Size  Location     Type
 15731 ;;  dividend        8   23[COMRAM] long long 
 15732 ;;  divisor         8   31[COMRAM] long long 
 15733 ;; Auto vars:     Size  Location     Type
 15734 ;;  sign            1   40[COMRAM] unsigned char 
 15735 ;;  counter         1   39[COMRAM] unsigned char 
 15736 ;; Return value:  Size  Location     Type
 15737 ;;                  8   23[COMRAM] long long 
 15738 ;; Registers used:
 15739 ;;		wreg, status,2, status,0
 15740 ;; Tracked objects:
 15741 ;;		On entry : 3F/0
 15742 ;;		On exit  : 3F/0
 15743 ;;		Unchanged: 3F/0
 15744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15745 ;;      Params:        16       0       0       0       0       0       0       0       0
 15746 ;;      Locals:         2       0       0       0       0       0       0       0       0
 15747 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15748 ;;      Totals:        18       0       0       0       0       0       0       0       0
 15749 ;;Total ram usage:       18 bytes
 15750 ;; Hardware stack levels used:    1
 15751 ;; Hardware stack levels required when called:    7
 15752 ;; This function calls:
 15753 ;;		Nothing
 15754 ;; This function is called by:
 15755 ;;		_dtoa
 15756 ;; This function uses a non-reentrant model
 15757 ;;
 15758                           
 15759                           	psect	text60
 15760  00384C                     __ptext60:
 15761                           	callstack 0
 15762  00384C                     ___aomod:
 15763                           	callstack 17
 15764                           
 15765                           ; BSR set to: 0
 15766                           
 15767                           ; BSR set to: 0
 15768                           ;incstack = 0
 15769  00384C  0E00               	movlw	0
 15770  00384E  6E29               	movwf	___aomod@sign^0,c
 15771                           
 15772                           ; BSR set to: 0
 15773  003850  AE1F               	btfss	(___aomod@dividend+7)^0,7,c
 15774  003852  D012               	goto	l10070
 15775                           
 15776                           ; BSR set to: 0
 15777  003854  1E1F               	comf	(___aomod@dividend+7)^0,f,c
 15778  003856  1E1E               	comf	(___aomod@dividend+6)^0,f,c
 15779  003858  1E1D               	comf	(___aomod@dividend+5)^0,f,c
 15780  00385A  1E1C               	comf	(___aomod@dividend+4)^0,f,c
 15781  00385C  1E1B               	comf	(___aomod@dividend+3)^0,f,c
 15782  00385E  1E1A               	comf	(___aomod@dividend+2)^0,f,c
 15783  003860  1E19               	comf	(___aomod@dividend+1)^0,f,c
 15784  003862  6C18               	negf	___aomod@dividend^0,c
 15785  003864  0E00               	movlw	0
 15786  003866  2219               	addwfc	(___aomod@dividend+1)^0,f,c
 15787  003868  221A               	addwfc	(___aomod@dividend+2)^0,f,c
 15788  00386A  221B               	addwfc	(___aomod@dividend+3)^0,f,c
 15789  00386C  221C               	addwfc	(___aomod@dividend+4)^0,f,c
 15790  00386E  221D               	addwfc	(___aomod@dividend+5)^0,f,c
 15791  003870  221E               	addwfc	(___aomod@dividend+6)^0,f,c
 15792  003872  221F               	addwfc	(___aomod@dividend+7)^0,f,c
 15793                           
 15794                           ; BSR set to: 0
 15795  003874  0E01               	movlw	1
 15796  003876  6E29               	movwf	___aomod@sign^0,c
 15797  003878                     l10070:
 15798                           
 15799                           ; BSR set to: 0
 15800  003878  AE27               	btfss	(___aomod@divisor+7)^0,7,c
 15801  00387A  D010               	goto	l10074
 15802                           
 15803                           ; BSR set to: 0
 15804  00387C  1E27               	comf	(___aomod@divisor+7)^0,f,c
 15805  00387E  1E26               	comf	(___aomod@divisor+6)^0,f,c
 15806  003880  1E25               	comf	(___aomod@divisor+5)^0,f,c
 15807  003882  1E24               	comf	(___aomod@divisor+4)^0,f,c
 15808  003884  1E23               	comf	(___aomod@divisor+3)^0,f,c
 15809  003886  1E22               	comf	(___aomod@divisor+2)^0,f,c
 15810  003888  1E21               	comf	(___aomod@divisor+1)^0,f,c
 15811  00388A  6C20               	negf	___aomod@divisor^0,c
 15812  00388C  0E00               	movlw	0
 15813  00388E  2221               	addwfc	(___aomod@divisor+1)^0,f,c
 15814  003890  2222               	addwfc	(___aomod@divisor+2)^0,f,c
 15815  003892  2223               	addwfc	(___aomod@divisor+3)^0,f,c
 15816  003894  2224               	addwfc	(___aomod@divisor+4)^0,f,c
 15817  003896  2225               	addwfc	(___aomod@divisor+5)^0,f,c
 15818  003898  2226               	addwfc	(___aomod@divisor+6)^0,f,c
 15819  00389A  2227               	addwfc	(___aomod@divisor+7)^0,f,c
 15820  00389C                     l10074:
 15821                           
 15822                           ; BSR set to: 0
 15823  00389C  5020               	movf	___aomod@divisor^0,w,c
 15824  00389E  1021               	iorwf	(___aomod@divisor+1)^0,w,c
 15825  0038A0  1022               	iorwf	(___aomod@divisor+2)^0,w,c
 15826  0038A2  1023               	iorwf	(___aomod@divisor+3)^0,w,c
 15827  0038A4  1024               	iorwf	(___aomod@divisor+4)^0,w,c
 15828  0038A6  1025               	iorwf	(___aomod@divisor+5)^0,w,c
 15829  0038A8  1026               	iorwf	(___aomod@divisor+6)^0,w,c
 15830  0038AA  1027               	iorwf	(___aomod@divisor+7)^0,w,c
 15831  0038AC  B4D8               	btfsc	status,2,c
 15832  0038AE  D03C               	goto	l10090
 15833                           
 15834                           ; BSR set to: 0
 15835  0038B0  0E01               	movlw	1
 15836  0038B2  6E28               	movwf	___aomod@counter^0,c
 15837  0038B4  D00A               	goto	l10080
 15838  0038B6                     l10078:
 15839                           
 15840                           ; BSR set to: 0
 15841  0038B6  90D8               	bcf	status,0,c
 15842  0038B8  3620               	rlcf	___aomod@divisor^0,f,c
 15843  0038BA  3621               	rlcf	(___aomod@divisor+1)^0,f,c
 15844  0038BC  3622               	rlcf	(___aomod@divisor+2)^0,f,c
 15845  0038BE  3623               	rlcf	(___aomod@divisor+3)^0,f,c
 15846  0038C0  3624               	rlcf	(___aomod@divisor+4)^0,f,c
 15847  0038C2  3625               	rlcf	(___aomod@divisor+5)^0,f,c
 15848  0038C4  3626               	rlcf	(___aomod@divisor+6)^0,f,c
 15849  0038C6  3627               	rlcf	(___aomod@divisor+7)^0,f,c
 15850  0038C8  2A28               	incf	___aomod@counter^0,f,c
 15851  0038CA                     l10080:
 15852                           
 15853                           ; BSR set to: 0
 15854  0038CA  AE27               	btfss	(___aomod@divisor+7)^0,7,c
 15855  0038CC  D7F4               	goto	l10078
 15856  0038CE                     u8490:
 15857                           
 15858                           ; BSR set to: 0
 15859  0038CE  5020               	movf	___aomod@divisor^0,w,c
 15860  0038D0  5C18               	subwf	___aomod@dividend^0,w,c
 15861  0038D2  5021               	movf	(___aomod@divisor+1)^0,w,c
 15862  0038D4  5819               	subwfb	(___aomod@dividend+1)^0,w,c
 15863  0038D6  5022               	movf	(___aomod@divisor+2)^0,w,c
 15864  0038D8  581A               	subwfb	(___aomod@dividend+2)^0,w,c
 15865  0038DA  5023               	movf	(___aomod@divisor+3)^0,w,c
 15866  0038DC  581B               	subwfb	(___aomod@dividend+3)^0,w,c
 15867  0038DE  5024               	movf	(___aomod@divisor+4)^0,w,c
 15868  0038E0  581C               	subwfb	(___aomod@dividend+4)^0,w,c
 15869  0038E2  5025               	movf	(___aomod@divisor+5)^0,w,c
 15870  0038E4  581D               	subwfb	(___aomod@dividend+5)^0,w,c
 15871  0038E6  5026               	movf	(___aomod@divisor+6)^0,w,c
 15872  0038E8  581E               	subwfb	(___aomod@dividend+6)^0,w,c
 15873  0038EA  5027               	movf	(___aomod@divisor+7)^0,w,c
 15874  0038EC  581F               	subwfb	(___aomod@dividend+7)^0,w,c
 15875  0038EE  A0D8               	btfss	status,0,c
 15876  0038F0  D010               	goto	l10086
 15877                           
 15878                           ; BSR set to: 0
 15879  0038F2  5020               	movf	___aomod@divisor^0,w,c
 15880  0038F4  5E18               	subwf	___aomod@dividend^0,f,c
 15881  0038F6  5021               	movf	(___aomod@divisor+1)^0,w,c
 15882  0038F8  5A19               	subwfb	(___aomod@dividend+1)^0,f,c
 15883  0038FA  5022               	movf	(___aomod@divisor+2)^0,w,c
 15884  0038FC  5A1A               	subwfb	(___aomod@dividend+2)^0,f,c
 15885  0038FE  5023               	movf	(___aomod@divisor+3)^0,w,c
 15886  003900  5A1B               	subwfb	(___aomod@dividend+3)^0,f,c
 15887  003902  5024               	movf	(___aomod@divisor+4)^0,w,c
 15888  003904  5A1C               	subwfb	(___aomod@dividend+4)^0,f,c
 15889  003906  5025               	movf	(___aomod@divisor+5)^0,w,c
 15890  003908  5A1D               	subwfb	(___aomod@dividend+5)^0,f,c
 15891  00390A  5026               	movf	(___aomod@divisor+6)^0,w,c
 15892  00390C  5A1E               	subwfb	(___aomod@dividend+6)^0,f,c
 15893  00390E  5027               	movf	(___aomod@divisor+7)^0,w,c
 15894  003910  5A1F               	subwfb	(___aomod@dividend+7)^0,f,c
 15895  003912                     l10086:
 15896                           
 15897                           ; BSR set to: 0
 15898  003912  90D8               	bcf	status,0,c
 15899  003914  3227               	rrcf	(___aomod@divisor+7)^0,f,c
 15900  003916  3226               	rrcf	(___aomod@divisor+6)^0,f,c
 15901  003918  3225               	rrcf	(___aomod@divisor+5)^0,f,c
 15902  00391A  3224               	rrcf	(___aomod@divisor+4)^0,f,c
 15903  00391C  3223               	rrcf	(___aomod@divisor+3)^0,f,c
 15904  00391E  3222               	rrcf	(___aomod@divisor+2)^0,f,c
 15905  003920  3221               	rrcf	(___aomod@divisor+1)^0,f,c
 15906  003922  3220               	rrcf	___aomod@divisor^0,f,c
 15907                           
 15908                           ; BSR set to: 0
 15909  003924  2E28               	decfsz	___aomod@counter^0,f,c
 15910  003926  D7D3               	goto	u8490
 15911  003928                     l10090:
 15912                           
 15913                           ; BSR set to: 0
 15914  003928  5029               	movf	___aomod@sign^0,w,c
 15915  00392A  B4D8               	btfsc	status,2,c
 15916  00392C  D010               	goto	l10094
 15917                           
 15918                           ; BSR set to: 0
 15919  00392E  1E1F               	comf	(___aomod@dividend+7)^0,f,c
 15920  003930  1E1E               	comf	(___aomod@dividend+6)^0,f,c
 15921  003932  1E1D               	comf	(___aomod@dividend+5)^0,f,c
 15922  003934  1E1C               	comf	(___aomod@dividend+4)^0,f,c
 15923  003936  1E1B               	comf	(___aomod@dividend+3)^0,f,c
 15924  003938  1E1A               	comf	(___aomod@dividend+2)^0,f,c
 15925  00393A  1E19               	comf	(___aomod@dividend+1)^0,f,c
 15926  00393C  6C18               	negf	___aomod@dividend^0,c
 15927  00393E  0E00               	movlw	0
 15928  003940  2219               	addwfc	(___aomod@dividend+1)^0,f,c
 15929  003942  221A               	addwfc	(___aomod@dividend+2)^0,f,c
 15930  003944  221B               	addwfc	(___aomod@dividend+3)^0,f,c
 15931  003946  221C               	addwfc	(___aomod@dividend+4)^0,f,c
 15932  003948  221D               	addwfc	(___aomod@dividend+5)^0,f,c
 15933  00394A  221E               	addwfc	(___aomod@dividend+6)^0,f,c
 15934  00394C  221F               	addwfc	(___aomod@dividend+7)^0,f,c
 15935  00394E                     l10094:
 15936                           
 15937                           ; BSR set to: 0
 15938  00394E  C018  F018         	movff	___aomod@dividend,?___aomod
 15939  003952  C019  F019         	movff	___aomod@dividend+1,?___aomod+1
 15940  003956  C01A  F01A         	movff	___aomod@dividend+2,?___aomod+2
 15941  00395A  C01B  F01B         	movff	___aomod@dividend+3,?___aomod+3
 15942  00395E  C01C  F01C         	movff	___aomod@dividend+4,?___aomod+4
 15943  003962  C01D  F01D         	movff	___aomod@dividend+5,?___aomod+5
 15944  003966  C01E  F01E         	movff	___aomod@dividend+6,?___aomod+6
 15945  00396A  C01F  F01F         	movff	___aomod@dividend+7,?___aomod+7
 15946                           
 15947                           ; BSR set to: 0
 15948  00396E  0012               	return		;funcret
 15949  003970                     __end_of___aomod:
 15950                           	callstack 0
 15951                           
 15952 ;; *************** function ___aodiv *****************
 15953 ;; Defined at:
 15954 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\aodiv.c"
 15955 ;; Parameters:    Size  Location     Type
 15956 ;;  dividend        8   23[COMRAM] long long 
 15957 ;;  divisor         8   31[COMRAM] long long 
 15958 ;; Auto vars:     Size  Location     Type
 15959 ;;  quotient        8    2[BANK0 ] long long 
 15960 ;;  sign            1    1[BANK0 ] unsigned char 
 15961 ;;  counter         1    0[BANK0 ] unsigned char 
 15962 ;; Return value:  Size  Location     Type
 15963 ;;                  8   23[COMRAM] long long 
 15964 ;; Registers used:
 15965 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15966 ;; Tracked objects:
 15967 ;;		On entry : 0/1
 15968 ;;		On exit  : 3F/0
 15969 ;;		Unchanged: 0/0
 15970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 15971 ;;      Params:        16       0       0       0       0       0       0       0       0
 15972 ;;      Locals:         0      10       0       0       0       0       0       0       0
 15973 ;;      Temps:          0       0       0       0       0       0       0       0       0
 15974 ;;      Totals:        16      10       0       0       0       0       0       0       0
 15975 ;;Total ram usage:       26 bytes
 15976 ;; Hardware stack levels used:    1
 15977 ;; Hardware stack levels required when called:    7
 15978 ;; This function calls:
 15979 ;;		Nothing
 15980 ;; This function is called by:
 15981 ;;		_M_Write
 15982 ;;		_dtoa
 15983 ;; This function uses a non-reentrant model
 15984 ;;
 15985                           
 15986                           	psect	text61
 15987  0035C2                     __ptext61:
 15988                           	callstack 0
 15989  0035C2                     ___aodiv:
 15990                           	callstack 17
 15991                           
 15992                           ; BSR set to: 0
 15993                           ;incstack = 0
 15994  0035C2  0E00               	movlw	0
 15995  0035C4  0100               	movlb	0	; () banked
 15996  0035C6  6F61               	movwf	___aodiv@sign& (0+255),b
 15997                           
 15998                           ; BSR set to: 0
 15999  0035C8  AE27               	btfss	(___aodiv@divisor+7)^0,7,c
 16000  0035CA  D012               	goto	l10026
 16001                           
 16002                           ; BSR set to: 0
 16003  0035CC  1E27               	comf	(___aodiv@divisor+7)^0,f,c
 16004  0035CE  1E26               	comf	(___aodiv@divisor+6)^0,f,c
 16005  0035D0  1E25               	comf	(___aodiv@divisor+5)^0,f,c
 16006  0035D2  1E24               	comf	(___aodiv@divisor+4)^0,f,c
 16007  0035D4  1E23               	comf	(___aodiv@divisor+3)^0,f,c
 16008  0035D6  1E22               	comf	(___aodiv@divisor+2)^0,f,c
 16009  0035D8  1E21               	comf	(___aodiv@divisor+1)^0,f,c
 16010  0035DA  6C20               	negf	___aodiv@divisor^0,c
 16011  0035DC  0E00               	movlw	0
 16012  0035DE  2221               	addwfc	(___aodiv@divisor+1)^0,f,c
 16013  0035E0  2222               	addwfc	(___aodiv@divisor+2)^0,f,c
 16014  0035E2  2223               	addwfc	(___aodiv@divisor+3)^0,f,c
 16015  0035E4  2224               	addwfc	(___aodiv@divisor+4)^0,f,c
 16016  0035E6  2225               	addwfc	(___aodiv@divisor+5)^0,f,c
 16017  0035E8  2226               	addwfc	(___aodiv@divisor+6)^0,f,c
 16018  0035EA  2227               	addwfc	(___aodiv@divisor+7)^0,f,c
 16019                           
 16020                           ; BSR set to: 0
 16021  0035EC  0E01               	movlw	1
 16022  0035EE  6F61               	movwf	___aodiv@sign& (0+255),b
 16023  0035F0                     l10026:
 16024                           
 16025                           ; BSR set to: 0
 16026  0035F0  AE1F               	btfss	(___aodiv@dividend+7)^0,7,c
 16027  0035F2  D012               	goto	l10032
 16028                           
 16029                           ; BSR set to: 0
 16030  0035F4  1E1F               	comf	(___aodiv@dividend+7)^0,f,c
 16031  0035F6  1E1E               	comf	(___aodiv@dividend+6)^0,f,c
 16032  0035F8  1E1D               	comf	(___aodiv@dividend+5)^0,f,c
 16033  0035FA  1E1C               	comf	(___aodiv@dividend+4)^0,f,c
 16034  0035FC  1E1B               	comf	(___aodiv@dividend+3)^0,f,c
 16035  0035FE  1E1A               	comf	(___aodiv@dividend+2)^0,f,c
 16036  003600  1E19               	comf	(___aodiv@dividend+1)^0,f,c
 16037  003602  6C18               	negf	___aodiv@dividend^0,c
 16038  003604  0E00               	movlw	0
 16039  003606  2219               	addwfc	(___aodiv@dividend+1)^0,f,c
 16040  003608  221A               	addwfc	(___aodiv@dividend+2)^0,f,c
 16041  00360A  221B               	addwfc	(___aodiv@dividend+3)^0,f,c
 16042  00360C  221C               	addwfc	(___aodiv@dividend+4)^0,f,c
 16043  00360E  221D               	addwfc	(___aodiv@dividend+5)^0,f,c
 16044  003610  221E               	addwfc	(___aodiv@dividend+6)^0,f,c
 16045  003612  221F               	addwfc	(___aodiv@dividend+7)^0,f,c
 16046                           
 16047                           ; BSR set to: 0
 16048  003614  0E01               	movlw	1
 16049  003616  1B61               	xorwf	___aodiv@sign& (0+255),f,b
 16050  003618                     l10032:
 16051                           
 16052                           ; BSR set to: 0
 16053  003618  EE20  F062         	lfsr	2,___aodiv@quotient
 16054  00361C  0E07               	movlw	7
 16055  00361E                     u8411:
 16056  00361E  6ADE               	clrf	postinc2,c
 16057  003620  06E8               	decf	wreg,f,c
 16058  003622  E2FD               	bc	u8411
 16059                           
 16060                           ; BSR set to: 0
 16061  003624  5020               	movf	___aodiv@divisor^0,w,c
 16062  003626  1021               	iorwf	(___aodiv@divisor+1)^0,w,c
 16063  003628  1022               	iorwf	(___aodiv@divisor+2)^0,w,c
 16064  00362A  1023               	iorwf	(___aodiv@divisor+3)^0,w,c
 16065  00362C  1024               	iorwf	(___aodiv@divisor+4)^0,w,c
 16066  00362E  1025               	iorwf	(___aodiv@divisor+5)^0,w,c
 16067  003630  1026               	iorwf	(___aodiv@divisor+6)^0,w,c
 16068  003632  1027               	iorwf	(___aodiv@divisor+7)^0,w,c
 16069  003634  B4D8               	btfsc	status,2,c
 16070  003636  D046               	goto	l10054
 16071                           
 16072                           ; BSR set to: 0
 16073  003638  0E01               	movlw	1
 16074  00363A  6F60               	movwf	___aodiv@counter& (0+255),b
 16075  00363C  D00A               	goto	l10040
 16076  00363E                     l10038:
 16077                           
 16078                           ; BSR set to: 0
 16079  00363E  90D8               	bcf	status,0,c
 16080  003640  3620               	rlcf	___aodiv@divisor^0,f,c
 16081  003642  3621               	rlcf	(___aodiv@divisor+1)^0,f,c
 16082  003644  3622               	rlcf	(___aodiv@divisor+2)^0,f,c
 16083  003646  3623               	rlcf	(___aodiv@divisor+3)^0,f,c
 16084  003648  3624               	rlcf	(___aodiv@divisor+4)^0,f,c
 16085  00364A  3625               	rlcf	(___aodiv@divisor+5)^0,f,c
 16086  00364C  3626               	rlcf	(___aodiv@divisor+6)^0,f,c
 16087  00364E  3627               	rlcf	(___aodiv@divisor+7)^0,f,c
 16088  003650  2B60               	incf	___aodiv@counter& (0+255),f,b
 16089  003652                     l10040:
 16090                           
 16091                           ; BSR set to: 0
 16092  003652  AE27               	btfss	(___aodiv@divisor+7)^0,7,c
 16093  003654  D7F4               	goto	l10038
 16094  003656                     u8430:
 16095                           
 16096                           ; BSR set to: 0
 16097  003656  90D8               	bcf	status,0,c
 16098  003658  3762               	rlcf	___aodiv@quotient& (0+255),f,b
 16099  00365A  3763               	rlcf	(___aodiv@quotient+1)& (0+255),f,b
 16100  00365C  3764               	rlcf	(___aodiv@quotient+2)& (0+255),f,b
 16101  00365E  3765               	rlcf	(___aodiv@quotient+3)& (0+255),f,b
 16102  003660  3766               	rlcf	(___aodiv@quotient+4)& (0+255),f,b
 16103  003662  3767               	rlcf	(___aodiv@quotient+5)& (0+255),f,b
 16104  003664  3768               	rlcf	(___aodiv@quotient+6)& (0+255),f,b
 16105  003666  3769               	rlcf	(___aodiv@quotient+7)& (0+255),f,b
 16106                           
 16107                           ; BSR set to: 0
 16108  003668  5020               	movf	___aodiv@divisor^0,w,c
 16109  00366A  5C18               	subwf	___aodiv@dividend^0,w,c
 16110  00366C  5021               	movf	(___aodiv@divisor+1)^0,w,c
 16111  00366E  5819               	subwfb	(___aodiv@dividend+1)^0,w,c
 16112  003670  5022               	movf	(___aodiv@divisor+2)^0,w,c
 16113  003672  581A               	subwfb	(___aodiv@dividend+2)^0,w,c
 16114  003674  5023               	movf	(___aodiv@divisor+3)^0,w,c
 16115  003676  581B               	subwfb	(___aodiv@dividend+3)^0,w,c
 16116  003678  5024               	movf	(___aodiv@divisor+4)^0,w,c
 16117  00367A  581C               	subwfb	(___aodiv@dividend+4)^0,w,c
 16118  00367C  5025               	movf	(___aodiv@divisor+5)^0,w,c
 16119  00367E  581D               	subwfb	(___aodiv@dividend+5)^0,w,c
 16120  003680  5026               	movf	(___aodiv@divisor+6)^0,w,c
 16121  003682  581E               	subwfb	(___aodiv@dividend+6)^0,w,c
 16122  003684  5027               	movf	(___aodiv@divisor+7)^0,w,c
 16123  003686  581F               	subwfb	(___aodiv@dividend+7)^0,w,c
 16124  003688  A0D8               	btfss	status,0,c
 16125  00368A  D011               	goto	l10050
 16126                           
 16127                           ; BSR set to: 0
 16128  00368C  5020               	movf	___aodiv@divisor^0,w,c
 16129  00368E  5E18               	subwf	___aodiv@dividend^0,f,c
 16130  003690  5021               	movf	(___aodiv@divisor+1)^0,w,c
 16131  003692  5A19               	subwfb	(___aodiv@dividend+1)^0,f,c
 16132  003694  5022               	movf	(___aodiv@divisor+2)^0,w,c
 16133  003696  5A1A               	subwfb	(___aodiv@dividend+2)^0,f,c
 16134  003698  5023               	movf	(___aodiv@divisor+3)^0,w,c
 16135  00369A  5A1B               	subwfb	(___aodiv@dividend+3)^0,f,c
 16136  00369C  5024               	movf	(___aodiv@divisor+4)^0,w,c
 16137  00369E  5A1C               	subwfb	(___aodiv@dividend+4)^0,f,c
 16138  0036A0  5025               	movf	(___aodiv@divisor+5)^0,w,c
 16139  0036A2  5A1D               	subwfb	(___aodiv@dividend+5)^0,f,c
 16140  0036A4  5026               	movf	(___aodiv@divisor+6)^0,w,c
 16141  0036A6  5A1E               	subwfb	(___aodiv@dividend+6)^0,f,c
 16142  0036A8  5027               	movf	(___aodiv@divisor+7)^0,w,c
 16143  0036AA  5A1F               	subwfb	(___aodiv@dividend+7)^0,f,c
 16144                           
 16145                           ; BSR set to: 0
 16146  0036AC  8162               	bsf	___aodiv@quotient& (0+255),0,b
 16147  0036AE                     l10050:
 16148                           
 16149                           ; BSR set to: 0
 16150  0036AE  90D8               	bcf	status,0,c
 16151  0036B0  3227               	rrcf	(___aodiv@divisor+7)^0,f,c
 16152  0036B2  3226               	rrcf	(___aodiv@divisor+6)^0,f,c
 16153  0036B4  3225               	rrcf	(___aodiv@divisor+5)^0,f,c
 16154  0036B6  3224               	rrcf	(___aodiv@divisor+4)^0,f,c
 16155  0036B8  3223               	rrcf	(___aodiv@divisor+3)^0,f,c
 16156  0036BA  3222               	rrcf	(___aodiv@divisor+2)^0,f,c
 16157  0036BC  3221               	rrcf	(___aodiv@divisor+1)^0,f,c
 16158  0036BE  3220               	rrcf	___aodiv@divisor^0,f,c
 16159                           
 16160                           ; BSR set to: 0
 16161  0036C0  2F60               	decfsz	___aodiv@counter& (0+255),f,b
 16162  0036C2  D7C9               	goto	u8430
 16163  0036C4                     l10054:
 16164                           
 16165                           ; BSR set to: 0
 16166  0036C4  5161               	movf	___aodiv@sign& (0+255),w,b
 16167  0036C6  B4D8               	btfsc	status,2,c
 16168  0036C8  D010               	goto	l10058
 16169                           
 16170                           ; BSR set to: 0
 16171  0036CA  1F69               	comf	(___aodiv@quotient+7)& (0+255),f,b
 16172  0036CC  1F68               	comf	(___aodiv@quotient+6)& (0+255),f,b
 16173  0036CE  1F67               	comf	(___aodiv@quotient+5)& (0+255),f,b
 16174  0036D0  1F66               	comf	(___aodiv@quotient+4)& (0+255),f,b
 16175  0036D2  1F65               	comf	(___aodiv@quotient+3)& (0+255),f,b
 16176  0036D4  1F64               	comf	(___aodiv@quotient+2)& (0+255),f,b
 16177  0036D6  1F63               	comf	(___aodiv@quotient+1)& (0+255),f,b
 16178  0036D8  6D62               	negf	___aodiv@quotient& (0+255),b
 16179  0036DA  0E00               	movlw	0
 16180  0036DC  2363               	addwfc	(___aodiv@quotient+1)& (0+255),f,b
 16181  0036DE  2364               	addwfc	(___aodiv@quotient+2)& (0+255),f,b
 16182  0036E0  2365               	addwfc	(___aodiv@quotient+3)& (0+255),f,b
 16183  0036E2  2366               	addwfc	(___aodiv@quotient+4)& (0+255),f,b
 16184  0036E4  2367               	addwfc	(___aodiv@quotient+5)& (0+255),f,b
 16185  0036E6  2368               	addwfc	(___aodiv@quotient+6)& (0+255),f,b
 16186  0036E8  2369               	addwfc	(___aodiv@quotient+7)& (0+255),f,b
 16187  0036EA                     l10058:
 16188                           
 16189                           ; BSR set to: 0
 16190  0036EA  C062  F018         	movff	___aodiv@quotient,?___aodiv
 16191  0036EE  C063  F019         	movff	___aodiv@quotient+1,?___aodiv+1
 16192  0036F2  C064  F01A         	movff	___aodiv@quotient+2,?___aodiv+2
 16193  0036F6  C065  F01B         	movff	___aodiv@quotient+3,?___aodiv+3
 16194  0036FA  C066  F01C         	movff	___aodiv@quotient+4,?___aodiv+4
 16195  0036FE  C067  F01D         	movff	___aodiv@quotient+5,?___aodiv+5
 16196  003702  C068  F01E         	movff	___aodiv@quotient+6,?___aodiv+6
 16197  003706  C069  F01F         	movff	___aodiv@quotient+7,?___aodiv+7
 16198                           
 16199                           ; BSR set to: 0
 16200  00370A  0012               	return		;funcret
 16201  00370C                     __end_of___aodiv:
 16202                           	callstack 0
 16203                           
 16204 ;; *************** function _atoi *****************
 16205 ;; Defined at:
 16206 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\atoi.c"
 16207 ;; Parameters:    Size  Location     Type
 16208 ;;  s               2   30[COMRAM] PTR const unsigned char 
 16209 ;;		 -> STR_128(5), STR_126(5), STR_124(3), STR_120(5), 
 16210 ;;		 -> STR_118(5), STR_116(3), STR_106(3), STR_101(3), 
 16211 ;;		 -> STR_75(4), STR_72(3), STR_69(3), STR_66(3), 
 16212 ;;		 -> STR_65(5), STR_62(7), STR_58(3), STR_54(5), 
 16213 ;;		 -> STR_53(5), STR_52(5), STR_51(5), STR_50(5), 
 16214 ;;		 -> STR_49(5), STR_41(5), STR_37(5), STR_34(5), 
 16215 ;;		 -> STR_32(5), STR_31(7), STR_27(5), STR_25(5), 
 16216 ;;		 -> STR_23(5), STR_22(5), STR_20(5), STR_18(5), 
 16217 ;;		 -> STR_14(5), STR_13(3), STR_12(3), STR_11(3), 
 16218 ;;		 -> STR_10(3), STR_9(3), 
 16219 ;; Auto vars:     Size  Location     Type
 16220 ;;  n               2   43[COMRAM] int 
 16221 ;;  neg             2   36[COMRAM] int 
 16222 ;; Return value:  Size  Location     Type
 16223 ;;                  2   30[COMRAM] int 
 16224 ;; Registers used:
 16225 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16226 ;; Tracked objects:
 16227 ;;		On entry : 3F/0
 16228 ;;		On exit  : 0/0
 16229 ;;		Unchanged: 0/0
 16230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16231 ;;      Params:         2       0       0       0       0       0       0       0       0
 16232 ;;      Locals:         9       0       0       0       0       0       0       0       0
 16233 ;;      Temps:          4       0       0       0       0       0       0       0       0
 16234 ;;      Totals:        15       0       0       0       0       0       0       0       0
 16235 ;;Total ram usage:       15 bytes
 16236 ;; Hardware stack levels used:    1
 16237 ;; Hardware stack levels required when called:    8
 16238 ;; This function calls:
 16239 ;;		___wmul
 16240 ;;		_isdigit
 16241 ;;		_isspace
 16242 ;; This function is called by:
 16243 ;;		_vfpfcnvrt
 16244 ;; This function uses a non-reentrant model
 16245 ;;
 16246                           
 16247                           	psect	text62
 16248  00370C                     __ptext62:
 16249                           	callstack 0
 16250  00370C                     _atoi:
 16251                           	callstack 17
 16252                           
 16253                           ; BSR set to: 0
 16254                           
 16255                           ; BSR set to: 0
 16256                           ;incstack = 0
 16257  00370C  0E00               	movlw	0
 16258  00370E  6E2D               	movwf	(atoi@n+1)^0,c
 16259  003710  0E00               	movlw	0
 16260  003712  6E2C               	movwf	atoi@n^0,c
 16261  003714  0E00               	movlw	0
 16262  003716  6E26               	movwf	(atoi@neg+1)^0,c
 16263  003718  0E00               	movlw	0
 16264  00371A  6E25               	movwf	atoi@neg^0,c
 16265  00371C  D002               	goto	l10296
 16266  00371E                     l10294:
 16267                           
 16268                           ; BSR set to: 0
 16269  00371E  4A1F               	infsnz	atoi@s^0,f,c
 16270  003720  2A20               	incf	(atoi@s+1)^0,f,c
 16271  003722                     l10296:
 16272                           
 16273                           ; BSR set to: 0
 16274  003722  0E01               	movlw	1
 16275  003724  6E2B               	movwf	_atoi$2993^0,c
 16276                           
 16277                           ; BSR set to: 0
 16278  003726  C01F  FFF6         	movff	atoi@s,tblptrl
 16279  00372A  C020  FFF7         	movff	atoi@s+1,tblptrh
 16280  00372E                     	if	0	;tblptru may be non-zero
 16281  00372E                     	endif
 16282  00372E                     	if	0	;tblptru may be non-zero
 16283  00372E                     	endif
 16284  00372E  0008               	tblrd		*
 16285  003730  50F5               	movf	tablat,w,c
 16286  003732  0A20               	xorlw	32
 16287  003734  B4D8               	btfsc	status,2,c
 16288  003736  D018               	goto	l10304
 16289                           
 16290                           ; BSR set to: 0
 16291  003738  0EF7               	movlw	247
 16292  00373A  6E21               	movwf	??_atoi^0,c
 16293  00373C  0EFF               	movlw	255
 16294  00373E  6E22               	movwf	(??_atoi+1)^0,c
 16295  003740  C01F  FFF6         	movff	atoi@s,tblptrl
 16296  003744  C020  FFF7         	movff	atoi@s+1,tblptrh
 16297  003748                     	if	0	;tblptru may be non-zero
 16298  003748                     	endif
 16299  003748                     	if	0	;tblptru may be non-zero
 16300  003748                     	endif
 16301  003748  0008               	tblrd		*
 16302  00374A  50F5               	movf	tablat,w,c
 16303  00374C  6E23               	movwf	(??_atoi+2)^0,c
 16304  00374E  6A24               	clrf	(??_atoi+3)^0,c
 16305  003750  5021               	movf	??_atoi^0,w,c
 16306  003752  2623               	addwf	(??_atoi+2)^0,f,c
 16307  003754  5022               	movf	(??_atoi+1)^0,w,c
 16308  003756  2224               	addwfc	(??_atoi+3)^0,f,c
 16309  003758  5024               	movf	(??_atoi+3)^0,w,c
 16310  00375A  E104               	bnz	u8910
 16311  00375C  0E05               	movlw	5
 16312  00375E  5C23               	subwf	(??_atoi+2)^0,w,c
 16313  003760  A0D8               	btfss	status,0,c
 16314  003762  D002               	goto	l10304
 16315  003764                     u8910:
 16316                           
 16317                           ; BSR set to: 0
 16318  003764  0E00               	movlw	0
 16319  003766  6E2B               	movwf	_atoi$2993^0,c
 16320  003768                     l10304:
 16321                           
 16322                           ; BSR set to: 0
 16323  003768  C02B  F027         	movff	_atoi$2993,_atoi$2992
 16324  00376C  6A28               	clrf	(_atoi$2992+1)^0,c
 16325                           
 16326                           ; BSR set to: 0
 16327  00376E  5027               	movf	_atoi$2992^0,w,c
 16328  003770  1028               	iorwf	(_atoi$2992+1)^0,w,c
 16329  003772  B4D8               	btfsc	status,2,c
 16330  003774  D008               	goto	l10314
 16331  003776  D7D3               	goto	l10294
 16332  003778                     l10310:
 16333                           
 16334                           ; BSR set to: 0
 16335  003778  0E00               	movlw	0
 16336  00377A  6E26               	movwf	(atoi@neg+1)^0,c
 16337  00377C  0E01               	movlw	1
 16338  00377E  6E25               	movwf	atoi@neg^0,c
 16339  003780                     l10312:
 16340  003780  4A1F               	infsnz	atoi@s^0,f,c
 16341  003782  2A20               	incf	(atoi@s+1)^0,f,c
 16342  003784  D02E               	goto	l10320
 16343  003786                     l10314:
 16344                           
 16345                           ; BSR set to: 0
 16346  003786  C01F  FFF6         	movff	atoi@s,tblptrl
 16347  00378A  C020  FFF7         	movff	atoi@s+1,tblptrh
 16348  00378E                     	if	0	;tblptru may be non-zero
 16349  00378E                     	endif
 16350  00378E                     	if	0	;tblptru may be non-zero
 16351  00378E                     	endif
 16352  00378E  0008               	tblrd		*
 16353  003790  50F5               	movf	tablat,w,c
 16354  003792  6E21               	movwf	??_atoi^0,c
 16355  003794  6A22               	clrf	(??_atoi+1)^0,c
 16356                           
 16357                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16358                           ; Switch size 1, requested type "simple"
 16359                           ; Number of cases is 1, Range of values is 0 to 0
 16360                           ; switch strategies available:
 16361                           ; Name         Instructions Cycles
 16362                           ; simple_byte            4     3 (average)
 16363                           ;	Chosen strategy is simple_byte
 16364  003796  5022               	movf	(??_atoi+1)^0,w,c
 16365  003798  0A00               	xorlw	0	; case 0
 16366  00379A  A4D8               	btfss	status,2,c
 16367  00379C  D022               	goto	l10320
 16368                           
 16369                           ; BSR set to: 0
 16370                           ; Switch size 1, requested type "simple"
 16371                           ; Number of cases is 2, Range of values is 43 to 45
 16372                           ; switch strategies available:
 16373                           ; Name         Instructions Cycles
 16374                           ; simple_byte            7     4 (average)
 16375                           ;	Chosen strategy is simple_byte
 16376  00379E  5021               	movf	??_atoi^0,w,c
 16377  0037A0  0A2B               	xorlw	43	; case 43
 16378  0037A2  B4D8               	btfsc	status,2,c
 16379  0037A4  D7ED               	goto	l10312
 16380  0037A6  0A06               	xorlw	6	; case 45
 16381  0037A8  B4D8               	btfsc	status,2,c
 16382  0037AA  D7E6               	goto	l10310
 16383  0037AC  D01A               	goto	l10320
 16384  0037AE                     l10316:
 16385  0037AE  C02C  F018         	movff	atoi@n,___wmul@multiplier
 16386  0037B2  C02D  F019         	movff	atoi@n+1,___wmul@multiplier+1
 16387  0037B6  0E00               	movlw	0
 16388  0037B8  6E1B               	movwf	(___wmul@multiplicand+1)^0,c
 16389  0037BA  0E0A               	movlw	10
 16390  0037BC  6E1A               	movwf	___wmul@multiplicand^0,c
 16391  0037BE  EC2D  F029         	call	___wmul	;wreg free
 16392  0037C2  C01F  FFF6         	movff	atoi@s,tblptrl
 16393  0037C6  C020  FFF7         	movff	atoi@s+1,tblptrh
 16394  0037CA                     	if	0	;tblptru may be non-zero
 16395  0037CA                     	endif
 16396  0037CA                     	if	0	;tblptru may be non-zero
 16397  0037CA                     	endif
 16398  0037CA  0008               	tblrd		*
 16399  0037CC  50F5               	movf	tablat,w,c
 16400  0037CE  5E18               	subwf	?___wmul^0,f,c
 16401  0037D0  0E00               	movlw	0
 16402  0037D2  5A19               	subwfb	(?___wmul+1)^0,f,c
 16403  0037D4  0E30               	movlw	48
 16404  0037D6  2418               	addwf	?___wmul^0,w,c
 16405  0037D8  6E2C               	movwf	atoi@n^0,c
 16406  0037DA  0E00               	movlw	0
 16407  0037DC  2019               	addwfc	(?___wmul+1)^0,w,c
 16408  0037DE  6E2D               	movwf	(atoi@n+1)^0,c
 16409  0037E0  D7CF               	goto	l10312
 16410  0037E2                     l10320:
 16411  0037E2  0ED0               	movlw	208
 16412  0037E4  6E21               	movwf	??_atoi^0,c
 16413  0037E6  0EFF               	movlw	255
 16414  0037E8  6E22               	movwf	(??_atoi+1)^0,c
 16415  0037EA  C01F  FFF6         	movff	atoi@s,tblptrl
 16416  0037EE  C020  FFF7         	movff	atoi@s+1,tblptrh
 16417  0037F2                     	if	0	;tblptru may be non-zero
 16418  0037F2                     	endif
 16419  0037F2                     	if	0	;tblptru may be non-zero
 16420  0037F2                     	endif
 16421  0037F2  0008               	tblrd		*
 16422  0037F4  50F5               	movf	tablat,w,c
 16423  0037F6  6E23               	movwf	(??_atoi+2)^0,c
 16424  0037F8  6A24               	clrf	(??_atoi+3)^0,c
 16425  0037FA  5021               	movf	??_atoi^0,w,c
 16426  0037FC  2623               	addwf	(??_atoi+2)^0,f,c
 16427  0037FE  5022               	movf	(??_atoi+1)^0,w,c
 16428  003800  2224               	addwfc	(??_atoi+3)^0,f,c
 16429  003802  5024               	movf	(??_atoi+3)^0,w,c
 16430  003804  E106               	bnz	u8930
 16431  003806  0E0A               	movlw	10
 16432  003808  5C23               	subwf	(??_atoi+2)^0,w,c
 16433  00380A  B0D8               	btfsc	status,0,c
 16434  00380C  D002               	goto	u8930
 16435  00380E  0E01               	movlw	1
 16436  003810  D001               	goto	u8940
 16437  003812                     u8930:
 16438  003812  0E00               	movlw	0
 16439  003814                     u8940:
 16440  003814  6E29               	movwf	_atoi$2994^0,c
 16441  003816  6A2A               	clrf	(_atoi$2994+1)^0,c
 16442  003818  5029               	movf	_atoi$2994^0,w,c
 16443  00381A  102A               	iorwf	(_atoi$2994+1)^0,w,c
 16444  00381C  A4D8               	btfss	status,2,c
 16445  00381E  D7C7               	goto	l10316
 16446  003820  5025               	movf	atoi@neg^0,w,c
 16447  003822  1026               	iorwf	(atoi@neg+1)^0,w,c
 16448  003824  A4D8               	btfss	status,2,c
 16449  003826  D00D               	goto	l2617
 16450  003828  C02C  F021         	movff	atoi@n,??_atoi
 16451  00382C  C02D  F022         	movff	atoi@n+1,??_atoi+1
 16452  003830  1E21               	comf	??_atoi^0,f,c
 16453  003832  1E22               	comf	(??_atoi+1)^0,f,c
 16454  003834  4A21               	infsnz	??_atoi^0,f,c
 16455  003836  2A22               	incf	(??_atoi+1)^0,f,c
 16456  003838  C021  F01F         	movff	??_atoi,?_atoi
 16457  00383C  C022  F020         	movff	??_atoi+1,?_atoi+1
 16458  003840  0012               	return	
 16459  003842                     l2617:
 16460  003842  C02C  F01F         	movff	atoi@n,?_atoi
 16461  003846  C02D  F020         	movff	atoi@n+1,?_atoi+1
 16462  00384A  0012               	return		;funcret
 16463  00384C                     __end_of_atoi:
 16464                           	callstack 0
 16465                           
 16466 ;; *************** function _isspace *****************
 16467 ;; Defined at:
 16468 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\isspace.c"
 16469 ;; Parameters:    Size  Location     Type
 16470 ;;  c               2   23[COMRAM] int 
 16471 ;; Auto vars:     Size  Location     Type
 16472 ;;		None
 16473 ;; Return value:  Size  Location     Type
 16474 ;;                  2   23[COMRAM] int 
 16475 ;; Registers used:
 16476 ;;		wreg, status,2, status,0
 16477 ;; Tracked objects:
 16478 ;;		On entry : 0/0
 16479 ;;		On exit  : 0/0
 16480 ;;		Unchanged: 0/0
 16481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16482 ;;      Params:         2       0       0       0       0       0       0       0       0
 16483 ;;      Locals:         1       0       0       0       0       0       0       0       0
 16484 ;;      Temps:          4       0       0       0       0       0       0       0       0
 16485 ;;      Totals:         7       0       0       0       0       0       0       0       0
 16486 ;;Total ram usage:        7 bytes
 16487 ;; Hardware stack levels used:    1
 16488 ;; Hardware stack levels required when called:    7
 16489 ;; This function calls:
 16490 ;;		Nothing
 16491 ;; This function is called by:
 16492 ;;		_atoi
 16493 ;; This function uses a non-reentrant model
 16494 ;;
 16495                           
 16496                           	psect	text63
 16497  004FBA                     __ptext63:
 16498                           	callstack 0
 16499  004FBA                     _isspace:
 16500                           	callstack 17
 16501                           
 16502                           ;incstack = 0
 16503  004FBA  0E01               	movlw	1
 16504  004FBC  6E1E               	movwf	_isspace$3010^0,c
 16505  004FBE  0E20               	movlw	32
 16506  004FC0  1818               	xorwf	isspace@c^0,w,c
 16507  004FC2  1019               	iorwf	(isspace@c+1)^0,w,c
 16508  004FC4  B4D8               	btfsc	status,2,c
 16509  004FC6  D014               	goto	l10174
 16510  004FC8  0EF7               	movlw	247
 16511  004FCA  6E1A               	movwf	??_isspace^0,c
 16512  004FCC  0EFF               	movlw	255
 16513  004FCE  6E1B               	movwf	(??_isspace+1)^0,c
 16514  004FD0  C018  F01C         	movff	isspace@c,??_isspace+2
 16515  004FD4  C019  F01D         	movff	isspace@c+1,??_isspace+3
 16516  004FD8  501A               	movf	??_isspace^0,w,c
 16517  004FDA  261C               	addwf	(??_isspace+2)^0,f,c
 16518  004FDC  501B               	movf	(??_isspace+1)^0,w,c
 16519  004FDE  221D               	addwfc	(??_isspace+3)^0,f,c
 16520  004FE0  501D               	movf	(??_isspace+3)^0,w,c
 16521  004FE2  E104               	bnz	u8670
 16522  004FE4  0E05               	movlw	5
 16523  004FE6  5C1C               	subwf	(??_isspace+2)^0,w,c
 16524  004FE8  A0D8               	btfss	status,0,c
 16525  004FEA  D002               	goto	l10174
 16526  004FEC                     u8670:
 16527  004FEC  0E00               	movlw	0
 16528  004FEE  6E1E               	movwf	_isspace$3010^0,c
 16529  004FF0                     l10174:
 16530  004FF0  C01E  F018         	movff	_isspace$3010,?_isspace
 16531  004FF4  6A19               	clrf	(?_isspace+1)^0,c
 16532  004FF6  0012               	return		;funcret
 16533  004FF8                     __end_of_isspace:
 16534                           	callstack 0
 16535                           
 16536 ;; *************** function _isdigit *****************
 16537 ;; Defined at:
 16538 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\isdigit.c"
 16539 ;; Parameters:    Size  Location     Type
 16540 ;;  c               2   23[COMRAM] int 
 16541 ;; Auto vars:     Size  Location     Type
 16542 ;;		None
 16543 ;; Return value:  Size  Location     Type
 16544 ;;                  2   23[COMRAM] int 
 16545 ;; Registers used:
 16546 ;;		wreg, status,2, status,0
 16547 ;; Tracked objects:
 16548 ;;		On entry : 0/0
 16549 ;;		On exit  : 0/0
 16550 ;;		Unchanged: 0/0
 16551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16552 ;;      Params:         2       0       0       0       0       0       0       0       0
 16553 ;;      Locals:         0       0       0       0       0       0       0       0       0
 16554 ;;      Temps:          4       0       0       0       0       0       0       0       0
 16555 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16556 ;;Total ram usage:        6 bytes
 16557 ;; Hardware stack levels used:    1
 16558 ;; Hardware stack levels required when called:    7
 16559 ;; This function calls:
 16560 ;;		Nothing
 16561 ;; This function is called by:
 16562 ;;		_vfpfcnvrt
 16563 ;;		_atoi
 16564 ;; This function uses a non-reentrant model
 16565 ;;
 16566                           
 16567                           	psect	text64
 16568  005102                     __ptext64:
 16569                           	callstack 0
 16570  005102                     _isdigit:
 16571                           	callstack 18
 16572                           
 16573                           ;incstack = 0
 16574  005102  0ED0               	movlw	208
 16575  005104  6E1A               	movwf	??_isdigit^0,c
 16576  005106  0EFF               	movlw	255
 16577  005108  6E1B               	movwf	(??_isdigit+1)^0,c
 16578  00510A  C018  F01C         	movff	isdigit@c,??_isdigit+2
 16579  00510E  C019  F01D         	movff	isdigit@c+1,??_isdigit+3
 16580  005112  501A               	movf	??_isdigit^0,w,c
 16581  005114  261C               	addwf	(??_isdigit+2)^0,f,c
 16582  005116  501B               	movf	(??_isdigit+1)^0,w,c
 16583  005118  221D               	addwfc	(??_isdigit+3)^0,f,c
 16584  00511A  501D               	movf	(??_isdigit+3)^0,w,c
 16585  00511C  E106               	bnz	u8640
 16586  00511E  0E0A               	movlw	10
 16587  005120  5C1C               	subwf	(??_isdigit+2)^0,w,c
 16588  005122  B0D8               	btfsc	status,0,c
 16589  005124  D002               	goto	u8640
 16590  005126  0E01               	movlw	1
 16591  005128  D001               	goto	u8650
 16592  00512A                     u8640:
 16593  00512A  0E00               	movlw	0
 16594  00512C                     u8650:
 16595  00512C  6E18               	movwf	?_isdigit^0,c
 16596  00512E  6A19               	clrf	(?_isdigit+1)^0,c
 16597  005130  0012               	return		;funcret
 16598  005132                     __end_of_isdigit:
 16599                           	callstack 0
 16600                           
 16601 ;; *************** function ___wmul *****************
 16602 ;; Defined at:
 16603 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\Umul16.c"
 16604 ;; Parameters:    Size  Location     Type
 16605 ;;  multiplier      2   23[COMRAM] unsigned int 
 16606 ;;  multiplicand    2   25[COMRAM] unsigned int 
 16607 ;; Auto vars:     Size  Location     Type
 16608 ;;  product         2   27[COMRAM] unsigned int 
 16609 ;; Return value:  Size  Location     Type
 16610 ;;                  2   23[COMRAM] unsigned int 
 16611 ;; Registers used:
 16612 ;;		wreg, status,2, status,0, prodl, prodh
 16613 ;; Tracked objects:
 16614 ;;		On entry : 0/0
 16615 ;;		On exit  : 0/0
 16616 ;;		Unchanged: 0/0
 16617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16618 ;;      Params:         4       0       0       0       0       0       0       0       0
 16619 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16620 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16621 ;;      Totals:         6       0       0       0       0       0       0       0       0
 16622 ;;Total ram usage:        6 bytes
 16623 ;; Hardware stack levels used:    1
 16624 ;; Hardware stack levels required when called:    7
 16625 ;; This function calls:
 16626 ;;		Nothing
 16627 ;; This function is called by:
 16628 ;;		_atoi
 16629 ;; This function uses a non-reentrant model
 16630 ;;
 16631                           
 16632                           	psect	text65
 16633  00525A                     __ptext65:
 16634                           	callstack 0
 16635  00525A                     ___wmul:
 16636                           	callstack 17
 16637                           
 16638                           ;incstack = 0
 16639  00525A  5018               	movf	___wmul@multiplier^0,w,c
 16640  00525C  021A               	mulwf	___wmul@multiplicand^0,c
 16641  00525E  CFF3 F01C          	movff	prodl,___wmul@product
 16642  005262  CFF4 F01D          	movff	prodh,___wmul@product+1
 16643  005266  5018               	movf	___wmul@multiplier^0,w,c
 16644  005268  021B               	mulwf	(___wmul@multiplicand+1)^0,c
 16645  00526A  50F3               	movf	243,w,c
 16646  00526C  261D               	addwf	(___wmul@product+1)^0,f,c
 16647  00526E  5019               	movf	(___wmul@multiplier+1)^0,w,c
 16648  005270  021A               	mulwf	___wmul@multiplicand^0,c
 16649  005272  50F3               	movf	243,w,c
 16650  005274  261D               	addwf	(___wmul@product+1)^0,f,c
 16651  005276  C01C  F018         	movff	___wmul@product,?___wmul
 16652  00527A  C01D  F019         	movff	___wmul@product+1,?___wmul+1
 16653  00527E  0012               	return		;funcret
 16654  005280                     __end_of___wmul:
 16655                           	callstack 0
 16656                           
 16657 ;; *************** function _RTC_send_hora *****************
 16658 ;; Defined at:
 16659 ;;		line 4 in file "RTC_3231.c"
 16660 ;; Parameters:    Size  Location     Type
 16661 ;;		None
 16662 ;; Auto vars:     Size  Location     Type
 16663 ;;  dec             1   28[COMRAM] unsigned char 
 16664 ;;  uni             1   27[COMRAM] unsigned char 
 16665 ;; Return value:  Size  Location     Type
 16666 ;;                  1    wreg      void 
 16667 ;; Registers used:
 16668 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16669 ;; Tracked objects:
 16670 ;;		On entry : 0/0
 16671 ;;		On exit  : 0/0
 16672 ;;		Unchanged: 0/0
 16673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16674 ;;      Params:         0       0       0       0       0       0       0       0       0
 16675 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16676 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16677 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16678 ;;Total ram usage:        2 bytes
 16679 ;; Hardware stack levels used:    1
 16680 ;; Hardware stack levels required when called:    8
 16681 ;; This function calls:
 16682 ;;		___lbdiv
 16683 ;;		_i2c_start
 16684 ;;		_i2c_stop
 16685 ;;		_i2c_write
 16686 ;; This function is called by:
 16687 ;;		_E_Rtc_Lcd
 16688 ;;		_ACN_PA_Com
 16689 ;; This function uses a non-reentrant model
 16690 ;;
 16691                           
 16692                           	psect	text66
 16693  004770                     __ptext66:
 16694                           	callstack 0
 16695  004770                     _RTC_send_hora:
 16696                           	callstack 20
 16697                           
 16698                           ;incstack = 0
 16699  004770  0E00               	movlw	0
 16700  004772  6E1D               	movwf	RTC_send_hora@dec^0,c
 16701                           
 16702                           ;RTC_3231.c: 9:     i2c_start();
 16703  004774  ECC1  F029         	call	_i2c_start	;wreg free
 16704                           
 16705                           ;RTC_3231.c: 12:     i2c_write(0xD0);
 16706  004778  0ED0               	movlw	208
 16707  00477A  ECA6  F024         	call	_i2c_write
 16708                           
 16709                           ;RTC_3231.c: 13:     i2c_write(0x00);
 16710  00477E  0E00               	movlw	0
 16711  004780  ECA6  F024         	call	_i2c_write
 16712                           
 16713                           ;RTC_3231.c: 16:     dec = (int)(seg / 10);
 16714  004784  0E0A               	movlw	10
 16715  004786  6E18               	movwf	___lbdiv@divisor^0,c
 16716  004788  5042               	movf	_seg^0,w,c
 16717  00478A  ECFC  F027         	call	___lbdiv
 16718  00478E  6E1D               	movwf	RTC_send_hora@dec^0,c
 16719                           
 16720                           ;RTC_3231.c: 17:     uni = seg - (dec*10);
 16721  004790  501D               	movf	RTC_send_hora@dec^0,w,c
 16722  004792  0DF6               	mullw	246
 16723  004794  50F3               	movf	243,w,c
 16724  004796  2442               	addwf	_seg^0,w,c
 16725  004798  6E1C               	movwf	RTC_send_hora@uni^0,c
 16726                           
 16727                           ;RTC_3231.c: 18:     i2c_write((dec<<4)|uni);
 16728  00479A  381D               	swapf	RTC_send_hora@dec^0,w,c
 16729  00479C  0BF0               	andlw	240
 16730  00479E  101C               	iorwf	RTC_send_hora@uni^0,w,c
 16731  0047A0  ECA6  F024         	call	_i2c_write
 16732                           
 16733                           ;RTC_3231.c: 24:     dec = (int)(min / 10);
 16734  0047A4  0E0A               	movlw	10
 16735  0047A6  6E18               	movwf	___lbdiv@divisor^0,c
 16736  0047A8  5043               	movf	_min^0,w,c
 16737  0047AA  ECFC  F027         	call	___lbdiv
 16738  0047AE  6E1D               	movwf	RTC_send_hora@dec^0,c
 16739                           
 16740                           ;RTC_3231.c: 25:     uni = min - (dec*10);
 16741  0047B0  501D               	movf	RTC_send_hora@dec^0,w,c
 16742  0047B2  0DF6               	mullw	246
 16743  0047B4  50F3               	movf	243,w,c
 16744  0047B6  2443               	addwf	_min^0,w,c
 16745  0047B8  6E1C               	movwf	RTC_send_hora@uni^0,c
 16746                           
 16747                           ;RTC_3231.c: 26:     i2c_write((dec<<4)|uni);
 16748  0047BA  381D               	swapf	RTC_send_hora@dec^0,w,c
 16749  0047BC  0BF0               	andlw	240
 16750  0047BE  101C               	iorwf	RTC_send_hora@uni^0,w,c
 16751  0047C0  ECA6  F024         	call	_i2c_write
 16752                           
 16753                           ;RTC_3231.c: 32:     dec = (int)(hora / 10);
 16754  0047C4  0E0A               	movlw	10
 16755  0047C6  6E18               	movwf	___lbdiv@divisor^0,c
 16756  0047C8  5044               	movf	_hora^0,w,c
 16757  0047CA  ECFC  F027         	call	___lbdiv
 16758  0047CE  6E1D               	movwf	RTC_send_hora@dec^0,c
 16759                           
 16760                           ;RTC_3231.c: 33:     uni = hora - (dec*10);
 16761  0047D0  501D               	movf	RTC_send_hora@dec^0,w,c
 16762  0047D2  0DF6               	mullw	246
 16763  0047D4  50F3               	movf	243,w,c
 16764  0047D6  2444               	addwf	_hora^0,w,c
 16765  0047D8  6E1C               	movwf	RTC_send_hora@uni^0,c
 16766                           
 16767                           ;RTC_3231.c: 34:     i2c_write((dec<<4)|uni);
 16768  0047DA  381D               	swapf	RTC_send_hora@dec^0,w,c
 16769  0047DC  0BF0               	andlw	240
 16770  0047DE  101C               	iorwf	RTC_send_hora@uni^0,w,c
 16771  0047E0  ECA6  F024         	call	_i2c_write
 16772                           
 16773                           ;RTC_3231.c: 37:     i2c_stop();
 16774  0047E4  EC40  F029         	call	_i2c_stop	;wreg free
 16775  0047E8  0012               	return		;funcret
 16776  0047EA                     __end_of_RTC_send_hora:
 16777                           	callstack 0
 16778                           
 16779 ;; *************** function _RTC_send_fecha *****************
 16780 ;; Defined at:
 16781 ;;		line 41 in file "RTC_3231.c"
 16782 ;; Parameters:    Size  Location     Type
 16783 ;;		None
 16784 ;; Auto vars:     Size  Location     Type
 16785 ;;  dec             1   28[COMRAM] unsigned char 
 16786 ;;  uni             1   27[COMRAM] unsigned char 
 16787 ;; Return value:  Size  Location     Type
 16788 ;;                  1    wreg      void 
 16789 ;; Registers used:
 16790 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 16791 ;; Tracked objects:
 16792 ;;		On entry : 0/0
 16793 ;;		On exit  : 0/0
 16794 ;;		Unchanged: 0/0
 16795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16796 ;;      Params:         0       0       0       0       0       0       0       0       0
 16797 ;;      Locals:         2       0       0       0       0       0       0       0       0
 16798 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16799 ;;      Totals:         2       0       0       0       0       0       0       0       0
 16800 ;;Total ram usage:        2 bytes
 16801 ;; Hardware stack levels used:    1
 16802 ;; Hardware stack levels required when called:    8
 16803 ;; This function calls:
 16804 ;;		___lbdiv
 16805 ;;		_i2c_start
 16806 ;;		_i2c_stop
 16807 ;;		_i2c_write
 16808 ;; This function is called by:
 16809 ;;		_E_Rtc_Lcd
 16810 ;;		_ACN_PA_Com
 16811 ;; This function uses a non-reentrant model
 16812 ;;
 16813                           
 16814                           	psect	text67
 16815  0047EA                     __ptext67:
 16816                           	callstack 0
 16817  0047EA                     _RTC_send_fecha:
 16818                           	callstack 20
 16819                           
 16820                           ;incstack = 0
 16821  0047EA  0E00               	movlw	0
 16822  0047EC  6E1D               	movwf	RTC_send_fecha@dec^0,c
 16823                           
 16824                           ;RTC_3231.c: 46:     i2c_start();
 16825  0047EE  ECC1  F029         	call	_i2c_start	;wreg free
 16826                           
 16827                           ;RTC_3231.c: 49:     i2c_write(0xD0);
 16828  0047F2  0ED0               	movlw	208
 16829  0047F4  ECA6  F024         	call	_i2c_write
 16830                           
 16831                           ;RTC_3231.c: 50:     i2c_write(0x04);
 16832  0047F8  0E04               	movlw	4
 16833  0047FA  ECA6  F024         	call	_i2c_write
 16834                           
 16835                           ;RTC_3231.c: 53:     dec = (int)(dia / 10);
 16836  0047FE  0E0A               	movlw	10
 16837  004800  6E18               	movwf	___lbdiv@divisor^0,c
 16838  004802  5041               	movf	_dia^0,w,c
 16839  004804  ECFC  F027         	call	___lbdiv
 16840  004808  6E1D               	movwf	RTC_send_fecha@dec^0,c
 16841                           
 16842                           ;RTC_3231.c: 54:     uni = dia - (dec*10);
 16843  00480A  501D               	movf	RTC_send_fecha@dec^0,w,c
 16844  00480C  0DF6               	mullw	246
 16845  00480E  50F3               	movf	243,w,c
 16846  004810  2441               	addwf	_dia^0,w,c
 16847  004812  6E1C               	movwf	RTC_send_fecha@uni^0,c
 16848                           
 16849                           ;RTC_3231.c: 55:     i2c_write((dec<<4)|uni);
 16850  004814  381D               	swapf	RTC_send_fecha@dec^0,w,c
 16851  004816  0BF0               	andlw	240
 16852  004818  101C               	iorwf	RTC_send_fecha@uni^0,w,c
 16853  00481A  ECA6  F024         	call	_i2c_write
 16854                           
 16855                           ;RTC_3231.c: 61:     dec = (int)(mes / 10);
 16856  00481E  0E0A               	movlw	10
 16857  004820  6E18               	movwf	___lbdiv@divisor^0,c
 16858  004822  5040               	movf	_mes^0,w,c
 16859  004824  ECFC  F027         	call	___lbdiv
 16860  004828  6E1D               	movwf	RTC_send_fecha@dec^0,c
 16861                           
 16862                           ;RTC_3231.c: 62:     uni = mes - (dec*10);
 16863  00482A  501D               	movf	RTC_send_fecha@dec^0,w,c
 16864  00482C  0DF6               	mullw	246
 16865  00482E  50F3               	movf	243,w,c
 16866  004830  2440               	addwf	_mes^0,w,c
 16867  004832  6E1C               	movwf	RTC_send_fecha@uni^0,c
 16868                           
 16869                           ;RTC_3231.c: 63:     i2c_write((dec<<4)|uni);
 16870  004834  381D               	swapf	RTC_send_fecha@dec^0,w,c
 16871  004836  0BF0               	andlw	240
 16872  004838  101C               	iorwf	RTC_send_fecha@uni^0,w,c
 16873  00483A  ECA6  F024         	call	_i2c_write
 16874                           
 16875                           ;RTC_3231.c: 69:     dec = (int)(year / 10);
 16876  00483E  0E0A               	movlw	10
 16877  004840  6E18               	movwf	___lbdiv@divisor^0,c
 16878  004842  503F               	movf	_year^0,w,c
 16879  004844  ECFC  F027         	call	___lbdiv
 16880  004848  6E1D               	movwf	RTC_send_fecha@dec^0,c
 16881                           
 16882                           ;RTC_3231.c: 70:     uni = year - (dec*10);
 16883  00484A  501D               	movf	RTC_send_fecha@dec^0,w,c
 16884  00484C  0DF6               	mullw	246
 16885  00484E  50F3               	movf	243,w,c
 16886  004850  243F               	addwf	_year^0,w,c
 16887  004852  6E1C               	movwf	RTC_send_fecha@uni^0,c
 16888                           
 16889                           ;RTC_3231.c: 71:     i2c_write((dec<<4)|uni);
 16890  004854  381D               	swapf	RTC_send_fecha@dec^0,w,c
 16891  004856  0BF0               	andlw	240
 16892  004858  101C               	iorwf	RTC_send_fecha@uni^0,w,c
 16893  00485A  ECA6  F024         	call	_i2c_write
 16894                           
 16895                           ;RTC_3231.c: 74:     i2c_stop();
 16896  00485E  EC40  F029         	call	_i2c_stop	;wreg free
 16897  004862  0012               	return		;funcret
 16898  004864                     __end_of_RTC_send_fecha:
 16899                           	callstack 0
 16900                           
 16901 ;; *************** function ___lbdiv *****************
 16902 ;; Defined at:
 16903 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\lbdiv.c"
 16904 ;; Parameters:    Size  Location     Type
 16905 ;;  dividend        1    wreg     unsigned char 
 16906 ;;  divisor         1   23[COMRAM] unsigned char 
 16907 ;; Auto vars:     Size  Location     Type
 16908 ;;  dividend        1   24[COMRAM] unsigned char 
 16909 ;;  quotient        1   26[COMRAM] unsigned char 
 16910 ;;  counter         1   25[COMRAM] unsigned char 
 16911 ;; Return value:  Size  Location     Type
 16912 ;;                  1    wreg      unsigned char 
 16913 ;; Registers used:
 16914 ;;		wreg, status,2, status,0
 16915 ;; Tracked objects:
 16916 ;;		On entry : 0/0
 16917 ;;		On exit  : 0/0
 16918 ;;		Unchanged: 0/0
 16919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 16920 ;;      Params:         1       0       0       0       0       0       0       0       0
 16921 ;;      Locals:         3       0       0       0       0       0       0       0       0
 16922 ;;      Temps:          0       0       0       0       0       0       0       0       0
 16923 ;;      Totals:         4       0       0       0       0       0       0       0       0
 16924 ;;Total ram usage:        4 bytes
 16925 ;; Hardware stack levels used:    1
 16926 ;; Hardware stack levels required when called:    7
 16927 ;; This function calls:
 16928 ;;		Nothing
 16929 ;; This function is called by:
 16930 ;;		_RTC_send_hora
 16931 ;;		_RTC_send_fecha
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           	psect	text68
 16936  004FF8                     __ptext68:
 16937                           	callstack 0
 16938  004FF8                     ___lbdiv:
 16939                           	callstack 20
 16940                           
 16941                           ;incstack = 0
 16942                           ;___lbdiv@dividend stored from wreg
 16943  004FF8  6E19               	movwf	___lbdiv@dividend^0,c
 16944  004FFA  0E00               	movlw	0
 16945  004FFC  6E1B               	movwf	___lbdiv@quotient^0,c
 16946  004FFE  5018               	movf	___lbdiv@divisor^0,w,c
 16947  005000  B4D8               	btfsc	status,2,c
 16948  005002  D015               	goto	l7724
 16949  005004  0E01               	movlw	1
 16950  005006  6E1A               	movwf	___lbdiv@counter^0,c
 16951  005008  D003               	goto	l7712
 16952  00500A                     l7708:
 16953  00500A  90D8               	bcf	status,0,c
 16954  00500C  3618               	rlcf	___lbdiv@divisor^0,f,c
 16955  00500E  2A1A               	incf	___lbdiv@counter^0,f,c
 16956  005010                     l7712:
 16957  005010  AE18               	btfss	___lbdiv@divisor^0,7,c
 16958  005012  D7FB               	goto	l7708
 16959  005014                     u5690:
 16960  005014  90D8               	bcf	status,0,c
 16961  005016  361B               	rlcf	___lbdiv@quotient^0,f,c
 16962  005018  5018               	movf	___lbdiv@divisor^0,w,c
 16963  00501A  5C19               	subwf	___lbdiv@dividend^0,w,c
 16964  00501C  A0D8               	btfss	status,0,c
 16965  00501E  D003               	goto	l7720
 16966  005020  5018               	movf	___lbdiv@divisor^0,w,c
 16967  005022  5E19               	subwf	___lbdiv@dividend^0,f,c
 16968  005024  801B               	bsf	___lbdiv@quotient^0,0,c
 16969  005026                     l7720:
 16970  005026  90D8               	bcf	status,0,c
 16971  005028  3218               	rrcf	___lbdiv@divisor^0,f,c
 16972  00502A  2E1A               	decfsz	___lbdiv@counter^0,f,c
 16973  00502C  D7F3               	goto	u5690
 16974  00502E                     l7724:
 16975  00502E  501B               	movf	___lbdiv@quotient^0,w,c
 16976  005030  0012               	return		;funcret
 16977  005032                     __end_of___lbdiv:
 16978                           	callstack 0
 16979                           
 16980 ;; *************** function _LCD_array *****************
 16981 ;; Defined at:
 16982 ;;		line 128 in file "LCD20X4_I2C.c"
 16983 ;; Parameters:    Size  Location     Type
 16984 ;;  x               2   27[COMRAM] int 
 16985 ;;  y               2   29[COMRAM] int 
 16986 ;;  date            2   31[COMRAM] PTR const unsigned char 
 16987 ;;		 -> STR_137(21), STR_136(21), STR_135(21), STR_134(21), 
 16988 ;;		 -> STR_133(21), STR_132(21), STR_131(21), STR_114(20), 
 16989 ;;		 -> STR_113(21), STR_112(21), STR_111(20), STR_110(21), 
 16990 ;;		 -> STR_109(21), STR_89(21), STR_88(21), STR_87(21), 
 16991 ;;		 -> STR_86(21), STR_85(21), STR_84(21), STR_83(21), 
 16992 ;;		 -> STR_82(21), STR_81(21), STR_80(15), STR_79(21), 
 16993 ;;		 -> STR_78(21), STR_64(5), STR_63(15), STR_61(6), 
 16994 ;;		 -> STR_60(19), STR_59(19), Rfid_Lcd@buffer(20), STR_57(8), 
 16995 ;;		 -> STR_56(10), STR_55(21), E_Rtc_Lcd@buffer(10), STR_48(6), 
 16996 ;;		 -> STR_47(5), STR_46(5), STR_45(5), STR_44(5), 
 16997 ;;		 -> STR_43(6), STR_42(18), E_Teclado_Lcd@buffer(10), STR_40(8), 
 16998 ;;		 -> STR_39(19), STR_38(21), STR_36(3), STR_35(12), 
 16999 ;;		 -> STR_33(3), E_pant2_Lcd@buffer(5), E_pant2_Lcd@buffer2(10), STR_30(15), 
 17000 ;;		 -> STR_29(9), STR_28(6), STR_26(2), STR_24(2), 
 17001 ;;		 -> STR_21(2), STR_19(2), E_pant1_Lcd@buffer(20), E_pant1_Lcd@llave(5), 
 17002 ;;		 -> STR_17(7), STR_16(6), STR_15(8), STR_8(19), 
 17003 ;;		 -> STR_7(6), STR_6(6), STR_5(6), STR_4(6), 
 17004 ;;		 -> STR_3(14), STR_2(21), STR_1(21), 
 17005 ;; Auto vars:     Size  Location     Type
 17006 ;;		None
 17007 ;; Return value:  Size  Location     Type
 17008 ;;                  1    wreg      void 
 17009 ;; Registers used:
 17010 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
 17011 ;; Tracked objects:
 17012 ;;		On entry : 0/0
 17013 ;;		On exit  : 0/0
 17014 ;;		Unchanged: 0/0
 17015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17016 ;;      Params:         6       0       0       0       0       0       0       0       0
 17017 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17018 ;;      Temps:          2       0       0       0       0       0       0       0       0
 17019 ;;      Totals:         8       0       0       0       0       0       0       0       0
 17020 ;;Total ram usage:        8 bytes
 17021 ;; Hardware stack levels used:    1
 17022 ;; Hardware stack levels required when called:    9
 17023 ;; This function calls:
 17024 ;;		_LCD_command
 17025 ;;		_LCD_date
 17026 ;; This function is called by:
 17027 ;;		_EEPROM_init
 17028 ;;		_E_pant1_Lcd
 17029 ;;		_E_pant2_Lcd
 17030 ;;		_E_Teclado_Lcd
 17031 ;;		_E_Rtc_Lcd
 17032 ;;		_Rfid_Lcd
 17033 ;;		_Erase_Eeprom
 17034 ;;		_Easter_Egg
 17035 ;;		_ACN_PA_Com
 17036 ;;		_main
 17037 ;; This function uses a non-reentrant model
 17038 ;;
 17039                           
 17040                           	psect	text69
 17041  003F62                     __ptext69:
 17042                           	callstack 0
 17043  003F62                     _LCD_array:
 17044                           	callstack 19
 17045                           
 17046                           ;LCD20X4_I2C.c: 128: void LCD_array(int x,int y,const char *date);LCD20X4_I2C.c: 129: {;
      +                          LCD20X4_I2C.c: 131:     switch(x)
 17047                           
 17048                           ;incstack = 0
 17049  003F62  D017               	goto	l10900
 17050  003F64                     l10890:
 17051  003F64  041E               	decf	LCD_array@y^0,w,c
 17052  003F66  0980               	iorlw	128
 17053  003F68  EC78  F023         	call	_LCD_command
 17054                           
 17055                           ;LCD20X4_I2C.c: 134:         break;
 17056  003F6C  D027               	goto	l10902
 17057  003F6E                     l10892:
 17058  003F6E  501E               	movf	LCD_array@y^0,w,c
 17059  003F70  0F3F               	addlw	63
 17060  003F72  0980               	iorlw	128
 17061  003F74  EC78  F023         	call	_LCD_command
 17062                           
 17063                           ;LCD20X4_I2C.c: 136:         break;
 17064  003F78  D021               	goto	l10902
 17065  003F7A                     l10894:
 17066  003F7A  501E               	movf	LCD_array@y^0,w,c
 17067  003F7C  0F13               	addlw	19
 17068  003F7E  0980               	iorlw	128
 17069  003F80  EC78  F023         	call	_LCD_command
 17070                           
 17071                           ;LCD20X4_I2C.c: 138:         break;
 17072  003F84  D01B               	goto	l10902
 17073  003F86                     l10896:
 17074  003F86  501E               	movf	LCD_array@y^0,w,c
 17075  003F88  0F53               	addlw	83
 17076  003F8A  0980               	iorlw	128
 17077  003F8C  EC78  F023         	call	_LCD_command
 17078                           
 17079                           ;LCD20X4_I2C.c: 140:         break;
 17080  003F90  D015               	goto	l10902
 17081  003F92                     l10900:
 17082  003F92  C01C  F022         	movff	LCD_array@x,??_LCD_array
 17083  003F96  C01D  F023         	movff	LCD_array@x+1,??_LCD_array+1
 17084                           
 17085                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17086                           ; Switch size 1, requested type "simple"
 17087                           ; Number of cases is 1, Range of values is 0 to 0
 17088                           ; switch strategies available:
 17089                           ; Name         Instructions Cycles
 17090                           ; simple_byte            4     3 (average)
 17091                           ;	Chosen strategy is simple_byte
 17092  003F9A  5023               	movf	(??_LCD_array+1)^0,w,c
 17093  003F9C  0A00               	xorlw	0	; case 0
 17094  003F9E  A4D8               	btfss	status,2,c
 17095  003FA0  D00D               	goto	l10902
 17096                           
 17097                           ; Switch size 1, requested type "simple"
 17098                           ; Number of cases is 4, Range of values is 1 to 4
 17099                           ; switch strategies available:
 17100                           ; Name         Instructions Cycles
 17101                           ; simple_byte           13     7 (average)
 17102                           ;	Chosen strategy is simple_byte
 17103  003FA2  5022               	movf	??_LCD_array^0,w,c
 17104  003FA4  0A01               	xorlw	1	; case 1
 17105  003FA6  B4D8               	btfsc	status,2,c
 17106  003FA8  D7DD               	goto	l10890
 17107  003FAA  0A03               	xorlw	3	; case 2
 17108  003FAC  B4D8               	btfsc	status,2,c
 17109  003FAE  D7DF               	goto	l10892
 17110  003FB0  0A01               	xorlw	1	; case 3
 17111  003FB2  B4D8               	btfsc	status,2,c
 17112  003FB4  D7E2               	goto	l10894
 17113  003FB6  0A07               	xorlw	7	; case 4
 17114  003FB8  B4D8               	btfsc	status,2,c
 17115  003FBA  D7E5               	goto	l10896
 17116  003FBC                     l10902:
 17117                           
 17118                           ;LCD20X4_I2C.c: 143:     _delay((unsigned long)((1)*(48000000/4000.0)));
 17119  003FBC  0E10               	movlw	16
 17120  003FBE  6E22               	movwf	??_LCD_array^0,c
 17121  003FC0  0E94               	movlw	148
 17122  003FC2                     u11377:
 17123  003FC2  2EE8               	decfsz	wreg,f,c
 17124  003FC4  D7FE               	bra	u11377
 17125  003FC6  2E22               	decfsz	??_LCD_array^0,f,c
 17126  003FC8  D7FC               	bra	u11377
 17127  003FCA  D000               	nop2	
 17128                           
 17129                           ;LCD20X4_I2C.c: 146:     while(*date)
 17130  003FCC  D014               	goto	l10908
 17131  003FCE                     l10904:
 17132                           
 17133                           ;LCD20X4_I2C.c: 147:     {;LCD20X4_I2C.c: 148:         LCD_date(*date);
 17134  003FCE  C020  FFF6         	movff	LCD_array@date,tblptrl
 17135  003FD2  C021  FFF7         	movff	LCD_array@date+1,tblptrh
 17136  003FD6  6AF8               	clrf	tblptru,c
 17137  003FD8  0E07               	movlw	(high __ramtop+-1)
 17138  003FDA  64F7               	cpfsgt	tblptrh,c
 17139  003FDC  D003               	bra	u9517
 17140  003FDE  0008               	tblrd		*
 17141  003FE0  50F5               	movf	tablat,w,c
 17142  003FE2  D005               	bra	u9510
 17143  003FE4                     u9517:
 17144  003FE4  CFF6 FFE1          	movff	tblptrl,fsr1l
 17145  003FE8  CFF7 FFE2          	movff	tblptrh,fsr1h
 17146  003FEC  50E7               	movf	indf1,w,c
 17147  003FEE                     u9510:
 17148  003FEE  EC38  F023         	call	_LCD_date
 17149                           
 17150                           ;LCD20X4_I2C.c: 149:         date++;
 17151  003FF2  4A20               	infsnz	LCD_array@date^0,f,c
 17152  003FF4  2A21               	incf	(LCD_array@date+1)^0,f,c
 17153  003FF6                     l10908:
 17154                           
 17155                           ;LCD20X4_I2C.c: 146:     while(*date)
 17156  003FF6  C020  FFF6         	movff	LCD_array@date,tblptrl
 17157  003FFA  C021  FFF7         	movff	LCD_array@date+1,tblptrh
 17158  003FFE  6AF8               	clrf	tblptru,c
 17159  004000  0E07               	movlw	(high __ramtop+-1)
 17160  004002  64F7               	cpfsgt	tblptrh,c
 17161  004004  D003               	bra	u9527
 17162  004006  0008               	tblrd		*
 17163  004008  50F5               	movf	tablat,w,c
 17164  00400A  D005               	bra	u9520
 17165  00400C                     u9527:
 17166  00400C  CFF6 FFE1          	movff	tblptrl,fsr1l
 17167  004010  CFF7 FFE2          	movff	tblptrh,fsr1h
 17168  004014  50E7               	movf	indf1,w,c
 17169  004016                     u9520:
 17170  004016  0900               	iorlw	0
 17171  004018  B4D8               	btfsc	status,2,c
 17172  00401A  0012               	return	
 17173  00401C  D7D8               	goto	l10904
 17174  00401E                     __end_of_LCD_array:
 17175                           	callstack 0
 17176                           
 17177 ;; *************** function _LCD_date *****************
 17178 ;; Defined at:
 17179 ;;		line 83 in file "LCD20X4_I2C.c"
 17180 ;; Parameters:    Size  Location     Type
 17181 ;;  date            1    wreg     unsigned char 
 17182 ;; Auto vars:     Size  Location     Type
 17183 ;;  date            1   26[COMRAM] unsigned char 
 17184 ;; Return value:  Size  Location     Type
 17185 ;;                  1    wreg      void 
 17186 ;; Registers used:
 17187 ;;		wreg, status,2, status,0, cstack
 17188 ;; Tracked objects:
 17189 ;;		On entry : 0/0
 17190 ;;		On exit  : 0/0
 17191 ;;		Unchanged: 0/0
 17192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17193 ;;      Params:         0       0       0       0       0       0       0       0       0
 17194 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17195 ;;      Temps:          1       0       0       0       0       0       0       0       0
 17196 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17197 ;;Total ram usage:        2 bytes
 17198 ;; Hardware stack levels used:    1
 17199 ;; Hardware stack levels required when called:    8
 17200 ;; This function calls:
 17201 ;;		_i2c_start
 17202 ;;		_i2c_stop
 17203 ;;		_i2c_write
 17204 ;; This function is called by:
 17205 ;;		_LCD_array
 17206 ;; This function uses a non-reentrant model
 17207 ;;
 17208                           
 17209                           	psect	text70
 17210  004670                     __ptext70:
 17211                           	callstack 0
 17212  004670                     _LCD_date:
 17213                           	callstack 19
 17214                           
 17215                           ;incstack = 0
 17216                           ;LCD_date@date stored from wreg
 17217  004670  6E1B               	movwf	LCD_date@date^0,c
 17218                           
 17219                           ;LCD20X4_I2C.c: 83: void LCD_date(char date);LCD20X4_I2C.c: 84: {;LCD20X4_I2C.c: 86:    
      +                           GIEL = 0;
 17220  004672  9CF2               	bcf	4082,6,c	;volatile
 17221                           
 17222                           ;LCD20X4_I2C.c: 90:     i2c_start();
 17223  004674  ECC1  F029         	call	_i2c_start	;wreg free
 17224                           
 17225                           ;LCD20X4_I2C.c: 91:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17226  004678  0EF0               	movlw	240
 17227  00467A                     u11387:
 17228  00467A  D000               	nop2	
 17229  00467C  2EE8               	decfsz	wreg,f,c
 17230  00467E  D7FD               	bra	u11387
 17231                           
 17232                           ;LCD20X4_I2C.c: 93:     i2c_write(0x4E);
 17233  004680  0E4E               	movlw	78
 17234  004682  ECA6  F024         	call	_i2c_write
 17235                           
 17236                           ;LCD20X4_I2C.c: 94:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17237  004686  0EF0               	movlw	240
 17238  004688                     u11397:
 17239  004688  D000               	nop2	
 17240  00468A  2EE8               	decfsz	wreg,f,c
 17241  00468C  D7FD               	bra	u11397
 17242                           
 17243                           ;LCD20X4_I2C.c: 99:     i2c_write((date & 0xf0)| 0x0d);
 17244  00468E  501B               	movf	LCD_date@date^0,w,c
 17245  004690  0BF0               	andlw	240
 17246  004692  090D               	iorlw	13
 17247  004694  ECA6  F024         	call	_i2c_write
 17248                           
 17249                           ;LCD20X4_I2C.c: 100:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17250  004698  0EF0               	movlw	240
 17251  00469A                     u11407:
 17252  00469A  D000               	nop2	
 17253  00469C  2EE8               	decfsz	wreg,f,c
 17254  00469E  D7FD               	bra	u11407
 17255                           
 17256                           ;LCD20X4_I2C.c: 102:     i2c_write((date & 0xf0)| 0x09);
 17257  0046A0  501B               	movf	LCD_date@date^0,w,c
 17258  0046A2  0BF0               	andlw	240
 17259  0046A4  0909               	iorlw	9
 17260  0046A6  ECA6  F024         	call	_i2c_write
 17261                           
 17262                           ;LCD20X4_I2C.c: 103:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17263  0046AA  0EF0               	movlw	240
 17264  0046AC                     u11417:
 17265  0046AC  D000               	nop2	
 17266  0046AE  2EE8               	decfsz	wreg,f,c
 17267  0046B0  D7FD               	bra	u11417
 17268                           
 17269                           ;LCD20X4_I2C.c: 107:     i2c_write((date<<4 & 0xf0)| 0x0d);
 17270  0046B2  381B               	swapf	LCD_date@date^0,w,c
 17271  0046B4  0BF0               	andlw	240
 17272  0046B6  0BF0               	andlw	240
 17273  0046B8  090D               	iorlw	13
 17274  0046BA  ECA6  F024         	call	_i2c_write
 17275                           
 17276                           ;LCD20X4_I2C.c: 108:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17277  0046BE  0EF0               	movlw	240
 17278  0046C0                     u11427:
 17279  0046C0  D000               	nop2	
 17280  0046C2  2EE8               	decfsz	wreg,f,c
 17281  0046C4  D7FD               	bra	u11427
 17282                           
 17283                           ;LCD20X4_I2C.c: 110:     i2c_write((date<<4 & 0xf0)| 0x09);
 17284  0046C6  381B               	swapf	LCD_date@date^0,w,c
 17285  0046C8  0BF0               	andlw	240
 17286  0046CA  0BF0               	andlw	240
 17287  0046CC  0909               	iorlw	9
 17288  0046CE  ECA6  F024         	call	_i2c_write
 17289                           
 17290                           ;LCD20X4_I2C.c: 111:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 17291  0046D2  0EF0               	movlw	240
 17292  0046D4                     u11437:
 17293  0046D4  D000               	nop2	
 17294  0046D6  2EE8               	decfsz	wreg,f,c
 17295  0046D8  D7FD               	bra	u11437
 17296                           
 17297                           ;LCD20X4_I2C.c: 115:     i2c_stop();
 17298  0046DA  EC40  F029         	call	_i2c_stop	;wreg free
 17299                           
 17300                           ;LCD20X4_I2C.c: 116:     _delay((unsigned long)((2)*(48000000/4000.0)));
 17301  0046DE  0E20               	movlw	32
 17302  0046E0  6E1A               	movwf	??_LCD_date^0,c
 17303  0046E2  0E2A               	movlw	42
 17304  0046E4                     u11447:
 17305  0046E4  2EE8               	decfsz	wreg,f,c
 17306  0046E6  D7FE               	bra	u11447
 17307  0046E8  2E1A               	decfsz	??_LCD_date^0,f,c
 17308  0046EA  D7FC               	bra	u11447
 17309                           
 17310                           ;LCD20X4_I2C.c: 120:     GIEL = 1;
 17311  0046EC  8CF2               	bsf	4082,6,c	;volatile
 17312  0046EE  0012               	return		;funcret
 17313  0046F0                     __end_of_LCD_date:
 17314                           	callstack 0
 17315                           
 17316 ;; *************** function _TEC4x4_init *****************
 17317 ;; Defined at:
 17318 ;;		line 3 in file "TECLADO_4X4.c"
 17319 ;; Parameters:    Size  Location     Type
 17320 ;;		None
 17321 ;; Auto vars:     Size  Location     Type
 17322 ;;		None
 17323 ;; Return value:  Size  Location     Type
 17324 ;;                  1    wreg      void 
 17325 ;; Registers used:
 17326 ;;		None
 17327 ;; Tracked objects:
 17328 ;;		On entry : 0/0
 17329 ;;		On exit  : 0/0
 17330 ;;		Unchanged: 0/0
 17331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17332 ;;      Params:         0       0       0       0       0       0       0       0       0
 17333 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17334 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17335 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17336 ;;Total ram usage:        0 bytes
 17337 ;; Hardware stack levels used:    1
 17338 ;; Hardware stack levels required when called:    7
 17339 ;; This function calls:
 17340 ;;		Nothing
 17341 ;; This function is called by:
 17342 ;;		_main
 17343 ;; This function uses a non-reentrant model
 17344 ;;
 17345                           
 17346                           	psect	text71
 17347  0051E6                     __ptext71:
 17348                           	callstack 0
 17349  0051E6                     _TEC4x4_init:
 17350                           	callstack 23
 17351                           
 17352                           ;TECLADO_4X4.c: 5:     LATAbits.LA0 = 1;
 17353                           
 17354                           ;incstack = 0
 17355  0051E6  8089               	bsf	137,0,c	;volatile
 17356                           
 17357                           ;TECLADO_4X4.c: 6:     LATAbits.LA1 = 1;
 17358  0051E8  8289               	bsf	137,1,c	;volatile
 17359                           
 17360                           ;TECLADO_4X4.c: 7:     LATAbits.LA2 = 1;
 17361  0051EA  8489               	bsf	137,2,c	;volatile
 17362                           
 17363                           ;TECLADO_4X4.c: 8:     LATAbits.LA3 = 1;
 17364  0051EC  8689               	bsf	137,3,c	;volatile
 17365                           
 17366                           ;TECLADO_4X4.c: 9:     TRISBbits.TRISB4 = 1, TRISAbits.TRISA0 = 0;
 17367  0051EE  8893               	bsf	147,4,c	;volatile
 17368  0051F0  9092               	bcf	146,0,c	;volatile
 17369                           
 17370                           ;TECLADO_4X4.c: 10:     TRISBbits.TRISB5 = 1, TRISAbits.TRISA1 = 0;
 17371  0051F2  8A93               	bsf	147,5,c	;volatile
 17372  0051F4  9292               	bcf	146,1,c	;volatile
 17373                           
 17374                           ;TECLADO_4X4.c: 11:     TRISBbits.TRISB6 = 1, TRISAbits.TRISA2 = 0;
 17375  0051F6  8C93               	bsf	147,6,c	;volatile
 17376  0051F8  9492               	bcf	146,2,c	;volatile
 17377                           
 17378                           ;TECLADO_4X4.c: 12:     TRISBbits.TRISB7 = 1, TRISAbits.TRISA3 = 0;
 17379  0051FA  8E93               	bsf	147,7,c	;volatile
 17380  0051FC  9692               	bcf	146,3,c	;volatile
 17381                           
 17382                           ;TECLADO_4X4.c: 13:     INTCON2bits.RBPU = 0;
 17383  0051FE  9EF1               	bcf	241,7,c	;volatile
 17384                           
 17385                           ;TECLADO_4X4.c: 15:     INTCONbits.GIEH = 0;
 17386  005200  9EF2               	bcf	242,7,c	;volatile
 17387                           
 17388                           ;TECLADO_4X4.c: 16:     INTCONbits.RBIF = 0;
 17389  005202  90F2               	bcf	242,0,c	;volatile
 17390                           
 17391                           ;TECLADO_4X4.c: 17:     INTCONbits.RBIE = 1;
 17392  005204  86F2               	bsf	242,3,c	;volatile
 17393                           
 17394                           ;TECLADO_4X4.c: 18:     INTCON2bits.RBIP = 1;
 17395  005206  80F1               	bsf	241,0,c	;volatile
 17396                           
 17397                           ;TECLADO_4X4.c: 19:     INTCONbits.PEIE = 1;
 17398  005208  8CF2               	bsf	242,6,c	;volatile
 17399                           
 17400                           ;TECLADO_4X4.c: 20:     INTCONbits.GIEH = 1;
 17401  00520A  8EF2               	bsf	242,7,c	;volatile
 17402                           
 17403                           ;TECLADO_4X4.c: 22:     return;
 17404  00520C  0012               	return		;funcret
 17405  00520E                     __end_of_TEC4x4_init:
 17406                           	callstack 0
 17407                           
 17408 ;; *************** function _Soft_SPI_Init *****************
 17409 ;; Defined at:
 17410 ;;		line 3 in file "SPI_SOFT.c"
 17411 ;; Parameters:    Size  Location     Type
 17412 ;;		None
 17413 ;; Auto vars:     Size  Location     Type
 17414 ;;		None
 17415 ;; Return value:  Size  Location     Type
 17416 ;;                  1    wreg      void 
 17417 ;; Registers used:
 17418 ;;		None
 17419 ;; Tracked objects:
 17420 ;;		On entry : 0/0
 17421 ;;		On exit  : 0/0
 17422 ;;		Unchanged: 0/0
 17423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17424 ;;      Params:         0       0       0       0       0       0       0       0       0
 17425 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17426 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17427 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17428 ;;Total ram usage:        0 bytes
 17429 ;; Hardware stack levels used:    1
 17430 ;; Hardware stack levels required when called:    7
 17431 ;; This function calls:
 17432 ;;		Nothing
 17433 ;; This function is called by:
 17434 ;;		_main
 17435 ;; This function uses a non-reentrant model
 17436 ;;
 17437                           
 17438                           	psect	text72
 17439  005436                     __ptext72:
 17440                           	callstack 0
 17441  005436                     _Soft_SPI_Init:
 17442                           	callstack 23
 17443                           
 17444                           ;SPI_SOFT.c: 6:     TRISA4=0;
 17445                           
 17446                           ;incstack = 0
 17447  005436  9892               	bcf	3986,4,c	;volatile
 17448                           
 17449                           ;SPI_SOFT.c: 7:     TRISB2=0;
 17450  005438  9493               	bcf	3987,2,c	;volatile
 17451                           
 17452                           ;SPI_SOFT.c: 8:     TRISA5=0;
 17453  00543A  9A92               	bcf	3986,5,c	;volatile
 17454                           
 17455                           ;SPI_SOFT.c: 9:     TRISA5=1;
 17456  00543C  8A92               	bsf	3986,5,c	;volatile
 17457                           
 17458                           ;SPI_SOFT.c: 11:     LATB2=0;
 17459  00543E  948A               	bcf	3978,2,c	;volatile
 17460                           
 17461                           ;SPI_SOFT.c: 12:     LATB0=0;
 17462  005440  908A               	bcf	3978,0,c	;volatile
 17463                           
 17464                           ;SPI_SOFT.c: 13:     LATA4=0;
 17465  005442  9889               	bcf	3977,4,c	;volatile
 17466                           
 17467                           ;SPI_SOFT.c: 14:     LATB0 = 0;
 17468  005444  908A               	bcf	3978,0,c	;volatile
 17469                           
 17470                           ;SPI_SOFT.c: 16:     return;
 17471  005446  0012               	return		;funcret
 17472  005448                     __end_of_Soft_SPI_Init:
 17473                           	callstack 0
 17474                           
 17475 ;; *************** function _OS_init *****************
 17476 ;; Defined at:
 17477 ;;		line 5 in file "OS_Control.c"
 17478 ;; Parameters:    Size  Location     Type
 17479 ;;		None
 17480 ;; Auto vars:     Size  Location     Type
 17481 ;;		None
 17482 ;; Return value:  Size  Location     Type
 17483 ;;                  1    wreg      void 
 17484 ;; Registers used:
 17485 ;;		wreg, status,2
 17486 ;; Tracked objects:
 17487 ;;		On entry : 3F/0
 17488 ;;		On exit  : 3F/0
 17489 ;;		Unchanged: 3F/0
 17490 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17491 ;;      Params:         0       0       0       0       0       0       0       0       0
 17492 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17493 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17494 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17495 ;;Total ram usage:        0 bytes
 17496 ;; Hardware stack levels used:    1
 17497 ;; Hardware stack levels required when called:    7
 17498 ;; This function calls:
 17499 ;;		Nothing
 17500 ;; This function is called by:
 17501 ;;		_main
 17502 ;; This function uses a non-reentrant model
 17503 ;;
 17504                           
 17505                           	psect	text73
 17506  005360                     __ptext73:
 17507                           	callstack 0
 17508  005360                     _OS_init:
 17509                           	callstack 23
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;OS_Control.c: 8:     T0CONbits.TMR0ON = 1;
 17513                           
 17514                           ;incstack = 0
 17515  005360  8ED5               	bsf	213,7,c	;volatile
 17516                           
 17517                           ;OS_Control.c: 9:     T0CONbits.T08BIT = 0;
 17518  005362  9CD5               	bcf	213,6,c	;volatile
 17519                           
 17520                           ;OS_Control.c: 10:     T0CONbits.T0CS = 0;
 17521  005364  9AD5               	bcf	213,5,c	;volatile
 17522                           
 17523                           ;OS_Control.c: 11:     T0CONbits.T0SE = 0;
 17524  005366  98D5               	bcf	213,4,c	;volatile
 17525                           
 17526                           ;OS_Control.c: 12:     T0CONbits.PSA = 0;
 17527  005368  96D5               	bcf	213,3,c	;volatile
 17528                           
 17529                           ; BSR set to: 0
 17530                           ;OS_Control.c: 13:     T0CONbits.T0PS = 0b111;
 17531  00536A  0E07               	movlw	7
 17532  00536C  12D5               	iorwf	213,f,c	;volatile
 17533                           
 17534                           ;OS_Control.c: 14:     TMR0 = 65066;
 17535  00536E  0EFE               	movlw	254
 17536  005370  6ED7               	movwf	215,c	;volatile
 17537  005372  0E2A               	movlw	42
 17538  005374  6ED6               	movwf	214,c	;volatile
 17539                           
 17540                           ; BSR set to: 0
 17541                           ;OS_Control.c: 18:     RCONbits.IPEN = 1;
 17542  005376  8ED0               	bsf	208,7,c	;volatile
 17543                           
 17544                           ; BSR set to: 0
 17545                           ;OS_Control.c: 19:     INTCONbits.T0IE = 0;
 17546  005378  9AF2               	bcf	242,5,c	;volatile
 17547                           
 17548                           ; BSR set to: 0
 17549                           ;OS_Control.c: 20:     INTCONbits.T0IF = 1;
 17550  00537A  84F2               	bsf	242,2,c	;volatile
 17551                           
 17552                           ; BSR set to: 0
 17553                           ;OS_Control.c: 21:     INTCON2bits.TMR0IP = 0;
 17554  00537C  94F1               	bcf	241,2,c	;volatile
 17555                           
 17556                           ; BSR set to: 0
 17557                           ;OS_Control.c: 22:     INTCONbits.GIEL = 1;
 17558  00537E  8CF2               	bsf	242,6,c	;volatile
 17559                           
 17560                           ; BSR set to: 0
 17561  005380  0012               	return		;funcret
 17562  005382                     __end_of_OS_init:
 17563                           	callstack 0
 17564                           
 17565 ;; *************** function _MFRC522_Init *****************
 17566 ;; Defined at:
 17567 ;;		line 40 in file "RC522.c"
 17568 ;; Parameters:    Size  Location     Type
 17569 ;;		None
 17570 ;; Auto vars:     Size  Location     Type
 17571 ;;		None
 17572 ;; Return value:  Size  Location     Type
 17573 ;;                  1    wreg      void 
 17574 ;; Registers used:
 17575 ;;		wreg, status,2, status,0, cstack
 17576 ;; Tracked objects:
 17577 ;;		On entry : 0/0
 17578 ;;		On exit  : 0/0
 17579 ;;		Unchanged: 0/0
 17580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17581 ;;      Params:         0       0       0       0       0       0       0       0       0
 17582 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17583 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17584 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17585 ;;Total ram usage:        0 bytes
 17586 ;; Hardware stack levels used:    1
 17587 ;; Hardware stack levels required when called:   11
 17588 ;; This function calls:
 17589 ;;		_MFRC522_AntennaOn
 17590 ;;		_MFRC522_Reset
 17591 ;;		_MFRC522_Wr
 17592 ;; This function is called by:
 17593 ;;		_main
 17594 ;; This function uses a non-reentrant model
 17595 ;;
 17596                           
 17597                           	psect	text74
 17598  004E10                     __ptext74:
 17599                           	callstack 0
 17600  004E10                     _MFRC522_Init:
 17601                           	callstack 19
 17602                           
 17603                           ;RC522.c: 42:     TRISB0 = 0;
 17604                           
 17605                           ; BSR set to: 0
 17606                           ;incstack = 0
 17607  004E10  9093               	bcf	3987,0,c	;volatile
 17608                           
 17609                           ;RC522.c: 43:     TRISB3 = 0;
 17610  004E12  9693               	bcf	3987,3,c	;volatile
 17611                           
 17612                           ;RC522.c: 44:     LATB0 = 1;
 17613  004E14  808A               	bsf	3978,0,c	;volatile
 17614                           
 17615                           ;RC522.c: 45:     LATB3 = 1;
 17616  004E16  868A               	bsf	3978,3,c	;volatile
 17617                           
 17618                           ;RC522.c: 47:     MFRC522_Reset();
 17619  004E18  EC2A  F02A         	call	_MFRC522_Reset	;wreg free
 17620                           
 17621                           ;RC522.c: 49:     MFRC522_Wr( 0x2A, 0x8D );
 17622  004E1C  0E8D               	movlw	141
 17623  004E1E  6E1E               	movwf	MFRC522_Wr@value^0,c
 17624  004E20  0E2A               	movlw	42
 17625  004E22  ECFC  F029         	call	_MFRC522_Wr
 17626                           
 17627                           ;RC522.c: 50:     MFRC522_Wr( 0x2B, 0x3E );
 17628  004E26  0E3E               	movlw	62
 17629  004E28  6E1E               	movwf	MFRC522_Wr@value^0,c
 17630  004E2A  0E2B               	movlw	43
 17631  004E2C  ECFC  F029         	call	_MFRC522_Wr
 17632                           
 17633                           ;RC522.c: 51:     MFRC522_Wr( 0x2D, 30 );
 17634  004E30  0E1E               	movlw	30
 17635  004E32  6E1E               	movwf	MFRC522_Wr@value^0,c
 17636  004E34  0E2D               	movlw	45
 17637  004E36  ECFC  F029         	call	_MFRC522_Wr
 17638                           
 17639                           ;RC522.c: 52:     MFRC522_Wr( 0x2C, 0 );
 17640  004E3A  0E00               	movlw	0
 17641  004E3C  6E1E               	movwf	MFRC522_Wr@value^0,c
 17642  004E3E  0E2C               	movlw	44
 17643  004E40  ECFC  F029         	call	_MFRC522_Wr
 17644                           
 17645                           ;RC522.c: 54:     MFRC522_Wr( 0x15, 0x40 );
 17646  004E44  0E40               	movlw	64
 17647  004E46  6E1E               	movwf	MFRC522_Wr@value^0,c
 17648  004E48  0E15               	movlw	21
 17649  004E4A  ECFC  F029         	call	_MFRC522_Wr
 17650                           
 17651                           ;RC522.c: 55:     MFRC522_Wr( 0x11, 0x3D );
 17652  004E4E  0E3D               	movlw	61
 17653  004E50  6E1E               	movwf	MFRC522_Wr@value^0,c
 17654  004E52  0E11               	movlw	17
 17655  004E54  ECFC  F029         	call	_MFRC522_Wr
 17656                           
 17657                           ;RC522.c: 60:     MFRC522_AntennaOn();
 17658  004E58  EC30  F02A         	call	_MFRC522_AntennaOn	;wreg free
 17659  004E5C  0012               	return		;funcret
 17660  004E5E                     __end_of_MFRC522_Init:
 17661                           	callstack 0
 17662                           
 17663 ;; *************** function _MFRC522_Reset *****************
 17664 ;; Defined at:
 17665 ;;		line 28 in file "RC522.c"
 17666 ;; Parameters:    Size  Location     Type
 17667 ;;		None
 17668 ;; Auto vars:     Size  Location     Type
 17669 ;;		None
 17670 ;; Return value:  Size  Location     Type
 17671 ;;                  1    wreg      void 
 17672 ;; Registers used:
 17673 ;;		wreg, status,2, status,0, cstack
 17674 ;; Tracked objects:
 17675 ;;		On entry : 0/0
 17676 ;;		On exit  : 0/0
 17677 ;;		Unchanged: 0/0
 17678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17679 ;;      Params:         0       0       0       0       0       0       0       0       0
 17680 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17681 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17682 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17683 ;;Total ram usage:        0 bytes
 17684 ;; Hardware stack levels used:    1
 17685 ;; Hardware stack levels required when called:    9
 17686 ;; This function calls:
 17687 ;;		_MFRC522_Wr
 17688 ;; This function is called by:
 17689 ;;		_MFRC522_Init
 17690 ;; This function uses a non-reentrant model
 17691 ;;
 17692                           
 17693                           	psect	text75
 17694  005454                     __ptext75:
 17695                           	callstack 0
 17696  005454                     _MFRC522_Reset:
 17697                           	callstack 20
 17698                           
 17699                           ;RC522.c: 30:     MFRC522_Wr( 0x01, 0x0F );
 17700                           
 17701                           ;incstack = 0
 17702  005454  0E0F               	movlw	15
 17703  005456  6E1E               	movwf	MFRC522_Wr@value^0,c
 17704  005458  0E01               	movlw	1
 17705  00545A  ECFC  F029         	call	_MFRC522_Wr
 17706  00545E  0012               	return		;funcret
 17707  005460                     __end_of_MFRC522_Reset:
 17708                           	callstack 0
 17709                           
 17710 ;; *************** function _MFRC522_AntennaOn *****************
 17711 ;; Defined at:
 17712 ;;		line 32 in file "RC522.c"
 17713 ;; Parameters:    Size  Location     Type
 17714 ;;		None
 17715 ;; Auto vars:     Size  Location     Type
 17716 ;;		None
 17717 ;; Return value:  Size  Location     Type
 17718 ;;                  1    wreg      void 
 17719 ;; Registers used:
 17720 ;;		wreg, status,2, status,0, cstack
 17721 ;; Tracked objects:
 17722 ;;		On entry : 0/0
 17723 ;;		On exit  : 0/0
 17724 ;;		Unchanged: 0/0
 17725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17726 ;;      Params:         0       0       0       0       0       0       0       0       0
 17727 ;;      Locals:         0       0       0       0       0       0       0       0       0
 17728 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17729 ;;      Totals:         0       0       0       0       0       0       0       0       0
 17730 ;;Total ram usage:        0 bytes
 17731 ;; Hardware stack levels used:    1
 17732 ;; Hardware stack levels required when called:   10
 17733 ;; This function calls:
 17734 ;;		_MFRC522_Set_Bit
 17735 ;; This function is called by:
 17736 ;;		_MFRC522_Init
 17737 ;; This function uses a non-reentrant model
 17738 ;;
 17739                           
 17740                           	psect	text76
 17741  005460                     __ptext76:
 17742                           	callstack 0
 17743  005460                     _MFRC522_AntennaOn:
 17744                           	callstack 19
 17745                           
 17746                           ;RC522.c: 34:     MFRC522_Set_Bit( 0x14, 0x03 );
 17747                           
 17748                           ;incstack = 0
 17749  005460  0E03               	movlw	3
 17750  005462  6E20               	movwf	MFRC522_Set_Bit@mask^0,c
 17751  005464  0E14               	movlw	20
 17752  005466  EC08  F02A         	call	_MFRC522_Set_Bit
 17753  00546A  0012               	return		;funcret
 17754  00546C                     __end_of_MFRC522_AntennaOn:
 17755                           	callstack 0
 17756                           
 17757 ;; *************** function _MFRC522_Set_Bit *****************
 17758 ;; Defined at:
 17759 ;;		line 24 in file "RC522.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;  addr            1    wreg     unsigned char 
 17762 ;;  mask            1   31[COMRAM] unsigned char 
 17763 ;; Auto vars:     Size  Location     Type
 17764 ;;  addr            1   32[COMRAM] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;                  1    wreg      void 
 17767 ;; Registers used:
 17768 ;;		wreg, status,2, status,0, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17774 ;;      Params:         1       0       0       0       0       0       0       0       0
 17775 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17776 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17777 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17778 ;;Total ram usage:        2 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    9
 17781 ;; This function calls:
 17782 ;;		_MFRC522_Rd
 17783 ;;		_MFRC522_Wr
 17784 ;; This function is called by:
 17785 ;;		_MFRC522_AntennaOn
 17786 ;;		_MFRC522_ToCard
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           	psect	text77
 17791  005410                     __ptext77:
 17792                           	callstack 0
 17793  005410                     _MFRC522_Set_Bit:
 17794                           	callstack 16
 17795                           
 17796                           ;incstack = 0
 17797                           ;MFRC522_Set_Bit@addr stored from wreg
 17798  005410  6E21               	movwf	MFRC522_Set_Bit@addr^0,c
 17799                           
 17800                           ;RC522.c: 24: static void MFRC522_Set_Bit( char addr, char mask );RC522.c: 25: {;RC522.c
      +                          : 26:     MFRC522_Wr( addr, MFRC522_Rd( addr ) | mask );
 17801  005412  5021               	movf	MFRC522_Set_Bit@addr^0,w,c
 17802  005414  EC9E  F029         	call	_MFRC522_Rd
 17803  005418  1020               	iorwf	MFRC522_Set_Bit@mask^0,w,c
 17804  00541A  6E1E               	movwf	MFRC522_Wr@value^0,c
 17805  00541C  5021               	movf	MFRC522_Set_Bit@addr^0,w,c
 17806  00541E  ECFC  F029         	call	_MFRC522_Wr
 17807  005422  0012               	return		;funcret
 17808  005424                     __end_of_MFRC522_Set_Bit:
 17809                           	callstack 0
 17810                           
 17811 ;; *************** function _MFRC522_Wr *****************
 17812 ;; Defined at:
 17813 ;;		line 3 in file "RC522.c"
 17814 ;; Parameters:    Size  Location     Type
 17815 ;;  addr            1    wreg     unsigned char 
 17816 ;;  value           1   29[COMRAM] unsigned char 
 17817 ;; Auto vars:     Size  Location     Type
 17818 ;;  addr            1   30[COMRAM] unsigned char 
 17819 ;; Return value:  Size  Location     Type
 17820 ;;                  1    wreg      void 
 17821 ;; Registers used:
 17822 ;;		wreg, status,2, status,0, cstack
 17823 ;; Tracked objects:
 17824 ;;		On entry : 0/0
 17825 ;;		On exit  : 0/0
 17826 ;;		Unchanged: 0/0
 17827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17828 ;;      Params:         1       0       0       0       0       0       0       0       0
 17829 ;;      Locals:         1       0       0       0       0       0       0       0       0
 17830 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17831 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17832 ;;Total ram usage:        2 bytes
 17833 ;; Hardware stack levels used:    1
 17834 ;; Hardware stack levels required when called:    8
 17835 ;; This function calls:
 17836 ;;		_Soft_SPI_Write
 17837 ;; This function is called by:
 17838 ;;		_MFRC522_Clear_Bit
 17839 ;;		_MFRC522_Set_Bit
 17840 ;;		_MFRC522_Reset
 17841 ;;		_MFRC522_Init
 17842 ;;		_MFRC522_ToCard
 17843 ;;		_MFRC522_Request
 17844 ;;		_MFRC522_AntiColl
 17845 ;; This function uses a non-reentrant model
 17846 ;;
 17847                           
 17848                           	psect	text78
 17849  0053F8                     __ptext78:
 17850                           	callstack 0
 17851  0053F8                     _MFRC522_Wr:
 17852                           	callstack 18
 17853                           
 17854                           ;incstack = 0
 17855                           ;MFRC522_Wr@addr stored from wreg
 17856  0053F8  6E1F               	movwf	MFRC522_Wr@addr^0,c
 17857                           
 17858                           ;RC522.c: 3: static void MFRC522_Wr( char addr, char value );RC522.c: 4: {;RC522.c: 5:  
      +                             LATB0 = 0;
 17859  0053FA  908A               	bcf	3978,0,c	;volatile
 17860                           
 17861                           ;RC522.c: 6:     Soft_SPI_Write((addr<<1) & 0x7E);
 17862  0053FC  501F               	movf	MFRC522_Wr@addr^0,w,c
 17863  0053FE  241F               	addwf	MFRC522_Wr@addr^0,w,c
 17864  005400  0B7E               	andlw	126
 17865  005402  EC68  F028         	call	_Soft_SPI_Write
 17866                           
 17867                           ;RC522.c: 7:     Soft_SPI_Write( value );
 17868  005406  501E               	movf	MFRC522_Wr@value^0,w,c
 17869  005408  EC68  F028         	call	_Soft_SPI_Write
 17870                           
 17871                           ;RC522.c: 8:     LATB0 = 1;
 17872  00540C  808A               	bsf	3978,0,c	;volatile
 17873  00540E  0012               	return		;funcret
 17874  005410                     __end_of_MFRC522_Wr:
 17875                           	callstack 0
 17876                           
 17877 ;; *************** function _MFRC522_Rd *****************
 17878 ;; Defined at:
 17879 ;;		line 10 in file "RC522.c"
 17880 ;; Parameters:    Size  Location     Type
 17881 ;;  addr            1    wreg     unsigned char 
 17882 ;; Auto vars:     Size  Location     Type
 17883 ;;  addr            1   27[COMRAM] unsigned char 
 17884 ;;  value           1   28[COMRAM] unsigned char 
 17885 ;; Return value:  Size  Location     Type
 17886 ;;                  1    wreg      unsigned char 
 17887 ;; Registers used:
 17888 ;;		wreg, status,2, status,0, cstack
 17889 ;; Tracked objects:
 17890 ;;		On entry : 0/0
 17891 ;;		On exit  : 0/0
 17892 ;;		Unchanged: 0/0
 17893 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17894 ;;      Params:         0       0       0       0       0       0       0       0       0
 17895 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17896 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17897 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17898 ;;Total ram usage:        2 bytes
 17899 ;; Hardware stack levels used:    1
 17900 ;; Hardware stack levels required when called:    8
 17901 ;; This function calls:
 17902 ;;		_Soft_SPI_Read
 17903 ;;		_Soft_SPI_Write
 17904 ;; This function is called by:
 17905 ;;		_MFRC522_Clear_Bit
 17906 ;;		_MFRC522_Set_Bit
 17907 ;;		_MFRC522_ToCard
 17908 ;; This function uses a non-reentrant model
 17909 ;;
 17910                           
 17911                           	psect	text79
 17912  00533C                     __ptext79:
 17913                           	callstack 0
 17914  00533C                     _MFRC522_Rd:
 17915                           	callstack 16
 17916                           
 17917                           ;incstack = 0
 17918                           ;MFRC522_Rd@addr stored from wreg
 17919  00533C  6E1C               	movwf	MFRC522_Rd@addr^0,c
 17920                           
 17921                           ;RC522.c: 10: static char MFRC522_Rd( char addr );RC522.c: 11: {;RC522.c: 12:     char v
      +                          alue;;RC522.c: 14:     LATB0 = 0;
 17922  00533E  908A               	bcf	3978,0,c	;volatile
 17923                           
 17924                           ;RC522.c: 15:     Soft_SPI_Write( (( addr << 1 ) & 0x7E) | 0x80 );
 17925  005340  501C               	movf	MFRC522_Rd@addr^0,w,c
 17926  005342  241C               	addwf	MFRC522_Rd@addr^0,w,c
 17927  005344  0B7E               	andlw	126
 17928  005346  0980               	iorlw	128
 17929  005348  EC68  F028         	call	_Soft_SPI_Write
 17930                           
 17931                           ;RC522.c: 16:     value = Soft_SPI_Read( 0x00 );
 17932  00534C  0E00               	movlw	0
 17933  00534E  6E19               	movwf	(?_Soft_SPI_Read+1)^0,c
 17934  005350  0E00               	movlw	0
 17935  005352  6E18               	movwf	?_Soft_SPI_Read^0,c
 17936  005354  EC99  F028         	call	_Soft_SPI_Read	;wreg free
 17937  005358  6E1D               	movwf	MFRC522_Rd@value^0,c
 17938                           
 17939                           ;RC522.c: 17:     LATB0 = 1;
 17940  00535A  808A               	bsf	3978,0,c	;volatile
 17941                           
 17942                           ;RC522.c: 18:     return value;
 17943  00535C  501D               	movf	MFRC522_Rd@value^0,w,c
 17944  00535E  0012               	return		;funcret
 17945  005360                     __end_of_MFRC522_Rd:
 17946                           	callstack 0
 17947                           
 17948 ;; *************** function _Soft_SPI_Write *****************
 17949 ;; Defined at:
 17950 ;;		line 41 in file "SPI_SOFT.c"
 17951 ;; Parameters:    Size  Location     Type
 17952 ;;  dato_           1    wreg     unsigned char 
 17953 ;; Auto vars:     Size  Location     Type
 17954 ;;  dato_           1   23[COMRAM] unsigned char 
 17955 ;;  cont_s          1   24[COMRAM] unsigned char 
 17956 ;; Return value:  Size  Location     Type
 17957 ;;                  1    wreg      void 
 17958 ;; Registers used:
 17959 ;;		wreg, status,2, status,0
 17960 ;; Tracked objects:
 17961 ;;		On entry : 0/0
 17962 ;;		On exit  : 0/0
 17963 ;;		Unchanged: 0/0
 17964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 17965 ;;      Params:         0       0       0       0       0       0       0       0       0
 17966 ;;      Locals:         2       0       0       0       0       0       0       0       0
 17967 ;;      Temps:          0       0       0       0       0       0       0       0       0
 17968 ;;      Totals:         2       0       0       0       0       0       0       0       0
 17969 ;;Total ram usage:        2 bytes
 17970 ;; Hardware stack levels used:    1
 17971 ;; Hardware stack levels required when called:    7
 17972 ;; This function calls:
 17973 ;;		Nothing
 17974 ;; This function is called by:
 17975 ;;		_MFRC522_Wr
 17976 ;;		_MFRC522_Rd
 17977 ;; This function uses a non-reentrant model
 17978 ;;
 17979                           
 17980                           	psect	text80
 17981  0050D0                     __ptext80:
 17982                           	callstack 0
 17983  0050D0                     _Soft_SPI_Write:
 17984                           	callstack 18
 17985                           
 17986                           ;incstack = 0
 17987                           ;Soft_SPI_Write@dato_ stored from wreg
 17988  0050D0  6E18               	movwf	Soft_SPI_Write@dato_^0,c
 17989                           
 17990                           ;SPI_SOFT.c: 41: void Soft_SPI_Write(char dato_);SPI_SOFT.c: 42: {;SPI_SOFT.c: 43:   uns
      +                          igned char cont_s= 0;
 17991  0050D2  0E00               	movlw	0
 17992  0050D4  6E19               	movwf	Soft_SPI_Write@cont_s^0,c
 17993                           
 17994                           ;SPI_SOFT.c: 45:   for(cont_s = 0;cont_s < 8; cont_s++)
 17995  0050D6  0E00               	movlw	0
 17996  0050D8  6E19               	movwf	Soft_SPI_Write@cont_s^0,c
 17997  0050DA                     l30:
 17998                           
 17999                           ;SPI_SOFT.c: 46:   {;SPI_SOFT.c: 47:     if((dato_ & 0x80) != 0) LATA4 = 1;
 18000  0050DA  AE18               	btfss	Soft_SPI_Write@dato_^0,7,c
 18001  0050DC  D002               	goto	l32
 18002  0050DE  8889               	bsf	3977,4,c	;volatile
 18003  0050E0  D001               	goto	l9998
 18004  0050E2                     l32:
 18005  0050E2  9889               	bcf	3977,4,c	;volatile
 18006  0050E4                     l9998:
 18007                           
 18008                           ;SPI_SOFT.c: 49:     dato_ <<= 1;
 18009  0050E4  90D8               	bcf	status,0,c
 18010  0050E6  3618               	rlcf	Soft_SPI_Write@dato_^0,f,c
 18011                           
 18012                           ;SPI_SOFT.c: 51:     LATB2 = 1;
 18013  0050E8  848A               	bsf	3978,2,c	;volatile
 18014                           
 18015                           ;SPI_SOFT.c: 52:     _delay((unsigned long)((10)*(48000000/4000000.0)));
 18016  0050EA  0E28               	movlw	40
 18017  0050EC                     u11457:
 18018  0050EC  2EE8               	decfsz	wreg,f,c
 18019  0050EE  D7FE               	bra	u11457
 18020                           
 18021                           ;SPI_SOFT.c: 53:     LATB2 = 0;
 18022  0050F0  948A               	bcf	3978,2,c	;volatile
 18023                           
 18024                           ;SPI_SOFT.c: 54:     _delay((unsigned long)((10)*(48000000/4000000.0)));
 18025  0050F2  0E28               	movlw	40
 18026  0050F4                     u11467:
 18027  0050F4  2EE8               	decfsz	wreg,f,c
 18028  0050F6  D7FE               	bra	u11467
 18029                           
 18030                           ;SPI_SOFT.c: 55:   }
 18031  0050F8  2A19               	incf	Soft_SPI_Write@cont_s^0,f,c
 18032  0050FA  0E07               	movlw	7
 18033  0050FC  6419               	cpfsgt	Soft_SPI_Write@cont_s^0,c
 18034  0050FE  D7ED               	goto	l30
 18035  005100  0012               	return	
 18036  005102                     __end_of_Soft_SPI_Write:
 18037                           	callstack 0
 18038                           
 18039 ;; *************** function _Soft_SPI_Read *****************
 18040 ;; Defined at:
 18041 ;;		line 19 in file "SPI_SOFT.c"
 18042 ;; Parameters:    Size  Location     Type
 18043 ;;		None
 18044 ;; Auto vars:     Size  Location     Type
 18045 ;;  cont_s          1   26[COMRAM] unsigned char 
 18046 ;;  dato_           1   25[COMRAM] unsigned char 
 18047 ;; Return value:  Size  Location     Type
 18048 ;;                  1    wreg      unsigned char 
 18049 ;; Registers used:
 18050 ;;		wreg, status,2, status,0
 18051 ;; Tracked objects:
 18052 ;;		On entry : 0/0
 18053 ;;		On exit  : 0/0
 18054 ;;		Unchanged: 0/0
 18055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18056 ;;      Params:         2       0       0       0       0       0       0       0       0
 18057 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18058 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18059 ;;      Totals:         4       0       0       0       0       0       0       0       0
 18060 ;;Total ram usage:        4 bytes
 18061 ;; Hardware stack levels used:    1
 18062 ;; Hardware stack levels required when called:    7
 18063 ;; This function calls:
 18064 ;;		Nothing
 18065 ;; This function is called by:
 18066 ;;		_MFRC522_Rd
 18067 ;; This function uses a non-reentrant model
 18068 ;;
 18069                           
 18070                           	psect	text81
 18071  005132                     __ptext81:
 18072                           	callstack 0
 18073  005132                     _Soft_SPI_Read:
 18074                           	callstack 16
 18075                           
 18076                           ;SPI_SOFT.c: 21:   unsigned char cont_s= 0;
 18077                           
 18078                           ;incstack = 0
 18079  005132  0E00               	movlw	0
 18080  005134  6E1B               	movwf	Soft_SPI_Read@cont_s^0,c
 18081                           
 18082                           ;SPI_SOFT.c: 22:   unsigned char dato_ = 0;
 18083  005136  0E00               	movlw	0
 18084  005138  6E1A               	movwf	Soft_SPI_Read@dato_^0,c
 18085                           
 18086                           ;SPI_SOFT.c: 24:   for(cont_s= 0; cont_s < 8; cont_s++)
 18087  00513A  0E00               	movlw	0
 18088  00513C  6E1B               	movwf	Soft_SPI_Read@cont_s^0,c
 18089  00513E                     l9968:
 18090                           
 18091                           ;SPI_SOFT.c: 25:   {;SPI_SOFT.c: 26:       dato_ <<= 1;
 18092  00513E  90D8               	bcf	status,0,c
 18093  005140  361A               	rlcf	Soft_SPI_Read@dato_^0,f,c
 18094                           
 18095                           ;SPI_SOFT.c: 27:       LATB2 = 1;
 18096  005142  848A               	bsf	3978,2,c	;volatile
 18097                           
 18098                           ;SPI_SOFT.c: 28:       _delay((unsigned long)((10)*(48000000/4000000.0)));
 18099  005144  0E28               	movlw	40
 18100  005146                     u11477:
 18101  005146  2EE8               	decfsz	wreg,f,c
 18102  005148  D7FE               	bra	u11477
 18103                           
 18104                           ;SPI_SOFT.c: 30:       if(RA5 != 0)
 18105  00514A  BA80               	btfsc	3968,5,c	;volatile
 18106                           
 18107                           ;SPI_SOFT.c: 31:       {;SPI_SOFT.c: 32:         dato_ |= 1;
 18108  00514C  801A               	bsf	Soft_SPI_Read@dato_^0,0,c
 18109                           
 18110                           ;SPI_SOFT.c: 34:       LATB2 = 0;
 18111  00514E  948A               	bcf	3978,2,c	;volatile
 18112                           
 18113                           ;SPI_SOFT.c: 35:       _delay((unsigned long)((10)*(48000000/4000000.0)));
 18114  005150  0E28               	movlw	40
 18115  005152                     u11487:
 18116  005152  2EE8               	decfsz	wreg,f,c
 18117  005154  D7FE               	bra	u11487
 18118                           
 18119                           ;SPI_SOFT.c: 36:   }
 18120  005156  2A1B               	incf	Soft_SPI_Read@cont_s^0,f,c
 18121  005158  0E07               	movlw	7
 18122  00515A  641B               	cpfsgt	Soft_SPI_Read@cont_s^0,c
 18123  00515C  D7F0               	goto	l9968
 18124                           
 18125                           ;SPI_SOFT.c: 38:   return dato_;
 18126  00515E  501A               	movf	Soft_SPI_Read@dato_^0,w,c
 18127  005160  0012               	return		;funcret
 18128  005162                     __end_of_Soft_SPI_Read:
 18129                           	callstack 0
 18130                           
 18131 ;; *************** function _LCD_init *****************
 18132 ;; Defined at:
 18133 ;;		line 6 in file "LCD20X4_I2C.c"
 18134 ;; Parameters:    Size  Location     Type
 18135 ;;		None
 18136 ;; Auto vars:     Size  Location     Type
 18137 ;;  i               1   29[COMRAM] unsigned char 
 18138 ;; Return value:  Size  Location     Type
 18139 ;;                  1    wreg      void 
 18140 ;; Registers used:
 18141 ;;		wreg, status,2, status,0, cstack
 18142 ;; Tracked objects:
 18143 ;;		On entry : 0/0
 18144 ;;		On exit  : 0/0
 18145 ;;		Unchanged: 0/0
 18146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18147 ;;      Params:         0       0       0       0       0       0       0       0       0
 18148 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18149 ;;      Temps:          2       0       0       0       0       0       0       0       0
 18150 ;;      Totals:         3       0       0       0       0       0       0       0       0
 18151 ;;Total ram usage:        3 bytes
 18152 ;; Hardware stack levels used:    1
 18153 ;; Hardware stack levels required when called:    9
 18154 ;; This function calls:
 18155 ;;		_LCD_command
 18156 ;; This function is called by:
 18157 ;;		_main
 18158 ;; This function uses a non-reentrant model
 18159 ;;
 18160                           
 18161                           	psect	text82
 18162  004398                     __ptext82:
 18163                           	callstack 0
 18164  004398                     _LCD_init:
 18165                           	callstack 21
 18166                           
 18167                           ;LCD20X4_I2C.c: 9:     _delay((unsigned long)((25)*(48000000/4000.0)));
 18168                           
 18169                           ;incstack = 0
 18170  004398  0E02               	movlw	2
 18171  00439A  6E1D               	movwf	(??_LCD_init+1)^0,c
 18172  00439C  0E86               	movlw	134
 18173  00439E  6E1C               	movwf	??_LCD_init^0,c
 18174  0043A0  0E99               	movlw	153
 18175  0043A2                     u11497:
 18176  0043A2  2EE8               	decfsz	wreg,f,c
 18177  0043A4  D7FE               	bra	u11497
 18178  0043A6  2E1C               	decfsz	??_LCD_init^0,f,c
 18179  0043A8  D7FC               	bra	u11497
 18180  0043AA  2E1D               	decfsz	(??_LCD_init+1)^0,f,c
 18181  0043AC  D7FA               	bra	u11497
 18182  0043AE  F000               	nop	
 18183                           
 18184                           ;LCD20X4_I2C.c: 11:     for(char i=0;i<3;i++)
 18185  0043B0  0E00               	movlw	0
 18186  0043B2  6E1E               	movwf	LCD_init@i^0,c
 18187  0043B4                     l12238:
 18188                           
 18189                           ;LCD20X4_I2C.c: 12:     {;LCD20X4_I2C.c: 13:         LCD_command(0x03);
 18190  0043B4  0E03               	movlw	3
 18191  0043B6  EC78  F023         	call	_LCD_command
 18192                           
 18193                           ;LCD20X4_I2C.c: 14:         _delay((unsigned long)((7)*(48000000/4000.0)));
 18194  0043BA  0E6E               	movlw	110
 18195  0043BC  6E1C               	movwf	??_LCD_init^0,c
 18196  0043BE  0E16               	movlw	22
 18197  0043C0                     u11507:
 18198  0043C0  2EE8               	decfsz	wreg,f,c
 18199  0043C2  D7FE               	bra	u11507
 18200  0043C4  2E1C               	decfsz	??_LCD_init^0,f,c
 18201  0043C6  D7FC               	bra	u11507
 18202                           
 18203                           ;LCD20X4_I2C.c: 15:     }
 18204  0043C8  2A1E               	incf	LCD_init@i^0,f,c
 18205  0043CA  0E02               	movlw	2
 18206  0043CC  641E               	cpfsgt	LCD_init@i^0,c
 18207  0043CE  D7F2               	goto	l12238
 18208                           
 18209                           ;LCD20X4_I2C.c: 18:  LCD_command(0x33);
 18210  0043D0  0E33               	movlw	51
 18211  0043D2  EC78  F023         	call	_LCD_command
 18212                           
 18213                           ;LCD20X4_I2C.c: 19:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18214  0043D6  0EF0               	movlw	240
 18215  0043D8                     u11517:
 18216  0043D8  D000               	nop2	
 18217  0043DA  2EE8               	decfsz	wreg,f,c
 18218  0043DC  D7FD               	bra	u11517
 18219                           
 18220                           ;LCD20X4_I2C.c: 20:     LCD_command(0x32);
 18221  0043DE  0E32               	movlw	50
 18222  0043E0  EC78  F023         	call	_LCD_command
 18223                           
 18224                           ;LCD20X4_I2C.c: 21:     _delay((unsigned long)((5)*(48000000/4000.0)));
 18225  0043E4  0E4E               	movlw	78
 18226  0043E6  6E1C               	movwf	??_LCD_init^0,c
 18227  0043E8  0EEB               	movlw	235
 18228  0043EA                     u11527:
 18229  0043EA  2EE8               	decfsz	wreg,f,c
 18230  0043EC  D7FE               	bra	u11527
 18231  0043EE  2E1C               	decfsz	??_LCD_init^0,f,c
 18232  0043F0  D7FC               	bra	u11527
 18233  0043F2  F000               	nop	
 18234                           
 18235                           ;LCD20X4_I2C.c: 22:  LCD_command(0x28);
 18236  0043F4  0E28               	movlw	40
 18237  0043F6  EC78  F023         	call	_LCD_command
 18238                           
 18239                           ;LCD20X4_I2C.c: 23:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18240  0043FA  0EF0               	movlw	240
 18241  0043FC                     u11537:
 18242  0043FC  D000               	nop2	
 18243  0043FE  2EE8               	decfsz	wreg,f,c
 18244  004400  D7FD               	bra	u11537
 18245                           
 18246                           ;LCD20X4_I2C.c: 24:  LCD_command(0x0C);
 18247  004402  0E0C               	movlw	12
 18248  004404  EC78  F023         	call	_LCD_command
 18249                           
 18250                           ;LCD20X4_I2C.c: 25:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18251  004408  0EF0               	movlw	240
 18252  00440A                     u11547:
 18253  00440A  D000               	nop2	
 18254  00440C  2EE8               	decfsz	wreg,f,c
 18255  00440E  D7FD               	bra	u11547
 18256                           
 18257                           ;LCD20X4_I2C.c: 26:  LCD_command(0x06);
 18258  004410  0E06               	movlw	6
 18259  004412  EC78  F023         	call	_LCD_command
 18260                           
 18261                           ;LCD20X4_I2C.c: 27:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18262  004416  0EF0               	movlw	240
 18263  004418                     u11557:
 18264  004418  D000               	nop2	
 18265  00441A  2EE8               	decfsz	wreg,f,c
 18266  00441C  D7FD               	bra	u11557
 18267                           
 18268                           ;LCD20X4_I2C.c: 28:     LCD_command(0x01);
 18269  00441E  0E01               	movlw	1
 18270  004420  EC78  F023         	call	_LCD_command
 18271                           
 18272                           ;LCD20X4_I2C.c: 29:     _delay((unsigned long)((7)*(48000000/4000.0)));
 18273  004424  0E6E               	movlw	110
 18274  004426  6E1C               	movwf	??_LCD_init^0,c
 18275  004428  0E16               	movlw	22
 18276  00442A                     u11567:
 18277  00442A  2EE8               	decfsz	wreg,f,c
 18278  00442C  D7FE               	bra	u11567
 18279  00442E  2E1C               	decfsz	??_LCD_init^0,f,c
 18280  004430  D7FC               	bra	u11567
 18281  004432  0012               	return		;funcret
 18282  004434                     __end_of_LCD_init:
 18283                           	callstack 0
 18284                           
 18285 ;; *************** function _LCD_command *****************
 18286 ;; Defined at:
 18287 ;;		line 37 in file "LCD20X4_I2C.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;  cmd             1    wreg     unsigned char 
 18290 ;; Auto vars:     Size  Location     Type
 18291 ;;  cmd             1   26[COMRAM] unsigned char 
 18292 ;; Return value:  Size  Location     Type
 18293 ;;                  1    wreg      void 
 18294 ;; Registers used:
 18295 ;;		wreg, status,2, status,0, cstack
 18296 ;; Tracked objects:
 18297 ;;		On entry : 0/0
 18298 ;;		On exit  : 0/0
 18299 ;;		Unchanged: 0/0
 18300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18301 ;;      Params:         0       0       0       0       0       0       0       0       0
 18302 ;;      Locals:         1       0       0       0       0       0       0       0       0
 18303 ;;      Temps:          1       0       0       0       0       0       0       0       0
 18304 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18305 ;;Total ram usage:        2 bytes
 18306 ;; Hardware stack levels used:    1
 18307 ;; Hardware stack levels required when called:    8
 18308 ;; This function calls:
 18309 ;;		_i2c_start
 18310 ;;		_i2c_stop
 18311 ;;		_i2c_write
 18312 ;; This function is called by:
 18313 ;;		_LCD_init
 18314 ;;		_LCD_array
 18315 ;;		_EEPROM_init
 18316 ;;		_Task1
 18317 ;;		_Rfid_Lcd
 18318 ;;		_Erase_Eeprom
 18319 ;;		_Easter_Egg
 18320 ;;		_ACN_PA_Com
 18321 ;;		_main
 18322 ;; This function uses a non-reentrant model
 18323 ;;
 18324                           
 18325                           	psect	text83
 18326  0046F0                     __ptext83:
 18327                           	callstack 0
 18328  0046F0                     _LCD_command:
 18329                           	callstack 20
 18330                           
 18331                           ;incstack = 0
 18332                           ;LCD_command@cmd stored from wreg
 18333  0046F0  6E1B               	movwf	LCD_command@cmd^0,c
 18334                           
 18335                           ;LCD20X4_I2C.c: 37: void LCD_command(unsigned char cmd);LCD20X4_I2C.c: 38: {;LCD20X4_I2C
      +                          .c: 40:     GIEL = 0;
 18336  0046F2  9CF2               	bcf	4082,6,c	;volatile
 18337                           
 18338                           ;LCD20X4_I2C.c: 44:     i2c_start();
 18339  0046F4  ECC1  F029         	call	_i2c_start	;wreg free
 18340                           
 18341                           ;LCD20X4_I2C.c: 45:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18342  0046F8  0EF0               	movlw	240
 18343  0046FA                     u11577:
 18344  0046FA  D000               	nop2	
 18345  0046FC  2EE8               	decfsz	wreg,f,c
 18346  0046FE  D7FD               	bra	u11577
 18347                           
 18348                           ;LCD20X4_I2C.c: 47:     i2c_write(0x4E);
 18349  004700  0E4E               	movlw	78
 18350  004702  ECA6  F024         	call	_i2c_write
 18351                           
 18352                           ;LCD20X4_I2C.c: 48:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18353  004706  0EF0               	movlw	240
 18354  004708                     u11587:
 18355  004708  D000               	nop2	
 18356  00470A  2EE8               	decfsz	wreg,f,c
 18357  00470C  D7FD               	bra	u11587
 18358                           
 18359                           ;LCD20X4_I2C.c: 53:     i2c_write((cmd & 0xf0)| 0x0c);
 18360  00470E  501B               	movf	LCD_command@cmd^0,w,c
 18361  004710  0BF0               	andlw	240
 18362  004712  090C               	iorlw	12
 18363  004714  ECA6  F024         	call	_i2c_write
 18364                           
 18365                           ;LCD20X4_I2C.c: 54:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18366  004718  0EF0               	movlw	240
 18367  00471A                     u11597:
 18368  00471A  D000               	nop2	
 18369  00471C  2EE8               	decfsz	wreg,f,c
 18370  00471E  D7FD               	bra	u11597
 18371                           
 18372                           ;LCD20X4_I2C.c: 56:     i2c_write((cmd & 0xf0)| 0x08);
 18373  004720  501B               	movf	LCD_command@cmd^0,w,c
 18374  004722  0BF0               	andlw	240
 18375  004724  0908               	iorlw	8
 18376  004726  ECA6  F024         	call	_i2c_write
 18377                           
 18378                           ;LCD20X4_I2C.c: 57:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18379  00472A  0EF0               	movlw	240
 18380  00472C                     u11607:
 18381  00472C  D000               	nop2	
 18382  00472E  2EE8               	decfsz	wreg,f,c
 18383  004730  D7FD               	bra	u11607
 18384                           
 18385                           ;LCD20X4_I2C.c: 61:     i2c_write((cmd<<4 & 0xf0)| 0x0c);
 18386  004732  381B               	swapf	LCD_command@cmd^0,w,c
 18387  004734  0BF0               	andlw	240
 18388  004736  0BF0               	andlw	240
 18389  004738  090C               	iorlw	12
 18390  00473A  ECA6  F024         	call	_i2c_write
 18391                           
 18392                           ;LCD20X4_I2C.c: 62:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18393  00473E  0EF0               	movlw	240
 18394  004740                     u11617:
 18395  004740  D000               	nop2	
 18396  004742  2EE8               	decfsz	wreg,f,c
 18397  004744  D7FD               	bra	u11617
 18398                           
 18399                           ;LCD20X4_I2C.c: 64:     i2c_write((cmd<<4 & 0xf0)| 0x08);
 18400  004746  381B               	swapf	LCD_command@cmd^0,w,c
 18401  004748  0BF0               	andlw	240
 18402  00474A  0BF0               	andlw	240
 18403  00474C  0908               	iorlw	8
 18404  00474E  ECA6  F024         	call	_i2c_write
 18405                           
 18406                           ;LCD20X4_I2C.c: 65:     _delay((unsigned long)((100)*(48000000/4000000.0)));
 18407  004752  0EF0               	movlw	240
 18408  004754                     u11627:
 18409  004754  D000               	nop2	
 18410  004756  2EE8               	decfsz	wreg,f,c
 18411  004758  D7FD               	bra	u11627
 18412                           
 18413                           ;LCD20X4_I2C.c: 69:     i2c_stop();
 18414  00475A  EC40  F029         	call	_i2c_stop	;wreg free
 18415                           
 18416                           ;LCD20X4_I2C.c: 70:     _delay((unsigned long)((2)*(48000000/4000.0)));
 18417  00475E  0E20               	movlw	32
 18418  004760  6E1A               	movwf	??_LCD_command^0,c
 18419  004762  0E2A               	movlw	42
 18420  004764                     u11637:
 18421  004764  2EE8               	decfsz	wreg,f,c
 18422  004766  D7FE               	bra	u11637
 18423  004768  2E1A               	decfsz	??_LCD_command^0,f,c
 18424  00476A  D7FC               	bra	u11637
 18425                           
 18426                           ;LCD20X4_I2C.c: 74:     GIEL = 1;
 18427  00476C  8CF2               	bsf	4082,6,c	;volatile
 18428  00476E  0012               	return		;funcret
 18429  004770                     __end_of_LCD_command:
 18430                           	callstack 0
 18431                           
 18432 ;; *************** function _i2c_write *****************
 18433 ;; Defined at:
 18434 ;;		line 61 in file "SOFT_I2C.c"
 18435 ;; Parameters:    Size  Location     Type
 18436 ;;  date            1    wreg     unsigned char 
 18437 ;; Auto vars:     Size  Location     Type
 18438 ;;  date            1   23[COMRAM] unsigned char 
 18439 ;;  i               1   24[COMRAM] unsigned char 
 18440 ;; Return value:  Size  Location     Type
 18441 ;;                  1    wreg      void 
 18442 ;; Registers used:
 18443 ;;		wreg, status,2, status,0
 18444 ;; Tracked objects:
 18445 ;;		On entry : 0/0
 18446 ;;		On exit  : 0/0
 18447 ;;		Unchanged: 0/0
 18448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18449 ;;      Params:         0       0       0       0       0       0       0       0       0
 18450 ;;      Locals:         2       0       0       0       0       0       0       0       0
 18451 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18452 ;;      Totals:         2       0       0       0       0       0       0       0       0
 18453 ;;Total ram usage:        2 bytes
 18454 ;; Hardware stack levels used:    1
 18455 ;; Hardware stack levels required when called:    7
 18456 ;; This function calls:
 18457 ;;		Nothing
 18458 ;; This function is called by:
 18459 ;;		_i2c_array
 18460 ;;		_RTC_send_hora
 18461 ;;		_RTC_send_fecha
 18462 ;;		_LCD_command
 18463 ;;		_LCD_date
 18464 ;;		_EEPROM_init
 18465 ;;		_M_Write
 18466 ;;		_M_Read
 18467 ;;		_Write_User
 18468 ;;		_Read_User
 18469 ;; This function uses a non-reentrant model
 18470 ;;
 18471                           
 18472                           	psect	text84
 18473  00494C                     __ptext84:
 18474                           	callstack 0
 18475  00494C                     _i2c_write:
 18476                           	callstack 20
 18477                           
 18478                           ;incstack = 0
 18479                           ;i2c_write@date stored from wreg
 18480  00494C  6E18               	movwf	i2c_write@date^0,c
 18481                           
 18482                           ;SOFT_I2C.c: 61: void i2c_write(char date);SOFT_I2C.c: 62: {;SOFT_I2C.c: 64:     ACK_EST
      +                           = 1;
 18483  00494E  0E01               	movlw	1
 18484  004950  0101               	movlb	1	; () banked
 18485  004952  6F92               	movwf	_ACK_EST& (0+255),b
 18486                           
 18487                           ; BSR set to: 1
 18488                           ;SOFT_I2C.c: 66:     if(PORTCbits.RC1 == 1)
 18489  004954  A282               	btfss	130,1,c	;volatile
 18490  004956  D002               	goto	l10522
 18491                           
 18492                           ; BSR set to: 1
 18493                           ;SOFT_I2C.c: 67:     {;SOFT_I2C.c: 68:         PORTCbits.RC1 = 0;
 18494  004958  9282               	bcf	130,1,c	;volatile
 18495                           
 18496                           ;SOFT_I2C.c: 69:         TRISCbits.TRISC1 = 0;
 18497  00495A  9294               	bcf	148,1,c	;volatile
 18498  00495C                     l10522:
 18499                           
 18500                           ; BSR set to: 1
 18501                           ;SOFT_I2C.c: 71:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 18502  00495C  0E14               	movlw	20
 18503  00495E                     u11647:
 18504  00495E  2EE8               	decfsz	wreg,f,c
 18505  004960  D7FE               	bra	u11647
 18506                           
 18507                           ;SOFT_I2C.c: 73:     for(char i=0;i<8;i++)
 18508  004962  0E00               	movlw	0
 18509  004964  6E19               	movwf	i2c_write@i^0,c
 18510  004966                     l61:
 18511                           
 18512                           ;SOFT_I2C.c: 74:     {;SOFT_I2C.c: 75:         if((date & 0x80) == 0)
 18513  004966  BE18               	btfsc	i2c_write@date^0,7,c
 18514  004968  D003               	goto	l63
 18515                           
 18516                           ;SOFT_I2C.c: 76:         {;SOFT_I2C.c: 77:             PORTCbits.RC0 = 0;
 18517  00496A  9082               	bcf	130,0,c	;volatile
 18518                           
 18519                           ;SOFT_I2C.c: 78:             TRISCbits.TRISC0 = 0;
 18520  00496C  9094               	bcf	148,0,c	;volatile
 18521                           
 18522                           ;SOFT_I2C.c: 79:         }
 18523  00496E  D001               	goto	l10532
 18524  004970                     l63:
 18525  004970  8094               	bsf	148,0,c	;volatile
 18526  004972                     l10532:
 18527                           
 18528                           ;SOFT_I2C.c: 82:         date <<= 1;
 18529  004972  90D8               	bcf	status,0,c
 18530  004974  3618               	rlcf	i2c_write@date^0,f,c
 18531                           
 18532                           ;SOFT_I2C.c: 85:         _delay((unsigned long)((2)*(48000000/4000000.0)));
 18533  004976  0E08               	movlw	8
 18534  004978                     u11657:
 18535  004978  2EE8               	decfsz	wreg,f,c
 18536  00497A  D7FE               	bra	u11657
 18537                           
 18538                           ;SOFT_I2C.c: 86:         TRISCbits.TRISC1 = 1;
 18539  00497C  8294               	bsf	148,1,c	;volatile
 18540                           
 18541                           ;SOFT_I2C.c: 87:         _delay((unsigned long)((3)*(48000000/4000000.0)));
 18542  00497E  0E0C               	movlw	12
 18543  004980                     u11667:
 18544  004980  2EE8               	decfsz	wreg,f,c
 18545  004982  D7FE               	bra	u11667
 18546                           
 18547                           ;SOFT_I2C.c: 89:         TRISCbits.TRISC1 = 0;
 18548  004984  9294               	bcf	148,1,c	;volatile
 18549                           
 18550                           ;SOFT_I2C.c: 90:         PORTCbits.RC1 = 0;
 18551  004986  9282               	bcf	130,1,c	;volatile
 18552                           
 18553                           ;SOFT_I2C.c: 91:         _delay((unsigned long)((5)*(48000000/4000000.0)));
 18554  004988  0E14               	movlw	20
 18555  00498A                     u11677:
 18556  00498A  2EE8               	decfsz	wreg,f,c
 18557  00498C  D7FE               	bra	u11677
 18558                           
 18559                           ;SOFT_I2C.c: 92:     }
 18560  00498E  2A19               	incf	i2c_write@i^0,f,c
 18561  004990  0E07               	movlw	7
 18562  004992  6419               	cpfsgt	i2c_write@i^0,c
 18563  004994  D7E8               	goto	l61
 18564                           
 18565                           ;SOFT_I2C.c: 95:     TRISCbits.TRISC0 = 1;
 18566  004996  8094               	bsf	148,0,c	;volatile
 18567                           
 18568                           ;SOFT_I2C.c: 96:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 18569  004998  0E08               	movlw	8
 18570  00499A                     u11687:
 18571  00499A  2EE8               	decfsz	wreg,f,c
 18572  00499C  D7FE               	bra	u11687
 18573                           
 18574                           ;SOFT_I2C.c: 97:     TRISCbits.TRISC1 = 1;
 18575  00499E  8294               	bsf	148,1,c	;volatile
 18576                           
 18577                           ;SOFT_I2C.c: 98:     ACK_EST = PORTCbits.RC0;
 18578  0049A0  A082               	btfss	130,0,c	;volatile
 18579  0049A2  D002               	goto	u9200
 18580  0049A4  0E01               	movlw	1
 18581  0049A6  D001               	goto	u9206
 18582  0049A8                     u9200:
 18583  0049A8  0E00               	movlw	0
 18584  0049AA                     u9206:
 18585  0049AA  0101               	movlb	1	; () banked
 18586  0049AC  6F92               	movwf	_ACK_EST& (0+255),b
 18587                           
 18588                           ; BSR set to: 1
 18589                           ;SOFT_I2C.c: 99:     _delay((unsigned long)((3)*(48000000/4000000.0)));
 18590  0049AE  0E0C               	movlw	12
 18591  0049B0                     u11697:
 18592  0049B0  2EE8               	decfsz	wreg,f,c
 18593  0049B2  D7FE               	bra	u11697
 18594                           
 18595                           ;SOFT_I2C.c: 101:     TRISCbits.TRISC1 = 0;
 18596  0049B4  9294               	bcf	148,1,c	;volatile
 18597                           
 18598                           ;SOFT_I2C.c: 102:     PORTCbits.RC1 = 0;
 18599  0049B6  9282               	bcf	130,1,c	;volatile
 18600                           
 18601                           ;SOFT_I2C.c: 103:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 18602  0049B8  0E14               	movlw	20
 18603  0049BA                     u11707:
 18604  0049BA  2EE8               	decfsz	wreg,f,c
 18605  0049BC  D7FE               	bra	u11707
 18606  0049BE  0012               	return		;funcret
 18607  0049C0                     __end_of_i2c_write:
 18608                           	callstack 0
 18609                           
 18610 ;; *************** function _i2c_stop *****************
 18611 ;; Defined at:
 18612 ;;		line 40 in file "SOFT_I2C.c"
 18613 ;; Parameters:    Size  Location     Type
 18614 ;;		None
 18615 ;; Auto vars:     Size  Location     Type
 18616 ;;		None
 18617 ;; Return value:  Size  Location     Type
 18618 ;;                  1    wreg      void 
 18619 ;; Registers used:
 18620 ;;		wreg
 18621 ;; Tracked objects:
 18622 ;;		On entry : 0/0
 18623 ;;		On exit  : 0/0
 18624 ;;		Unchanged: 0/0
 18625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18626 ;;      Params:         0       0       0       0       0       0       0       0       0
 18627 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18628 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18629 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18630 ;;Total ram usage:        0 bytes
 18631 ;; Hardware stack levels used:    1
 18632 ;; Hardware stack levels required when called:    7
 18633 ;; This function calls:
 18634 ;;		Nothing
 18635 ;; This function is called by:
 18636 ;;		_i2c_restart
 18637 ;;		_RTC_send_hora
 18638 ;;		_RTC_send_fecha
 18639 ;;		_LCD_command
 18640 ;;		_LCD_date
 18641 ;;		_EEPROM_init
 18642 ;;		_M_Write
 18643 ;;		_M_Read
 18644 ;;		_Write_User
 18645 ;;		_Read_User
 18646 ;; This function uses a non-reentrant model
 18647 ;;
 18648                           
 18649                           	psect	text85
 18650  005280                     __ptext85:
 18651                           	callstack 0
 18652  005280                     _i2c_stop:
 18653                           	callstack 20
 18654                           
 18655                           ;SOFT_I2C.c: 42:     PORTCbits.RC0 = 0;
 18656                           
 18657                           ;incstack = 0
 18658  005280  9082               	bcf	130,0,c	;volatile
 18659                           
 18660                           ;SOFT_I2C.c: 43:     TRISCbits.TRISC0 = 0;
 18661  005282  9094               	bcf	148,0,c	;volatile
 18662                           
 18663                           ;SOFT_I2C.c: 44:     PORTCbits.RC1 = 0;
 18664  005284  9282               	bcf	130,1,c	;volatile
 18665                           
 18666                           ;SOFT_I2C.c: 45:     TRISCbits.TRISC1 = 0;
 18667  005286  9294               	bcf	148,1,c	;volatile
 18668                           
 18669                           ;SOFT_I2C.c: 46:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 18670  005288  0E04               	movlw	4
 18671  00528A                     u11717:
 18672  00528A  2EE8               	decfsz	wreg,f,c
 18673  00528C  D7FE               	bra	u11717
 18674                           
 18675                           ;SOFT_I2C.c: 48:     TRISCbits.TRISC1 = 1;
 18676  00528E  8294               	bsf	148,1,c	;volatile
 18677                           
 18678                           ;SOFT_I2C.c: 49:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 18679  005290  0E08               	movlw	8
 18680  005292                     u11727:
 18681  005292  2EE8               	decfsz	wreg,f,c
 18682  005294  D7FE               	bra	u11727
 18683                           
 18684                           ;SOFT_I2C.c: 50:     TRISCbits.TRISC0 = 1;
 18685  005296  8094               	bsf	148,0,c	;volatile
 18686                           
 18687                           ;SOFT_I2C.c: 51:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 18688  005298  0E08               	movlw	8
 18689  00529A                     u11737:
 18690  00529A  2EE8               	decfsz	wreg,f,c
 18691  00529C  D7FE               	bra	u11737
 18692                           
 18693                           ;SOFT_I2C.c: 53:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 18694  00529E  0E14               	movlw	20
 18695  0052A0                     u11747:
 18696  0052A0  2EE8               	decfsz	wreg,f,c
 18697  0052A2  D7FE               	bra	u11747
 18698  0052A4  0012               	return		;funcret
 18699  0052A6                     __end_of_i2c_stop:
 18700                           	callstack 0
 18701                           
 18702 ;; *************** function _i2c_start *****************
 18703 ;; Defined at:
 18704 ;;		line 17 in file "SOFT_I2C.c"
 18705 ;; Parameters:    Size  Location     Type
 18706 ;;		None
 18707 ;; Auto vars:     Size  Location     Type
 18708 ;;		None
 18709 ;; Return value:  Size  Location     Type
 18710 ;;                  1    wreg      void 
 18711 ;; Registers used:
 18712 ;;		wreg
 18713 ;; Tracked objects:
 18714 ;;		On entry : 0/0
 18715 ;;		On exit  : 0/0
 18716 ;;		Unchanged: 0/0
 18717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18718 ;;      Params:         0       0       0       0       0       0       0       0       0
 18719 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18720 ;;      Temps:          0       0       0       0       0       0       0       0       0
 18721 ;;      Totals:         0       0       0       0       0       0       0       0       0
 18722 ;;Total ram usage:        0 bytes
 18723 ;; Hardware stack levels used:    1
 18724 ;; Hardware stack levels required when called:    7
 18725 ;; This function calls:
 18726 ;;		Nothing
 18727 ;; This function is called by:
 18728 ;;		_i2c_restart
 18729 ;;		_RTC_send_hora
 18730 ;;		_RTC_send_fecha
 18731 ;;		_LCD_command
 18732 ;;		_LCD_date
 18733 ;;		_EEPROM_init
 18734 ;;		_M_Write
 18735 ;;		_M_Read
 18736 ;;		_Write_User
 18737 ;;		_Read_User
 18738 ;; This function uses a non-reentrant model
 18739 ;;
 18740                           
 18741                           	psect	text86
 18742  005382                     __ptext86:
 18743                           	callstack 0
 18744  005382                     _i2c_start:
 18745                           	callstack 20
 18746                           
 18747                           ;SOFT_I2C.c: 20:     TRISCbits.TRISC0 = 1;
 18748                           
 18749                           ;incstack = 0
 18750  005382  8094               	bsf	148,0,c	;volatile
 18751                           
 18752                           ;SOFT_I2C.c: 21:     TRISCbits.TRISC1 = 1;
 18753  005384  8294               	bsf	148,1,c	;volatile
 18754                           
 18755                           ;SOFT_I2C.c: 22:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 18756  005386  0E14               	movlw	20
 18757  005388                     u11757:
 18758  005388  2EE8               	decfsz	wreg,f,c
 18759  00538A  D7FE               	bra	u11757
 18760                           
 18761                           ;SOFT_I2C.c: 25:     PORTCbits.RC0 = 0;
 18762  00538C  9082               	bcf	130,0,c	;volatile
 18763                           
 18764                           ;SOFT_I2C.c: 26:     TRISCbits.TRISC0 = 0;
 18765  00538E  9094               	bcf	148,0,c	;volatile
 18766                           
 18767                           ;SOFT_I2C.c: 27:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 18768  005390  0E08               	movlw	8
 18769  005392                     u11767:
 18770  005392  2EE8               	decfsz	wreg,f,c
 18771  005394  D7FE               	bra	u11767
 18772                           
 18773                           ;SOFT_I2C.c: 30:     PORTCbits.RC1 = 0;
 18774  005396  9282               	bcf	130,1,c	;volatile
 18775                           
 18776                           ;SOFT_I2C.c: 31:     TRISCbits.TRISC1 = 0;
 18777  005398  9294               	bcf	148,1,c	;volatile
 18778                           
 18779                           ;SOFT_I2C.c: 32:     _delay((unsigned long)((3)*(48000000/4000000.0)));
 18780  00539A  0E0C               	movlw	12
 18781  00539C                     u11777:
 18782  00539C  2EE8               	decfsz	wreg,f,c
 18783  00539E  D7FE               	bra	u11777
 18784  0053A0  0012               	return		;funcret
 18785  0053A2                     __end_of_i2c_start:
 18786                           	callstack 0
 18787                           
 18788 ;; *************** function _ISR_LowP *****************
 18789 ;; Defined at:
 18790 ;;		line 108 in file "OS_Control.c"
 18791 ;; Parameters:    Size  Location     Type
 18792 ;;		None
 18793 ;; Auto vars:     Size  Location     Type
 18794 ;;		None
 18795 ;; Return value:  Size  Location     Type
 18796 ;;                  1    wreg      void 
 18797 ;; Registers used:
 18798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 18799 ;; Tracked objects:
 18800 ;;		On entry : 0/0
 18801 ;;		On exit  : 3F/1
 18802 ;;		Unchanged: 0/0
 18803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 18804 ;;      Params:         0       0       0       0       0       0       0       0       0
 18805 ;;      Locals:         0       0       0       0       0       0       0       0       0
 18806 ;;      Temps:          7       0       0       0       0       0       0       0       0
 18807 ;;      Totals:         7       0       0       0       0       0       0       0       0
 18808 ;;Total ram usage:        7 bytes
 18809 ;; Hardware stack levels used:    1
 18810 ;; Hardware stack levels required when called:    6
 18811 ;; This function calls:
 18812 ;;		_TaskDetected
 18813 ;; This function is called by:
 18814 ;;		Interrupt level 1
 18815 ;; This function uses a non-reentrant model
 18816 ;;
 18817                           
 18818                           	psect	intcodelo
 18819  000018                     __pintcodelo:
 18820                           	callstack 0
 18821  000018                     _ISR_LowP:
 18822                           	callstack 11
 18823                           
 18824                           ;incstack = 0
 18825  000018  8048               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
 18826  00001A  CFD8 F011          	movff	status,??_ISR_LowP
 18827  00001E  CFE8 F012          	movff	wreg,??_ISR_LowP+1
 18828  000022  CFE0 F013          	movff	bsr,??_ISR_LowP+2
 18829  000026  CFD9 F014          	movff	fsr2l,??_ISR_LowP+3
 18830  00002A  CFDA F015          	movff	fsr2h,??_ISR_LowP+4
 18831  00002E  CFF3 F016          	movff	prodl,??_ISR_LowP+5
 18832  000032  CFF4 F017          	movff	prodh,??_ISR_LowP+6
 18833                           
 18834                           ;OS_Control.c: 111:     if(INTCONbits.TMR0IF == 1)
 18835  000036  A4F2               	btfss	242,2,c	;volatile
 18836  000038  D05C               	goto	i1l9536
 18837                           
 18838                           ;OS_Control.c: 112:     {;OS_Control.c: 114:         if(Timer_Task1 != 0 && !Fin_Cad) Ti
      +                          mer_Task1--;
 18839  00003A  0101               	movlb	1	; () banked
 18840  00003C  51E8               	movf	_Timer_Task1& (0+255),w,b
 18841  00003E  B4D8               	btfsc	status,2,c
 18842  000040  D003               	goto	i1l9478
 18843                           
 18844                           ; BSR set to: 1
 18845  000042  503B               	movf	_Fin_Cad^0,w,c
 18846  000044  B4D8               	btfsc	status,2,c
 18847                           
 18848                           ; BSR set to: 1
 18849  000046  07E8               	decf	_Timer_Task1& (0+255),f,b
 18850  000048                     i1l9478:
 18851                           
 18852                           ; BSR set to: 1
 18853                           ;OS_Control.c: 115:         if(Timer_Task2 != 0 && !Fin_Cad) Timer_Task2--;
 18854  000048  51E7               	movf	_Timer_Task2& (0+255),w,b
 18855  00004A  B4D8               	btfsc	status,2,c
 18856  00004C  D003               	goto	i1l9484
 18857                           
 18858                           ; BSR set to: 1
 18859  00004E  503B               	movf	_Fin_Cad^0,w,c
 18860  000050  B4D8               	btfsc	status,2,c
 18861                           
 18862                           ; BSR set to: 1
 18863  000052  07E7               	decf	_Timer_Task2& (0+255),f,b
 18864  000054                     i1l9484:
 18865                           
 18866                           ; BSR set to: 1
 18867                           ;OS_Control.c: 118:         if(Timer_Tec != 0 && !Fin_Cad) Timer_Tec--;
 18868  000054  51E6               	movf	_Timer_Tec& (0+255),w,b
 18869  000056  B4D8               	btfsc	status,2,c
 18870  000058  D003               	goto	i1l9490
 18871                           
 18872                           ; BSR set to: 1
 18873  00005A  503B               	movf	_Fin_Cad^0,w,c
 18874  00005C  B4D8               	btfsc	status,2,c
 18875                           
 18876                           ; BSR set to: 1
 18877  00005E  07E6               	decf	_Timer_Tec& (0+255),f,b
 18878  000060                     i1l9490:
 18879                           
 18880                           ; BSR set to: 1
 18881                           ;OS_Control.c: 119:         if(Timer_Rtc != 0 && mod_rtc == 0 && !Fin_Cad) Timer_Rtc--;
 18882  000060  51E4               	movf	_Timer_Rtc& (0+255),w,b
 18883  000062  11E5               	iorwf	(_Timer_Rtc+1)& (0+255),w,b
 18884  000064  B4D8               	btfsc	status,2,c
 18885  000066  D009               	goto	i1l9498
 18886                           
 18887                           ; BSR set to: 1
 18888  000068  5045               	movf	_mod_rtc^0,w,c
 18889  00006A  A4D8               	btfss	status,2,c
 18890  00006C  D006               	goto	i1l9498
 18891                           
 18892                           ; BSR set to: 1
 18893  00006E  503B               	movf	_Fin_Cad^0,w,c
 18894  000070  A4D8               	btfss	status,2,c
 18895  000072  D003               	goto	i1l9498
 18896                           
 18897                           ; BSR set to: 1
 18898  000074  07E4               	decf	_Timer_Rtc& (0+255),f,b
 18899  000076  A0D8               	btfss	status,0,c
 18900  000078  07E5               	decf	(_Timer_Rtc+1)& (0+255),f,b
 18901  00007A                     i1l9498:
 18902                           
 18903                           ; BSR set to: 1
 18904                           ;OS_Control.c: 122:         if(Timer_DelayLcd != 0) Timer_DelayLcd--;
 18905  00007A  51E2               	movf	_Timer_DelayLcd& (0+255),w,b
 18906  00007C  11E3               	iorwf	(_Timer_DelayLcd+1)& (0+255),w,b
 18907  00007E  B4D8               	btfsc	status,2,c
 18908  000080  D003               	goto	i1l9502
 18909                           
 18910                           ; BSR set to: 1
 18911  000082  07E2               	decf	_Timer_DelayLcd& (0+255),f,b
 18912  000084  A0D8               	btfss	status,0,c
 18913  000086  07E3               	decf	(_Timer_DelayLcd+1)& (0+255),f,b
 18914  000088                     i1l9502:
 18915                           
 18916                           ; BSR set to: 1
 18917                           ;OS_Control.c: 123:         if(Timer_DelayMuestra != 0) Timer_DelayMuestra--;
 18918  000088  51E0               	movf	_Timer_DelayMuestra& (0+255),w,b
 18919  00008A  11E1               	iorwf	(_Timer_DelayMuestra+1)& (0+255),w,b
 18920  00008C  B4D8               	btfsc	status,2,c
 18921  00008E  D003               	goto	i1l9506
 18922                           
 18923                           ; BSR set to: 1
 18924  000090  07E0               	decf	_Timer_DelayMuestra& (0+255),f,b
 18925  000092  A0D8               	btfss	status,0,c
 18926  000094  07E1               	decf	(_Timer_DelayMuestra+1)& (0+255),f,b
 18927  000096                     i1l9506:
 18928                           
 18929                           ; BSR set to: 1
 18930                           ;OS_Control.c: 126:         if(Timer_Puerta1 != 0 && puerta1) Timer_Puerta1--;
 18931  000096  51DE               	movf	_Timer_Puerta1& (0+255),w,b
 18932  000098  11DF               	iorwf	(_Timer_Puerta1+1)& (0+255),w,b
 18933  00009A  B4D8               	btfsc	status,2,c
 18934  00009C  D006               	goto	i1l9512
 18935                           
 18936                           ; BSR set to: 1
 18937  00009E  517E               	movf	_puerta1& (0+255),w,b
 18938  0000A0  B4D8               	btfsc	status,2,c
 18939  0000A2  D003               	goto	i1l9512
 18940                           
 18941                           ; BSR set to: 1
 18942  0000A4  07DE               	decf	_Timer_Puerta1& (0+255),f,b
 18943  0000A6  A0D8               	btfss	status,0,c
 18944  0000A8  07DF               	decf	(_Timer_Puerta1+1)& (0+255),f,b
 18945  0000AA                     i1l9512:
 18946                           
 18947                           ; BSR set to: 1
 18948                           ;OS_Control.c: 127:         if(Timer_Puerta2 != 0 && puerta2) Timer_Puerta2--;
 18949  0000AA  51DC               	movf	_Timer_Puerta2& (0+255),w,b
 18950  0000AC  11DD               	iorwf	(_Timer_Puerta2+1)& (0+255),w,b
 18951  0000AE  B4D8               	btfsc	status,2,c
 18952  0000B0  D006               	goto	i1l9518
 18953                           
 18954                           ; BSR set to: 1
 18955  0000B2  517D               	movf	_puerta2& (0+255),w,b
 18956  0000B4  B4D8               	btfsc	status,2,c
 18957  0000B6  D003               	goto	i1l9518
 18958                           
 18959                           ; BSR set to: 1
 18960  0000B8  07DC               	decf	_Timer_Puerta2& (0+255),f,b
 18961  0000BA  A0D8               	btfss	status,0,c
 18962  0000BC  07DD               	decf	(_Timer_Puerta2+1)& (0+255),f,b
 18963  0000BE                     i1l9518:
 18964                           
 18965                           ; BSR set to: 1
 18966                           ;OS_Control.c: 130:         if(Tarj_Dect == 1 && Timer_Hash != 0) Timer_Hash --;
 18967  0000BE  0585               	decf	_Tarj_Dect& (0+255),w,b
 18968  0000C0  A4D8               	btfss	status,2,c
 18969  0000C2  D007               	goto	i1l9524
 18970                           
 18971                           ; BSR set to: 1
 18972  0000C4  51DA               	movf	_Timer_Hash& (0+255),w,b
 18973  0000C6  11DB               	iorwf	(_Timer_Hash+1)& (0+255),w,b
 18974  0000C8  B4D8               	btfsc	status,2,c
 18975  0000CA  D003               	goto	i1l9524
 18976                           
 18977                           ; BSR set to: 1
 18978  0000CC  07DA               	decf	_Timer_Hash& (0+255),f,b
 18979  0000CE  A0D8               	btfss	status,0,c
 18980  0000D0  07DB               	decf	(_Timer_Hash+1)& (0+255),f,b
 18981  0000D2                     i1l9524:
 18982                           
 18983                           ; BSR set to: 1
 18984                           ;OS_Control.c: 133:         if(Timer_RX != 0 && !Fin_Cad) Timer_RX--;
 18985  0000D2  51D8               	movf	_Timer_RX& (0+255),w,b
 18986  0000D4  11D9               	iorwf	(_Timer_RX+1)& (0+255),w,b
 18987  0000D6  B4D8               	btfsc	status,2,c
 18988  0000D8  D006               	goto	i1l9530
 18989                           
 18990                           ; BSR set to: 1
 18991  0000DA  503B               	movf	_Fin_Cad^0,w,c
 18992  0000DC  A4D8               	btfss	status,2,c
 18993  0000DE  D003               	goto	i1l9530
 18994                           
 18995                           ; BSR set to: 1
 18996  0000E0  07D8               	decf	_Timer_RX& (0+255),f,b
 18997  0000E2  A0D8               	btfss	status,0,c
 18998  0000E4  07D9               	decf	(_Timer_RX+1)& (0+255),f,b
 18999  0000E6                     i1l9530:
 19000                           
 19001                           ; BSR set to: 1
 19002                           ;OS_Control.c: 135:         TMR0 = 65066;
 19003  0000E6  0EFE               	movlw	254
 19004  0000E8  6ED7               	movwf	215,c	;volatile
 19005  0000EA  0E2A               	movlw	42
 19006  0000EC  6ED6               	movwf	214,c	;volatile
 19007                           
 19008                           ; BSR set to: 1
 19009                           ;OS_Control.c: 138:         T0CONbits.TMR0ON = 1;
 19010  0000EE  8ED5               	bsf	213,7,c	;volatile
 19011                           
 19012                           ; BSR set to: 1
 19013                           ;OS_Control.c: 139:         INTCONbits.TMR0IF = 0;
 19014  0000F0  94F2               	bcf	242,2,c	;volatile
 19015  0000F2                     i1l9536:
 19016                           
 19017                           ;OS_Control.c: 143:     if(Timer_Task1==0 || Timer_Task2==0 || Timer_Tec==0 || Timer_Rtc
      +                          ==0 || Timer_Puerta1==0 || Timer_Puerta2==0 || Timer_Hash==0 || Timer_RX == 0) TaskDetec
      +                          ted();
 19018  0000F2  0101               	movlb	1	; () banked
 19019  0000F4  51E8               	movf	_Timer_Task1& (0+255),w,b
 19020  0000F6  B4D8               	btfsc	status,2,c
 19021  0000F8  D019               	goto	i1u818_20
 19022                           
 19023                           ; BSR set to: 1
 19024  0000FA  51E7               	movf	_Timer_Task2& (0+255),w,b
 19025  0000FC  B4D8               	btfsc	status,2,c
 19026  0000FE  D016               	goto	i1u818_20
 19027                           
 19028                           ; BSR set to: 1
 19029  000100  51E6               	movf	_Timer_Tec& (0+255),w,b
 19030  000102  B4D8               	btfsc	status,2,c
 19031  000104  D013               	goto	i1u818_20
 19032                           
 19033                           ; BSR set to: 1
 19034  000106  51E4               	movf	_Timer_Rtc& (0+255),w,b
 19035  000108  11E5               	iorwf	(_Timer_Rtc+1)& (0+255),w,b
 19036  00010A  B4D8               	btfsc	status,2,c
 19037  00010C  D00F               	goto	i1u818_20
 19038                           
 19039                           ; BSR set to: 1
 19040  00010E  51DE               	movf	_Timer_Puerta1& (0+255),w,b
 19041  000110  11DF               	iorwf	(_Timer_Puerta1+1)& (0+255),w,b
 19042  000112  B4D8               	btfsc	status,2,c
 19043  000114  D00B               	goto	i1u818_20
 19044                           
 19045                           ; BSR set to: 1
 19046  000116  51DC               	movf	_Timer_Puerta2& (0+255),w,b
 19047  000118  11DD               	iorwf	(_Timer_Puerta2+1)& (0+255),w,b
 19048  00011A  B4D8               	btfsc	status,2,c
 19049  00011C  D007               	goto	i1u818_20
 19050                           
 19051                           ; BSR set to: 1
 19052  00011E  51DA               	movf	_Timer_Hash& (0+255),w,b
 19053  000120  11DB               	iorwf	(_Timer_Hash+1)& (0+255),w,b
 19054  000122  B4D8               	btfsc	status,2,c
 19055  000124  D003               	goto	i1u818_20
 19056                           
 19057                           ; BSR set to: 1
 19058  000126  51D8               	movf	_Timer_RX& (0+255),w,b
 19059  000128  11D9               	iorwf	(_Timer_RX+1)& (0+255),w,b
 19060  00012A  B4D8               	btfsc	status,2,c
 19061  00012C                     i1u818_20:
 19062                           
 19063                           ; BSR set to: 1
 19064  00012C  EC4D  F01F         	call	_TaskDetected	;wreg free
 19065                           
 19066                           ; BSR set to: 1
 19067  000130  C017  FFF4         	movff	??_ISR_LowP+6,prodh
 19068  000134  C016  FFF3         	movff	??_ISR_LowP+5,prodl
 19069  000138  C015  FFDA         	movff	??_ISR_LowP+4,fsr2h
 19070  00013C  C014  FFD9         	movff	??_ISR_LowP+3,fsr2l
 19071  000140  C013  FFE0         	movff	??_ISR_LowP+2,bsr
 19072  000144  C012  FFE8         	movff	??_ISR_LowP+1,wreg
 19073  000148  C011  FFD8         	movff	??_ISR_LowP,status
 19074  00014C  9048               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
 19075  00014E  0010               	retfie	
 19076  000150                     __end_of_ISR_LowP:
 19077                           	callstack 0
 19078                           
 19079 ;; *************** function _TaskDetected *****************
 19080 ;; Defined at:
 19081 ;;		line 150 in file "OS_Control.c"
 19082 ;; Parameters:    Size  Location     Type
 19083 ;;		None
 19084 ;; Auto vars:     Size  Location     Type
 19085 ;;  i               1   15[COMRAM] unsigned char 
 19086 ;; Return value:  Size  Location     Type
 19087 ;;                  1    wreg      void 
 19088 ;; Registers used:
 19089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 19090 ;; Tracked objects:
 19091 ;;		On entry : 3F/1
 19092 ;;		On exit  : 3F/1
 19093 ;;		Unchanged: 0/0
 19094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19095 ;;      Params:         0       0       0       0       0       0       0       0       0
 19096 ;;      Locals:         1       0       0       0       0       0       0       0       0
 19097 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19098 ;;      Totals:         1       0       0       0       0       0       0       0       0
 19099 ;;Total ram usage:        1 bytes
 19100 ;; Hardware stack levels used:    1
 19101 ;; Hardware stack levels required when called:    5
 19102 ;; This function calls:
 19103 ;;		_RTC_read_date
 19104 ;;		_RTC_read_time
 19105 ;;		_escaneo
 19106 ;; This function is called by:
 19107 ;;		_ISR_LowP
 19108 ;; This function uses a non-reentrant model
 19109 ;;
 19110                           
 19111                           	psect	text88
 19112  003E9A                     __ptext88:
 19113                           	callstack 0
 19114  003E9A                     _TaskDetected:
 19115                           	callstack 11
 19116                           
 19117                           ; BSR set to: 1
 19118                           ;OS_Control.c: 152:     if(Timer_Task1 == 0)
 19119                           
 19120                           ; BSR set to: 1
 19121                           ;incstack = 0
 19122  003E9A  51E8               	movf	_Timer_Task1& (0+255),w,b
 19123  003E9C  A4D8               	btfss	status,2,c
 19124  003E9E  D004               	goto	i1l330
 19125                           
 19126                           ; BSR set to: 1
 19127                           ;OS_Control.c: 153:     {;OS_Control.c: 154:         Task1_Est = 1;
 19128  003EA0  0E01               	movlw	1
 19129  003EA2  6F81               	movwf	_Task1_Est& (0+255),b
 19130                           
 19131                           ;OS_Control.c: 155:         Running = 1;
 19132  003EA4  0E01               	movlw	1
 19133  003EA6  6F7F               	movwf	_Running& (0+255),b
 19134  003EA8                     i1l330:
 19135                           
 19136                           ; BSR set to: 1
 19137                           ;OS_Control.c: 157:     if(Timer_Task2 == 0)
 19138  003EA8  51E7               	movf	_Timer_Task2& (0+255),w,b
 19139  003EAA  A4D8               	btfss	status,2,c
 19140  003EAC  D004               	goto	i1l331
 19141                           
 19142                           ; BSR set to: 1
 19143                           ;OS_Control.c: 158:     {;OS_Control.c: 159:         Task2_Est = 1;
 19144  003EAE  0E01               	movlw	1
 19145  003EB0  6F80               	movwf	_Task2_Est& (0+255),b
 19146                           
 19147                           ;OS_Control.c: 160:         Running = 2;
 19148  003EB2  0E02               	movlw	2
 19149  003EB4  6F7F               	movwf	_Running& (0+255),b
 19150  003EB6                     i1l331:
 19151                           
 19152                           ; BSR set to: 1
 19153                           ;OS_Control.c: 162:     if(Timer_Tec == 0)
 19154  003EB6  51E6               	movf	_Timer_Tec& (0+255),w,b
 19155  003EB8  A4D8               	btfss	status,2,c
 19156  003EBA  D004               	goto	i1l9116
 19157                           
 19158                           ; BSR set to: 1
 19159                           ;OS_Control.c: 163:     {;OS_Control.c: 164:         escaneo();
 19160  003EBC  EC0D  F026         	call	_escaneo	;wreg free
 19161                           
 19162                           ; BSR set to: 1
 19163                           ;OS_Control.c: 165:         Timer_Tec = 7;
 19164  003EC0  0E07               	movlw	7
 19165  003EC2  6FE6               	movwf	_Timer_Tec& (0+255),b
 19166  003EC4                     i1l9116:
 19167                           
 19168                           ; BSR set to: 1
 19169                           ;OS_Control.c: 167:     if(Timer_Rtc == 0 && mod_rtc == 0 && !Read_Eeprom)
 19170  003EC4  51E4               	movf	_Timer_Rtc& (0+255),w,b
 19171  003EC6  11E5               	iorwf	(_Timer_Rtc+1)& (0+255),w,b
 19172  003EC8  A4D8               	btfss	status,2,c
 19173  003ECA  D00F               	goto	i1l9126
 19174                           
 19175                           ; BSR set to: 1
 19176  003ECC  5045               	movf	_mod_rtc^0,w,c
 19177  003ECE  A4D8               	btfss	status,2,c
 19178  003ED0  D00C               	goto	i1l9126
 19179                           
 19180                           ; BSR set to: 1
 19181  003ED2  517C               	movf	_Read_Eeprom& (0+255),w,b
 19182  003ED4  A4D8               	btfss	status,2,c
 19183  003ED6  D009               	goto	i1l9126
 19184                           
 19185                           ; BSR set to: 1
 19186                           ;OS_Control.c: 168:     {;OS_Control.c: 169:         RTC_read_time();
 19187  003ED8  EC0F  F020         	call	_RTC_read_time	;wreg free
 19188                           
 19189                           ;OS_Control.c: 170:         RTC_read_date();
 19190  003EDC  EC6D  F020         	call	_RTC_read_date	;wreg free
 19191                           
 19192                           ;OS_Control.c: 171:         Timer_Rtc = 100;
 19193  003EE0  0E00               	movlw	0
 19194  003EE2  0101               	movlb	1	; () banked
 19195  003EE4  6FE5               	movwf	(_Timer_Rtc+1)& (0+255),b
 19196  003EE6  0E64               	movlw	100
 19197  003EE8  6FE4               	movwf	_Timer_Rtc& (0+255),b
 19198  003EEA                     i1l9126:
 19199                           
 19200                           ; BSR set to: 1
 19201                           ;OS_Control.c: 173:     if(Timer_Puerta2 == 0)
 19202  003EEA  51DC               	movf	_Timer_Puerta2& (0+255),w,b
 19203  003EEC  11DD               	iorwf	(_Timer_Puerta2+1)& (0+255),w,b
 19204  003EEE  A4D8               	btfss	status,2,c
 19205  003EF0  D007               	goto	i1l9132
 19206                           
 19207                           ; BSR set to: 1
 19208                           ;OS_Control.c: 174:     {;OS_Control.c: 175:         LATEbits.LATE0 = 0;
 19209  003EF2  908D               	bcf	141,0,c	;volatile
 19210                           
 19211                           ; BSR set to: 1
 19212                           ;OS_Control.c: 176:         puerta2 = 0;
 19213  003EF4  0E00               	movlw	0
 19214  003EF6  6F7D               	movwf	_puerta2& (0+255),b
 19215                           
 19216                           ;OS_Control.c: 177:         Timer_Puerta2 = 700;
 19217  003EF8  0E02               	movlw	2
 19218  003EFA  6FDD               	movwf	(_Timer_Puerta2+1)& (0+255),b
 19219  003EFC  0EBC               	movlw	188
 19220  003EFE  6FDC               	movwf	_Timer_Puerta2& (0+255),b
 19221  003F00                     i1l9132:
 19222                           
 19223                           ; BSR set to: 1
 19224                           ;OS_Control.c: 179:     if(Timer_Puerta1 == 0)
 19225  003F00  51DE               	movf	_Timer_Puerta1& (0+255),w,b
 19226  003F02  11DF               	iorwf	(_Timer_Puerta1+1)& (0+255),w,b
 19227  003F04  A4D8               	btfss	status,2,c
 19228  003F06  D008               	goto	i1l9138
 19229                           
 19230                           ; BSR set to: 1
 19231                           ;OS_Control.c: 180:     {;OS_Control.c: 181:         LATEbits.LATE1 = 0;
 19232  003F08  928D               	bcf	141,1,c	;volatile
 19233                           
 19234                           ;OS_Control.c: 182:         LATEbits.LATE0 = 0;
 19235  003F0A  908D               	bcf	141,0,c	;volatile
 19236                           
 19237                           ; BSR set to: 1
 19238                           ;OS_Control.c: 183:         puerta1 = 0;
 19239  003F0C  0E00               	movlw	0
 19240  003F0E  6F7E               	movwf	_puerta1& (0+255),b
 19241                           
 19242                           ;OS_Control.c: 184:         Timer_Puerta1 = 700;
 19243  003F10  0E02               	movlw	2
 19244  003F12  6FDF               	movwf	(_Timer_Puerta1+1)& (0+255),b
 19245  003F14  0EBC               	movlw	188
 19246  003F16  6FDE               	movwf	_Timer_Puerta1& (0+255),b
 19247  003F18                     i1l9138:
 19248                           
 19249                           ; BSR set to: 1
 19250                           ;OS_Control.c: 186:     if(Timer_Hash == 0)
 19251  003F18  51DA               	movf	_Timer_Hash& (0+255),w,b
 19252  003F1A  11DB               	iorwf	(_Timer_Hash+1)& (0+255),w,b
 19253  003F1C  A4D8               	btfss	status,2,c
 19254  003F1E  D006               	goto	i1l9142
 19255                           
 19256                           ; BSR set to: 1
 19257                           ;OS_Control.c: 187:     {;OS_Control.c: 188:         Timer_Hash = 700;
 19258  003F20  0E02               	movlw	2
 19259  003F22  6FDB               	movwf	(_Timer_Hash+1)& (0+255),b
 19260  003F24  0EBC               	movlw	188
 19261  003F26  6FDA               	movwf	_Timer_Hash& (0+255),b
 19262                           
 19263                           ;OS_Control.c: 189:         Tarj_Dect = 0;
 19264  003F28  0E00               	movlw	0
 19265  003F2A  6F85               	movwf	_Tarj_Dect& (0+255),b
 19266  003F2C                     i1l9142:
 19267                           
 19268                           ; BSR set to: 1
 19269                           ;OS_Control.c: 191:     if(Timer_RX == 0)
 19270  003F2C  51D8               	movf	_Timer_RX& (0+255),w,b
 19271  003F2E  11D9               	iorwf	(_Timer_RX+1)& (0+255),w,b
 19272  003F30  A4D8               	btfss	status,2,c
 19273  003F32  0012               	return	
 19274                           
 19275                           ; BSR set to: 1
 19276                           ;OS_Control.c: 192:     {;OS_Control.c: 193:         Timer_RX = 20;
 19277  003F34  0E00               	movlw	0
 19278  003F36  6FD9               	movwf	(_Timer_RX+1)& (0+255),b
 19279  003F38  0E14               	movlw	20
 19280  003F3A  6FD8               	movwf	_Timer_RX& (0+255),b
 19281                           
 19282                           ;OS_Control.c: 194:         for(char i=0;i<20;i++) word[i] = 0;
 19283  003F3C  0E00               	movlw	0
 19284  003F3E  6E10               	movwf	TaskDetected@i^0,c
 19285  003F40                     i1l9150:
 19286                           
 19287                           ; BSR set to: 1
 19288  003F40  0EB4               	movlw	low _word
 19289  003F42  2410               	addwf	TaskDetected@i^0,w,c
 19290  003F44  6ED9               	movwf	fsr2l,c
 19291  003F46  6ADA               	clrf	fsr2h,c
 19292  003F48  0E01               	movlw	high _word
 19293  003F4A  22DA               	addwfc	fsr2h,f,c
 19294  003F4C  0E00               	movlw	0
 19295  003F4E  6EDF               	movwf	indf2,c
 19296                           
 19297                           ; BSR set to: 1
 19298  003F50  2A10               	incf	TaskDetected@i^0,f,c
 19299                           
 19300                           ; BSR set to: 1
 19301  003F52  0E13               	movlw	19
 19302  003F54  6410               	cpfsgt	TaskDetected@i^0,c
 19303  003F56  D7F4               	goto	i1l9150
 19304                           
 19305                           ; BSR set to: 1
 19306                           ;OS_Control.c: 195:         Fin_Cad = 0,long_cad = 0;
 19307  003F58  0E00               	movlw	0
 19308  003F5A  6E3B               	movwf	_Fin_Cad^0,c
 19309  003F5C  0E00               	movlw	0
 19310  003F5E  6F89               	movwf	_long_cad& (0+255),b
 19311                           
 19312                           ; BSR set to: 1
 19313  003F60  0012               	return		;funcret
 19314  003F62                     __end_of_TaskDetected:
 19315                           	callstack 0
 19316                           
 19317 ;; *************** function _escaneo *****************
 19318 ;; Defined at:
 19319 ;;		line 26 in file "TECLADO_4X4.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;		None
 19322 ;; Auto vars:     Size  Location     Type
 19323 ;;  i               1   12[COMRAM] unsigned char 
 19324 ;;  j               1   11[COMRAM] unsigned char 
 19325 ;; Return value:  Size  Location     Type
 19326 ;;                  1    wreg      void 
 19327 ;; Registers used:
 19328 ;;		wreg, status,2, status,0
 19329 ;; Tracked objects:
 19330 ;;		On entry : 3F/1
 19331 ;;		On exit  : 3F/1
 19332 ;;		Unchanged: 3F/0
 19333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19334 ;;      Params:         0       0       0       0       0       0       0       0       0
 19335 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19336 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19337 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19338 ;;Total ram usage:        2 bytes
 19339 ;; Hardware stack levels used:    1
 19340 ;; Hardware stack levels required when called:    2
 19341 ;; This function calls:
 19342 ;;		Nothing
 19343 ;; This function is called by:
 19344 ;;		_TaskDetected
 19345 ;; This function uses a non-reentrant model
 19346 ;;
 19347                           
 19348                           	psect	text89
 19349  004C1A                     __ptext89:
 19350                           	callstack 0
 19351  004C1A                     _escaneo:
 19352                           	callstack 13
 19353                           
 19354                           ; BSR set to: 1
 19355                           ;TECLADO_4X4.c: 28:     LATAbits.LA0 = 0;
 19356                           
 19357                           ; BSR set to: 1
 19358                           ;incstack = 0
 19359  004C1A  9089               	bcf	137,0,c	;volatile
 19360                           
 19361                           ;TECLADO_4X4.c: 29:     LATAbits.LA1 = 1;
 19362  004C1C  8289               	bsf	137,1,c	;volatile
 19363                           
 19364                           ;TECLADO_4X4.c: 30:     LATAbits.LA2 = 1;
 19365  004C1E  8489               	bsf	137,2,c	;volatile
 19366                           
 19367                           ;TECLADO_4X4.c: 31:     LATAbits.LA3 = 1;
 19368  004C20  8689               	bsf	137,3,c	;volatile
 19369                           
 19370                           ; BSR set to: 1
 19371                           ;TECLADO_4X4.c: 32:     for(char j=0;j<4;j++)
 19372  004C22  0E00               	movlw	0
 19373  004C24  6E0C               	movwf	escaneo@j^0,c
 19374  004C26                     i1l8210:
 19375                           
 19376                           ; BSR set to: 1
 19377                           ;TECLADO_4X4.c: 33:     {;TECLADO_4X4.c: 34:         for(char i=0;i<=4;i++)
 19378  004C26  0E00               	movlw	0
 19379  004C28  6E0D               	movwf	escaneo@i^0,c
 19380  004C2A                     i1l370:
 19381                           
 19382                           ; BSR set to: 1
 19383                           ;TECLADO_4X4.c: 35:         {;TECLADO_4X4.c: 36:             if(!PORTAbits.RA0 && i==0)
 19384  004C2A  B080               	btfsc	128,0,c	;volatile
 19385  004C2C  D005               	goto	i1l372
 19386                           
 19387                           ; BSR set to: 1
 19388  004C2E  500D               	movf	escaneo@i^0,w,c
 19389  004C30  A4D8               	btfss	status,2,c
 19390  004C32  D002               	goto	i1l372
 19391                           
 19392                           ; BSR set to: 1
 19393                           ;TECLADO_4X4.c: 37:             {;TECLADO_4X4.c: 38:                 LATAbits.LA0 = 1;
 19394  004C34  8089               	bsf	137,0,c	;volatile
 19395                           
 19396                           ;TECLADO_4X4.c: 39:                 LATAbits.LA1 = 0;
 19397  004C36  9289               	bcf	137,1,c	;volatile
 19398  004C38                     i1l372:
 19399                           
 19400                           ; BSR set to: 1
 19401                           ;TECLADO_4X4.c: 41:             if(!PORTAbits.RA1 && i==1)
 19402  004C38  B280               	btfsc	128,1,c	;volatile
 19403  004C3A  D005               	goto	i1l373
 19404                           
 19405                           ; BSR set to: 1
 19406  004C3C  040D               	decf	escaneo@i^0,w,c
 19407  004C3E  A4D8               	btfss	status,2,c
 19408  004C40  D002               	goto	i1l373
 19409                           
 19410                           ; BSR set to: 1
 19411                           ;TECLADO_4X4.c: 42:             {;TECLADO_4X4.c: 43:                 LATAbits.LA1 = 1;
 19412  004C42  8289               	bsf	137,1,c	;volatile
 19413                           
 19414                           ;TECLADO_4X4.c: 44:                 LATAbits.LA2 = 0;
 19415  004C44  9489               	bcf	137,2,c	;volatile
 19416  004C46                     i1l373:
 19417                           
 19418                           ; BSR set to: 1
 19419                           ;TECLADO_4X4.c: 46:             if(!PORTAbits.RA2 && i==2)
 19420  004C46  B480               	btfsc	128,2,c	;volatile
 19421  004C48  D006               	goto	i1l374
 19422                           
 19423                           ; BSR set to: 1
 19424  004C4A  0E02               	movlw	2
 19425  004C4C  180D               	xorwf	escaneo@i^0,w,c
 19426  004C4E  A4D8               	btfss	status,2,c
 19427  004C50  D002               	goto	i1l374
 19428                           
 19429                           ; BSR set to: 1
 19430                           ;TECLADO_4X4.c: 47:             {;TECLADO_4X4.c: 48:                 LATAbits.LA2 = 1;
 19431  004C52  8489               	bsf	137,2,c	;volatile
 19432                           
 19433                           ;TECLADO_4X4.c: 49:                 LATAbits.LA3 = 0;
 19434  004C54  9689               	bcf	137,3,c	;volatile
 19435  004C56                     i1l374:
 19436                           
 19437                           ; BSR set to: 1
 19438                           ;TECLADO_4X4.c: 51:             if(!PORTAbits.RA3 && i==4)
 19439  004C56  B680               	btfsc	128,3,c	;volatile
 19440  004C58  D004               	goto	i1l8232
 19441                           
 19442                           ; BSR set to: 1
 19443  004C5A  0E04               	movlw	4
 19444  004C5C  180D               	xorwf	escaneo@i^0,w,c
 19445  004C5E  B4D8               	btfsc	status,2,c
 19446                           
 19447                           ; BSR set to: 1
 19448                           ;TECLADO_4X4.c: 52:             {;TECLADO_4X4.c: 53:                 LATAbits.LA3 = 1;
 19449  004C60  8689               	bsf	137,3,c	;volatile
 19450  004C62                     i1l8232:
 19451                           
 19452                           ; BSR set to: 1
 19453                           ;TECLADO_4X4.c: 55:         }
 19454  004C62  2A0D               	incf	escaneo@i^0,f,c
 19455                           
 19456                           ; BSR set to: 1
 19457  004C64  0E04               	movlw	4
 19458  004C66  640D               	cpfsgt	escaneo@i^0,c
 19459  004C68  D7E0               	goto	i1l370
 19460                           
 19461                           ; BSR set to: 1
 19462                           ;TECLADO_4X4.c: 56:     }
 19463  004C6A  2A0C               	incf	escaneo@j^0,f,c
 19464                           
 19465                           ; BSR set to: 1
 19466  004C6C  0E03               	movlw	3
 19467  004C6E  640C               	cpfsgt	escaneo@j^0,c
 19468  004C70  D7DA               	goto	i1l8210
 19469  004C72  0012               	return	
 19470  004C74                     __end_of_escaneo:
 19471                           	callstack 0
 19472                           
 19473 ;; *************** function _RTC_read_time *****************
 19474 ;; Defined at:
 19475 ;;		line 79 in file "RTC_3231.c"
 19476 ;; Parameters:    Size  Location     Type
 19477 ;;		None
 19478 ;; Auto vars:     Size  Location     Type
 19479 ;;  aux2            1   14[COMRAM] unsigned char 
 19480 ;;  aux1            1   13[COMRAM] unsigned char 
 19481 ;; Return value:  Size  Location     Type
 19482 ;;                  1    wreg      void 
 19483 ;; Registers used:
 19484 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19485 ;; Tracked objects:
 19486 ;;		On entry : 3F/1
 19487 ;;		On exit  : 0/0
 19488 ;;		Unchanged: 0/0
 19489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19490 ;;      Params:         0       0       0       0       0       0       0       0       0
 19491 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19492 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19493 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19494 ;;Total ram usage:        2 bytes
 19495 ;; Hardware stack levels used:    1
 19496 ;; Hardware stack levels required when called:    4
 19497 ;; This function calls:
 19498 ;;		i1_i2c_nack
 19499 ;;		i1_i2c_read
 19500 ;;		i1_i2c_restart
 19501 ;;		i1_i2c_start
 19502 ;;		i1_i2c_stop
 19503 ;;		i1_i2c_write
 19504 ;; This function is called by:
 19505 ;;		_TaskDetected
 19506 ;; This function uses a non-reentrant model
 19507 ;;
 19508                           
 19509                           	psect	text90
 19510  00401E                     __ptext90:
 19511                           	callstack 0
 19512  00401E                     _RTC_read_time:
 19513                           	callstack 11
 19514                           
 19515                           ; BSR set to: 1
 19516                           ;RTC_3231.c: 81:     char aux1,aux2;;RTC_3231.c: 85:     i2c_start();
 19517                           
 19518                           ; BSR set to: 1
 19519                           ;incstack = 0
 19520  00401E  ECD1  F029         	call	i1_i2c_start	;wreg free
 19521                           
 19522                           ;RTC_3231.c: 86:     i2c_write(0xD0);
 19523  004022  0ED0               	movlw	208
 19524  004024  ECE0  F024         	call	i1_i2c_write
 19525                           
 19526                           ;RTC_3231.c: 87:     i2c_write(0x00);
 19527  004028  0E00               	movlw	0
 19528  00402A  ECE0  F024         	call	i1_i2c_write
 19529                           
 19530                           ;RTC_3231.c: 90:     i2c_restart();
 19531  00402E  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19532                           
 19533                           ;RTC_3231.c: 91:     i2c_write(0xD1);
 19534  004032  0ED1               	movlw	209
 19535  004034  ECE0  F024         	call	i1_i2c_write
 19536                           
 19537                           ;RTC_3231.c: 92:     seg = i2c_read();
 19538  004038  ECBC  F027         	call	i1_i2c_read	;wreg free
 19539  00403C  6E42               	movwf	_seg^0,c
 19540                           
 19541                           ;RTC_3231.c: 95:     i2c_nack();
 19542  00403E  EC66  F029         	call	i1_i2c_nack	;wreg free
 19543                           
 19544                           ;RTC_3231.c: 96:     i2c_stop();
 19545  004042  EC53  F029         	call	i1_i2c_stop	;wreg free
 19546                           
 19547                           ;RTC_3231.c: 101:     i2c_start();
 19548  004046  ECD1  F029         	call	i1_i2c_start	;wreg free
 19549                           
 19550                           ;RTC_3231.c: 102:     i2c_write(0xD0);
 19551  00404A  0ED0               	movlw	208
 19552  00404C  ECE0  F024         	call	i1_i2c_write
 19553                           
 19554                           ;RTC_3231.c: 103:     i2c_write(0x01);
 19555  004050  0E01               	movlw	1
 19556  004052  ECE0  F024         	call	i1_i2c_write
 19557                           
 19558                           ;RTC_3231.c: 106:     i2c_restart();
 19559  004056  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19560                           
 19561                           ;RTC_3231.c: 107:     i2c_write(0xD1);
 19562  00405A  0ED1               	movlw	209
 19563  00405C  ECE0  F024         	call	i1_i2c_write
 19564                           
 19565                           ;RTC_3231.c: 108:     min = i2c_read();
 19566  004060  ECBC  F027         	call	i1_i2c_read	;wreg free
 19567  004064  6E43               	movwf	_min^0,c
 19568                           
 19569                           ;RTC_3231.c: 111:     i2c_nack();
 19570  004066  EC66  F029         	call	i1_i2c_nack	;wreg free
 19571                           
 19572                           ;RTC_3231.c: 112:     i2c_stop();
 19573  00406A  EC53  F029         	call	i1_i2c_stop	;wreg free
 19574                           
 19575                           ;RTC_3231.c: 117:     i2c_start();
 19576  00406E  ECD1  F029         	call	i1_i2c_start	;wreg free
 19577                           
 19578                           ;RTC_3231.c: 118:     i2c_write(0xD0);
 19579  004072  0ED0               	movlw	208
 19580  004074  ECE0  F024         	call	i1_i2c_write
 19581                           
 19582                           ;RTC_3231.c: 119:     i2c_write(0x02);
 19583  004078  0E02               	movlw	2
 19584  00407A  ECE0  F024         	call	i1_i2c_write
 19585                           
 19586                           ;RTC_3231.c: 122:     i2c_restart();
 19587  00407E  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19588                           
 19589                           ;RTC_3231.c: 123:     i2c_write(0xD1);
 19590  004082  0ED1               	movlw	209
 19591  004084  ECE0  F024         	call	i1_i2c_write
 19592                           
 19593                           ;RTC_3231.c: 124:     hora = i2c_read();
 19594  004088  ECBC  F027         	call	i1_i2c_read	;wreg free
 19595  00408C  6E44               	movwf	_hora^0,c
 19596                           
 19597                           ;RTC_3231.c: 127:     i2c_nack();
 19598  00408E  EC66  F029         	call	i1_i2c_nack	;wreg free
 19599                           
 19600                           ;RTC_3231.c: 128:     i2c_stop();
 19601  004092  EC53  F029         	call	i1_i2c_stop	;wreg free
 19602                           
 19603                           ;RTC_3231.c: 134:     aux1 = (seg >> 4) * 10;
 19604  004096  3842               	swapf	_seg^0,w,c
 19605  004098  0B0F               	andlw	15
 19606  00409A  0D0A               	mullw	10
 19607  00409C  CFF3 F00E          	movff	prodl,RTC_read_time@aux1
 19608                           
 19609                           ;RTC_3231.c: 135:     aux2 = seg & 0x0F;
 19610  0040A0  5042               	movf	_seg^0,w,c
 19611  0040A2  0B0F               	andlw	15
 19612  0040A4  6E0F               	movwf	RTC_read_time@aux2^0,c
 19613                           
 19614                           ;RTC_3231.c: 136:     seg = aux1 + aux2;
 19615  0040A6  500E               	movf	RTC_read_time@aux1^0,w,c
 19616  0040A8  240F               	addwf	RTC_read_time@aux2^0,w,c
 19617  0040AA  6E42               	movwf	_seg^0,c
 19618                           
 19619                           ;RTC_3231.c: 139:     aux1 = (min >> 4) * 10;
 19620  0040AC  3843               	swapf	_min^0,w,c
 19621  0040AE  0B0F               	andlw	15
 19622  0040B0  0D0A               	mullw	10
 19623  0040B2  CFF3 F00E          	movff	prodl,RTC_read_time@aux1
 19624                           
 19625                           ;RTC_3231.c: 140:     aux2 = min & 0x0F;
 19626  0040B6  5043               	movf	_min^0,w,c
 19627  0040B8  0B0F               	andlw	15
 19628  0040BA  6E0F               	movwf	RTC_read_time@aux2^0,c
 19629                           
 19630                           ;RTC_3231.c: 141:     min = aux1 + aux2;
 19631  0040BC  500E               	movf	RTC_read_time@aux1^0,w,c
 19632  0040BE  240F               	addwf	RTC_read_time@aux2^0,w,c
 19633  0040C0  6E43               	movwf	_min^0,c
 19634                           
 19635                           ;RTC_3231.c: 144:     aux1 = (hora >> 4) * 10;
 19636  0040C2  3844               	swapf	_hora^0,w,c
 19637  0040C4  0B0F               	andlw	15
 19638  0040C6  0D0A               	mullw	10
 19639  0040C8  CFF3 F00E          	movff	prodl,RTC_read_time@aux1
 19640                           
 19641                           ;RTC_3231.c: 145:     aux2 = hora & 0x0F;
 19642  0040CC  5044               	movf	_hora^0,w,c
 19643  0040CE  0B0F               	andlw	15
 19644  0040D0  6E0F               	movwf	RTC_read_time@aux2^0,c
 19645                           
 19646                           ;RTC_3231.c: 146:     hora = aux1 + aux2;
 19647  0040D2  500E               	movf	RTC_read_time@aux1^0,w,c
 19648  0040D4  240F               	addwf	RTC_read_time@aux2^0,w,c
 19649  0040D6  6E44               	movwf	_hora^0,c
 19650  0040D8  0012               	return		;funcret
 19651  0040DA                     __end_of_RTC_read_time:
 19652                           	callstack 0
 19653                           
 19654 ;; *************** function _RTC_read_date *****************
 19655 ;; Defined at:
 19656 ;;		line 150 in file "RTC_3231.c"
 19657 ;; Parameters:    Size  Location     Type
 19658 ;;		None
 19659 ;; Auto vars:     Size  Location     Type
 19660 ;;  aux2            1   14[COMRAM] unsigned char 
 19661 ;;  aux1            1   13[COMRAM] unsigned char 
 19662 ;; Return value:  Size  Location     Type
 19663 ;;                  1    wreg      void 
 19664 ;; Registers used:
 19665 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 19666 ;; Tracked objects:
 19667 ;;		On entry : 0/1
 19668 ;;		On exit  : 0/0
 19669 ;;		Unchanged: 0/0
 19670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19671 ;;      Params:         0       0       0       0       0       0       0       0       0
 19672 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19673 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19674 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19675 ;;Total ram usage:        2 bytes
 19676 ;; Hardware stack levels used:    1
 19677 ;; Hardware stack levels required when called:    4
 19678 ;; This function calls:
 19679 ;;		i1_i2c_nack
 19680 ;;		i1_i2c_read
 19681 ;;		i1_i2c_restart
 19682 ;;		i1_i2c_start
 19683 ;;		i1_i2c_stop
 19684 ;;		i1_i2c_write
 19685 ;; This function is called by:
 19686 ;;		_TaskDetected
 19687 ;; This function uses a non-reentrant model
 19688 ;;
 19689                           
 19690                           	psect	text91
 19691  0040DA                     __ptext91:
 19692                           	callstack 0
 19693  0040DA                     _RTC_read_date:
 19694                           	callstack 11
 19695                           
 19696                           ;RTC_3231.c: 152:     char aux1,aux2;;RTC_3231.c: 155:     i2c_start();
 19697                           
 19698                           ;incstack = 0
 19699  0040DA  ECD1  F029         	call	i1_i2c_start	;wreg free
 19700                           
 19701                           ;RTC_3231.c: 156:     i2c_write(0xD0);
 19702  0040DE  0ED0               	movlw	208
 19703  0040E0  ECE0  F024         	call	i1_i2c_write
 19704                           
 19705                           ;RTC_3231.c: 157:     i2c_write(0x04);
 19706  0040E4  0E04               	movlw	4
 19707  0040E6  ECE0  F024         	call	i1_i2c_write
 19708                           
 19709                           ;RTC_3231.c: 159:     i2c_restart();
 19710  0040EA  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19711                           
 19712                           ;RTC_3231.c: 160:     i2c_write(0xD1);
 19713  0040EE  0ED1               	movlw	209
 19714  0040F0  ECE0  F024         	call	i1_i2c_write
 19715                           
 19716                           ;RTC_3231.c: 161:     dia = i2c_read();
 19717  0040F4  ECBC  F027         	call	i1_i2c_read	;wreg free
 19718  0040F8  6E41               	movwf	_dia^0,c
 19719                           
 19720                           ;RTC_3231.c: 163:     i2c_nack();
 19721  0040FA  EC66  F029         	call	i1_i2c_nack	;wreg free
 19722                           
 19723                           ;RTC_3231.c: 164:     i2c_stop();
 19724  0040FE  EC53  F029         	call	i1_i2c_stop	;wreg free
 19725                           
 19726                           ;RTC_3231.c: 168:     i2c_start();
 19727  004102  ECD1  F029         	call	i1_i2c_start	;wreg free
 19728                           
 19729                           ;RTC_3231.c: 169:     i2c_write(0xD0);
 19730  004106  0ED0               	movlw	208
 19731  004108  ECE0  F024         	call	i1_i2c_write
 19732                           
 19733                           ;RTC_3231.c: 170:     i2c_write(0x05);
 19734  00410C  0E05               	movlw	5
 19735  00410E  ECE0  F024         	call	i1_i2c_write
 19736                           
 19737                           ;RTC_3231.c: 172:     i2c_restart();
 19738  004112  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19739                           
 19740                           ;RTC_3231.c: 173:     i2c_write(0xD1);
 19741  004116  0ED1               	movlw	209
 19742  004118  ECE0  F024         	call	i1_i2c_write
 19743                           
 19744                           ;RTC_3231.c: 174:     mes = i2c_read();
 19745  00411C  ECBC  F027         	call	i1_i2c_read	;wreg free
 19746  004120  6E40               	movwf	_mes^0,c
 19747                           
 19748                           ;RTC_3231.c: 176:     i2c_nack();
 19749  004122  EC66  F029         	call	i1_i2c_nack	;wreg free
 19750                           
 19751                           ;RTC_3231.c: 177:     i2c_stop();
 19752  004126  EC53  F029         	call	i1_i2c_stop	;wreg free
 19753                           
 19754                           ;RTC_3231.c: 181:     i2c_start();
 19755  00412A  ECD1  F029         	call	i1_i2c_start	;wreg free
 19756                           
 19757                           ;RTC_3231.c: 182:     i2c_write(0xD0);
 19758  00412E  0ED0               	movlw	208
 19759  004130  ECE0  F024         	call	i1_i2c_write
 19760                           
 19761                           ;RTC_3231.c: 183:     i2c_write(0x06);
 19762  004134  0E06               	movlw	6
 19763  004136  ECE0  F024         	call	i1_i2c_write
 19764                           
 19765                           ;RTC_3231.c: 185:     i2c_restart();
 19766  00413A  EC41  F02A         	call	i1_i2c_restart	;wreg free
 19767                           
 19768                           ;RTC_3231.c: 186:     i2c_write(0xD1);
 19769  00413E  0ED1               	movlw	209
 19770  004140  ECE0  F024         	call	i1_i2c_write
 19771                           
 19772                           ;RTC_3231.c: 187:     year = i2c_read();
 19773  004144  ECBC  F027         	call	i1_i2c_read	;wreg free
 19774  004148  6E3F               	movwf	_year^0,c
 19775                           
 19776                           ;RTC_3231.c: 189:     i2c_nack();
 19777  00414A  EC66  F029         	call	i1_i2c_nack	;wreg free
 19778                           
 19779                           ;RTC_3231.c: 190:     i2c_stop();
 19780  00414E  EC53  F029         	call	i1_i2c_stop	;wreg free
 19781                           
 19782                           ;RTC_3231.c: 196:     aux1 = (dia >> 4) * 10;
 19783  004152  3841               	swapf	_dia^0,w,c
 19784  004154  0B0F               	andlw	15
 19785  004156  0D0A               	mullw	10
 19786  004158  CFF3 F00E          	movff	prodl,RTC_read_date@aux1
 19787                           
 19788                           ;RTC_3231.c: 197:     aux2 = dia & 0x0F;
 19789  00415C  5041               	movf	_dia^0,w,c
 19790  00415E  0B0F               	andlw	15
 19791  004160  6E0F               	movwf	RTC_read_date@aux2^0,c
 19792                           
 19793                           ;RTC_3231.c: 198:     dia = aux1 + aux2;
 19794  004162  500E               	movf	RTC_read_date@aux1^0,w,c
 19795  004164  240F               	addwf	RTC_read_date@aux2^0,w,c
 19796  004166  6E41               	movwf	_dia^0,c
 19797                           
 19798                           ;RTC_3231.c: 201:     aux1 = (mes >> 4) * 10;
 19799  004168  3840               	swapf	_mes^0,w,c
 19800  00416A  0B0F               	andlw	15
 19801  00416C  0D0A               	mullw	10
 19802  00416E  CFF3 F00E          	movff	prodl,RTC_read_date@aux1
 19803                           
 19804                           ;RTC_3231.c: 202:     aux2 = mes & 0x0F;
 19805  004172  5040               	movf	_mes^0,w,c
 19806  004174  0B0F               	andlw	15
 19807  004176  6E0F               	movwf	RTC_read_date@aux2^0,c
 19808                           
 19809                           ;RTC_3231.c: 203:     mes = aux1 + aux2;
 19810  004178  500E               	movf	RTC_read_date@aux1^0,w,c
 19811  00417A  240F               	addwf	RTC_read_date@aux2^0,w,c
 19812  00417C  6E40               	movwf	_mes^0,c
 19813                           
 19814                           ;RTC_3231.c: 206:     aux1 = (year >> 4) * 10;
 19815  00417E  383F               	swapf	_year^0,w,c
 19816  004180  0B0F               	andlw	15
 19817  004182  0D0A               	mullw	10
 19818  004184  CFF3 F00E          	movff	prodl,RTC_read_date@aux1
 19819                           
 19820                           ;RTC_3231.c: 207:     aux2 = year & 0x0F;
 19821  004188  503F               	movf	_year^0,w,c
 19822  00418A  0B0F               	andlw	15
 19823  00418C  6E0F               	movwf	RTC_read_date@aux2^0,c
 19824                           
 19825                           ;RTC_3231.c: 208:     year = aux1 + aux2;
 19826  00418E  500E               	movf	RTC_read_date@aux1^0,w,c
 19827  004190  240F               	addwf	RTC_read_date@aux2^0,w,c
 19828  004192  6E3F               	movwf	_year^0,c
 19829  004194  0012               	return		;funcret
 19830  004196                     __end_of_RTC_read_date:
 19831                           	callstack 0
 19832                           
 19833 ;; *************** function i1_i2c_write *****************
 19834 ;; Defined at:
 19835 ;;		line 61 in file "SOFT_I2C.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;  date            1    wreg     unsigned char 
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;  date            1   11[COMRAM] unsigned char 
 19840 ;;  i               1   12[COMRAM] unsigned char 
 19841 ;; Return value:  Size  Location     Type
 19842 ;;                  1    wreg      void 
 19843 ;; Registers used:
 19844 ;;		wreg, status,2, status,0
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/1
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0
 19851 ;;      Locals:         2       0       0       0       0       0       0       0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0       0       0
 19853 ;;      Totals:         2       0       0       0       0       0       0       0       0
 19854 ;;Total ram usage:        2 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    2
 19857 ;; This function calls:
 19858 ;;		Nothing
 19859 ;; This function is called by:
 19860 ;;		_RTC_read_time
 19861 ;;		_RTC_read_date
 19862 ;; This function uses a non-reentrant model
 19863 ;;
 19864                           
 19865                           	psect	text92
 19866  0049C0                     __ptext92:
 19867                           	callstack 0
 19868  0049C0                     i1_i2c_write:
 19869                           	callstack 12
 19870                           
 19871                           ;incstack = 0
 19872                           ;i1i2c_write@date stored from wreg
 19873  0049C0  6E0C               	movwf	i1i2c_write@date^0,c
 19874                           
 19875                           ;SOFT_I2C.c: 61: void i2c_write(char date);SOFT_I2C.c: 62: {;SOFT_I2C.c: 64:     ACK_EST
      +                           = 1;
 19876  0049C2  0E01               	movlw	1
 19877  0049C4  0101               	movlb	1	; () banked
 19878  0049C6  6F92               	movwf	_ACK_EST& (0+255),b
 19879                           
 19880                           ; BSR set to: 1
 19881                           ;SOFT_I2C.c: 66:     if(PORTCbits.RC1 == 1)
 19882  0049C8  A282               	btfss	130,1,c	;volatile
 19883  0049CA  D002               	goto	i1l8100
 19884                           
 19885                           ; BSR set to: 1
 19886                           ;SOFT_I2C.c: 67:     {;SOFT_I2C.c: 68:         PORTCbits.RC1 = 0;
 19887  0049CC  9282               	bcf	130,1,c	;volatile
 19888                           
 19889                           ;SOFT_I2C.c: 69:         TRISCbits.TRISC1 = 0;
 19890  0049CE  9294               	bcf	148,1,c	;volatile
 19891  0049D0                     i1l8100:
 19892                           
 19893                           ; BSR set to: 1
 19894                           ;SOFT_I2C.c: 71:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 19895  0049D0  0E14               	movlw	20
 19896  0049D2                     i1u1178_27:
 19897  0049D2  2EE8               	decfsz	wreg,f,c
 19898  0049D4  D7FE               	bra	i1u1178_27
 19899                           
 19900                           ;SOFT_I2C.c: 73:     for(char i=0;i<8;i++)
 19901  0049D6  0E00               	movlw	0
 19902  0049D8  6E0D               	movwf	i1i2c_write@i^0,c
 19903  0049DA                     i1l61:
 19904                           
 19905                           ;SOFT_I2C.c: 74:     {;SOFT_I2C.c: 75:         if((date & 0x80) == 0)
 19906  0049DA  BE0C               	btfsc	i1i2c_write@date^0,7,c
 19907  0049DC  D003               	goto	i1l63
 19908                           
 19909                           ;SOFT_I2C.c: 76:         {;SOFT_I2C.c: 77:             PORTCbits.RC0 = 0;
 19910  0049DE  9082               	bcf	130,0,c	;volatile
 19911                           
 19912                           ;SOFT_I2C.c: 78:             TRISCbits.TRISC0 = 0;
 19913  0049E0  9094               	bcf	148,0,c	;volatile
 19914                           
 19915                           ;SOFT_I2C.c: 79:         }
 19916  0049E2  D001               	goto	i1l8110
 19917  0049E4                     i1l63:
 19918  0049E4  8094               	bsf	148,0,c	;volatile
 19919  0049E6                     i1l8110:
 19920                           
 19921                           ;SOFT_I2C.c: 82:         date <<= 1;
 19922  0049E6  90D8               	bcf	status,0,c
 19923  0049E8  360C               	rlcf	i1i2c_write@date^0,f,c
 19924                           
 19925                           ;SOFT_I2C.c: 85:         _delay((unsigned long)((2)*(48000000/4000000.0)));
 19926  0049EA  0E08               	movlw	8
 19927  0049EC                     i1u1179_27:
 19928  0049EC  2EE8               	decfsz	wreg,f,c
 19929  0049EE  D7FE               	bra	i1u1179_27
 19930                           
 19931                           ;SOFT_I2C.c: 86:         TRISCbits.TRISC1 = 1;
 19932  0049F0  8294               	bsf	148,1,c	;volatile
 19933                           
 19934                           ;SOFT_I2C.c: 87:         _delay((unsigned long)((3)*(48000000/4000000.0)));
 19935  0049F2  0E0C               	movlw	12
 19936  0049F4                     i1u1180_27:
 19937  0049F4  2EE8               	decfsz	wreg,f,c
 19938  0049F6  D7FE               	bra	i1u1180_27
 19939                           
 19940                           ;SOFT_I2C.c: 89:         TRISCbits.TRISC1 = 0;
 19941  0049F8  9294               	bcf	148,1,c	;volatile
 19942                           
 19943                           ;SOFT_I2C.c: 90:         PORTCbits.RC1 = 0;
 19944  0049FA  9282               	bcf	130,1,c	;volatile
 19945                           
 19946                           ;SOFT_I2C.c: 91:         _delay((unsigned long)((5)*(48000000/4000000.0)));
 19947  0049FC  0E14               	movlw	20
 19948  0049FE                     i1u1181_27:
 19949  0049FE  2EE8               	decfsz	wreg,f,c
 19950  004A00  D7FE               	bra	i1u1181_27
 19951                           
 19952                           ;SOFT_I2C.c: 92:     }
 19953  004A02  2A0D               	incf	i1i2c_write@i^0,f,c
 19954  004A04  0E07               	movlw	7
 19955  004A06  640D               	cpfsgt	i1i2c_write@i^0,c
 19956  004A08  D7E8               	goto	i1l61
 19957                           
 19958                           ;SOFT_I2C.c: 95:     TRISCbits.TRISC0 = 1;
 19959  004A0A  8094               	bsf	148,0,c	;volatile
 19960                           
 19961                           ;SOFT_I2C.c: 96:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 19962  004A0C  0E08               	movlw	8
 19963  004A0E                     i1u1182_27:
 19964  004A0E  2EE8               	decfsz	wreg,f,c
 19965  004A10  D7FE               	bra	i1u1182_27
 19966                           
 19967                           ;SOFT_I2C.c: 97:     TRISCbits.TRISC1 = 1;
 19968  004A12  8294               	bsf	148,1,c	;volatile
 19969                           
 19970                           ;SOFT_I2C.c: 98:     ACK_EST = PORTCbits.RC0;
 19971  004A14  A082               	btfss	130,0,c	;volatile
 19972  004A16  D002               	goto	i1u591_20
 19973  004A18  0E01               	movlw	1
 19974  004A1A  D001               	goto	i1u591_26
 19975  004A1C                     i1u591_20:
 19976  004A1C  0E00               	movlw	0
 19977  004A1E                     i1u591_26:
 19978  004A1E  0101               	movlb	1	; () banked
 19979  004A20  6F92               	movwf	_ACK_EST& (0+255),b
 19980                           
 19981                           ; BSR set to: 1
 19982                           ;SOFT_I2C.c: 99:     _delay((unsigned long)((3)*(48000000/4000000.0)));
 19983  004A22  0E0C               	movlw	12
 19984  004A24                     i1u1183_27:
 19985  004A24  2EE8               	decfsz	wreg,f,c
 19986  004A26  D7FE               	bra	i1u1183_27
 19987                           
 19988                           ;SOFT_I2C.c: 101:     TRISCbits.TRISC1 = 0;
 19989  004A28  9294               	bcf	148,1,c	;volatile
 19990                           
 19991                           ;SOFT_I2C.c: 102:     PORTCbits.RC1 = 0;
 19992  004A2A  9282               	bcf	130,1,c	;volatile
 19993                           
 19994                           ;SOFT_I2C.c: 103:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 19995  004A2C  0E14               	movlw	20
 19996  004A2E                     i1u1184_27:
 19997  004A2E  2EE8               	decfsz	wreg,f,c
 19998  004A30  D7FE               	bra	i1u1184_27
 19999  004A32  0012               	return		;funcret
 20000  004A34                     __end_ofi1_i2c_write:
 20001                           	callstack 0
 20002                           
 20003 ;; *************** function i1_i2c_restart *****************
 20004 ;; Defined at:
 20005 ;;		line 191 in file "SOFT_I2C.c"
 20006 ;; Parameters:    Size  Location     Type
 20007 ;;		None
 20008 ;; Auto vars:     Size  Location     Type
 20009 ;;		None
 20010 ;; Return value:  Size  Location     Type
 20011 ;;                  1    wreg      void 
 20012 ;; Registers used:
 20013 ;;		wreg, cstack
 20014 ;; Tracked objects:
 20015 ;;		On entry : 0/1
 20016 ;;		On exit  : 0/0
 20017 ;;		Unchanged: 0/0
 20018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20019 ;;      Params:         0       0       0       0       0       0       0       0       0
 20020 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20021 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20022 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20023 ;;Total ram usage:        0 bytes
 20024 ;; Hardware stack levels used:    1
 20025 ;; Hardware stack levels required when called:    3
 20026 ;; This function calls:
 20027 ;;		i1_i2c_start
 20028 ;;		i1_i2c_stop
 20029 ;; This function is called by:
 20030 ;;		_RTC_read_time
 20031 ;;		_RTC_read_date
 20032 ;; This function uses a non-reentrant model
 20033 ;;
 20034                           
 20035                           	psect	text93
 20036  005482                     __ptext93:
 20037                           	callstack 0
 20038  005482                     i1_i2c_restart:
 20039                           	callstack 11
 20040                           
 20041                           ;SOFT_I2C.c: 193:     i2c_stop();
 20042                           
 20043                           ;incstack = 0
 20044  005482  EC53  F029         	call	i1_i2c_stop	;wreg free
 20045                           
 20046                           ;SOFT_I2C.c: 194:     i2c_start();
 20047  005486  ECD1  F029         	call	i1_i2c_start	;wreg free
 20048  00548A  0012               	return		;funcret
 20049  00548C                     __end_ofi1_i2c_restart:
 20050                           	callstack 0
 20051                           
 20052 ;; *************** function i1_i2c_stop *****************
 20053 ;; Defined at:
 20054 ;;		line 40 in file "SOFT_I2C.c"
 20055 ;; Parameters:    Size  Location     Type
 20056 ;;		None
 20057 ;; Auto vars:     Size  Location     Type
 20058 ;;		None
 20059 ;; Return value:  Size  Location     Type
 20060 ;;                  1    wreg      void 
 20061 ;; Registers used:
 20062 ;;		wreg
 20063 ;; Tracked objects:
 20064 ;;		On entry : 0/1
 20065 ;;		On exit  : 0/0
 20066 ;;		Unchanged: 0/0
 20067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20068 ;;      Params:         0       0       0       0       0       0       0       0       0
 20069 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20070 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20071 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20072 ;;Total ram usage:        0 bytes
 20073 ;; Hardware stack levels used:    1
 20074 ;; Hardware stack levels required when called:    2
 20075 ;; This function calls:
 20076 ;;		Nothing
 20077 ;; This function is called by:
 20078 ;;		_RTC_read_time
 20079 ;;		_RTC_read_date
 20080 ;;		i1_i2c_restart
 20081 ;; This function uses a non-reentrant model
 20082 ;;
 20083                           
 20084                           	psect	text94
 20085  0052A6                     __ptext94:
 20086                           	callstack 0
 20087  0052A6                     i1_i2c_stop:
 20088                           	callstack 12
 20089                           
 20090                           ;SOFT_I2C.c: 42:     PORTCbits.RC0 = 0;
 20091                           
 20092                           ;incstack = 0
 20093  0052A6  9082               	bcf	130,0,c	;volatile
 20094                           
 20095                           ;SOFT_I2C.c: 43:     TRISCbits.TRISC0 = 0;
 20096  0052A8  9094               	bcf	148,0,c	;volatile
 20097                           
 20098                           ;SOFT_I2C.c: 44:     PORTCbits.RC1 = 0;
 20099  0052AA  9282               	bcf	130,1,c	;volatile
 20100                           
 20101                           ;SOFT_I2C.c: 45:     TRISCbits.TRISC1 = 0;
 20102  0052AC  9294               	bcf	148,1,c	;volatile
 20103                           
 20104                           ;SOFT_I2C.c: 46:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 20105  0052AE  0E04               	movlw	4
 20106  0052B0                     i1u1185_27:
 20107  0052B0  2EE8               	decfsz	wreg,f,c
 20108  0052B2  D7FE               	bra	i1u1185_27
 20109                           
 20110                           ;SOFT_I2C.c: 48:     TRISCbits.TRISC1 = 1;
 20111  0052B4  8294               	bsf	148,1,c	;volatile
 20112                           
 20113                           ;SOFT_I2C.c: 49:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 20114  0052B6  0E08               	movlw	8
 20115  0052B8                     i1u1186_27:
 20116  0052B8  2EE8               	decfsz	wreg,f,c
 20117  0052BA  D7FE               	bra	i1u1186_27
 20118                           
 20119                           ;SOFT_I2C.c: 50:     TRISCbits.TRISC0 = 1;
 20120  0052BC  8094               	bsf	148,0,c	;volatile
 20121                           
 20122                           ;SOFT_I2C.c: 51:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 20123  0052BE  0E08               	movlw	8
 20124  0052C0                     i1u1187_27:
 20125  0052C0  2EE8               	decfsz	wreg,f,c
 20126  0052C2  D7FE               	bra	i1u1187_27
 20127                           
 20128                           ;SOFT_I2C.c: 53:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 20129  0052C4  0E14               	movlw	20
 20130  0052C6                     i1u1188_27:
 20131  0052C6  2EE8               	decfsz	wreg,f,c
 20132  0052C8  D7FE               	bra	i1u1188_27
 20133  0052CA  0012               	return		;funcret
 20134  0052CC                     __end_ofi1_i2c_stop:
 20135                           	callstack 0
 20136                           
 20137 ;; *************** function i1_i2c_start *****************
 20138 ;; Defined at:
 20139 ;;		line 17 in file "SOFT_I2C.c"
 20140 ;; Parameters:    Size  Location     Type
 20141 ;;		None
 20142 ;; Auto vars:     Size  Location     Type
 20143 ;;		None
 20144 ;; Return value:  Size  Location     Type
 20145 ;;                  1    wreg      void 
 20146 ;; Registers used:
 20147 ;;		wreg
 20148 ;; Tracked objects:
 20149 ;;		On entry : 0/1
 20150 ;;		On exit  : 0/0
 20151 ;;		Unchanged: 0/0
 20152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20153 ;;      Params:         0       0       0       0       0       0       0       0       0
 20154 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20155 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20156 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20157 ;;Total ram usage:        0 bytes
 20158 ;; Hardware stack levels used:    1
 20159 ;; Hardware stack levels required when called:    2
 20160 ;; This function calls:
 20161 ;;		Nothing
 20162 ;; This function is called by:
 20163 ;;		_RTC_read_time
 20164 ;;		_RTC_read_date
 20165 ;;		i1_i2c_restart
 20166 ;; This function uses a non-reentrant model
 20167 ;;
 20168                           
 20169                           	psect	text95
 20170  0053A2                     __ptext95:
 20171                           	callstack 0
 20172  0053A2                     i1_i2c_start:
 20173                           	callstack 12
 20174                           
 20175                           ;SOFT_I2C.c: 20:     TRISCbits.TRISC0 = 1;
 20176                           
 20177                           ;incstack = 0
 20178  0053A2  8094               	bsf	148,0,c	;volatile
 20179                           
 20180                           ;SOFT_I2C.c: 21:     TRISCbits.TRISC1 = 1;
 20181  0053A4  8294               	bsf	148,1,c	;volatile
 20182                           
 20183                           ;SOFT_I2C.c: 22:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 20184  0053A6  0E14               	movlw	20
 20185  0053A8                     i1u1189_27:
 20186  0053A8  2EE8               	decfsz	wreg,f,c
 20187  0053AA  D7FE               	bra	i1u1189_27
 20188                           
 20189                           ;SOFT_I2C.c: 25:     PORTCbits.RC0 = 0;
 20190  0053AC  9082               	bcf	130,0,c	;volatile
 20191                           
 20192                           ;SOFT_I2C.c: 26:     TRISCbits.TRISC0 = 0;
 20193  0053AE  9094               	bcf	148,0,c	;volatile
 20194                           
 20195                           ;SOFT_I2C.c: 27:     _delay((unsigned long)((2)*(48000000/4000000.0)));
 20196  0053B0  0E08               	movlw	8
 20197  0053B2                     i1u1190_27:
 20198  0053B2  2EE8               	decfsz	wreg,f,c
 20199  0053B4  D7FE               	bra	i1u1190_27
 20200                           
 20201                           ;SOFT_I2C.c: 30:     PORTCbits.RC1 = 0;
 20202  0053B6  9282               	bcf	130,1,c	;volatile
 20203                           
 20204                           ;SOFT_I2C.c: 31:     TRISCbits.TRISC1 = 0;
 20205  0053B8  9294               	bcf	148,1,c	;volatile
 20206                           
 20207                           ;SOFT_I2C.c: 32:     _delay((unsigned long)((3)*(48000000/4000000.0)));
 20208  0053BA  0E0C               	movlw	12
 20209  0053BC                     i1u1191_27:
 20210  0053BC  2EE8               	decfsz	wreg,f,c
 20211  0053BE  D7FE               	bra	i1u1191_27
 20212  0053C0  0012               	return		;funcret
 20213  0053C2                     __end_ofi1_i2c_start:
 20214                           	callstack 0
 20215                           
 20216 ;; *************** function i1_i2c_read *****************
 20217 ;; Defined at:
 20218 ;;		line 121 in file "SOFT_I2C.c"
 20219 ;; Parameters:    Size  Location     Type
 20220 ;;		None
 20221 ;; Auto vars:     Size  Location     Type
 20222 ;;  i               1   12[COMRAM] unsigned char 
 20223 ;;  dato            1   11[COMRAM] unsigned char 
 20224 ;; Return value:  Size  Location     Type
 20225 ;;                  1    wreg      unsigned char 
 20226 ;; Registers used:
 20227 ;;		wreg, status,2, status,0
 20228 ;; Tracked objects:
 20229 ;;		On entry : 0/1
 20230 ;;		On exit  : 0/0
 20231 ;;		Unchanged: 0/0
 20232 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20233 ;;      Params:         0       0       0       0       0       0       0       0       0
 20234 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20235 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20236 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20237 ;;Total ram usage:        2 bytes
 20238 ;; Hardware stack levels used:    1
 20239 ;; Hardware stack levels required when called:    2
 20240 ;; This function calls:
 20241 ;;		Nothing
 20242 ;; This function is called by:
 20243 ;;		_RTC_read_time
 20244 ;;		_RTC_read_date
 20245 ;; This function uses a non-reentrant model
 20246 ;;
 20247                           
 20248                           	psect	text96
 20249  004F78                     __ptext96:
 20250                           	callstack 0
 20251  004F78                     i1_i2c_read:
 20252                           	callstack 12
 20253                           
 20254                           ;SOFT_I2C.c: 123:     char dato=0;
 20255                           
 20256                           ;incstack = 0
 20257  004F78  0E00               	movlw	0
 20258  004F7A  6E0C               	movwf	i1i2c_read@dato^0,c
 20259                           
 20260                           ;SOFT_I2C.c: 126:     TRISCbits.TRISC0 = 1;
 20261  004F7C  8094               	bsf	148,0,c	;volatile
 20262                           
 20263                           ;SOFT_I2C.c: 129:     if(PORTCbits.RC1 == 1)
 20264  004F7E  A282               	btfss	130,1,c	;volatile
 20265  004F80  D002               	goto	i1l8150
 20266                           
 20267                           ;SOFT_I2C.c: 130:     {;SOFT_I2C.c: 131:         PORTCbits.RC1 = 0;
 20268  004F82  9282               	bcf	130,1,c	;volatile
 20269                           
 20270                           ;SOFT_I2C.c: 132:         TRISCbits.TRISC1 = 0;
 20271  004F84  9294               	bcf	148,1,c	;volatile
 20272  004F86                     i1l8150:
 20273                           
 20274                           ;SOFT_I2C.c: 135:     for(char i=0;i<8;i++)
 20275  004F86  0E00               	movlw	0
 20276  004F88  6E0D               	movwf	i1i2c_read@i^0,c
 20277  004F8A                     i1l8156:
 20278                           
 20279                           ;SOFT_I2C.c: 136:     {;SOFT_I2C.c: 137:         _delay((unsigned long)((5)*(48000000/40
      +                          00000.0)));
 20280  004F8A  0E14               	movlw	20
 20281  004F8C                     i1u1192_27:
 20282  004F8C  2EE8               	decfsz	wreg,f,c
 20283  004F8E  D7FE               	bra	i1u1192_27
 20284                           
 20285                           ;SOFT_I2C.c: 138:         dato <<= 1;
 20286  004F90  90D8               	bcf	status,0,c
 20287  004F92  360C               	rlcf	i1i2c_read@dato^0,f,c
 20288                           
 20289                           ;SOFT_I2C.c: 139:         TRISCbits.TRISC1 = 1;
 20290  004F94  8294               	bsf	148,1,c	;volatile
 20291                           
 20292                           ;SOFT_I2C.c: 140:         _delay((unsigned long)((2)*(48000000/4000000.0)));
 20293  004F96  0E08               	movlw	8
 20294  004F98                     i1u1193_27:
 20295  004F98  2EE8               	decfsz	wreg,f,c
 20296  004F9A  D7FE               	bra	i1u1193_27
 20297                           
 20298                           ;SOFT_I2C.c: 141:         if(PORTCbits.RC0 == 1) dato |= 1;
 20299  004F9C  B082               	btfsc	130,0,c	;volatile
 20300  004F9E  800C               	bsf	i1i2c_read@dato^0,0,c
 20301                           
 20302                           ;SOFT_I2C.c: 142:         _delay((unsigned long)((3)*(48000000/4000000.0)));
 20303  004FA0  0E0C               	movlw	12
 20304  004FA2                     i1u1194_27:
 20305  004FA2  2EE8               	decfsz	wreg,f,c
 20306  004FA4  D7FE               	bra	i1u1194_27
 20307                           
 20308                           ;SOFT_I2C.c: 144:         if(PORTCbits.RC1 == 1)
 20309  004FA6  A282               	btfss	130,1,c	;volatile
 20310  004FA8  D002               	goto	i1l8174
 20311                           
 20312                           ;SOFT_I2C.c: 145:         {;SOFT_I2C.c: 146:             TRISCbits.TRISC1 = 0;
 20313  004FAA  9294               	bcf	148,1,c	;volatile
 20314                           
 20315                           ;SOFT_I2C.c: 147:             PORTCbits.RC1 = 0;
 20316  004FAC  9282               	bcf	130,1,c	;volatile
 20317  004FAE                     i1l8174:
 20318                           
 20319                           ;SOFT_I2C.c: 149:     }
 20320  004FAE  2A0D               	incf	i1i2c_read@i^0,f,c
 20321  004FB0  0E07               	movlw	7
 20322  004FB2  640D               	cpfsgt	i1i2c_read@i^0,c
 20323  004FB4  D7EA               	goto	i1l8156
 20324                           
 20325                           ;SOFT_I2C.c: 151:     return dato;
 20326  004FB6  500C               	movf	i1i2c_read@dato^0,w,c
 20327  004FB8  0012               	return		;funcret
 20328  004FBA                     __end_ofi1_i2c_read:
 20329                           	callstack 0
 20330                           
 20331 ;; *************** function i1_i2c_nack *****************
 20332 ;; Defined at:
 20333 ;;		line 154 in file "SOFT_I2C.c"
 20334 ;; Parameters:    Size  Location     Type
 20335 ;;		None
 20336 ;; Auto vars:     Size  Location     Type
 20337 ;;		None
 20338 ;; Return value:  Size  Location     Type
 20339 ;;                  1    wreg      void 
 20340 ;; Registers used:
 20341 ;;		wreg
 20342 ;; Tracked objects:
 20343 ;;		On entry : 0/1
 20344 ;;		On exit  : 0/0
 20345 ;;		Unchanged: 0/0
 20346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20347 ;;      Params:         0       0       0       0       0       0       0       0       0
 20348 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20349 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20350 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20351 ;;Total ram usage:        0 bytes
 20352 ;; Hardware stack levels used:    1
 20353 ;; Hardware stack levels required when called:    2
 20354 ;; This function calls:
 20355 ;;		Nothing
 20356 ;; This function is called by:
 20357 ;;		_RTC_read_time
 20358 ;;		_RTC_read_date
 20359 ;; This function uses a non-reentrant model
 20360 ;;
 20361                           
 20362                           	psect	text97
 20363  0052CC                     __ptext97:
 20364                           	callstack 0
 20365  0052CC                     i1_i2c_nack:
 20366                           	callstack 12
 20367                           
 20368                           ;SOFT_I2C.c: 156:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 20369                           
 20370                           ;incstack = 0
 20371  0052CC  0E14               	movlw	20
 20372  0052CE                     i1u1195_27:
 20373  0052CE  2EE8               	decfsz	wreg,f,c
 20374  0052D0  D7FE               	bra	i1u1195_27
 20375                           
 20376                           ;SOFT_I2C.c: 157:     TRISCbits.TRISC0 = 1;
 20377  0052D2  8094               	bsf	148,0,c	;volatile
 20378                           
 20379                           ;SOFT_I2C.c: 158:     _delay((unsigned long)((1)*(48000000/4000000.0)));
 20380  0052D4  0E04               	movlw	4
 20381  0052D6                     i1u1196_27:
 20382  0052D6  2EE8               	decfsz	wreg,f,c
 20383  0052D8  D7FE               	bra	i1u1196_27
 20384                           
 20385                           ;SOFT_I2C.c: 159:     TRISCbits.TRISC1 = 1;
 20386  0052DA  8294               	bsf	148,1,c	;volatile
 20387                           
 20388                           ;SOFT_I2C.c: 160:     _delay((unsigned long)((4)*(48000000/4000000.0)));
 20389  0052DC  0E10               	movlw	16
 20390  0052DE                     i1u1197_27:
 20391  0052DE  2EE8               	decfsz	wreg,f,c
 20392  0052E0  D7FE               	bra	i1u1197_27
 20393                           
 20394                           ;SOFT_I2C.c: 161:     PORTCbits.RC1 = 0;
 20395  0052E2  9282               	bcf	130,1,c	;volatile
 20396                           
 20397                           ;SOFT_I2C.c: 162:     TRISCbits.TRISC1 = 0;
 20398  0052E4  9294               	bcf	148,1,c	;volatile
 20399                           
 20400                           ;SOFT_I2C.c: 163:     _delay((unsigned long)((5)*(48000000/4000000.0)));
 20401  0052E6  0E14               	movlw	20
 20402  0052E8                     i1u1198_27:
 20403  0052E8  2EE8               	decfsz	wreg,f,c
 20404  0052EA  D7FE               	bra	i1u1198_27
 20405                           
 20406                           ;SOFT_I2C.c: 164:     PORTCbits.RC0 = 0;
 20407  0052EC  9082               	bcf	130,0,c	;volatile
 20408                           
 20409                           ;SOFT_I2C.c: 165:     TRISCbits.TRISC0 = 0;
 20410  0052EE  9094               	bcf	148,0,c	;volatile
 20411  0052F0  0012               	return		;funcret
 20412  0052F2                     __end_ofi1_i2c_nack:
 20413                           	callstack 0
 20414                           
 20415 ;; *************** function _ISR_HighP *****************
 20416 ;; Defined at:
 20417 ;;		line 29 in file "OS_Control.c"
 20418 ;; Parameters:    Size  Location     Type
 20419 ;;		None
 20420 ;; Auto vars:     Size  Location     Type
 20421 ;;		None
 20422 ;; Return value:  Size  Location     Type
 20423 ;;                  1    wreg      void 
 20424 ;; Registers used:
 20425 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 20426 ;; Tracked objects:
 20427 ;;		On entry : 0/0
 20428 ;;		On exit  : 0/0
 20429 ;;		Unchanged: 0/0
 20430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20431 ;;      Params:         0       0       0       0       0       0       0       0       0
 20432 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20433 ;;      Temps:          5       0       0       0       0       0       0       0       0
 20434 ;;      Totals:         5       0       0       0       0       0       0       0       0
 20435 ;;Total ram usage:        5 bytes
 20436 ;; Hardware stack levels used:    1
 20437 ;; Hardware stack levels required when called:    1
 20438 ;; This function calls:
 20439 ;;		_UART_read
 20440 ;;		_antirrebote
 20441 ;;		i2___wmul
 20442 ;; This function is called by:
 20443 ;;		Interrupt level 2
 20444 ;; This function uses a non-reentrant model
 20445 ;;
 20446                           
 20447                           	psect	intcode
 20448  000008                     __pintcode:
 20449                           	callstack 0
 20450  000008                     _ISR_HighP:
 20451                           	callstack 11
 20452                           
 20453                           ;incstack = 0
 20454  000008  8248               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 20455  00000A  ED3A  F014         	call	int_func,f	;refresh shadow registers
 20456                           
 20457                           	psect	intcode_body
 20458  002874                     __pintcode_body:
 20459                           	callstack 11
 20460  002874                     int_func:
 20461                           	callstack 11
 20462  002874  0006               	pop		; remove dummy address from shadow register refresh
 20463  002876  CFD9 F008          	movff	fsr2l,??_ISR_HighP+1
 20464  00287A  CFDA F009          	movff	fsr2h,??_ISR_HighP+2
 20465  00287E  CFF3 F00A          	movff	prodl,??_ISR_HighP+3
 20466  002882  CFF4 F00B          	movff	prodh,??_ISR_HighP+4
 20467                           
 20468                           ;OS_Control.c: 32:     if(PIR1bits.RCIF == 1)
 20469  002886  AA9E               	btfss	158,5,c	;volatile
 20470  002888  D02B               	goto	i2l9348
 20471                           
 20472                           ;OS_Control.c: 33:     {;OS_Control.c: 34:         word[long_cad] = UART_read();
 20473  00288A  0EB4               	movlw	low _word
 20474  00288C  0101               	movlb	1	; () banked
 20475  00288E  2589               	addwf	_long_cad& (0+255),w,b
 20476  002890  6ED9               	movwf	fsr2l,c
 20477  002892  6ADA               	clrf	fsr2h,c
 20478  002894  0E01               	movlw	high _word
 20479  002896  22DA               	addwfc	fsr2h,f,c
 20480  002898  EC36  F02A         	call	_UART_read	;wreg free
 20481  00289C  6EDF               	movwf	indf2,c
 20482                           
 20483                           ;OS_Control.c: 44:         while(word[long_cad] != 13)
 20484  00289E  D00A               	goto	i2l9338
 20485  0028A0                     i2l9334:
 20486                           
 20487                           ; BSR set to: 1
 20488                           ;OS_Control.c: 45:         {;OS_Control.c: 46:             word[long_cad] = UART_read();
 20489  0028A0  0EB4               	movlw	low _word
 20490  0028A2  2589               	addwf	_long_cad& (0+255),w,b
 20491  0028A4  6ED9               	movwf	fsr2l,c
 20492  0028A6  6ADA               	clrf	fsr2h,c
 20493  0028A8  0E01               	movlw	high _word
 20494  0028AA  22DA               	addwfc	fsr2h,f,c
 20495  0028AC  EC36  F02A         	call	_UART_read	;wreg free
 20496  0028B0  6EDF               	movwf	indf2,c
 20497                           
 20498                           ; BSR set to: 1
 20499                           ;OS_Control.c: 47:             long_cad++;
 20500  0028B2  2B89               	incf	_long_cad& (0+255),f,b
 20501  0028B4                     i2l9338:
 20502                           
 20503                           ; BSR set to: 1
 20504                           ;OS_Control.c: 44:         while(word[long_cad] != 13)
 20505  0028B4  0EB4               	movlw	low _word
 20506  0028B6  2589               	addwf	_long_cad& (0+255),w,b
 20507  0028B8  6ED9               	movwf	fsr2l,c
 20508  0028BA  6ADA               	clrf	fsr2h,c
 20509  0028BC  0E01               	movlw	high _word
 20510  0028BE  22DA               	addwfc	fsr2h,f,c
 20511  0028C0  0E0D               	movlw	13
 20512  0028C2  18DE               	xorwf	postinc2,w,c
 20513  0028C4  A4D8               	btfss	status,2,c
 20514  0028C6  D7EC               	goto	i2l9334
 20515                           
 20516                           ; BSR set to: 1
 20517                           ;OS_Control.c: 50:         Fin_Cad = 1;
 20518  0028C8  0E01               	movlw	1
 20519  0028CA  6E3B               	movwf	_Fin_Cad^0,c
 20520                           
 20521                           ; BSR set to: 1
 20522                           ;OS_Control.c: 53:         if(Fin_Cad == 1) Running=3;
 20523  0028CC  043B               	decf	_Fin_Cad^0,w,c
 20524  0028CE  A4D8               	btfss	status,2,c
 20525  0028D0  D002               	goto	i2l284
 20526                           
 20527                           ; BSR set to: 1
 20528  0028D2  0E03               	movlw	3
 20529  0028D4  6F7F               	movwf	_Running& (0+255),b
 20530  0028D6                     i2l284:
 20531                           
 20532                           ; BSR set to: 1
 20533                           ;OS_Control.c: 55:         Timer_RX = 20;
 20534  0028D6  0E00               	movlw	0
 20535  0028D8  6FD9               	movwf	(_Timer_RX+1)& (0+255),b
 20536  0028DA  0E14               	movlw	20
 20537  0028DC  6FD8               	movwf	_Timer_RX& (0+255),b
 20538                           
 20539                           ; BSR set to: 1
 20540                           ;OS_Control.c: 57:         PIR1bits.RCIF = 0;
 20541  0028DE  9A9E               	bcf	158,5,c	;volatile
 20542  0028E0                     i2l9348:
 20543                           
 20544                           ;OS_Control.c: 61:     if(INTCONbits.RBIF == 1)
 20545  0028E0  A0F2               	btfss	242,0,c	;volatile
 20546  0028E2  D0AA               	goto	i2l308
 20547                           
 20548                           ;OS_Control.c: 62:     {;OS_Control.c: 63:         if(PORTBbits.RB4 == 0 || PORTBbits.RB
      +                          5 == 0 || PORTBbits.RB6 == 0 || PORTBbits.RB7 == 0)
 20549  0028E4  B881               	btfsc	129,4,c	;volatile
 20550  0028E6  AA81               	btfss	129,5,c	;volatile
 20551  0028E8  D004               	goto	i2u755_40
 20552  0028EA  AC81               	btfss	129,6,c	;volatile
 20553  0028EC  D002               	goto	i2u755_40
 20554  0028EE  BE81               	btfsc	129,7,c	;volatile
 20555  0028F0  D0A2               	goto	i2l9466
 20556  0028F2                     i2u755_40:
 20557                           
 20558                           ;OS_Control.c: 64:         {;OS_Control.c: 65:             numero = 0;
 20559  0028F2  0E00               	movlw	0
 20560  0028F4  6E47               	movwf	_numero^0,c
 20561                           
 20562                           ;OS_Control.c: 66:             if((PORTAbits.RA3 == 0) && (PORTBbits.RB7 == 0)) numero =
      +                           1;
 20563  0028F6  A680               	btfss	128,3,c	;volatile
 20564  0028F8  BE81               	btfsc	129,7,c	;volatile
 20565  0028FA  D002               	goto	i2l9366
 20566  0028FC  0E01               	movlw	1
 20567  0028FE  6E47               	movwf	_numero^0,c
 20568  002900                     i2l9366:
 20569                           
 20570                           ;OS_Control.c: 67:             if((PORTAbits.RA2 == 0) && (PORTBbits.RB7 == 0)) numero =
      +                           2;
 20571  002900  A480               	btfss	128,2,c	;volatile
 20572  002902  BE81               	btfsc	129,7,c	;volatile
 20573  002904  D002               	goto	i2l9372
 20574  002906  0E02               	movlw	2
 20575  002908  6E47               	movwf	_numero^0,c
 20576  00290A                     i2l9372:
 20577                           
 20578                           ;OS_Control.c: 68:             if((PORTAbits.RA1 == 0) && (PORTBbits.RB7 == 0)) numero =
      +                           3;
 20579  00290A  A280               	btfss	128,1,c	;volatile
 20580  00290C  BE81               	btfsc	129,7,c	;volatile
 20581  00290E  D002               	goto	i2l9378
 20582  002910  0E03               	movlw	3
 20583  002912  6E47               	movwf	_numero^0,c
 20584  002914                     i2l9378:
 20585                           
 20586                           ;OS_Control.c: 69:             if((PORTAbits.RA3 == 0) && (PORTBbits.RB6 == 0)) numero =
      +                           4;
 20587  002914  A680               	btfss	128,3,c	;volatile
 20588  002916  BC81               	btfsc	129,6,c	;volatile
 20589  002918  D002               	goto	i2l9384
 20590  00291A  0E04               	movlw	4
 20591  00291C  6E47               	movwf	_numero^0,c
 20592  00291E                     i2l9384:
 20593                           
 20594                           ;OS_Control.c: 70:             if((PORTAbits.RA2 == 0) && (PORTBbits.RB6 == 0)) numero =
      +                           5;
 20595  00291E  A480               	btfss	128,2,c	;volatile
 20596  002920  BC81               	btfsc	129,6,c	;volatile
 20597  002922  D002               	goto	i2l9390
 20598  002924  0E05               	movlw	5
 20599  002926  6E47               	movwf	_numero^0,c
 20600  002928                     i2l9390:
 20601                           
 20602                           ;OS_Control.c: 71:             if((PORTAbits.RA1 == 0) && (PORTBbits.RB6 == 0)) numero =
      +                           6;
 20603  002928  A280               	btfss	128,1,c	;volatile
 20604  00292A  BC81               	btfsc	129,6,c	;volatile
 20605  00292C  D002               	goto	i2l9396
 20606  00292E  0E06               	movlw	6
 20607  002930  6E47               	movwf	_numero^0,c
 20608  002932                     i2l9396:
 20609                           
 20610                           ;OS_Control.c: 72:             if((PORTAbits.RA3 == 0) && (PORTBbits.RB5 == 0)) numero =
      +                           7;
 20611  002932  A680               	btfss	128,3,c	;volatile
 20612  002934  BA81               	btfsc	129,5,c	;volatile
 20613  002936  D002               	goto	i2l9402
 20614  002938  0E07               	movlw	7
 20615  00293A  6E47               	movwf	_numero^0,c
 20616  00293C                     i2l9402:
 20617                           
 20618                           ;OS_Control.c: 73:             if((PORTAbits.RA2 == 0) && (PORTBbits.RB5 == 0)) numero =
      +                           8;
 20619  00293C  A480               	btfss	128,2,c	;volatile
 20620  00293E  BA81               	btfsc	129,5,c	;volatile
 20621  002940  D002               	goto	i2l9408
 20622  002942  0E08               	movlw	8
 20623  002944  6E47               	movwf	_numero^0,c
 20624  002946                     i2l9408:
 20625                           
 20626                           ;OS_Control.c: 74:             if((PORTAbits.RA1 == 0) && (PORTBbits.RB5 == 0)) numero =
      +                           9;
 20627  002946  A280               	btfss	128,1,c	;volatile
 20628  002948  BA81               	btfsc	129,5,c	;volatile
 20629  00294A  D002               	goto	i2l9414
 20630  00294C  0E09               	movlw	9
 20631  00294E  6E47               	movwf	_numero^0,c
 20632  002950                     i2l9414:
 20633                           
 20634                           ;OS_Control.c: 75:             if((PORTAbits.RA2 == 0) && (PORTBbits.RB4 == 0)) numero =
      +                           0;
 20635  002950  A480               	btfss	128,2,c	;volatile
 20636  002952  B881               	btfsc	129,4,c	;volatile
 20637  002954  D002               	goto	i2l9420
 20638  002956  0E00               	movlw	0
 20639  002958  6E47               	movwf	_numero^0,c
 20640  00295A                     i2l9420:
 20641                           
 20642                           ;OS_Control.c: 76:             if((PORTAbits.RA0 == 0) && (PORTBbits.RB7 == 0)) numero =
      +                           10;
 20643  00295A  A080               	btfss	128,0,c	;volatile
 20644  00295C  BE81               	btfsc	129,7,c	;volatile
 20645  00295E  D002               	goto	i2l9426
 20646  002960  0E0A               	movlw	10
 20647  002962  6E47               	movwf	_numero^0,c
 20648  002964                     i2l9426:
 20649                           
 20650                           ;OS_Control.c: 77:             if((PORTAbits.RA1 == 0) && (PORTBbits.RB4 == 0)) numero =
      +                           11;
 20651  002964  A280               	btfss	128,1,c	;volatile
 20652  002966  B881               	btfsc	129,4,c	;volatile
 20653  002968  D002               	goto	i2l9432
 20654  00296A  0E0B               	movlw	11
 20655  00296C  6E47               	movwf	_numero^0,c
 20656  00296E                     i2l9432:
 20657                           
 20658                           ;OS_Control.c: 80:             antirrebote();
 20659  00296E  EC19  F028         	call	_antirrebote	;wreg free
 20660                           
 20661                           ;OS_Control.c: 83:             if(numero != 10 && numero != 11 && mod_rtc == 0)
 20662  002972  0E0A               	movlw	10
 20663  002974  1847               	xorwf	_numero^0,w,c
 20664  002976  B4D8               	btfsc	status,2,c
 20665  002978  D026               	goto	i2l9446
 20666  00297A  0E0B               	movlw	11
 20667  00297C  1847               	xorwf	_numero^0,w,c
 20668  00297E  B4D8               	btfsc	status,2,c
 20669  002980  D022               	goto	i2l9446
 20670  002982  5045               	movf	_mod_rtc^0,w,c
 20671  002984  A4D8               	btfss	status,2,c
 20672  002986  D01F               	goto	i2l9446
 20673                           
 20674                           ;OS_Control.c: 84:             {;OS_Control.c: 85:                 if(tec_p) valor=(valo
      +                          r*10)+numero;
 20675  002988  5046               	movf	_tec_p^0,w,c
 20676  00298A  B4D8               	btfsc	status,2,c
 20677  00298C  D011               	goto	i2l302
 20678  00298E  C039  F001         	movff	_valor,i2___wmul@multiplier
 20679  002992  C03A  F002         	movff	_valor+1,i2___wmul@multiplier+1
 20680  002996  0E00               	movlw	0
 20681  002998  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
 20682  00299A  0E0A               	movlw	10
 20683  00299C  6E03               	movwf	i2___wmul@multiplicand^0,c
 20684  00299E  EC79  F029         	call	i2___wmul	;wreg free
 20685  0029A2  5047               	movf	_numero^0,w,c
 20686  0029A4  2401               	addwf	?i2___wmul^0,w,c
 20687  0029A6  6E39               	movwf	_valor^0,c
 20688  0029A8  0E00               	movlw	0
 20689  0029AA  2002               	addwfc	(?i2___wmul+1)^0,w,c
 20690  0029AC  6E3A               	movwf	(_valor+1)^0,c
 20691  0029AE  D00B               	goto	i2l9446
 20692  0029B0                     i2l302:
 20693  0029B0  C047  F039         	movff	_numero,_valor
 20694  0029B4  6A3A               	clrf	(_valor+1)^0,c
 20695  0029B6  0E01               	movlw	1
 20696  0029B8  6E46               	movwf	_tec_p^0,c
 20697  0029BA  0E00               	movlw	0
 20698  0029BC  0101               	movlb	1	; () banked
 20699  0029BE  6F8E               	movwf	_mostrar& (0+255),b
 20700  0029C0  0E00               	movlw	0
 20701  0029C2  0100               	movlb	0	; () banked
 20702  0029C4  6FF0               	movwf	_aceptar& (0+255),b
 20703  0029C6                     i2l9446:
 20704                           
 20705                           ;OS_Control.c: 89:             if(numero != 10 && numero != 11 && tec_p == 0 && mod_rtc 
      +                          == 1 && valor<=59)
 20706  0029C6  0E0A               	movlw	10
 20707  0029C8  1847               	xorwf	_numero^0,w,c
 20708  0029CA  B4D8               	btfsc	status,2,c
 20709  0029CC  D02D               	goto	i2l9462
 20710  0029CE  0E0B               	movlw	11
 20711  0029D0  1847               	xorwf	_numero^0,w,c
 20712  0029D2  B4D8               	btfsc	status,2,c
 20713  0029D4  D029               	goto	i2l9462
 20714  0029D6  5046               	movf	_tec_p^0,w,c
 20715  0029D8  A4D8               	btfss	status,2,c
 20716  0029DA  D026               	goto	i2l9462
 20717  0029DC  0445               	decf	_mod_rtc^0,w,c
 20718  0029DE  A4D8               	btfss	status,2,c
 20719  0029E0  D023               	goto	i2l9462
 20720  0029E2  503A               	movf	(_valor+1)^0,w,c
 20721  0029E4  E121               	bnz	i2l9462
 20722  0029E6  0E3C               	movlw	60
 20723  0029E8  5C39               	subwf	_valor^0,w,c
 20724  0029EA  B0D8               	btfsc	status,0,c
 20725  0029EC  D01D               	goto	i2l9462
 20726                           
 20727                           ;OS_Control.c: 90:             {;OS_Control.c: 91:                 if(val_rtc) valor=(va
      +                          lor*10)+numero;
 20728  0029EE  0101               	movlb	1	; () banked
 20729  0029F0  518F               	movf	_val_rtc& (0+255),w,b
 20730  0029F2  B4D8               	btfsc	status,2,c
 20731  0029F4  D011               	goto	i2l305
 20732                           
 20733                           ; BSR set to: 1
 20734  0029F6  C039  F001         	movff	_valor,i2___wmul@multiplier
 20735  0029FA  C03A  F002         	movff	_valor+1,i2___wmul@multiplier+1
 20736  0029FE  0E00               	movlw	0
 20737  002A00  6E04               	movwf	(i2___wmul@multiplicand+1)^0,c
 20738  002A02  0E0A               	movlw	10
 20739  002A04  6E03               	movwf	i2___wmul@multiplicand^0,c
 20740  002A06  EC79  F029         	call	i2___wmul	;wreg free
 20741  002A0A  5047               	movf	_numero^0,w,c
 20742  002A0C  2401               	addwf	?i2___wmul^0,w,c
 20743  002A0E  6E39               	movwf	_valor^0,c
 20744  002A10  0E00               	movlw	0
 20745  002A12  2002               	addwfc	(?i2___wmul+1)^0,w,c
 20746  002A14  6E3A               	movwf	(_valor+1)^0,c
 20747  002A16  D008               	goto	i2l9462
 20748  002A18                     i2l305:
 20749                           
 20750                           ; BSR set to: 1
 20751  002A18  C047  F039         	movff	_numero,_valor
 20752  002A1C  6A3A               	clrf	(_valor+1)^0,c
 20753                           
 20754                           ; BSR set to: 1
 20755  002A1E  0E01               	movlw	1
 20756  002A20  6F8F               	movwf	_val_rtc& (0+255),b
 20757  002A22  0E00               	movlw	0
 20758  002A24  0100               	movlb	0	; () banked
 20759  002A26  6FF0               	movwf	_aceptar& (0+255),b
 20760  002A28                     i2l9462:
 20761                           
 20762                           ;OS_Control.c: 96:             if(numero == 10) aceptar=1;
 20763  002A28  0E0A               	movlw	10
 20764  002A2A  1847               	xorwf	_numero^0,w,c
 20765  002A2C  A4D8               	btfss	status,2,c
 20766  002A2E  D003               	goto	i2l9466
 20767  002A30  0E01               	movlw	1
 20768  002A32  0100               	movlb	0	; () banked
 20769  002A34  6FF0               	movwf	_aceptar& (0+255),b
 20770  002A36                     i2l9466:
 20771                           
 20772                           ;OS_Control.c: 100:         INTCONbits.RBIF = 0;
 20773  002A36  90F2               	bcf	242,0,c	;volatile
 20774  002A38                     i2l308:
 20775  002A38  C00B  FFF4         	movff	??_ISR_HighP+4,prodh
 20776  002A3C  C00A  FFF3         	movff	??_ISR_HighP+3,prodl
 20777  002A40  C009  FFDA         	movff	??_ISR_HighP+2,fsr2h
 20778  002A44  C008  FFD9         	movff	??_ISR_HighP+1,fsr2l
 20779  002A48  9248               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 20780  002A4A  0011               	retfie		f
 20781  002A4C                     __end_of_ISR_HighP:
 20782                           	callstack 0
 20783                           
 20784 ;; *************** function i2___wmul *****************
 20785 ;; Defined at:
 20786 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\pic\sources\c99\common\Umul16.c"
 20787 ;; Parameters:    Size  Location     Type
 20788 ;;  multiplier      2    0[COMRAM] unsigned int 
 20789 ;;  multiplicand    2    2[COMRAM] unsigned int 
 20790 ;; Auto vars:     Size  Location     Type
 20791 ;;  product         2    4[COMRAM] unsigned int 
 20792 ;; Return value:  Size  Location     Type
 20793 ;;                  2    0[COMRAM] unsigned int 
 20794 ;; Registers used:
 20795 ;;		wreg, status,2, status,0, prodl, prodh
 20796 ;; Tracked objects:
 20797 ;;		On entry : 0/0
 20798 ;;		On exit  : 0/0
 20799 ;;		Unchanged: 0/0
 20800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20801 ;;      Params:         4       0       0       0       0       0       0       0       0
 20802 ;;      Locals:         2       0       0       0       0       0       0       0       0
 20803 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20804 ;;      Totals:         6       0       0       0       0       0       0       0       0
 20805 ;;Total ram usage:        6 bytes
 20806 ;; Hardware stack levels used:    1
 20807 ;; This function calls:
 20808 ;;		Nothing
 20809 ;; This function is called by:
 20810 ;;		_ISR_HighP
 20811 ;; This function uses a non-reentrant model
 20812 ;;
 20813                           
 20814                           	psect	text99
 20815  0052F2                     __ptext99:
 20816                           	callstack 0
 20817  0052F2                     i2___wmul:
 20818                           	callstack 11
 20819                           
 20820                           ;incstack = 0
 20821  0052F2  5001               	movf	i2___wmul@multiplier^0,w,c
 20822  0052F4  0203               	mulwf	i2___wmul@multiplicand^0,c
 20823  0052F6  CFF3 F005          	movff	prodl,i2___wmul@product
 20824  0052FA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 20825  0052FE  5001               	movf	i2___wmul@multiplier^0,w,c
 20826  005300  0204               	mulwf	(i2___wmul@multiplicand+1)^0,c
 20827  005302  50F3               	movf	243,w,c
 20828  005304  2606               	addwf	(i2___wmul@product+1)^0,f,c
 20829  005306  5002               	movf	(i2___wmul@multiplier+1)^0,w,c
 20830  005308  0203               	mulwf	i2___wmul@multiplicand^0,c
 20831  00530A  50F3               	movf	243,w,c
 20832  00530C  2606               	addwf	(i2___wmul@product+1)^0,f,c
 20833  00530E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 20834  005312  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 20835  005316  0012               	return		;funcret
 20836  005318                     __end_ofi2___wmul:
 20837                           	callstack 0
 20838                           
 20839 ;; *************** function _antirrebote *****************
 20840 ;; Defined at:
 20841 ;;		line 62 in file "TECLADO_4X4.c"
 20842 ;; Parameters:    Size  Location     Type
 20843 ;;		None
 20844 ;; Auto vars:     Size  Location     Type
 20845 ;;		None
 20846 ;; Return value:  Size  Location     Type
 20847 ;;                  1    wreg      void 
 20848 ;; Registers used:
 20849 ;;		wreg
 20850 ;; Tracked objects:
 20851 ;;		On entry : 0/0
 20852 ;;		On exit  : 0/0
 20853 ;;		Unchanged: 0/0
 20854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20855 ;;      Params:         0       0       0       0       0       0       0       0       0
 20856 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20857 ;;      Temps:          2       0       0       0       0       0       0       0       0
 20858 ;;      Totals:         2       0       0       0       0       0       0       0       0
 20859 ;;Total ram usage:        2 bytes
 20860 ;; Hardware stack levels used:    1
 20861 ;; This function calls:
 20862 ;;		Nothing
 20863 ;; This function is called by:
 20864 ;;		_ISR_HighP
 20865 ;; This function uses a non-reentrant model
 20866 ;;
 20867                           
 20868                           	psect	text100
 20869  005032                     __ptext100:
 20870                           	callstack 0
 20871  005032                     _antirrebote:
 20872                           	callstack 11
 20873                           
 20874                           ;TECLADO_4X4.c: 64:     _delay((unsigned long)((50)*(48000000/4000.0)));
 20875                           
 20876                           ;incstack = 0
 20877  005032  0E04               	movlw	4
 20878  005034  6E02               	movwf	(??_antirrebote+1)^0,c
 20879  005036  0E0C               	movlw	12
 20880  005038  6E01               	movwf	??_antirrebote^0,c
 20881  00503A  0E34               	movlw	52
 20882  00503C                     i2u1199_47:
 20883  00503C  2EE8               	decfsz	wreg,f,c
 20884  00503E  D7FE               	bra	i2u1199_47
 20885  005040  2E01               	decfsz	??_antirrebote^0,f,c
 20886  005042  D7FC               	bra	i2u1199_47
 20887  005044  2E02               	decfsz	(??_antirrebote+1)^0,f,c
 20888  005046  D7FA               	bra	i2u1199_47
 20889                           
 20890                           ;TECLADO_4X4.c: 65:     while(PORTBbits.RB4 == 0 || PORTBbits.RB5 == 0 || PORTBbits.RB6 
      +                          == 0 || PORTBbits.RB7 == 0) _delay((unsigned long)((10)*(48000000/4000.0)));
 20891  005048  D008               	goto	i2l9098
 20892  00504A                     i2l9096:
 20893  00504A  0E9C               	movlw	156
 20894  00504C  6E01               	movwf	??_antirrebote^0,c
 20895  00504E  0ED7               	movlw	215
 20896  005050                     i2u1200_47:
 20897  005050  2EE8               	decfsz	wreg,f,c
 20898  005052  D7FE               	bra	i2u1200_47
 20899  005054  2E01               	decfsz	??_antirrebote^0,f,c
 20900  005056  D7FC               	bra	i2u1200_47
 20901  005058  F000               	nop	
 20902  00505A                     i2l9098:
 20903  00505A  B881               	btfsc	129,4,c	;volatile
 20904  00505C  AA81               	btfss	129,5,c	;volatile
 20905  00505E  D7F5               	goto	i2l9096
 20906  005060  AC81               	btfss	129,6,c	;volatile
 20907  005062  D7F3               	goto	i2l9096
 20908  005064  BE81               	btfsc	129,7,c	;volatile
 20909  005066  0012               	return	
 20910  005068  D7F0               	goto	i2l9096
 20911  00506A                     __end_of_antirrebote:
 20912                           	callstack 0
 20913                           
 20914 ;; *************** function _UART_read *****************
 20915 ;; Defined at:
 20916 ;;		line 85 in file "UART_com.c"
 20917 ;; Parameters:    Size  Location     Type
 20918 ;;		None
 20919 ;; Auto vars:     Size  Location     Type
 20920 ;;		None
 20921 ;; Return value:  Size  Location     Type
 20922 ;;                  1    wreg      unsigned char 
 20923 ;; Registers used:
 20924 ;;		wreg, status,2
 20925 ;; Tracked objects:
 20926 ;;		On entry : 3F/1
 20927 ;;		On exit  : 3F/1
 20928 ;;		Unchanged: 3F/0
 20929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
 20930 ;;      Params:         0       0       0       0       0       0       0       0       0
 20931 ;;      Locals:         0       0       0       0       0       0       0       0       0
 20932 ;;      Temps:          0       0       0       0       0       0       0       0       0
 20933 ;;      Totals:         0       0       0       0       0       0       0       0       0
 20934 ;;Total ram usage:        0 bytes
 20935 ;; Hardware stack levels used:    1
 20936 ;; This function calls:
 20937 ;;		Nothing
 20938 ;; This function is called by:
 20939 ;;		_ISR_HighP
 20940 ;; This function uses a non-reentrant model
 20941 ;;
 20942                           
 20943                           	psect	text101
 20944  00546C                     __ptext101:
 20945                           	callstack 0
 20946  00546C                     _UART_read:
 20947                           	callstack 11
 20948                           
 20949                           ; BSR set to: 1
 20950                           ;UART_com.c: 87:     if(PIR1bits.RCIF == 1) return RCREG;
 20951                           
 20952                           ;incstack = 0
 20953  00546C  AA9E               	btfss	158,5,c	;volatile
 20954  00546E  D002               	goto	i2l9074
 20955                           
 20956                           ; BSR set to: 1
 20957  005470  50AE               	movf	174,w,c	;volatile
 20958  005472  0012               	return	
 20959  005474                     i2l9074:
 20960                           
 20961                           ; BSR set to: 1
 20962  005474  0E00               	movlw	0
 20963                           
 20964                           ; BSR set to: 1
 20965  005476  0012               	return		;funcret
 20966  005478                     __end_of_UART_read:
 20967                           	callstack 0
 20968                           
 20969                           	psect	rparam
 20970  0000                     
 20971                           	psect	temp
 20972  000048                     btemp:
 20973                           	callstack 0
 20974  000048                     	ds	1
 20975  0000                     int$flags	set	btemp
 20976  0000                     wtemp8	set	btemp+1
 20977  0000                     ttemp5	set	btemp+1
 20978  0000                     ttemp6	set	btemp+4
 20979  0000                     ttemp7	set	btemp+8
 20980                           
 20981                           	psect	idloc
 20982                           
 20983                           ;Config register IDLOC0 @ 0x200000
 20984                           ;	unspecified, using default values
 20985  200000                     	org	2097152
 20986  200000  FF                 	db	255
 20987                           
 20988                           ;Config register IDLOC1 @ 0x200001
 20989                           ;	unspecified, using default values
 20990  200001                     	org	2097153
 20991  200001  FF                 	db	255
 20992                           
 20993                           ;Config register IDLOC2 @ 0x200002
 20994                           ;	unspecified, using default values
 20995  200002                     	org	2097154
 20996  200002  FF                 	db	255
 20997                           
 20998                           ;Config register IDLOC3 @ 0x200003
 20999                           ;	unspecified, using default values
 21000  200003                     	org	2097155
 21001  200003  FF                 	db	255
 21002                           
 21003                           ;Config register IDLOC4 @ 0x200004
 21004                           ;	unspecified, using default values
 21005  200004                     	org	2097156
 21006  200004  FF                 	db	255
 21007                           
 21008                           ;Config register IDLOC5 @ 0x200005
 21009                           ;	unspecified, using default values
 21010  200005                     	org	2097157
 21011  200005  FF                 	db	255
 21012                           
 21013                           ;Config register IDLOC6 @ 0x200006
 21014                           ;	unspecified, using default values
 21015  200006                     	org	2097158
 21016  200006  FF                 	db	255
 21017                           
 21018                           ;Config register IDLOC7 @ 0x200007
 21019                           ;	unspecified, using default values
 21020  200007                     	org	2097159
 21021  200007  FF                 	db	255
 21022                           
 21023                           	psect	config
 21024                           
 21025                           ;Config register CONFIG1L @ 0x300000
 21026                           ;	PLL Prescaler Selection bits
 21027                           ;	PLLDIV = 5, Divide by 5 (20 MHz oscillator input)
 21028                           ;	System Clock Postscaler Selection bits
 21029                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
 21030                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
 21031                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
 21032  300000                     	org	3145728
 21033  300000  04                 	db	4
 21034                           
 21035                           ;Config register CONFIG1H @ 0x300001
 21036                           ;	Oscillator Selection bits
 21037                           ;	FOSC = HSPLL_HS, HS oscillator, PLL enabled (HSPLL)
 21038                           ;	Fail-Safe Clock Monitor Enable bit
 21039                           ;	FCMEN = ON, Fail-Safe Clock Monitor enabled
 21040                           ;	Internal/External Oscillator Switchover bit
 21041                           ;	IESO = OFF, Oscillator Switchover mode disabled
 21042  300001                     	org	3145729
 21043  300001  4E                 	db	78
 21044                           
 21045                           ;Config register CONFIG2L @ 0x300002
 21046                           ;	Power-up Timer Enable bit
 21047                           ;	PWRT = ON, PWRT enabled
 21048                           ;	Brown-out Reset Enable bits
 21049                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 21050                           ;	Brown-out Reset Voltage bits
 21051                           ;	BORV = 3, Minimum setting 2.05V
 21052                           ;	USB Voltage Regulator Enable bit
 21053                           ;	VREGEN = OFF, USB voltage regulator disabled
 21054  300002                     	org	3145730
 21055  300002  18                 	db	24
 21056                           
 21057                           ;Config register CONFIG2H @ 0x300003
 21058                           ;	Watchdog Timer Enable bit
 21059                           ;	WDT = ON, WDT enabled
 21060                           ;	Watchdog Timer Postscale Select bits
 21061                           ;	WDTPS = 8192, 1:8192
 21062  300003                     	org	3145731
 21063  300003  1B                 	db	27
 21064                           
 21065                           ; Padding undefined space
 21066  300004                     	org	3145732
 21067  300004  FF                 	db	255
 21068                           
 21069                           ;Config register CONFIG3H @ 0x300005
 21070                           ;	CCP2 MUX bit
 21071                           ;	CCP2MX = ON, CCP2 input/output is multiplexed with RC1
 21072                           ;	PORTB A/D Enable bit
 21073                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
 21074                           ;	Low-Power Timer 1 Oscillator Enable bit
 21075                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
 21076                           ;	MCLR Pin Enable bit
 21077                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 21078  300005                     	org	3145733
 21079  300005  81                 	db	129
 21080                           
 21081                           ;Config register CONFIG4L @ 0x300006
 21082                           ;	Stack Full/Underflow Reset Enable bit
 21083                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
 21084                           ;	Single-Supply ICSP Enable bit
 21085                           ;	LVP = OFF, Single-Supply ICSP disabled
 21086                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
 21087                           ;	ICPRT = OFF, ICPORT disabled
 21088                           ;	Extended Instruction Set Enable bit
 21089                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
 21090                           ;	Background Debugger Enable bit
 21091                           ;	DEBUG = 0x1, unprogrammed default
 21092  300006                     	org	3145734
 21093  300006  80                 	db	128
 21094                           
 21095                           ; Padding undefined space
 21096  300007                     	org	3145735
 21097  300007  FF                 	db	255
 21098                           
 21099                           ;Config register CONFIG5L @ 0x300008
 21100                           ;	Code Protection bit
 21101                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
 21102                           ;	Code Protection bit
 21103                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
 21104                           ;	Code Protection bit
 21105                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
 21106                           ;	Code Protection bit
 21107                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
 21108  300008                     	org	3145736
 21109  300008  0F                 	db	15
 21110                           
 21111                           ;Config register CONFIG5H @ 0x300009
 21112                           ;	Boot Block Code Protection bit
 21113                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
 21114                           ;	Data EEPROM Code Protection bit
 21115                           ;	CPD = OFF, Data EEPROM is not code-protected
 21116  300009                     	org	3145737
 21117  300009  C0                 	db	192
 21118                           
 21119                           ;Config register CONFIG6L @ 0x30000A
 21120                           ;	Write Protection bit
 21121                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
 21122                           ;	Write Protection bit
 21123                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
 21124                           ;	Write Protection bit
 21125                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
 21126                           ;	Write Protection bit
 21127                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
 21128  30000A                     	org	3145738
 21129  30000A  0F                 	db	15
 21130                           
 21131                           ;Config register CONFIG6H @ 0x30000B
 21132                           ;	Configuration Register Write Protection bit
 21133                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
 21134                           ;	Boot Block Write Protection bit
 21135                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
 21136                           ;	Data EEPROM Write Protection bit
 21137                           ;	WRTD = OFF, Data EEPROM is not write-protected
 21138  30000B                     	org	3145739
 21139  30000B  E0                 	db	224
 21140                           
 21141                           ;Config register CONFIG7L @ 0x30000C
 21142                           ;	Table Read Protection bit
 21143                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
 21144                           ;	Table Read Protection bit
 21145                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
 21146                           ;	Table Read Protection bit
 21147                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
 21148                           ;	Table Read Protection bit
 21149                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
 21150  30000C                     	org	3145740
 21151  30000C  0F                 	db	15
 21152                           
 21153                           ;Config register CONFIG7H @ 0x30000D
 21154                           ;	Boot Block Table Read Protection bit
 21155                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
 21156  30000D                     	org	3145741
 21157  30000D  40                 	db	64
 21158                           tosu	equ	0xFFF
 21159                           tosh	equ	0xFFE
 21160                           tosl	equ	0xFFD
 21161                           stkptr	equ	0xFFC
 21162                           pclatu	equ	0xFFB
 21163                           pclath	equ	0xFFA
 21164                           pcl	equ	0xFF9
 21165                           tblptru	equ	0xFF8
 21166                           tblptrh	equ	0xFF7
 21167                           tblptrl	equ	0xFF6
 21168                           tablat	equ	0xFF5
 21169                           prodh	equ	0xFF4
 21170                           prodl	equ	0xFF3
 21171                           indf0	equ	0xFEF
 21172                           postinc0	equ	0xFEE
 21173                           postdec0	equ	0xFED
 21174                           preinc0	equ	0xFEC
 21175                           plusw0	equ	0xFEB
 21176                           fsr0h	equ	0xFEA
 21177                           fsr0l	equ	0xFE9
 21178                           wreg	equ	0xFE8
 21179                           indf1	equ	0xFE7
 21180                           postinc1	equ	0xFE6
 21181                           postdec1	equ	0xFE5
 21182                           preinc1	equ	0xFE4
 21183                           plusw1	equ	0xFE3
 21184                           fsr1h	equ	0xFE2
 21185                           fsr1l	equ	0xFE1
 21186                           bsr	equ	0xFE0
 21187                           indf2	equ	0xFDF
 21188                           postinc2	equ	0xFDE
 21189                           postdec2	equ	0xFDD
 21190                           preinc2	equ	0xFDC
 21191                           plusw2	equ	0xFDB
 21192                           fsr2h	equ	0xFDA
 21193                           fsr2l	equ	0xFD9
 21194                           status	equ	0xFD8

Data Sizes:
    Strings     927
    Constant    76
    Data        18
    BSS         131
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     48      71
    BANK0           160    144     145
    BANK1           256    109     234
    BANK2           256     45      45
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_149(CODE[3]), STR_144(CODE[3]), STR_140(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_149(CODE[3]), STR_144(CODE[3]), STR_140(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    strncmp@l	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 53
		 -> dbuf(BANK1[32]), ACN_CR_Com@texto2(BANK1[53]), ACN_CR_Com@texto1(BANK1[8]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 53
		 -> dbuf(BANK1[32]), ACN_CR_Com@texto2(BANK1[53]), ACN_CR_Com@texto1(BANK1[8]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> ACN_CO_Com@buffer(BANK0[10]), ACN_PA_Com@buffer(BANK0[10]), ACN_CR_Com@buffer(BANK1[10]), Rfid_Lcd@buffer_1766(BANK2[20]), 
		 -> Rfid_Lcd@buffer(BANK2[20]), E_Rtc_Lcd@buffer(BANK0[10]), E_Teclado_Lcd@buffer(BANK0[10]), E_pant2_Lcd@buffer(BANK0[5]), 
		 -> E_pant2_Lcd@buffer2(BANK0[10]), E_pant1_Lcd@buffer(BANK0[20]), Write_User@buffer(BANK0[5]), M_Write@buffer(BANK1[11]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK0[2]), 

    utoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 7
		 -> sprintf@f(BANK0[6]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK1[32]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_128(CODE[5]), STR_126(CODE[5]), STR_124(CODE[3]), STR_120(CODE[5]), 
		 -> STR_118(CODE[5]), STR_116(CODE[3]), STR_106(CODE[3]), STR_101(CODE[3]), 
		 -> STR_75(CODE[4]), STR_72(CODE[3]), STR_69(CODE[3]), STR_66(CODE[3]), 
		 -> STR_65(CODE[5]), STR_62(CODE[7]), STR_58(CODE[3]), STR_54(CODE[5]), 
		 -> STR_53(CODE[5]), STR_52(CODE[5]), STR_51(CODE[5]), STR_50(CODE[5]), 
		 -> STR_49(CODE[5]), STR_41(CODE[5]), STR_37(CODE[5]), STR_34(CODE[5]), 
		 -> STR_32(CODE[5]), STR_31(CODE[7]), STR_27(CODE[5]), STR_25(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_20(CODE[5]), STR_18(CODE[5]), 
		 -> STR_14(CODE[5]), STR_13(CODE[3]), STR_12(CODE[3]), STR_11(CODE[3]), 
		 -> STR_10(CODE[3]), STR_9(CODE[3]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 20
		 -> ACN_CO_Com@buffer(BANK0[10]), ACN_PA_Com@buffer(BANK0[10]), ACN_CR_Com@buffer(BANK1[10]), Rfid_Lcd@buffer_1766(BANK2[20]), 
		 -> Rfid_Lcd@buffer(BANK2[20]), E_Rtc_Lcd@buffer(BANK0[10]), E_Teclado_Lcd@buffer(BANK0[10]), E_pant2_Lcd@buffer(BANK0[5]), 
		 -> E_pant2_Lcd@buffer2(BANK0[10]), E_pant1_Lcd@buffer(BANK0[20]), Write_User@buffer(BANK0[5]), M_Write@buffer(BANK1[11]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    S2849_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> ACN_CO_Com@buffer(BANK0[10]), ACN_PA_Com@buffer(BANK0[10]), ACN_CR_Com@buffer(BANK1[10]), Rfid_Lcd@buffer_1766(BANK2[20]), 
		 -> Rfid_Lcd@buffer(BANK2[20]), E_Rtc_Lcd@buffer(BANK0[10]), E_Teclado_Lcd@buffer(BANK0[10]), E_pant2_Lcd@buffer(BANK0[5]), 
		 -> E_pant2_Lcd@buffer2(BANK0[10]), E_pant1_Lcd@buffer(BANK0[20]), Write_User@buffer(BANK0[5]), M_Write@buffer(BANK1[11]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 20
		 -> ACN_CO_Com@buffer(BANK0[10]), ACN_PA_Com@buffer(BANK0[10]), ACN_CR_Com@buffer(BANK1[10]), Rfid_Lcd@buffer_1766(BANK2[20]), 
		 -> Rfid_Lcd@buffer(BANK2[20]), E_Rtc_Lcd@buffer(BANK0[10]), E_Teclado_Lcd@buffer(BANK0[10]), E_pant2_Lcd@buffer(BANK0[5]), 
		 -> E_pant2_Lcd@buffer2(BANK0[10]), E_pant1_Lcd@buffer(BANK0[20]), Write_User@buffer(BANK0[5]), M_Write@buffer(BANK1[11]), 

    Task2@Maquina_Estado	PTR unsigned char  size(1) Largest target is 1
		 -> main@Est_proj(BANK0[1]), 

    Task1@Pantalla	PTR unsigned char  size(1) Largest target is 1
		 -> main@Est_pant(BANK0[1]), 

    MFRC522_ReadCardSerial@str	PTR unsigned char  size(2) Largest target is 10
		 -> UID(BANK1[10]), 

    MFRC522_isCard@TagType	PTR unsigned char  size(2) Largest target is 2
		 -> TagType(BANK1[2]), 

    MFRC522_AntiColl@serNum	PTR unsigned char  size(2) Largest target is 10
		 -> UID(BANK1[10]), 

    MFRC522_Request@TagType	PTR unsigned char  size(2) Largest target is 2
		 -> TagType(BANK1[2]), 

    MFRC522_ToCard@backData	PTR unsigned char  size(2) Largest target is 18
		 -> TagType(BANK1[2]), UID(BANK1[10]), MFRC522_Write@buff(COMRAM[18]), MFRC522_Auth@buff(COMRAM[12]), 
		 -> MFRC522_Halt@buff(COMRAM[4]), MFRC522_SelectTag@buffer(COMRAM[9]), 

    MFRC522_ToCard@backLen	PTR unsigned int  size(1) Largest target is 2
		 -> MFRC522_AntiColl@unLen(BANK0[2]), MFRC522_Read@unLen(COMRAM[2]), MFRC522_Write@recvBits(COMRAM[2]), MFRC522_Auth@recvBits(COMRAM[2]), 
		 -> MFRC522_Halt@unLen(COMRAM[2]), MFRC522_SelectTag@recvBits(COMRAM[2]), MFRC522_Request@backBits(BANK0[2]), 

    MFRC522_ToCard@sendData	PTR unsigned char  size(2) Largest target is 18
		 -> TagType(BANK1[2]), UID(BANK1[10]), MFRC522_Write@buff(COMRAM[18]), MFRC522_Auth@buff(COMRAM[12]), 
		 -> MFRC522_Halt@buff(COMRAM[4]), MFRC522_SelectTag@buffer(COMRAM[9]), 

    LCD_array@date	PTR const unsigned char  size(2) Largest target is 21
		 -> STR_137(CODE[21]), STR_136(CODE[21]), STR_135(CODE[21]), STR_134(CODE[21]), 
		 -> STR_133(CODE[21]), STR_132(CODE[21]), STR_131(CODE[21]), STR_114(CODE[20]), 
		 -> STR_113(CODE[21]), STR_112(CODE[21]), STR_111(CODE[20]), STR_110(CODE[21]), 
		 -> STR_109(CODE[21]), STR_89(CODE[21]), STR_88(CODE[21]), STR_87(CODE[21]), 
		 -> STR_86(CODE[21]), STR_85(CODE[21]), STR_84(CODE[21]), STR_83(CODE[21]), 
		 -> STR_82(CODE[21]), STR_81(CODE[21]), STR_80(CODE[15]), STR_79(CODE[21]), 
		 -> STR_78(CODE[21]), STR_64(CODE[5]), STR_63(CODE[15]), STR_61(CODE[6]), 
		 -> STR_60(CODE[19]), STR_59(CODE[19]), Rfid_Lcd@buffer(BANK2[20]), STR_57(CODE[8]), 
		 -> STR_56(CODE[10]), STR_55(CODE[21]), E_Rtc_Lcd@buffer(BANK0[10]), STR_48(CODE[6]), 
		 -> STR_47(CODE[5]), STR_46(CODE[5]), STR_45(CODE[5]), STR_44(CODE[5]), 
		 -> STR_43(CODE[6]), STR_42(CODE[18]), E_Teclado_Lcd@buffer(BANK0[10]), STR_40(CODE[8]), 
		 -> STR_39(CODE[19]), STR_38(CODE[21]), STR_36(CODE[3]), STR_35(CODE[12]), 
		 -> STR_33(CODE[3]), E_pant2_Lcd@buffer(BANK0[5]), E_pant2_Lcd@buffer2(BANK0[10]), STR_30(CODE[15]), 
		 -> STR_29(CODE[9]), STR_28(CODE[6]), STR_26(CODE[2]), STR_24(CODE[2]), 
		 -> STR_21(CODE[2]), STR_19(CODE[2]), E_pant1_Lcd@buffer(BANK0[20]), E_pant1_Lcd@llave(BANK0[5]), 
		 -> STR_17(CODE[7]), STR_16(CODE[6]), STR_15(CODE[8]), STR_8(CODE[19]), 
		 -> STR_7(CODE[6]), STR_6(CODE[6]), STR_5(CODE[6]), STR_4(CODE[6]), 
		 -> STR_3(CODE[14]), STR_2(CODE[21]), STR_1(CODE[21]), 

    UART_array@cadena	PTR const unsigned char  size(2) Largest target is 53
		 -> STR_130(CODE[3]), STR_129(CODE[2]), STR_127(CODE[2]), STR_125(CODE[2]), 
		 -> STR_123(CODE[7]), ACN_CO_Com@buffer(BANK0[10]), STR_122(CODE[3]), STR_121(CODE[2]), 
		 -> STR_119(CODE[2]), STR_117(CODE[2]), STR_115(CODE[7]), ACN_PA_Com@buffer(BANK0[10]), 
		 -> STR_108(CODE[3]), STR_107(CODE[2]), STR_105(CODE[2]), STR_104(CODE[9]), 
		 -> STR_103(CODE[3]), STR_102(CODE[2]), STR_100(CODE[2]), ACN_CR_Com@buffer(BANK1[10]), 
		 -> STR_99(CODE[9]), ACN_CR_Com@texto2(BANK1[53]), ACN_CR_Com@texto1(BANK1[8]), STR_98(CODE[2]), 
		 -> llave(BANK1[4]), STR_97(CODE[11]), STR_96(CODE[11]), STR_95(CODE[11]), 
		 -> STR_94(CODE[11]), STR_77(CODE[2]), STR_76(CODE[6]), STR_74(CODE[2]), 
		 -> STR_73(CODE[19]), STR_71(CODE[2]), STR_70(CODE[19]), STR_68(CODE[2]), 
		 -> STR_67(CODE[11]), Rfid_Lcd@buffer_1766(BANK2[20]), 

    i2c_array@cadena	PTR const unsigned char  size(2) Largest target is 11
		 -> Write_User@buffer(BANK0[5]), M_Write@buffer(BANK1[11]), 


Critical Paths under _main in COMRAM

    _UART_init->___aldiv
    _ACN_PA_Com->_Erase_Eeprom
    _E_Ingresos->_Read_Hash_ex
    _Num_User->_Read_Hash_ex
    _E_Teclado_Lcd->_Erase_Eeprom
    _New_User_Pos->_Read_User
    _i2c_array->_i2c_write
    _E_Rfid_Proj->_MFRC522_ReadCardSerial
    _E_Rfid_Proj->_MFRC522_isCard
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _MFRC522_ToCard->_MFRC522_Clear_Bit
    _MFRC522_Clear_Bit->_MFRC522_Wr
    _Hash_algoritmo->___lmul
    _Erase_Eeprom->_EEPROM_init
    _Read_User->_i2c_read
    _Read_User->_i2c_write
    _M_Read->___omul
    ___omul->_i2c_read
    _Easter_Egg->_LCD_array
    _utoa->___lodiv
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->_isspace
    _RTC_send_hora->___lbdiv
    _RTC_send_fecha->___lbdiv
    _LCD_array->_LCD_command
    _LCD_array->_LCD_date
    _LCD_date->_i2c_write
    _MFRC522_Reset->_MFRC522_Wr
    _MFRC522_AntennaOn->_MFRC522_Set_Bit
    _MFRC522_Set_Bit->_MFRC522_Wr
    _MFRC522_Wr->_MFRC522_Rd
    _MFRC522_Rd->_Soft_SPI_Read
    _LCD_init->_LCD_command
    _LCD_command->_i2c_write

Critical Paths under _ISR_LowP in COMRAM

    _ISR_LowP->_TaskDetected
    _TaskDetected->_RTC_read_date
    _TaskDetected->_RTC_read_time
    _RTC_read_time->i1_i2c_read
    _RTC_read_time->i1_i2c_write
    _RTC_read_date->i1_i2c_read
    _RTC_read_date->i1_i2c_write

Critical Paths under _ISR_HighP in COMRAM

    _ISR_HighP->i2___wmul

Critical Paths under _main in BANK0

    _main->_Task1
    _Task_Com_USART->_ACN_CO_Com
    _Task_Com_USART->_ACN_PA_Com
    _ACN_PA_Com->_sprintf
    _ACN_CR_Com->_sprintf
    _ACN_CO_Com->_sprintf
    _E_Ingresos->_Read_Hash_ex
    _Task1->_E_pant1_Lcd
    _E_pant2_Lcd->_sprintf
    _Num_User->_Read_Hash_ex
    _E_pant1_Lcd->_sprintf
    _E_Teclado_Lcd->_Rfid_Lcd
    _Rfid_Lcd->_Sum_Cant_Usuarios
    _User_Scan->_M_Read
    _Sum_Cant_Usuarios->_Write_User
    _Write_User->_sprintf
    _Read_Hash_ex->_M_Read
    _M_Write->_sprintf
    _E_Rfid_Proj->_MFRC522_ReadCardSerial
    _MFRC522_isCard->_MFRC522_Request
    _MFRC522_Request->_MFRC522_ToCard
    _MFRC522_ReadCardSerial->_MFRC522_AntiColl
    _MFRC522_AntiColl->_MFRC522_ToCard
    _Erase_Eeprom->_EEPROM_init
    _EEPROM_init->_M_Read
    _M_Read->___omul
    _E_Rtc_Lcd->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->___aodiv

Critical Paths under _ISR_LowP in BANK0

    None.

Critical Paths under _ISR_HighP in BANK0

    None.

Critical Paths under _main in BANK1

    _Task_Com_USART->_ACN_CR_Com
    _Rfid_Lcd->_M_Write

Critical Paths under _ISR_LowP in BANK1

    None.

Critical Paths under _ISR_HighP in BANK1

    None.

Critical Paths under _main in BANK2

    _E_Teclado_Lcd->_Rfid_Lcd

Critical Paths under _ISR_LowP in BANK2

    None.

Critical Paths under _ISR_HighP in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_LowP in BANK3

    None.

Critical Paths under _ISR_HighP in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_LowP in BANK4

    None.

Critical Paths under _ISR_HighP in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_LowP in BANK5

    None.

Critical Paths under _ISR_HighP in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_LowP in BANK6

    None.

Critical Paths under _ISR_HighP in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_LowP in BANK7

    None.

Critical Paths under _ISR_HighP in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  733137
                                            139 BANK0      5     5      0
                          _LCD_array
                        _LCD_command
                           _LCD_init
                       _MFRC522_Init
                            _OS_init
                      _Soft_SPI_Init
                        _TEC4x4_init
                              _Task1
                              _Task2
                     _Task_Com_USART
                          _UART_init
                           _i2c_init
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            6     4      2     725
                                             37 COMRAM     6     4      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             14     6      8     604
                                             23 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (1) _Task_Com_USART                                       3     3      0  182597
                                            120 BANK0      3     3      0
                         _ACN_CO_Com
                         _ACN_CR_Com
                         _ACN_PA_Com
                           _Read_Com
                         _UART_array
                         _UART_write
 ---------------------------------------------------------------------------------
 (2) _Read_Com                                             9     9      0     488
                                             23 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (2) _ACN_PA_Com                                          12    12      0  110409
                                            108 BANK0     12    12      0
                       _Erase_Eeprom
                          _LCD_array
                        _LCD_command
                     _RTC_send_fecha
                      _RTC_send_hora
                         _UART_array
                         _UART_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _ACN_CR_Com                                          73    73      0   31464
                                              0 BANK1     73    73      0
                         _UART_array
                         _UART_write
                            _sprintf
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _ACN_CO_Com                                          12    12      0   35547
                                            108 BANK0     12    12      0
                         _UART_array
                         _UART_write
                          _User_Scan
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _Task2                                                2     1      1   34717
                                             52 BANK0      2     1      1
                         _E_Ingresos
                        _E_Rfid_Proj
 ---------------------------------------------------------------------------------
 (2) _E_Ingresos                                           0     0      0    6109
                       _Read_Hash_ex
 ---------------------------------------------------------------------------------
 (1) _Task1                                                2     1      1  485088
                                            137 BANK0      2     1      1
                          _E_Rtc_Lcd
                      _E_Teclado_Lcd
                        _E_pant1_Lcd
                        _E_pant2_Lcd
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _E_pant2_Lcd                                         16    16      0   63603
                                            108 BANK0     16    16      0
                          _LCD_array
                           _Num_User
                          _Read_User
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Num_User                                            19    11      8   12187
                                             44 COMRAM     3     3      0
                                             52 BANK0     16     8      8
                             _M_Read
                       _Read_Hash_ex
                          _Read_User
 ---------------------------------------------------------------------------------
 (2) _E_pant1_Lcd                                         29    29      0   50768
                                            108 BANK0     29    29      0
                          _LCD_array
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _E_Teclado_Lcd                                       10    10      0  317636
                                            121 BANK0     10    10      0
                         _Easter_Egg
                       _Erase_Eeprom
                          _LCD_array
                           _Rfid_Lcd
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Rfid_Lcd                                            47    47      0  190225
                                            119 BANK0      2     2      0
                                              0 BANK2     45    45      0
                        _E_Rfid_Proj
                          _LCD_array
                        _LCD_command
                             _M_Read
                            _M_Write
                       _New_User_Pos
                       _Read_Hash_ex
                          _Read_User
                  _Sum_Cant_Usuarios
                         _UART_array
                         _UART_write
                          _User_Scan
                         _Write_User
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _User_Scan                                           20    20      0    4637
                                             41 COMRAM     4     4      0
                                             36 BANK0     16    16      0
                             _M_Read
 ---------------------------------------------------------------------------------
 (2) _UART_write                                           1     1      0      31
                                             23 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _UART_array                                           2     0      2    4395
                                             23 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (4) _Sum_Cant_Usuarios                                    1     1      0   29031
                                            118 BANK0      1     1      0
                          _Read_User
                         _Write_User
 ---------------------------------------------------------------------------------
 (4) _Write_User                                          10     7      3   27730
                                            108 BANK0     10     7      3
                          _i2c_array
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _Read_Hash_ex                                        19    11      8    6109
                                             41 COMRAM     3     3      0
                                             36 BANK0     16     8      8
                             _M_Read
                          _Read_User
 ---------------------------------------------------------------------------------
 (4) _New_User_Pos                                         7     5      2    1338
                                             30 COMRAM     7     5      2
                          _Read_User
 ---------------------------------------------------------------------------------
 (4) _M_Write                                            119   109     10   31987
                                            108 BANK0     10     0     10
                                              0 BANK1    109   109      0
                            ___aodiv
                             ___omul
                          _i2c_array
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                            _sprintf
 ---------------------------------------------------------------------------------
 (5) _i2c_array                                            2     0      2     707
                                             25 COMRAM     2     0      2
                          _i2c_write
 ---------------------------------------------------------------------------------
 (2) _E_Rfid_Proj                                         20    20      0   28332
                     _Hash_algoritmo
             _MFRC522_ReadCardSerial
                     _MFRC522_isCard
 ---------------------------------------------------------------------------------
 (3) _MFRC522_isCard                                       2     0      2   12448
                                             46 COMRAM     2     0      2
                    _MFRC522_Request
 ---------------------------------------------------------------------------------
 (4) _MFRC522_Request                                      6     4      2   12327
                                             44 COMRAM     2     0      2
                                              8 BANK0      4     4      0
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _MFRC522_ReadCardSerial                               3     1      2   15261
                                             47 COMRAM     1     1      0
                                             13 BANK0      2     0      2
                   _MFRC522_AntiColl
 ---------------------------------------------------------------------------------
 (4) _MFRC522_AntiColl                                     8     6      2   15075
                                             44 COMRAM     3     1      2
                                              8 BANK0      5     5      0
                  _MFRC522_Clear_Bit
                     _MFRC522_ToCard
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (5) _MFRC522_ToCard                                      18    12      6   10314
                                             34 COMRAM    10     4      6
                                              0 BANK0      8     8      0
                  _MFRC522_Clear_Bit
                         _MFRC522_Rd
                    _MFRC522_Set_Bit
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (6) _MFRC522_Clear_Bit                                    3     2      1    2581
                                             31 COMRAM     3     2      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (3) _Hash_algoritmo                                      10     6      4     623
                                             35 COMRAM    10     6      4
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              12     4      8     456
                                             23 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (3) _Erase_Eeprom                                         2     2      0   53581
                                             46 COMRAM     2     2      0
                        _EEPROM_init
                          _LCD_array
                        _LCD_command
 ---------------------------------------------------------------------------------
 (4) _EEPROM_init                                         13    13      0   29733
                                             41 COMRAM     5     5      0
                                             36 BANK0      8     8      0
                          _LCD_array
                        _LCD_command
                             _M_Read
                          _Read_User
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (5) _Read_User                                            5     3      2    1230
                                             25 COMRAM     5     3      2
                            _i2c_ack
                           _i2c_nack
                           _i2c_read
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (5) _M_Read                                              38    30      8    4399
                                              8 BANK0     28    20      8
                             ___omul
                            _i2c_ack
                           _i2c_nack
                           _i2c_read
                        _i2c_restart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (6) _i2c_restart                                          0     0      0       0
                          _i2c_start
                           _i2c_stop
 ---------------------------------------------------------------------------------
 (6) _i2c_read                                             2     2      0     108
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _i2c_nack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _i2c_ack                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (6) ___omul                                              24     8     16    2256
                                             25 COMRAM    16     0     16
                                              0 BANK0      8     8      0
                           _i2c_read (ARG)
 ---------------------------------------------------------------------------------
 (3) _Easter_Egg                                           2     2      0   23848
                                             35 COMRAM     2     2      0
                          _LCD_array
                        _LCD_command
 ---------------------------------------------------------------------------------
 (2) _E_Rtc_Lcd                                           12    12      0   52362
                                            108 BANK0     12    12      0
                          _LCD_array
                     _RTC_send_fecha
                      _RTC_send_hora
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21     9     12   26280
                                             87 BANK0     21     9     12
                             _M_Read (ARG)
                           _Num_User (ARG)
                          _Read_User (ARG)
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             6     2      4   19110
                                             81 BANK0      6     2      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           52    49      3   18550
                                             45 BANK0     36    33      3
                               _atoi
                               _dtoa
                              _fputc
                            _isdigit
                            _strncmp
                               _utoa
 ---------------------------------------------------------------------------------
 (6) _utoa                                                31    22      9    5459
                                              0 BANK0     31    22      9
                            ___lodiv
                            ___lomod
                                _pad
 ---------------------------------------------------------------------------------
 (7) ___lomod                                             17     1     16     412
                                             23 COMRAM    17     1     16
 ---------------------------------------------------------------------------------
 (7) ___lodiv                                             25     9     16     421
                                             23 COMRAM    25     9     16
 ---------------------------------------------------------------------------------
 (6) _strncmp                                             11     5      6    1135
                                             23 COMRAM    11     5      6
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                35    26      9    7033
                                             10 BANK0     35    26      9
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                 10     5      5    3867
                                             37 COMRAM    10     5      5
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (8) _strlen                                               4     2      2     400
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                6     3      3    1537
                                             31 COMRAM     6     3      3
                              _fputc
 ---------------------------------------------------------------------------------
 (9) _fputc                                                8     5      3    1037
                                             23 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (10) _putch                                               1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     183
                                             41 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             18     2     16     613
                                             23 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             26    10     16    1345
                                             23 COMRAM    16     0     16
                                              0 BANK0     10    10      0
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    1885
                                             30 COMRAM    15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              7     5      2     259
                                             23 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     281
                                             23 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     782
                                             23 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) _RTC_send_hora                                        2     2      0    1035
                                             27 COMRAM     2     2      0
                            ___lbdiv
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (3) _RTC_send_fecha                                       2     2      0    1035
                                             27 COMRAM     2     2      0
                            ___lbdiv
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     618
                                             23 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) _LCD_array                                            8     2      6   23622
                                             27 COMRAM     8     2      6
                        _LCD_command
                           _LCD_date
 ---------------------------------------------------------------------------------
 (4) _LCD_date                                             2     2      0     226
                                             25 COMRAM     2     2      0
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _TEC4x4_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Soft_SPI_Init                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _OS_init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MFRC522_Init                                         0     0      0    5685
                  _MFRC522_AntennaOn
                      _MFRC522_Reset
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_Reset                                        0     0      0    1657
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (2) _MFRC522_AntennaOn                                    0     0      0    2371
                    _MFRC522_Set_Bit
 ---------------------------------------------------------------------------------
 (6) _MFRC522_Set_Bit                                      2     1      1    2371
                                             31 COMRAM     2     1      1
                         _MFRC522_Rd
                         _MFRC522_Wr
 ---------------------------------------------------------------------------------
 (5) _MFRC522_Wr                                           2     1      1    1657
                                             29 COMRAM     2     1      1
                         _MFRC522_Rd (ARG)
                     _Soft_SPI_Write
 ---------------------------------------------------------------------------------
 (7) _MFRC522_Rd                                           2     2      0     281
                                             27 COMRAM     2     2      0
                      _Soft_SPI_Read
                     _Soft_SPI_Write
 ---------------------------------------------------------------------------------
 (6) _Soft_SPI_Write                                       2     2      0     105
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) _Soft_SPI_Read                                        4     2      2     111
                                             23 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             3     3      0     294
                                             27 COMRAM     3     3      0
                        _LCD_command
 ---------------------------------------------------------------------------------
 (3) _LCD_command                                          2     2      0     226
                                             25 COMRAM     2     2      0
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (4) _i2c_write                                            2     2      0     102
                                             23 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (4) _i2c_stop                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (14) _ISR_LowP                                            7     7      0     804
                                             16 COMRAM     7     7      0
                       _TaskDetected
 ---------------------------------------------------------------------------------
 (15) _TaskDetected                                        1     1      0     804
                                             15 COMRAM     1     1      0
                      _RTC_read_date
                      _RTC_read_time
                            _escaneo
 ---------------------------------------------------------------------------------
 (16) _escaneo                                             2     2      0     180
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (16) _RTC_read_time                                       2     2      0     278
                                             13 COMRAM     2     2      0
                         i1_i2c_nack
                         i1_i2c_read
                      i1_i2c_restart
                        i1_i2c_start
                         i1_i2c_stop
                        i1_i2c_write
 ---------------------------------------------------------------------------------
 (16) _RTC_read_date                                       2     2      0     278
                                             13 COMRAM     2     2      0
                         i1_i2c_nack
                         i1_i2c_read
                      i1_i2c_restart
                        i1_i2c_start
                         i1_i2c_stop
                        i1_i2c_write
 ---------------------------------------------------------------------------------
 (17) i1_i2c_write                                         2     2      0      69
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (17) i1_i2c_restart                                       0     0      0       0
                        i1_i2c_start
                         i1_i2c_stop
 ---------------------------------------------------------------------------------
 (17) i1_i2c_stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_i2c_start                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (17) i1_i2c_read                                          2     2      0      71
                                             11 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (17) i1_i2c_nack                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (19) _ISR_HighP                                           5     5      0     263
                                              6 COMRAM     5     5      0
                          _UART_read
                        _antirrebote
                           i2___wmul
 ---------------------------------------------------------------------------------
 (20) i2___wmul                                            6     2      4     263
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (20) _antirrebote                                         2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (20) _UART_read                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 20
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_array
     _LCD_command
       _i2c_start
       _i2c_stop
       _i2c_write
     _LCD_date
       _i2c_start
       _i2c_stop
       _i2c_write
   _LCD_command
     _i2c_start
     _i2c_stop
     _i2c_write
   _LCD_init
     _LCD_command
       _i2c_start
       _i2c_stop
       _i2c_write
   _MFRC522_Init
     _MFRC522_AntennaOn
       _MFRC522_Set_Bit
         _MFRC522_Rd
           _Soft_SPI_Read
           _Soft_SPI_Write
         _MFRC522_Wr
           _MFRC522_Rd (ARG)
             _Soft_SPI_Read
             _Soft_SPI_Write
           _Soft_SPI_Write (ARG)
     _MFRC522_Reset
       _MFRC522_Wr
         _MFRC522_Rd (ARG)
           _Soft_SPI_Read
           _Soft_SPI_Write
         _Soft_SPI_Write (ARG)
     _MFRC522_Wr
       _MFRC522_Rd (ARG)
         _Soft_SPI_Read
         _Soft_SPI_Write
       _Soft_SPI_Write (ARG)
   _OS_init
   _Soft_SPI_Init
   _TEC4x4_init
   _Task1
     _E_Rtc_Lcd
       _LCD_array
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_date
           _i2c_start
           _i2c_stop
           _i2c_write
       _RTC_send_fecha
         ___lbdiv
         _i2c_start
         _i2c_stop
         _i2c_write
       _RTC_send_hora
         ___lbdiv
         _i2c_start
         _i2c_stop
         _i2c_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _E_Teclado_Lcd
       _Easter_Egg
         _LCD_array
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _LCD_date
             _i2c_start
             _i2c_stop
             _i2c_write
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
       _Erase_Eeprom
         _EEPROM_init
           _LCD_array
             _LCD_command
               _i2c_start
               _i2c_stop
               _i2c_write
             _LCD_date
               _i2c_start
               _i2c_stop
               _i2c_write
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_array
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _LCD_date
             _i2c_start
             _i2c_stop
             _i2c_write
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
       _LCD_array
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_date
           _i2c_start
           _i2c_stop
           _i2c_write
       _Rfid_Lcd
         _E_Rfid_Proj
           _Hash_algoritmo
             ___lmul
           _MFRC522_ReadCardSerial
             _MFRC522_AntiColl
               _MFRC522_Clear_Bit
                 _MFRC522_Rd
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _MFRC522_Wr
                   _MFRC522_Rd (ARG)
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _Soft_SPI_Write (ARG)
               _MFRC522_ToCard
                 _MFRC522_Clear_Bit
                   _MFRC522_Rd
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _MFRC522_Wr
                     _MFRC522_Rd (ARG)
                       _Soft_SPI_Read
                       _Soft_SPI_Write
                     _Soft_SPI_Write (ARG)
                 _MFRC522_Rd
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _MFRC522_Set_Bit
                   _MFRC522_Rd
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _MFRC522_Wr
                     _MFRC522_Rd (ARG)
                       _Soft_SPI_Read
                       _Soft_SPI_Write
                     _Soft_SPI_Write (ARG)
                 _MFRC522_Wr
                   _MFRC522_Rd (ARG)
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _Soft_SPI_Write (ARG)
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
           _MFRC522_isCard
             _MFRC522_Request
               _MFRC522_ToCard
                 _MFRC522_Clear_Bit
                   _MFRC522_Rd
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _MFRC522_Wr
                     _MFRC522_Rd (ARG)
                       _Soft_SPI_Read
                       _Soft_SPI_Write
                     _Soft_SPI_Write (ARG)
                 _MFRC522_Rd
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _MFRC522_Set_Bit
                   _MFRC522_Rd
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _MFRC522_Wr
                     _MFRC522_Rd (ARG)
                       _Soft_SPI_Read
                       _Soft_SPI_Write
                     _Soft_SPI_Write (ARG)
                 _MFRC522_Wr
                   _MFRC522_Rd (ARG)
                     _Soft_SPI_Read
                     _Soft_SPI_Write
                   _Soft_SPI_Write (ARG)
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
         _LCD_array
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _LCD_date
             _i2c_start
             _i2c_stop
             _i2c_write
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _M_Read
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _M_Write
           ___aodiv
           ___omul
             _i2c_read (ARG)
           _i2c_array
             _i2c_write
           _i2c_start
           _i2c_stop
           _i2c_write
           _sprintf
             _M_Read (ARG)
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Num_User (ARG)
               _M_Read
                 ___omul
                   _i2c_read (ARG)
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
               _Read_Hash_ex
                 _M_Read
                   ___omul
                     _i2c_read (ARG)
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
                 _Read_User
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
               _Read_User
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
             _Read_User (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                         _putch
                     _strlen
                 _fputc
                   _putch
                 _isdigit
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                         _putch
                     _strlen
         _New_User_Pos
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_Hash_ex
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Sum_Cant_Usuarios
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Write_User
             _i2c_array
               _i2c_write
             _i2c_start
             _i2c_stop
             _i2c_write
             _sprintf
               _M_Read (ARG)
                 ___omul
                   _i2c_read (ARG)
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
               _Num_User (ARG)
                 _M_Read
                   ___omul
                     _i2c_read (ARG)
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
                 _Read_Hash_ex
                   _M_Read
                     ___omul
                       _i2c_read (ARG)
                     _i2c_ack
                     _i2c_nack
                     _i2c_read
                     _i2c_restart
                       _i2c_start
                       _i2c_stop
                     _i2c_start
                     _i2c_stop
                     _i2c_write
                   _Read_User
                     _i2c_ack
                     _i2c_nack
                     _i2c_read
                     _i2c_restart
                       _i2c_start
                       _i2c_stop
                     _i2c_start
                     _i2c_stop
                     _i2c_write
                 _Read_User
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
               _Read_User (ARG)
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
               _vfprintf (ARG)
                 _vfpfcnvrt
                   _atoi
                     ___wmul
                     _isdigit
                     _isspace
                   _dtoa
                     ___aodiv
                     ___aomod
                     _abs
                       ___aomod (ARG)
                     _pad
                       _fputc
                         _putch
                       _fputs
                         _fputc
                           _putch
                       _strlen
                   _fputc
                     _putch
                   _isdigit
                   _strncmp
                   _utoa
                     ___lodiv
                     ___lomod
                     _pad
                       _fputc
                         _putch
                       _fputs
                         _fputc
                           _putch
                       _strlen
         _UART_array
         _UART_write
         _User_Scan
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Write_User
           _i2c_array
             _i2c_write
           _i2c_start
           _i2c_stop
           _i2c_write
           _sprintf
             _M_Read (ARG)
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Num_User (ARG)
               _M_Read
                 ___omul
                   _i2c_read (ARG)
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
               _Read_Hash_ex
                 _M_Read
                   ___omul
                     _i2c_read (ARG)
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
                 _Read_User
                   _i2c_ack
                   _i2c_nack
                   _i2c_read
                   _i2c_restart
                     _i2c_start
                     _i2c_stop
                   _i2c_start
                   _i2c_stop
                   _i2c_write
               _Read_User
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
             _Read_User (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _vfprintf (ARG)
               _vfpfcnvrt
                 _atoi
                   ___wmul
                   _isdigit
                   _isspace
                 _dtoa
                   ___aodiv
                   ___aomod
                   _abs
                     ___aomod (ARG)
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                         _putch
                     _strlen
                 _fputc
                   _putch
                 _isdigit
                 _strncmp
                 _utoa
                   ___lodiv
                   ___lomod
                   _pad
                     _fputc
                       _putch
                     _fputs
                       _fputc
                         _putch
                     _strlen
         _sprintf
           _M_Read (ARG)
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Num_User (ARG)
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_Hash_ex
               _M_Read
                 ___omul
                   _i2c_read (ARG)
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
               _Read_User
                 _i2c_ack
                 _i2c_nack
                 _i2c_read
                 _i2c_restart
                   _i2c_start
                   _i2c_stop
                 _i2c_start
                 _i2c_stop
                 _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _vfprintf (ARG)
             _vfpfcnvrt
               _atoi
                 ___wmul
                 _isdigit
                 _isspace
               _dtoa
                 ___aodiv
                 ___aomod
                 _abs
                   ___aomod (ARG)
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
                       _putch
                   _strlen
               _fputc
                 _putch
               _isdigit
               _strncmp
               _utoa
                 ___lodiv
                 ___lomod
                 _pad
                   _fputc
                     _putch
                   _fputs
                     _fputc
                       _putch
                   _strlen
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _E_pant1_Lcd
       _LCD_array
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_date
           _i2c_start
           _i2c_stop
           _i2c_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _E_pant2_Lcd
       _LCD_array
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_date
           _i2c_start
           _i2c_stop
           _i2c_write
       _Num_User
         _M_Read
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Read_Hash_ex
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
       _Read_User
         _i2c_ack
         _i2c_nack
         _i2c_read
         _i2c_restart
           _i2c_start
           _i2c_stop
         _i2c_start
         _i2c_stop
         _i2c_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _LCD_command
       _i2c_start
       _i2c_stop
       _i2c_write
   _Task2
     _E_Ingresos
       _Read_Hash_ex
         _M_Read
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Read_User
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
     _E_Rfid_Proj
       _Hash_algoritmo
         ___lmul
       _MFRC522_ReadCardSerial
         _MFRC522_AntiColl
           _MFRC522_Clear_Bit
             _MFRC522_Rd
               _Soft_SPI_Read
               _Soft_SPI_Write
             _MFRC522_Wr
               _MFRC522_Rd (ARG)
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _Soft_SPI_Write (ARG)
           _MFRC522_ToCard
             _MFRC522_Clear_Bit
               _MFRC522_Rd
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
             _MFRC522_Rd
               _Soft_SPI_Read
               _Soft_SPI_Write
             _MFRC522_Set_Bit
               _MFRC522_Rd
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
             _MFRC522_Wr
               _MFRC522_Rd (ARG)
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _Soft_SPI_Write (ARG)
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _Soft_SPI_Read
               _Soft_SPI_Write
             _Soft_SPI_Write (ARG)
       _MFRC522_isCard
         _MFRC522_Request
           _MFRC522_ToCard
             _MFRC522_Clear_Bit
               _MFRC522_Rd
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
             _MFRC522_Rd
               _Soft_SPI_Read
               _Soft_SPI_Write
             _MFRC522_Set_Bit
               _MFRC522_Rd
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _MFRC522_Wr
                 _MFRC522_Rd (ARG)
                   _Soft_SPI_Read
                   _Soft_SPI_Write
                 _Soft_SPI_Write (ARG)
             _MFRC522_Wr
               _MFRC522_Rd (ARG)
                 _Soft_SPI_Read
                 _Soft_SPI_Write
               _Soft_SPI_Write (ARG)
           _MFRC522_Wr
             _MFRC522_Rd (ARG)
               _Soft_SPI_Read
               _Soft_SPI_Write
             _Soft_SPI_Write (ARG)
   _Task_Com_USART
     _ACN_CO_Com
       _UART_array
       _UART_write
       _User_Scan
         _M_Read
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _ACN_CR_Com
       _UART_array
       _UART_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
       _strlen
     _ACN_PA_Com
       _Erase_Eeprom
         _EEPROM_init
           _LCD_array
             _LCD_command
               _i2c_start
               _i2c_stop
               _i2c_write
             _LCD_date
               _i2c_start
               _i2c_stop
               _i2c_write
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_array
           _LCD_command
             _i2c_start
             _i2c_stop
             _i2c_write
           _LCD_date
             _i2c_start
             _i2c_stop
             _i2c_write
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
       _LCD_array
         _LCD_command
           _i2c_start
           _i2c_stop
           _i2c_write
         _LCD_date
           _i2c_start
           _i2c_stop
           _i2c_write
       _LCD_command
         _i2c_start
         _i2c_stop
         _i2c_write
       _RTC_send_fecha
         ___lbdiv
         _i2c_start
         _i2c_stop
         _i2c_write
       _RTC_send_hora
         ___lbdiv
         _i2c_start
         _i2c_stop
         _i2c_write
       _UART_array
       _UART_write
       _sprintf
         _M_Read (ARG)
           ___omul
             _i2c_read (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _Num_User (ARG)
           _M_Read
             ___omul
               _i2c_read (ARG)
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
           _Read_Hash_ex
             _M_Read
               ___omul
                 _i2c_read (ARG)
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
             _Read_User
               _i2c_ack
               _i2c_nack
               _i2c_read
               _i2c_restart
                 _i2c_start
                 _i2c_stop
               _i2c_start
               _i2c_stop
               _i2c_write
           _Read_User
             _i2c_ack
             _i2c_nack
             _i2c_read
             _i2c_restart
               _i2c_start
               _i2c_stop
             _i2c_start
             _i2c_stop
             _i2c_write
         _Read_User (ARG)
           _i2c_ack
           _i2c_nack
           _i2c_read
           _i2c_restart
             _i2c_start
             _i2c_stop
           _i2c_start
           _i2c_stop
           _i2c_write
         _vfprintf (ARG)
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _fputc
               _putch
             _isdigit
             _strncmp
             _utoa
               ___lodiv
               ___lomod
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
     _Read_Com
     _UART_array
     _UART_write
   _UART_init
     ___aldiv
   _i2c_init

 _ISR_LowP (ROOT)
   _TaskDetected
     _RTC_read_date
       i1_i2c_nack
       i1_i2c_read
       i1_i2c_restart
         i1_i2c_start
         i1_i2c_stop
       i1_i2c_start
       i1_i2c_stop
       i1_i2c_write
     _RTC_read_time
       i1_i2c_nack
       i1_i2c_read
       i1_i2c_restart
         i1_i2c_start
         i1_i2c_stop
       i1_i2c_start
       i1_i2c_stop
       i1_i2c_write
     _escaneo

 _ISR_HighP (ROOT)
   _UART_read
   _antirrebote
   i2___wmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      21        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100     2D      2D       9       17.6%
BITBANK1           100      0       0       6        0.0%
BANK1              100     6D      EA       7       91.4%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     90      91       5       90.6%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     30      47       1       75.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1EF      20        0.0%
DATA                 0      0     1EF       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Sat Oct 03 15:57:24 2020

                   ?_antirrebote 0001           __size_of_RTC_read_date 00BC  
                              _N 003E           __size_of_RTC_read_time 00BC  
              _Sum_Cant_Usuarios 520E                   ??_Erase_Eeprom 002F  
                             l30 50DA                               l32 50E2  
                             l61 4966                               l63 4970  
                             _CO 0188                               _CR 0187  
                             _PA 0186                               _XX 003D  
                             _YY 003C                               bsr 000FE0  
                             _xx 0179                               _yy 0177  
            ___wmul@multiplicand 001A               ?_Sum_Cant_Usuarios 0001  
            User_Scan@user_exist 002B              Soft_SPI_Read@cont_s 001B  
                    _rx_recivido 017B                              l123 4CEE  
                            l115 544E                              l667 3B46  
                            l775 273C                              l848 44C2  
                            l786 2822                              l794 4D6C  
                            l779 2870                   M_Write@mw_dato 00CE  
                            _RA5 007C05                              _UID 01C8  
         __size_of_RTC_send_hora 007A              __size_of_ACN_CO_Com 01C2  
                            _abs 509E                              _dia 0041  
                   main@Est_pant 00EF              __size_of_ACN_CR_Com 015E  
                            _pad 4556                              _key 0182  
                            _mes 0040                              _min 0043  
                            _seg 0042                     main@Est_proj 00EE  
            __size_of_ACN_PA_Com 02A8                              wreg 000FE8  
            ??_Sum_Cant_Usuarios 0031                  ?_Task_Com_USART 0001  
                 ??_MFRC522_Init 0022                             ?_abs 002A  
                           l1085 32E8                             l2222 3DAC  
                           l2232 4222                             l1560 1AA6  
                           l2506 201C                             l2531 2FB4  
                           l2508 2024                             l2533 2FBC  
                           l1582 2CA0                             l1558 1A8E  
                           l1584 2CB2                             l2617 3842  
                           l1585 2CBC                             l2495 4582  
                           l1777 2628                             l1769 25D0  
                           l2586 50C6                             ?_pad 0026  
                           l9000 3DEA                             l9012 3E24  
                           l9014 3E30                             l9006 3E02  
                           l9032 3E88                             l9024 3E64  
                           l9028 3E72                             l7720 5026  
                           l7712 5010                             l7708 500A  
                           l7724 502E                             l8710 2EFE  
                           l8720 2F3C                             l8714 2F1E  
                           l8706 2EE2                             l8660 2E38  
                           l8644 2E00                             l8718 2F3A  
                           l8654 2E22                             l8728 2F70  
                           l8680 2E7A                             l8672 2E62  
                           l8666 2E4E                             l8676 2E6E  
                           l8684 2E88                             l8698 2EB6  
                           STR_1 7DEE                             l9936 44DA  
                           l9960 5086                             STR_2 7E03  
                           STR_3 7EDD                             l9946 51C6  
                           STR_4 7FBA                             STR_5 7FC0  
                           l9956 5074                             l9948 51CA  
                           STR_6 7FBA                             STR_7 7FC0  
                           STR_8 7E8B                             STR_9 7FF9  
                           l9968 513E          __size_of_RTC_send_fecha 007A  
                           l9998 50E4                     ?_LCD_command 0001  
                           _GIEH 007F97                             _GIEL 007F96  
                           _LATC 000F8B                             _LATD 000F8C  
                           _LATE 000F8D                             u7010 3E34  
                           i1l61 49DA                             i1l63 49E4  
                           u9010 4372                             u8300 44D2  
                           u9110 11AC                             u9200 49A8  
                           u8320 4514                             u5690 5014  
                           u9130 1268                             u8411 361E  
                           u9206 49AA                             u8430 3656  
                           u9070 116C                             u9080 116E  
                           u6760 2F6C                             u8521 3D06  
                           u9090 117A                             u9250 2760  
                           u8540 3D3E                             u9420 4D68  
                           u9510 3FEE                             u8630 50AC  
                           u9520 4016                             u8640 512A  
                           u8720 2010                             u8650 512C  
                           u8490 38CE                             u8810 21A6  
                           u8570 41C8                             u8740 203C  
                           u9517 3FE4                             u9541 2A56  
                           u8670 4FEC                             u8910 3764  
                           u8750 2160                             u9630 4CEC  
                           u9527 400C                             u8680 1FCE  
                           u8840 2FA8                             u9481 45EA  
                           u8930 3812                             u8770 2182  
                           u8690 1FD0                             u9650 4D16  
                           u8771 2180                             u9811 4B72  
                           u8940 3814                             u8780 2190  
                           u9637 4CE2                             u9901 0B6A  
                           u8790 2196                             u8870 3110  
                           u9750 3B58                             u8871 310E  
                           u8880 311E                             u9657 4D0C  
                           u8890 3124                             u9930 0C48  
                           u9790 42EA                             u9870 3C28  
                           _TMR0 000FD6                             u9890 0AC6  
                           u9980 0FBA                             _Dato 0193  
                           abs@a 002A                             _dbuf 0194  
                           _atoi 370C                             _main 244E  
                           _dtoa 1FA6                             _hora 0044  
                           _prec 0171            MFRC522_AntiColl@unLen 0069  
                           _nout 016D                             _year 003F  
                           pad@i 002C                             pad@p 0029  
                           fsr1h 000FE2                             fsr2h 000FDA  
                           indf1 000FE7                             indf2 000FDF  
                           fsr1l 000FE1                             pad@w 002E  
                           fsr2l 000FD9                             btemp 0048  
                           _utoa 2F94                             _word 01B4  
                           prodh 000FF4                             prodl 000FF3  
                           start 0150                 _MFRC522_AntiColl 4434  
                __end_of_OS_init 5382                       i2c_write@i 0019  
             __size_of_LCD_array 00BC                  __end_of_M_Write 0A4C  
      __end_of_Sum_Cant_Usuarios 5234                    ??_i2c_restart 0018  
               ACN_CR_Com@buffer 013D                     ___param_bank 000000  
                __end_of_i2c_ack 5190                   MFRC522_Rd@addr 001C  
                ??_MFRC522_Reset 0020                  ??_E_Teclado_Lcd 0031  
                          ??_abs 002C                 ACN_CR_Com@texto1 0135  
               ACN_CR_Com@texto2 0100                       _Easter_Egg 32F4  
                          ??_pad 002B                    ?_Read_Hash_ex 0084  
               __end_of_LCD_date 46F0                      _E_pant1_Lcd 17A4  
                    _E_pant2_Lcd 21FE                   MFRC522_Wr@addr 001F  
               __end_of_LCD_init 4434                            l10040 3652  
                          l10032 3618                            l10200 1FFC  
                          l10104 3D26                            l10050 36AE  
                          l10026 35F0                            l10106 3D3A  
                          l10140 456C                            l10116 3D96  
                          l10132 420C                            l10124 41B0  
                          l11020 4A72                            l10310 3778  
                          l10038 363E                            l10054 36C4  
                          l10070 3878                            l10150 45A0  
                          l10214 2044                            l10126 41C4  
                          l10320 37E2                            l10312 3780  
                          l10304 3768                            l10080 38CA  
                          l10144 457A                            l12000 3522  
                          l10314 3786                            l10058 36EA  
                          l10090 3928                            l10074 389C  
                          l10154 45CA                            l10146 458C  
                          l10218 2056                            l10410 110C  
                          l11018 4A66                            l10316 37AE  
                          l10252 21D6                            l10228 2150  
                          l10412 1128                            l11124 1E3C  
                          l11052 51B8                            l11036 53DA  
                          l10174 4FF0                            l10094 394E  
                          l10086 3912                            l10078 38B6  
                          l10342 4318                            l10414 1134  
                          l11142 1E66                            l11118 1E02  
                          l11062 48EC                            l11302 42E0  
                          l12022 35B2                            l12110 1C10  
                          l10248 21BE                            l10344 4326  
                          l10432 1214                            l11128 1E48  
                          l11072 4CCC                            l12032 1A64  
                          l10522 495C                            l10370 1038  
                          l11162 1F24                            l11322 4B78  
                          l11250 3AC8                            l12114 1C16  
                          l10532 4972                            l10268 2FF6  
                          l10444 12DE                            l10428 11E2  
                          l10372 103C                            l11164 1F3E  
                          l10620 27FC                            l10612 2798  
                          l11076 4CF6                            l11260 3B4E  
                          l12300 39FC                            l12116 1C40  
                          l12060 1AB2                            l12036 1A6E  
                          l10294 371E                            l10278 30E4  
                          l10470 1402                            l10454 1360  
                          l10390 1064                            l10382 1058  
                          l10374 104C                            l11158 1F04  
                          l11094 1D76                            l10630 282C  
                          l10622 280E                            l11246 3ABC  
                          l11414 3B94                            l12310 3A22  
                          l12062 1AB8                            l10296 3722  
                          l10464 13CE                            l10480 1424  
                          l11600 0FB2                            l11504 0C9A  
                          l11424 3C1C                            l12160 2C30  
                          l12048 1A90                            l12056 1AA8  
                          l10474 140E                            l10394 106E  
                          l10386 105E                            l10378 1052  
                          l10650 4D84                            l10722 516A  
                          l10634 2846                            l10626 2818  
                          l11274 4EDE                            l11290 426A  
                          l11506 0CA4                            l11610 0FE4  
                          l11450 0ACE                            l11442 0A5C  
                          l11418 3B9E                            l11426 3C1E  
                          l11434 3C2C                            l12322 3A5E  
                          l12314 3A36                            l12306 3A14  
                          l12154 2C16                            l10900 3F92  
                          l10396 10AE                            l10652 4DA6  
                          l10572 2698                            l10660 532C  
                          l11276 4EE6                            l11700 187A  
                          l12172 2C66                            l12500 2640  
                          l12238 43B4                            l10902 3FBC  
                          l10670 4F44                            l10638 286A  
                          l10590 2736                            l10582 2706  
                          l10574 26B4                            l10566 2686  
                          l11286 4260                            l11446 0ABA  
                          l11702 187C                            l12318 3A4A  
                          l12334 4B24                            l12190 2CF6  
                          l12166 2C4C                            l12086 1B64  
                          l12350 3C3C                            l10904 3FCE  
                          l10568 268E                            l10656 531A  
                          l11456 0B0A                            l11608 0FC4  
                          l12280 399E                            l10578 26EA  
                          l11298 42DA                            l12290 39D4  
                          l12338 4B36                            l12178 2C84  
                          l12362 3CAC                            l12506 2646  
                          l10908 3FF6                            l10676 4F48  
                          l11492 0C50                            l11484 0BFC  
                          l11476 0BE2                            l11468 0B78  
                          l11804 3264                            l11732 1A56  
                          l12284 39B8                            l12188 2CCC  
                          l12380 3CDA                            l12364 3CAE  
                          l12460 25C0                            l10694 4F6C  
                          l10870 4C84                            l11582 0F5A  
                          l11486 0C04                            l11822 32AC  
                          l11806 326A                            l12294 39E4  
                          l12358 3C82                            l11912 168A  
                          l11840 152E                            l10880 45F0  
                          l10856 4492                            l11816 3290  
                          l11744 2268                            l12376 3CCE  
                          l12384 3CE6                            l12464 25D4  
                          l10890 3F64                            l11930 16DA  
                          l10874 4C98                            l11586 0F60  
                          l11770 2442                            l11762 23B2  
                          l10892 3F6E                            l11916 16A2  
                          l11844 1546                            l10884 4616  
                          l11756 2352                            l12388 3CF8  
                          l10894 3F7A                            l11934 16F2  
                          l11862 15AA                            l10982 2B22  
                          l11782 31B6                            l11758 236E  
                          l12478 2600                            l10896 3F86  
                          l11880 1602                            l10992 2BDA  
                          l11696 1854                            l11688 1814  
                          l11954 179A                            l11858 1592  
                          l11946 174E                            l10978 2A98  
                          l11786 31CA                            l11876 15EA  
                          l11868 15E0                            l11948 1784  
                          l10988 2BD0                            l11796 3228  
                          l11894 163A                            l11898 1652  
                __end_of___aldiv 3E9A                  __end_of___aodiv 370C  
                          ?_atoi 001F                            ?_main 0001  
                          ?_dtoa 006A                  __end_of___aomod 3970  
        ?_MFRC522_ReadCardSerial 006D                  __end_of___lbdiv 5032  
                          STR_10 7FF9                            STR_11 7FF9  
                          STR_12 7FF9                            STR_20 7FE4  
                          STR_21 7FC9                            STR_13 7FF9  
                          STR_22 7FE4                            STR_14 7FE4  
                          STR_30 7EB0                            STR_23 7FE4  
                          STR_31 7F95                            STR_15 7F5A  
                          STR_32 7FE4                            STR_24 7FFC  
                          STR_16 7FB4                            STR_40 7F6A  
                          STR_25 7FE4                            STR_33 7FF6  
                          STR_41 7FDF                            STR_17 7F8E  
                          STR_26 7FFC                            STR_50 7FE4  
                          STR_34 7FE4                            STR_18 7FE4  
                          STR_42 7E9E                            STR_19 7FC9  
                          STR_51 7FE4                            STR_27 7FE4  
                          STR_43 7F9C                            STR_35 7EEB  
                          STR_36 7FF6                            STR_52 7FE4  
                          STR_44 7FC6                            STR_28 7FA8  
                          STR_60 7E3F                            STR_29 7E5C  
                          STR_53 7FE4                            STR_37 7FE4  
                          STR_45 7FD5                            STR_61 7FA2  
                          STR_54 7FE4                            STR_62 7F95  
                          STR_46 7FDA                            STR_70 7E65  
                          STR_38 7DC4                            STR_71 7FF4  
                          STR_47 7FCB                            STR_63 7EBF  
                          STR_39 7E2C                            STR_55 7D1C  
                          STR_72 7FF9                            STR_64 7FD0  
                          STR_48 7FAE                            STR_56 7F2E  
                          STR_80 7ECE                            STR_65 7FE4  
                          STR_49 7FE4                            STR_57 7F62  
                          STR_73 7E52                            STR_81 7DD9  
                          STR_74 7FF4                            STR_66 7FF9  
                          STR_58 7FF9                            STR_90 7F80  
                          STR_82 7D9A                            STR_75 7FE9  
                          STR_91 7F4A                            STR_67 7F23  
                          STR_59 7E78                            STR_83 7D70  
                          STR_68 7FF4                            STR_76 7FA2  
                          STR_92 7F87                            STR_84 7D85  
                          STR_77 7FF4                            STR_69 7FF9  
                          STR_93 7F52                            STR_85 7DAF  
                          STR_94 7F0D                            STR_78 7D46  
                          STR_86 7D07                            STR_95 7EF7  
                          STR_79 7D5B                            STR_87 7CF2  
                          STR_96 7F18                            STR_88 7CDD  
                          STR_97 7F02                            STR_89 7D31  
                          STR_98 7FF4                            STR_99 7F38  
                          _CMCON 000FB4                            ?_utoa 0060  
                          u10300 159E                            u10230 32BA  
                          u11007 259E                            u10320 15F6  
                          u10240 32C8                            u11017 1B02  
                          u11107 0F46                            u11027 1B4E  
                          u10340 1646                            u11117 0F8E  
                          u11037 1BAE                            u11207 2BD2  
                          u11127 4C08                            u11047 1BFA  
                          u10360 1696                            u10280 153A  
                          u11217 4F4A                            u11137 1D5C  
                          u11057 0D02                            u10290 1584  
                          u10450 3472                  __end_of___lodiv 3DCE  
                          u11307 517E                            u11227 4F56  
                          u11147 1DA8                            u11067 0D52  
                          u10380 16E6                            u10700 39AC  
                          u10460 348A                            u11317 5188  
                          u11237 4F60                            u11157 1E2E  
                          u11077 0D6E                            u11407 469A  
                          u11327 3374                            u11247 5236  
                          u11167 1E8C                            u11087 0DD8  
                          u11417 46AC                            u11337 33AC  
                          u11257 523E                            u11177 1F30  
                          u11097 0E94                            u11507 43C0  
                          u11427 46C0                            u11347 33E4  
                          u11267 5246                            u11187 1F50  
                          u11517 43D8                            u11437 46D4  
                          u11357 341C                            u11277 5250  
                          u11197 1F8C                            u11607 472C  
                          u11527 43EA                            u11447 46E4  
                          u11367 3454                            u11287 516C  
                          u11617 4740                            u11537 43FC  
                          u11457 50EC                            u11377 3FC2  
                          u11297 5176                            u11707 49BA  
                          u11627 4754                            u11547 440A  
                          u11467 50F4                            u11387 467A  
                          u10940 25FA                            _LATB0 007C50  
                          u11717 528A                            u11637 4764  
                          u11557 4418                            u11477 5146  
                          u11397 4688                            _LATB2 007C52  
                          _LATA4 007C4C                            u11727 5292  
                          u11647 495E                            u11567 442A  
                          u11487 5152                            _LATB3 007C53  
                          u11737 529A                            u11657 4978  
                          u11577 46FA                            u11497 43A2  
                          u11747 52A0                            u11667 4980  
                          u11587 4708                     ?_TEC4x4_init 0001  
                          u11757 5388                            u11677 498A  
                          u11597 471A                            u11767 5392  
                          u11687 499A                            u11777 539C  
                          u11697 49B0                  __end_of___lomod 4244  
                          u10997 252A                            i1l330 3EA8  
                          i1l331 3EB6                            i1l370 4C2A  
                          i1l372 4C38                            i1l373 4C46  
                          i2l302 29B0                            i1l374 4C56  
                          i2l305 2A18                            i2l308 2A38  
             __size_of_ISR_HighP 2A44                            i2l284 28D6  
                          _RCREG 000FAE                     vfpfcnvrt@fmt 008E  
                   vfpfcnvrt@llu 00A9                            _SPBRG 000FAF  
                          _PORTD 000F83                            _TRISA 000F92  
                          _TRISC 000F94                            _TRISD 000F95  
                          _TRISE 000F96                            _TXREG 000FAD  
                          _Ha_Pu 0184              ___lmul@multiplicand 001C  
               __end_of_ISR_LowP 0150              __size_of_MFRC522_Rd 0024  
            __size_of_MFRC522_Wr 0018                            _Task1 3970  
                          _Task2 4B02                  __end_of_escaneo 4C74  
                  _RTC_read_date 40DA                      ?_UART_array 0018  
             __size_of_UART_init 0074               __size_of_UART_read 000C  
                          _flags 0173                    _RTC_read_time 401E  
                          _llave 01D2                            _fputc 44C6  
                          _fputs 506A                      ?i1_i2c_nack 0001  
                __end_of_isdigit 5132                            _tec_p 0046  
                    ?i1_i2c_read 0001                            _valor 0039  
                    ?_UART_write 0001           MFRC522_AntiColl@serNum 002D  
                   User_Scan@pos 002D                            atoi@n 002C  
                          pad@fp 0026                            atoi@s 001F  
                          _width 016F                      ?i1_i2c_stop 0001  
                          _putch 5492                            dtoa@d 006B  
                          dtoa@i 008B                 RTC_send_hora@dec 001D  
                          dtoa@n 0083                            dtoa@p 007D  
                          dtoa@s 0081                            dtoa@w 007F  
                    ?_E_Ingresos 0001                  __end_of_isspace 4FF8  
                  TaskDetected@i 0010                 RTC_send_hora@uni 001C  
                          tablat 000FF5               __size_of_E_Rtc_Lcd 0352  
              _MFRC522_Clear_Bit 53DE                 __end_ofi2___wmul 5318  
                          ttemp5 0049                            ttemp6 004C  
                EEPROM_init@MD_2 002B                            ttemp7 0050  
                          utoa@d 0061                            utoa@i 007D  
                          utoa@n 0075                            utoa@p 0071  
                          utoa@w 0073                            status 000FD8  
                          wtemp8 0049                  __end_of_sprintf 4F36  
                  _RTC_send_hora 4770                  __end_of_strncmp 4398  
             ?_MFRC522_Clear_Bit 0020                  ___lbdiv@divisor 0018  
               ___lodiv@dividend 0018                  ___lbdiv@counter 001A  
                EEPROM_init@c_ok 002E                       _M_variable 018B  
              _MFRC522_AntennaOn 5460             __size_of_EEPROM_init 029C  
                  ?_New_User_Pos 001F                  __initialization 4E5E  
                   __end_of_atoi 384C                     __end_of_main 2672  
                   __end_of_dtoa 21FE               ?_MFRC522_AntennaOn 0001  
            ??_MFRC522_Clear_Bit 0021                     __end_of_utoa 314C  
               __end_of_i2c_nack 525A                   ??_Read_Hash_ex 008C  
               __end_of_i2c_init 5492                 __end_of_i2c_read 4F78  
      MFRC522_ReadCardSerial@str 006D                 __end_of_Read_Com 2F94  
               __end_of_i2c_stop 52A6                  MFRC522_Rd@value 001D  
 __end_of_MFRC522_ReadCardSerial 51BC                 ??_MFRC522_ToCard 0029  
       __size_of_MFRC522_Set_Bit 0014                 __end_of_Rfid_Lcd 0FF4  
       __size_of_MFRC522_Request 0052              __end_of_i2c_restart 5482  
                         ??_atoi 0021                           ??_main 00EB  
                         ??_dtoa 0073              ??_MFRC522_AntennaOn 0022  
                         ??_utoa 0069                    __activetblptr 000002  
                MFRC522_ToCard@i 0065                  MFRC522_ToCard@n 0067  
               __end_of_Num_User 3C30                 ??_MFRC522_isCard 0031  
          MFRC522_ToCard@backLen 0028                 ___lodiv@quotient 0028  
              __end_of_LCD_array 401E                           ?_Task1 00E9  
                         ?_Task2 0094                   ?_RTC_read_date 0001  
                 ?_RTC_read_time 0001                  MFRC522_Wr@value 001E  
      __end_of_MFRC522_Clear_Bit 53F8            MFRC522_ToCard@_status 0061  
          MFRC522_ToCard@command 0064                           ?_fputc 0018  
                         STR_100 7F3F                           STR_101 7FF9  
                         STR_102 7F3F                           STR_110 7CB3  
                         ?_fputs 0020                           STR_103 7FF3  
                         STR_111 7E18                           STR_112 7CC8  
                         STR_120 7FE4                           STR_104 7F41  
                         STR_113 7CB3                           STR_121 7F3F  
                         STR_105 7F3F                           STR_130 7FF3  
                         STR_122 7FF3                           STR_114 7E18  
                         STR_106 7FF9                           STR_107 7F3F  
                         STR_123 7F79                           STR_115 7F72  
                         STR_131 7C5F                           STR_108 7FF3  
                         STR_124 7FF9                           STR_116 7FF9  
                         STR_140 7FED                           STR_132 7C89  
                         STR_125 7F3F                           STR_117 7F3F  
                         STR_109 7CC8                           STR_133 7C9E  
                         STR_134 7C5F                           STR_126 7FE4  
                         STR_118 7FE4                           STR_142 7FF0  
                         STR_135 7C5F                           STR_127 7F3F  
                         STR_119 7F3F                           STR_128 7FE4  
                         STR_144 7FF0                           STR_136 7C74  
                         STR_137 7C5F                           STR_129 7F3F  
                         STR_138 7FED                           STR_149 7FEA  
        __size_of_Hash_algoritmo 0074                           ?_putch 0001  
           __end_of_Erase_Eeprom 4C1A                     i2c_read@dato 0018  
                         i1l8100 49D0                           i1l8110 49E6  
                         i1l8210 4C26                           i1l8150 4F86  
                         i1l8232 4C62                           i1l8156 4F8A  
                         i1l9132 3F00                           i1l9116 3EC4  
                         i1l8174 4FAE                           i1l9150 3F40  
                         i1l9142 3F2C                           i1l9126 3EEA  
                         i1l9138 3F18                           i1l9502 0088  
                         i1l9512 00AA                           i1l9530 00E6  
                         i1l9506 0096                           i1l9524 00D2  
                         i1l9518 00BE                           i1l9536 00F2  
                         _INTCON 000FF2                           i1l9490 0060  
                         i1l9484 0054                           i1l9478 0048  
                         i1l9498 007A                           i2l9074 5474  
                         i2l9402 293C                           i2l9420 295A  
                         i2l9414 2950                           i2l9334 28A0  
                         i2l9096 504A                           i2l9432 296E  
                         i2l9408 2946                           i2l9098 505A  
                         i2l9426 2964                           i2l9338 28B4  
                         i2l9372 290A                           i2l9348 28E0  
                         i2l9462 2A28                           i2l9446 29C6  
                         i2l9390 2928                           i2l9366 2900  
                         i2l9384 291E                           i2l9378 2914  
                         i2l9466 2A36                           i2l9396 2932  
                  main@aux_portd 00ED                        ??_OS_init 0018  
              RTC_send_fecha@dec 001D            MFRC522_ToCard@sendLen 0025  
             __size_of_i2c_array 0024                    vfpfcnvrt@done 009D  
              RTC_send_fecha@uni 001C                        ??_M_Write 0100  
          MFRC522_ToCard@waitIRq 0060                   ?_RTC_send_hora 0001  
                         _TRISB0 007C98                     ??_ACN_CO_Com 00CC  
                         _TRISA4 007C94                           _TRISB2 007C9A  
                         _TRISA5 007C95                           _TRISB3 007C9B  
                   ??_ACN_CR_Com 0031               __size_of_i2c_start 0020  
             __size_of_i2c_write 0074        __end_of_MFRC522_AntennaOn 546C  
                   ??_ACN_PA_Com 00CC               __size_of_Read_User 0066  
                      ??_i2c_ack 0018                           _M_Read 2A4C  
              __end_of_ISR_HighP 2A4C                   ??_New_User_Pos 0021  
     __size_of_Sum_Cant_Usuarios 0026                     vfprintf@cfmt 00B5  
                         ___lmul 4C74                           ___omul 45E4  
                      ??___aldiv 0020                        ??___aodiv 0028  
           Read_Hash_ex@cod_rfid 0084                        ??___aomod 0028  
                         ___wmul 525A                __end_of_UART_init 48D8  
              __end_of_UART_read 5478                        ??___lbdiv 0019  
           __end_of_MFRC522_Init 4E5E          MFRC522_AntiColl@_status 006B  
            __size_of_UART_array 0054                        ??___lodiv 0028  
                    ?_Easter_Egg 0001                        ??___lomod 0028  
        __size_of_Soft_SPI_Write 0032                       _Timer_Hash 01DA  
            __size_ofi1_i2c_nack 0026              __size_ofi1_i2c_read 0042  
           __size_of_antirrebote 0038              __size_of_UART_write 000C  
            __size_ofi1_i2c_stop 0026                           clear_0 4E84  
                         clear_1 4E94              __size_of_E_Ingresos 004E  
              __end_of_E_Rtc_Lcd 17A4                     LCD_date@date 001B  
                         _numero 0047                           pad@buf 0027  
                   ?i1_i2c_start 0001                     ?i1_i2c_write 0001  
                         dtoa@fp 006A                           _strlen 51BC  
                      ??_escaneo 000C                           fputc@c 0018  
                         fputs@c 0023                           fputs@i 0024  
                         fputs@s 0020                        ??_isdigit 001A  
             __end_of_ACN_CO_Com 2DD6               __end_of_ACN_CR_Com 35C2  
          __end_of_Soft_SPI_Init 5448            __end_of_Soft_SPI_Read 5162  
                   __mediumconst 7C12                        ??_isspace 001A  
                   ?_E_Rfid_Proj 0001               __end_of_ACN_PA_Com 1D0A  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                           putch@c 0001  
               __end_of_vfprintf 4DC2                           utoa@fp 0060  
                      ??_sprintf 0031             Read_Hash_ex@pos_hash 002C  
                 _RTC_send_fecha 47EA                    ?_TaskDetected 0001  
                      ??_strncmp 001E               __size_of_User_Scan 00EA  
               ___lbdiv@dividend 0019                       __accesstop 0060  
        __end_of__initialization 4E9A                   i1i2c_read@dato 000C  
           __size_of_LCD_command 0080                        ?_LCD_date 0001  
                      ?_LCD_init 0001                    ___rparam_used 000001  
         MFRC522_Request@TagType 002D                     ??_MFRC522_Rd 001C  
                   ??_MFRC522_Wr 001F            MFRC522_isCard@TagType 002F  
               Read_User@MR_Dato 001E                   __pcstackCOMRAM 0001  
                  __end_of_Task1 3A72                    __end_of_Task2 4B64  
                   Read_User@dir 001A                        ?_ISR_LowP 0001  
                    _i2c_restart 5478                     __pidataBANK1 5424  
                    _Read_Eeprom 017C                  i2c_array@cadena 001A  
                     _Write_User 4A34                    __end_of_fputc 4556  
                     User_Scan@i 002C                    __end_of_fputs 509E  
                  __end_of_putch 5494                        LCD_init@i 001E  
               ___lbdiv@quotient 001B                __end_of_i2c_array 533C  
         MFRC522_Request@_status 0069                 ??_Task_Com_USART 00D8  
              __end_of_i2c_start 53A2                        ?i2___wmul 0001  
              __end_of_i2c_write 49C0                __end_of_Read_User 4B02  
                ??_RTC_read_date 000E           MFRC522_Request@reqMode 0068  
                ??_RTC_read_time 000E         __end_of_MFRC522_AntiColl 44C6  
           __size_of_TEC4x4_init 0028                          ??_Task1 00EA  
                        ??_Task2 0095                ??_MFRC522_Set_Bit 0021  
            Soft_SPI_Write@dato_ 0018           __end_of_RTC_send_fecha 4864  
             __end_of_MFRC522_Rd 5360               __end_of_MFRC522_Wr 5410  
              ??_MFRC522_Request 002F                   ??_TaskDetected 0010  
     __size_of_MFRC522_Clear_Bit 001A                          ??_fputc 001B  
                        ??_fputs 0023                          ??_putch 0018  
                ??_RTC_send_hora 001C                       __pbssBANK0 00F0  
                     __pbssBANK1 016D             __end_of_Read_Hash_ex 42EE  
            __size_of_Easter_Egg 0170                        ?_i2c_nack 0001  
                      ?_i2c_init 0001                        ?_i2c_read 0001  
                      ?_Read_Com 0001                        ?_i2c_stop 0001  
         MFRC522_ToCard@backData 0026                       ??_LCD_date 001A  
     __size_of_MFRC522_AntennaOn 000C                       ??_LCD_init 001C  
                      ?_Rfid_Lcd 0001                          ?_M_Read 0068  
               Num_User@num_user 002D                 UART_array@cadena 0018  
                      ?_Num_User 0094            __end_ofi1_i2c_restart 548C  
                     ??_ISR_LowP 0011                          ?___lmul 0018  
                        ?___omul 001A                          ?___wmul 0018  
                 _Timer_DelayLcd 01E2       __end_ofBluetooth_Com@F3811 7C55  
     __end_ofBluetooth_Com@F3807 7C5F       __end_ofBluetooth_Com@F3809 7C5A  
              __end_of_User_Scan 3B5C              ___omul@multiplicand 0022  
                 ___lmul@product 0020                          _ACK_EST 0192  
                   ?_E_pant1_Lcd 0001                     ?_E_pant2_Lcd 0001  
         MFRC522_ToCard@lastBits 0062                          ?_strlen 0018  
                     ??i2___wmul 0005                          M_Read@i 0083  
                 Write_User@MD_1 00D4                   Write_User@MD_2 00D5  
          __size_of_Erase_Eeprom 005A           MFRC522_ToCard@sendData 0023  
             __size_of_vfpfcnvrt 045E             __end_of_New_User_Pos 4EF0  
                ?_RTC_send_fecha 0001                     ??_UART_array 001A  
                 _Hash_algoritmo 48D8                 ACN_PA_Com@buffer 00CE  
                   ??i1_i2c_nack 000C                     ??i1_i2c_read 000C  
                   ??_UART_write 0018                     ??i1_i2c_stop 000C  
                   ??_E_Ingresos 002D                 ___lomod@dividend 0018  
                        _OS_init 5360                       ??_i2c_nack 0018  
                     ??_i2c_init 0018                       ??_i2c_read 0018  
                        _Fin_Cad 003B                       ??_Read_Com 0018  
                        _Blocked 0183                       ??_i2c_stop 0018  
                        _M_Write 0154                       ??_Rfid_Lcd 00D7  
                        _i2c_ack 5162                  __size_of_M_Read 01C8  
          __size_of_MFRC522_Init 004E                          _TagType 01D6  
                   Rfid_Lcd@paso 022A                          __Hparam 0000  
                        __Lparam 0000                       ??_Num_User 009C  
                        ___aldiv 3DCE                          ___aodiv 35C2  
                        ___aomod 384C                   _Soft_SPI_Write 50D0  
                        ___lbdiv 4FF8                  __size_of___lmul 0056  
                        _Running 017F                  __size_of___omul 008C  
                __size_of___wmul 0026                          ___lodiv 3D00  
                    ?_Write_User 00CC                          ___lomod 4196  
                      ?_vfprintf 00B1               __end_of_UART_array 4D1E  
                        _aceptar 00F0                          _address 018A  
                   _Erase_Eeprom 4BC0                          __pcinit 4E5E  
             __end_ofi1_i2c_nack 52F2            __end_of_MFRC522_Reset 5460  
          __end_of_E_Teclado_Lcd 32F4                    Num_User@pos_h 002F  
             __end_ofi1_i2c_read 4FBA                          __ramtop 0800  
             __end_of_UART_write 5454               __end_ofi1_i2c_stop 52CC  
               E_pant1_Lcd@llave 00E2               __end_of_E_Ingresos 4E10  
                        __ptext0 244E                          __ptext1 548C  
                        __ptext2 4864                          __ptext3 3DCE  
                        __ptext4 3C30                          __ptext5 2DD6  
                        __ptext6 1A62                          __ptext7 3464  
                        __ptext8 2C14                          __ptext9 4B02  
                    _Timer_Task1 01E8                      _Timer_Task2 01E7  
                      _T0CONbits 000FD5                          _escaneo 4C1A  
                        _esc_rtc 0190                  __size_of_strlen 002A  
                   __size_of_abs 0032                     __size_of_pad 008E  
                        _isdigit 5102             __size_ofi1_i2c_start 0020  
                        _mod_rtc 0045             __size_ofi1_i2c_write 0074  
         __end_of_Hash_algoritmo 494C                 ___aldiv@dividend 0018  
                        _isspace 4FBA                          _val_rtc 018F  
                      M_Read@dir 0068              Rfid_Lcd@buffer_1766 0214  
                        _mostrar 018E              Task2@Maquina_Estado 0094  
                        _pos_rtc 01E9                          _puerta1 017E  
                        _puerta2 017D                          atoi@neg 0025  
                        _sprintf 4EF0             __size_of_E_Rfid_Proj 005C  
                        _strncmp 42EE                     _MFRC522_Init 4E10  
                 __pintcode_body 2874             end_of_initialization 4E9A  
                      _LCD_array 3F62                   ___omul@product 0060  
                        fputc@fp 001A                    __Lmediumconst 7C12  
                      i1u1180_27 49F4                        i1u1181_27 49FE  
                        int_func 2874                          fputs@fp 0022  
                      i1u1190_27 53B2                        i1u1182_27 4A0E  
                      i1u1191_27 53BC                        i1u1183_27 4A24  
            i2___wmul@multiplier 0001                        i1u1192_27 4F8C  
                      i1u1184_27 4A2E                        i1u1193_27 4F98  
                      i1u1185_27 52B0                        i1u1194_27 4FA2  
                      i1u1186_27 52B8                        i1u1178_27 49D2  
                      i1u1195_27 52CE                        i1u1187_27 52C0  
                      i1u1179_27 49EC                        i1u1196_27 52D6  
                      i1u1188_27 52C6                        i1u1197_27 52DE  
                      i1u1189_27 53A8                        i1u1198_27 52E8  
                  ??_EEPROM_init 0084                        i2u1200_47 5050  
                      i2u1199_47 503C                    Read_Hash_ex@i 002B  
  MFRC522_ReadCardSerial@_status 0030                     E_pant1_Lcd@i 00E8  
               Write_User@buffer 00CF           __end_of_Soft_SPI_Write 5102  
              __end_of_vfpfcnvrt 1452                        _RCSTAbits 000FAB  
               ___aldiv@quotient 0022                          postdec1 000FE5  
                        postdec2 000FDD                        _ISR_HighP 0008  
                        postinc0 000FEE                          postinc1 000FE6  
                        postinc2 000FDE                     ??_Easter_Egg 0024  
           __end_of_TaskDetected 3F62                  E_Rtc_Lcd@buffer 00CE  
                     ??_vfprintf 0031                          strlen@a 001A  
                        strlen@s 0018                        _PORTAbits 000F80  
                      _PORTBbits 000F81                        _UART_init 4864  
                      _UART_read 546C                        _PORTCbits 000F82  
                      _PORTDbits 000F83                    LCD_array@date 0020  
              User_Scan@num_user 002A                        _E_Rtc_Lcd 1452  
                  i2c_write@date 0018                  ?_Hash_algoritmo 0024  
             _Timer_DelayMuestra 01E0                        _TRISAbits 000F92  
                      _TRISBbits 000F93            __size_of_Read_Hash_ex 00AA  
                      _TRISCbits 000F94                        _TRISDbits 000F95  
                      _TRISEbits 000F96              ACN_CR_Com@cant_2113 0148  
                  M_Write@buffer 0138               Soft_SPI_Read@dato_ 001A  
                     ?_LCD_array 001C                  ACN_CR_Com@F3821 7C48  
                ACN_CR_Com@F3823 7C13              __size_of_Write_User 0068  
             __end_of_Easter_Egg 3464                   _UART_init$3371 0028  
             Hash_algoritmo@cont 002D                        i2c_read@i 0019  
                      _TXSTAbits 000FAC                        Read_Com@i 0020  
                 __end_of_M_Read 2C14                __size_of_LCD_date 0080  
                  Read_User@MD_1 001C                    Read_User@MD_2 001D  
              __size_of_LCD_init 009C                  ?_Soft_SPI_Write 0001  
                  ??_antirrebote 0001                     ?_i2c_restart 0001  
                     ?_ISR_HighP 0001              __end_of_EEPROM_init 1FA6  
                _MFRC522_Set_Bit 5410          MFRC522_Request@backBits 006A  
            MFRC522_ToCard@irqEn 0063                   __end_of___lmul 4CCA  
                 __end_of___omul 4670                      vfpfcnvrt@ap 008F  
                    vfpfcnvrt@fp 008D                      vfpfcnvrt@ll 00A1  
                 __end_of___wmul 5280                __size_of_ISR_LowP 0138  
                _MFRC522_Request 4D1E                     _Read_Hash_ex 4244  
                     ?_UART_init 0026                       ?_UART_read 0001  
          __size_of_New_User_Pos 0048              Read_Hash_ex@OK_HASH 002A  
               i2___wmul@product 0005             __size_of_E_pant1_Lcd 02BE  
           __size_of_E_pant2_Lcd 0250                   __end_of_strlen 51E6  
                     ?_E_Rtc_Lcd 0001                       LCD_array@x 001C  
                     LCD_array@y 001E              start_initialization 4E5E  
                ___lodiv@divisor 0020                        _i2c_array 5318  
                ___lodiv@counter 0030                ?_MFRC522_AntiColl 002D  
              __size_ofi2___wmul 0026                MFRC522_AntiColl@i 006C  
                    __end_of_abs 50D0                        _i2c_start 5382  
                    __end_of_pad 45E4            New_User_Pos@cant_user 0025  
                      _i2c_write 494C                        _Read_User 4A9C  
        __size_of_MFRC522_ToCard 0202               ??_MFRC522_AntiColl 002F  
                  ??_LCD_command 001A                   Rfid_Lcd@buffer 0200  
  Sum_Cant_Usuarios@cant_usuario 00D6                        _Task1_Est 0181  
                      _Task2_Est 0180          __size_of_MFRC522_isCard 001C  
              ___omul@multiplier 001A                        Num_User@i 002E  
                      _Tarj_Dect 0185                         ??_M_Read 0070  
              __size_of_i2c_nack 0026                __size_of_i2c_init 0006  
              __size_of_i2c_read 0042                __size_of_Read_Com 01BE  
              __size_of_i2c_stop 0026         ??_MFRC522_ReadCardSerial 0030  
              __size_of_Rfid_Lcd 05A8                      vfprintf@fmt 00B2  
           Soft_SPI_Write@cont_s 0019                     _New_User_Pos 4EA8  
         __size_of_Soft_SPI_Init 0012           __size_of_Soft_SPI_Read 0030  
              RTC_read_date@aux1 000E                RTC_read_date@aux2 000F  
                       ??___lmul 0020                         ??___omul 002A  
                      _Timer_Tec 01E6                        _Timer_Rtc 01E4  
                       ??___wmul 001C                __size_of_Num_User 00D4  
                    __pdataBANK1 01D8                 ??_RTC_send_fecha 001C  
            __end_of_antirrebote 506A                    ??_TEC4x4_init 0018  
                       ??_strlen 001A                        _User_Scan 3A72  
                    __pbssCOMRAM 0031          __end_ofACN_CR_Com@F3821 7C50  
        __end_ofACN_CR_Com@F3823 7C48                       ?_i2c_array 001A  
                  __pcstackBANK0 0060                    __pcstackBANK1 0100  
                  __pcstackBANK2 0200            __end_of_RTC_read_date 4196  
               ___aodiv@dividend 0018            __end_of_RTC_read_time 40DA  
                     ?_i2c_start 0001                       ?_i2c_write 0001  
             Bluetooth_Com@F3811 7C50               Bluetooth_Com@F3807 7C5A  
             Bluetooth_Com@F3809 7C55                       ?_Read_User 001A  
                i1i2c_write@date 000C                      ??_LCD_array 0022  
                       ?_OS_init 0001            __end_of_RTC_send_hora 47EA  
                       ?_M_Write 00CC                Rfid_Lcd@ubicacion 022B  
                       ?_i2c_ack 0001                        _atoi$2992 0027  
                      _atoi$2993 002B                        _atoi$2994 0029  
                    _EEPROM_init 1D0A          __end_of_MFRC522_Set_Bit 5424  
            __end_of_LCD_command 4770                        _cant_user 0191  
          __size_of_TaskDetected 00C8          __end_of_MFRC522_Request 4D70  
                      _dtoa$2935 007B              MFRC522_Set_Bit@addr 0021  
            MFRC522_Set_Bit@mask 0020                        __pintcode 0008  
                    ??_ISR_HighP 0007                    __pmediumconst 7C12  
                       ?___aldiv 0018                         ?___aodiv 0018  
                       ?___aomod 0018                        __ptext100 5032  
                      __ptext101 546C                         ?___lbdiv 0018  
               ___aodiv@quotient 0062                     ??_Write_User 0031  
                       ?___lodiv 0018                         ?___lomod 0018  
                      _direccion 0175                RTC_read_time@aux1 000E  
              RTC_read_time@aux2 000F                      __pintcodelo 0018  
        Hash_algoritmo@hash_acum 0029                    Write_User@dir 00CC  
                    ??_UART_init 0028                      ??_UART_read 0001  
              __size_of_vfprintf 0052                         ?_escaneo 0001  
            Rfid_Lcd@num_usuario 0229                  ___lomod@divisor 0020  
                     ?_User_Scan 0001                  ___lomod@counter 0028  
                  _Timer_Puerta1 01DE                    _Timer_Puerta2 01DC  
                       ?_isdigit 0018                      ??_E_Rtc_Lcd 00CC  
                       ?_isspace 0018                      _codigo_rfid 0031  
                 __size_of_Task1 0102                   __size_of_Task2 0062  
                  _Soft_SPI_Init 5436                    _Soft_SPI_Read 5132  
            __end_of_TEC4x4_init 520E                     Num_User@hash 0094  
                       ?_sprintf 00B7                  E_pant1_Lcd@aux2 00E7  
                 __size_of_fputc 0090                   __size_of_fputs 0034  
         __size_ofi1_i2c_restart 000A                         ?_strncmp 0018  
                   _TaskDetected 3E9A                   __size_of_putch 0002  
        __size_of_Task_Com_USART 00D0                  Task_Com_USART@i 00DA  
                ___aldiv@divisor 001C               __end_of_Write_User 4A9C  
                ___aldiv@counter 0020                   ___wmul@product 001C  
                       _LATAbits 000F89                    Task1@Pantalla 00E9  
                       _LATEbits 000F8D                         _LCD_date 4670  
                       _LCD_init 4398              E_Teclado_Lcd@buffer 00D9  
                       _IPR1bits 000F9F                         _PIE1bits 000F9D  
             Task_Com_USART@aux2 00D9                         i1u591_20 4A1C  
                       i1u591_26 4A1E                         _PIR1bits 000F9E  
                       i1u818_20 012C               E_pant2_Lcd@buffer2 00CD  
                    M_Read@c_m_r 006A  __size_of_MFRC522_ReadCardSerial 002C  
                       i2u755_40 28F2                         _RCONbits 000FD0  
                       _ISR_LowP 0018                      _antirrebote 5032  
           __size_of_i2c_restart 000A                        _vfpfcnvrt 0FF4  
               ??_Hash_algoritmo 0028                    ??i1_i2c_start 000C  
                  ??i1_i2c_write 000C                       _ADCON1bits 000FC1  
              ___wmul@multiplier 0018                         i2___wmul 52F2  
           New_User_Pos@Posicion 0023                   UART_write@dato 0018  
                  ??_E_Rfid_Proj 0031                      ??_i2c_array 001C  
                 ?_Soft_SPI_Init 0001                   ?_Soft_SPI_Read 0018  
                   EEPROM_init@j 002C                   ACN_CR_Com@cant 0147  
                    ??_i2c_start 0018                     _isspace$3010 001E  
                    ??_i2c_write 0018                   _MFRC522_ToCard 2672  
                    ??_Read_User 001C                ___lmul@multiplier 0018  
                    _INTCON2bits 000FF1                        copy_data0 4E72  
                    _LCD_command 46F0                   _MFRC522_isCard 53C2  
                       _i2c_nack 5234                         _i2c_init 548C  
                       _i2c_read 4F36                         _Read_Com 2DD6  
                       _i2c_stop 5280                 ??_Soft_SPI_Write 0018  
               __size_of_OS_init 0022           __size_of_MFRC522_Reset 000C  
         __size_of_E_Teclado_Lcd 01A8                       _ACN_CO_Com 2C14  
                     _ACN_CR_Com 3464                         _Rfid_Lcd 0A4C  
               __size_of_M_Write 08F8                       _ACN_PA_Com 1A62  
               __size_of_i2c_ack 002E                 ?_MFRC522_Set_Bit 0020  
                       __Hrparam 0000            MFRC522_Clear_Bit@addr 0022  
                  UART_init@BAUD 0026                 ?_MFRC522_Request 002D  
                       _Num_User 3B5C            MFRC522_Clear_Bit@mask 0020  
                     vfprintf@ap 00B4                         __Lrparam 0000  
                     vfprintf@fp 00B1                         _Timer_RX 01D8  
                  i1_i2c_restart 5482                 __size_of___aldiv 00CC  
               __size_of___aodiv 014A                 __size_of___aomod 0124  
               __size_of___lbdiv 003A            i2___wmul@multiplicand 0003  
               __size_of___lodiv 00CE                 __size_of___lomod 00AE  
                     ?_vfpfcnvrt 008D                  ___aodiv@divisor 0020  
                ___aodiv@counter 0060                      ??_User_Scan 0084  
                    _TEC4x4_init 51E6                       sprintf@fmt 00B9  
               __size_of_escaneo 005A           __end_of_MFRC522_ToCard 2874  
                   i1i2c_write@i 000D           _MFRC522_ReadCardSerial 5190  
               __size_of_isdigit 0030                E_pant1_Lcd@buffer 00CE  
            __end_ofi1_i2c_start 53C2                 __size_of_isspace 003E  
            __end_ofi1_i2c_write 4A34                         __ptext10 4DC2  
                       __ptext11 3970                         __ptext20 520E  
                       __ptext12 21FE                         __ptext21 4A34  
                       __ptext13 3B5C                         __ptext30 4434  
                       __ptext22 4244                         __ptext14 17A4  
                       __ptext31 2672                         __ptext23 4EA8  
                       __ptext15 314C                         __ptext40 4F36  
                       __ptext32 53DE                         __ptext24 0154  
                       __ptext16 0A4C                         __ptext41 5234  
                       __ptext33 48D8                         __ptext25 5318  
                       __ptext17 3A72                         __ptext50 4196  
                       __ptext42 5162                         __ptext34 4C74  
                       __ptext26 4B64                         __ptext18 5448  
                       __ptext51 3D00                         __ptext43 45E4  
                       __ptext35 4BC0                         __ptext27 53C2  
                       __ptext19 4CCA                         __ptext60 384C  
                       __ptext52 42EE                         __ptext44 32F4  
                       __ptext36 1D0A                         __ptext28 4D1E  
                       __ptext61 35C2                         __ptext53 1FA6  
                       __ptext45 1452                         __ptext37 4A9C  
                       __ptext29 5190                         __ptext70 4670  
                       __ptext62 370C                         __ptext54 4556  
                       __ptext46 4EF0                         __ptext38 2A4C  
                       __ptext71 51E6                         __ptext63 4FBA  
                       __ptext55 51BC                         __ptext47 4D70  
                       __ptext39 5478                         __ptext80 50D0  
                       __ptext72 5436                         __ptext64 5102  
                       __ptext56 506A                         __ptext48 0FF4  
                       __ptext81 5132                         __ptext73 5360  
                       __ptext65 525A                         __ptext57 44C6  
                       __ptext49 2F94                         __ptext90 401E  
                       __ptext82 4398                         __ptext74 4E10  
                       __ptext66 4770                         __ptext58 5492  
                       __ptext91 40DA                         __ptext83 46F0  
                       __ptext75 5454                         __ptext67 47EA  
                       __ptext59 509E                         __ptext92 49C0  
                       __ptext84 494C                         __ptext76 5460  
                       __ptext68 4FF8                         __ptext93 5482  
                       __ptext85 5280                         __ptext77 5410  
                       __ptext69 3F62                         __ptext94 52A6  
                       __ptext86 5382                         __ptext78 53F8  
                       __ptext95 53A2                         __ptext79 533C  
                       __ptext96 4F78                         __ptext88 3E9A  
                       __ptext97 52CC                         __ptext89 4C1A  
                       __ptext99 52F2           __end_of_MFRC522_isCard 53DE  
    MFRC522_AntiColl@serNumCheck 0068                 __size_of_sprintf 0046  
               __size_of_strncmp 00AA              __end_of_E_Rfid_Proj 4BC0  
                  __size_of_atoi 0140                    __size_of_main 0224  
                  __size_of_dtoa 0258                    __size_of_utoa 01B8  
                       _long_cad 0189                       _MFRC522_Rd 533C  
                     M_Read@MD_1 0079                       M_Read@MD_2 007A  
                     _MFRC522_Wr 53F8                         _opc_rfid 018C  
      __size_of_MFRC522_AntiColl 0092                E_pant2_Lcd@buffer 00D7  
                    M_Write@MD_1 014B                      M_Write@MD_2 014C  
                 ?i1_i2c_restart 0001                         int$flags 0048  
                    M_Write@dec1 0165                      M_Write@dec2 015D  
                    M_Write@dec3 0155                      M_Write@dec4 014D  
                    M_Write@dec5 0143                         _vfprintf 4D70  
                 Read_Com@i_2100 001F                    ??_E_pant1_Lcd 00CC  
                  ??_E_pant2_Lcd 00CC                         escaneo@i 000D  
                       escaneo@j 000C                    _MFRC522_Reset 5454  
                  _E_Teclado_Lcd 314C                 ___aomod@dividend 0018  
                ??_Soft_SPI_Init 0018                  ??_Soft_SPI_Read 001A  
                 _vfpfcnvrt$2957 009F                       _INTCONbits 000FF2  
                ?_MFRC522_ToCard 0023                    M_Read@MR_Dato 007B  
                       isdigit@c 0018                      i1i2c_read@i 000D  
                ?_MFRC522_isCard 002F                   _Task_Com_USART 3C30  
                       intlevel1 0000                         intlevel2 0000  
                      sprintf@ap 00C5                         isspace@c 0018  
                    ?_ACN_CO_Com 0001                      ?_ACN_CR_Com 0001  
                   ?_EEPROM_init 0001                      ?_ACN_PA_Com 0001  
                      strncmp@_l 0018                        strncmp@_r 001A  
             Rfid_Lcd@Fin_Config 0228                       M_Write@dir 00CC  
                  ?_Erase_Eeprom 0001                  ___aomod@divisor 0020  
                    ??_vfpfcnvrt 0090                  ___aomod@counter 0028  
                 ?_MFRC522_Reset 0001                   ?_E_Teclado_Lcd 0001  
                    i1_i2c_start 53A2                Write_User@usuario 00CE  
                    i1_i2c_write 49C0                         sprintf@f 00C6  
                       sprintf@s 00B7                         strncmp@l 001F  
                       strncmp@n 001C                         strncmp@r 0021  
            __end_of_E_pant1_Lcd 1A62              __end_of_E_pant2_Lcd 244E  
                    _E_Rfid_Proj 4B64                     ___aldiv@sign 0021  
               ACN_CO_Com@buffer 00CE           __end_of_Task_Com_USART 3D00  
                     _UART_array 4CCA                    ?_MFRC522_Init 0001  
                     i1_i2c_nack 52CC                       i1_i2c_read 4F78  
                     _UART_write 5448                       i1_i2c_stop 52A6  
                     _E_Ingresos 4DC2                     ___aodiv@sign 0061  
                    ?_MFRC522_Rd 0001                      ?_MFRC522_Wr 001E  
                 LCD_command@cmd 001B                     ___aomod@sign 0029  
                     _I_Con_Rfid 018D                  ??i1_i2c_restart 000C  
